
F303RE_LEO_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001495c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  08014b00  08014b00  00024b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015718  08015718  000301ec  2**0
                  CONTENTS
  4 .ARM          00000000  08015718  08015718  000301ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015718  08015718  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015718  08015718  00025718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801571c  0801571c  0002571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08015720  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ee38  200001f0  0801590c  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000a00  2000f028  0801590c  0003f028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00055c73  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009031  00000000  00000000  00085e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001e14e  00000000  00000000  0008eec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d48  00000000  00000000  000ad010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00005188  00000000  00000000  000aed58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c23f  00000000  00000000  000b3ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a156  00000000  00000000  000d011f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf0  00000000  00000000  000da2f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014ae4 	.word	0x08014ae4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08014ae4 	.word	0x08014ae4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <parseCounterCmd>:
 * @param  None
 * @retval Command ACK or ERR
 */
#ifdef USE_COUNTER
command parseCounterCmd(void)
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	b082      	sub	sp, #8
 * @param  None
 * @retval Command
 */
command giveNextCmd(void){
	uint8_t cmdNext[5];
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000bfc:	4668      	mov	r0, sp
 8000bfe:	2105      	movs	r1, #5
 8000c00:	f001 fb6a 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c04:	2803      	cmp	r0, #3
 8000c06:	d802      	bhi.n	8000c0e <parseCounterCmd+0x16>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c08:	48b3      	ldr	r0, [pc, #716]	; (8000ed8 <parseCounterCmd+0x2e0>)
}
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	9b00      	ldr	r3, [sp, #0]
	switch(cmdIn){
 8000c10:	4ab2      	ldr	r2, [pc, #712]	; (8000edc <parseCounterCmd+0x2e4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	f000 8101 	beq.w	8000e1a <parseCounterCmd+0x222>
 8000c18:	d824      	bhi.n	8000c64 <parseCounterCmd+0x6c>
 8000c1a:	4ab1      	ldr	r2, [pc, #708]	; (8000ee0 <parseCounterCmd+0x2e8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d061      	beq.n	8000ce4 <parseCounterCmd+0xec>
 8000c20:	d872      	bhi.n	8000d08 <parseCounterCmd+0x110>
 8000c22:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f000 810b 	beq.w	8000e42 <parseCounterCmd+0x24a>
 8000c2c:	4aad      	ldr	r2, [pc, #692]	; (8000ee4 <parseCounterCmd+0x2ec>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d03a      	beq.n	8000ca8 <parseCounterCmd+0xb0>
 8000c32:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d1e6      	bne.n	8000c08 <parseCounterCmd+0x10>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	2105      	movs	r1, #5
 8000c3e:	f001 fb4b 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000c42:	2803      	cmp	r0, #3
 8000c44:	d937      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000c46:	9a00      	ldr	r2, [sp, #0]
		if(isCounterIcPresc1(cmdIn)){
 8000c48:	4ba7      	ldr	r3, [pc, #668]	; (8000ee8 <parseCounterCmd+0x2f0>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f240 811b 	bls.w	8000e88 <parseCounterCmd+0x290>
 8000c52:	4ba6      	ldr	r3, [pc, #664]	; (8000eec <parseCounterCmd+0x2f4>)
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f040 81ec 	bne.w	8001032 <parseCounterCmd+0x43a>
				counterSetIc1Prescaler(4);
 8000c5a:	2004      	movs	r0, #4
 8000c5c:	f002 fc54 	bl	8003508 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c60:	489d      	ldr	r0, [pc, #628]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000c62:	e7d2      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000c64:	4aa2      	ldr	r2, [pc, #648]	; (8000ef0 <parseCounterCmd+0x2f8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d028      	beq.n	8000cbc <parseCounterCmd+0xc4>
 8000c6a:	d87b      	bhi.n	8000d64 <parseCounterCmd+0x16c>
 8000c6c:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8000c70:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8000c74:	3af1      	subs	r2, #241	; 0xf1
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f000 80bb 	beq.w	8000df2 <parseCounterCmd+0x1fa>
 8000c7c:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
 8000c80:	f602 22ff 	addw	r2, r2, #2815	; 0xaff
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d00b      	beq.n	8000ca0 <parseCounterCmd+0xa8>
 8000c88:	f1a2 7201 	sub.w	r2, r2, #33816576	; 0x2040000
 8000c8c:	f5a2 3203 	sub.w	r2, r2, #134144	; 0x20c00
 8000c90:	f2a2 320f 	subw	r2, r2, #783	; 0x30f
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d1b7      	bne.n	8000c08 <parseCounterCmd+0x10>
		counterDeinit();
 8000c98:	f002 fbb8 	bl	800340c <counterDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000c9c:	488e      	ldr	r0, [pc, #568]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000c9e:	e7b4      	b.n	8000c0a <parseCounterCmd+0x12>
		counterSendStop();
 8000ca0:	f002 fba2 	bl	80033e8 <counterSendStop>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ca4:	488c      	ldr	r0, [pc, #560]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ca6:	e7b0      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000ca8:	4668      	mov	r0, sp
 8000caa:	2105      	movs	r1, #5
 8000cac:	f001 fb14 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cb0:	2803      	cmp	r0, #3
 8000cb2:	f200 80db 	bhi.w	8000e6c <parseCounterCmd+0x274>
	cmdIn = (error > 0) ? error : CMD_END;
 8000cb6:	2096      	movs	r0, #150	; 0x96
}
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000cbc:	4668      	mov	r0, sp
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	f001 fb0a 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cc4:	2803      	cmp	r0, #3
 8000cc6:	d9f6      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000cc8:	9b00      	ldr	r3, [sp, #0]
		if(isCounterIcTiEvent(cmdIn)){
 8000cca:	4a8a      	ldr	r2, [pc, #552]	; (8000ef4 <parseCounterCmd+0x2fc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	f000 80ff 	beq.w	8000ed0 <parseCounterCmd+0x2d8>
 8000cd2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 8151 	bne.w	8000f7e <parseCounterCmd+0x386>
				counterSetIcTi2_RisingFalling();
 8000cdc:	f002 fc7a 	bl	80035d4 <counterSetIcTi2_RisingFalling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ce0:	487d      	ldr	r0, [pc, #500]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ce2:	e792      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000ce4:	4668      	mov	r0, sp
 8000ce6:	2105      	movs	r1, #5
 8000ce8:	f001 faf6 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000cec:	2803      	cmp	r0, #3
 8000cee:	d9e2      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000cf0:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000cf2:	4c79      	ldr	r4, [pc, #484]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000cf4:	42a0      	cmp	r0, r4
 8000cf6:	d0de      	beq.n	8000cb6 <parseCounterCmd+0xbe>
 8000cf8:	4b7f      	ldr	r3, [pc, #508]	; (8000ef8 <parseCounterCmd+0x300>)
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d0db      	beq.n	8000cb6 <parseCounterCmd+0xbe>
			counterSetIc2SampleCount((uint16_t)cmdIn);
 8000cfe:	b280      	uxth	r0, r0
 8000d00:	f002 fbe4 	bl	80034cc <counterSetIc2SampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d04:	4620      	mov	r0, r4
 8000d06:	e780      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000d08:	4a7c      	ldr	r2, [pc, #496]	; (8000efc <parseCounterCmd+0x304>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d05e      	beq.n	8000dcc <parseCounterCmd+0x1d4>
 8000d0e:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
 8000d12:	f202 52f9 	addw	r2, r2, #1529	; 0x5f9
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d010      	beq.n	8000d3c <parseCounterCmd+0x144>
 8000d1a:	4a79      	ldr	r2, [pc, #484]	; (8000f00 <parseCounterCmd+0x308>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	f47f af73 	bne.w	8000c08 <parseCounterCmd+0x10>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d22:	4b78      	ldr	r3, [pc, #480]	; (8000f04 <parseCounterCmd+0x30c>)
 8000d24:	4669      	mov	r1, sp
 8000d26:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_CNT_CONFIG;
 8000d28:	2405      	movs	r4, #5
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_CNT_CONFIG;
 8000d30:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8000d34:	f00b faf6 	bl	800c324 <xQueueGenericSend>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d38:	4867      	ldr	r0, [pc, #412]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d3a:	e766      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d3c:	4668      	mov	r0, sp
 8000d3e:	2105      	movs	r1, #5
 8000d40:	f001 faca 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d44:	2803      	cmp	r0, #3
 8000d46:	d9b6      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000d48:	9b00      	ldr	r3, [sp, #0]
		if(isCounterMode(cmdIn)){
 8000d4a:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <parseCounterCmd+0x310>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	f000 80ad 	beq.w	8000eac <parseCounterCmd+0x2b4>
 8000d52:	4a6e      	ldr	r2, [pc, #440]	; (8000f0c <parseCounterCmd+0x314>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f040 817e 	bne.w	8001056 <parseCounterCmd+0x45e>
				counterSetMode(IC);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f002 fb0a 	bl	8003374 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d60:	485d      	ldr	r0, [pc, #372]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d62:	e752      	b.n	8000c0a <parseCounterCmd+0x12>
	switch(cmdIn){
 8000d64:	4a6a      	ldr	r2, [pc, #424]	; (8000f10 <parseCounterCmd+0x318>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01e      	beq.n	8000da8 <parseCounterCmd+0x1b0>
 8000d6a:	f102 62c0 	add.w	r2, r2, #100663296	; 0x6000000
 8000d6e:	f5a2 72f9 	sub.w	r2, r2, #498	; 0x1f2
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <parseCounterCmd+0x18e>
 8000d76:	4a67      	ldr	r2, [pc, #412]	; (8000f14 <parseCounterCmd+0x31c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	f47f af45 	bne.w	8000c08 <parseCounterCmd+0x10>
		counterSendStart();
 8000d7e:	f002 fb1b 	bl	80033b8 <counterSendStart>
	cmdIn = (error > 0) ? error : CMD_END;
 8000d82:	4855      	ldr	r0, [pc, #340]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d84:	e741      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000d86:	4668      	mov	r0, sp
 8000d88:	2105      	movs	r1, #5
 8000d8a:	f001 faa5 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000d8e:	2803      	cmp	r0, #3
 8000d90:	d991      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000d92:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000d94:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d08d      	beq.n	8000cb6 <parseCounterCmd+0xbe>
 8000d9a:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <parseCounterCmd+0x300>)
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	d08a      	beq.n	8000cb6 <parseCounterCmd+0xbe>
			counterSetRefSampleCount((uint32_t)cmdIn);
 8000da0:	f002 fb5e 	bl	8003460 <counterSetRefSampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000da4:	484c      	ldr	r0, [pc, #304]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000da6:	e730      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000da8:	4668      	mov	r0, sp
 8000daa:	2105      	movs	r1, #5
 8000dac:	f001 fa94 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000db0:	2803      	cmp	r0, #3
 8000db2:	d980      	bls.n	8000cb6 <parseCounterCmd+0xbe>
 8000db4:	9b00      	ldr	r3, [sp, #0]
		if(isCounterIcDutyCycle(cmdIn)){
 8000db6:	4a58      	ldr	r2, [pc, #352]	; (8000f18 <parseCounterCmd+0x320>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d07c      	beq.n	8000eb6 <parseCounterCmd+0x2be>
 8000dbc:	4a57      	ldr	r2, [pc, #348]	; (8000f1c <parseCounterCmd+0x324>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	f040 8113 	bne.w	8000fea <parseCounterCmd+0x3f2>
				counterIc2DutyCycleInit();
 8000dc4:	f002 fbd6 	bl	8003574 <counterIc2DutyCycleInit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000dc8:	4843      	ldr	r0, [pc, #268]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000dca:	e71e      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000dcc:	4668      	mov	r0, sp
 8000dce:	2105      	movs	r1, #5
 8000dd0:	f001 fa82 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000dd4:	2803      	cmp	r0, #3
 8000dd6:	f67f af6e 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000dda:	9b00      	ldr	r3, [sp, #0]
		if(isCounterTiMode(cmdIn)){
 8000ddc:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <parseCounterCmd+0x328>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d06d      	beq.n	8000ebe <parseCounterCmd+0x2c6>
 8000de2:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <parseCounterCmd+0x32c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	f47f af66 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetTiMode_Independent();
 8000dea:	f002 fc11 	bl	8003610 <counterSetTiMode_Independent>
	cmdIn = (error > 0) ? error : CMD_END;
 8000dee:	483a      	ldr	r0, [pc, #232]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000df0:	e70b      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000df2:	4668      	mov	r0, sp
 8000df4:	2105      	movs	r1, #5
 8000df6:	f001 fa6f 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000dfa:	2803      	cmp	r0, #3
 8000dfc:	f67f af5b 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e00:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000e02:	4c35      	ldr	r4, [pc, #212]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e04:	42a0      	cmp	r0, r4
 8000e06:	f43f af56 	beq.w	8000cb6 <parseCounterCmd+0xbe>
 8000e0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <parseCounterCmd+0x300>)
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f43f af52 	beq.w	8000cb6 <parseCounterCmd+0xbe>
			counterSetTiTimeout((uint32_t)cmdIn);
 8000e12:	f002 fc0d 	bl	8003630 <counterSetTiTimeout>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e16:	4620      	mov	r0, r4
 8000e18:	e6f7      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e1a:	4668      	mov	r0, sp
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	f001 fa5b 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e22:	2803      	cmp	r0, #3
 8000e24:	f67f af47 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e28:	9b00      	ldr	r3, [sp, #0]
		if(isCounterEtrGate(cmdIn)){
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <parseCounterCmd+0x330>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d04a      	beq.n	8000ec6 <parseCounterCmd+0x2ce>
 8000e30:	4a3e      	ldr	r2, [pc, #248]	; (8000f2c <parseCounterCmd+0x334>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d17e      	bne.n	8000f34 <parseCounterCmd+0x33c>
				counterSetEtrGate(500);
 8000e36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3a:	f002 faf9 	bl	8003430 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e3e:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e40:	e6e3      	b.n	8000c0a <parseCounterCmd+0x12>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8000e42:	4668      	mov	r0, sp
 8000e44:	2105      	movs	r1, #5
 8000e46:	f001 fa47 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8000e4a:	2803      	cmp	r0, #3
 8000e4c:	f67f af33 	bls.w	8000cb6 <parseCounterCmd+0xbe>
 8000e50:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8000e52:	4c21      	ldr	r4, [pc, #132]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e54:	42a0      	cmp	r0, r4
 8000e56:	f43f af2e 	beq.w	8000cb6 <parseCounterCmd+0xbe>
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <parseCounterCmd+0x300>)
 8000e5c:	4298      	cmp	r0, r3
 8000e5e:	f43f af2a 	beq.w	8000cb6 <parseCounterCmd+0xbe>
			counterSetIc1SampleCount((uint16_t)cmdIn);
 8000e62:	b280      	uxth	r0, r0
 8000e64:	f002 fb14 	bl	8003490 <counterSetIc1SampleCount>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e68:	4620      	mov	r0, r4
 8000e6a:	e6ce      	b.n	8000c0a <parseCounterCmd+0x12>
 8000e6c:	9a00      	ldr	r2, [sp, #0]
		if(isCounterIcPresc2(cmdIn)){
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <parseCounterCmd+0x2f0>)
 8000e70:	4413      	add	r3, r2
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d911      	bls.n	8000e9a <parseCounterCmd+0x2a2>
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <parseCounterCmd+0x2f4>)
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 80e3 	bne.w	8001044 <parseCounterCmd+0x44c>
				counterSetIc2Prescaler(4);
 8000e7e:	2004      	movs	r0, #4
 8000e80:	f002 fb54 	bl	800352c <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e86:	e6c0      	b.n	8000c0a <parseCounterCmd+0x12>
			if(cmdIn == CMD_PRESC1_1x){
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <parseCounterCmd+0x338>)
 8000e8a:	429a      	cmp	r2, r3
				counterSetIc1Prescaler(1);
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2001      	moveq	r0, #1
				counterSetIc1Prescaler(2);
 8000e90:	2002      	movne	r0, #2
 8000e92:	f002 fb39 	bl	8003508 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000e96:	4810      	ldr	r0, [pc, #64]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000e98:	e6b7      	b.n	8000c0a <parseCounterCmd+0x12>
			if(cmdIn == CMD_PRESC2_1x){
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <parseCounterCmd+0x338>)
 8000e9c:	429a      	cmp	r2, r3
				counterSetIc2Prescaler(1);
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2001      	moveq	r0, #1
				counterSetIc2Prescaler(2);
 8000ea2:	2002      	movne	r0, #2
 8000ea4:	f002 fb42 	bl	800352c <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000eaa:	e6ae      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetMode(ETR);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f002 fa61 	bl	8003374 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000eb4:	e6a9      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIc1DutyCycleInit();
 8000eb6:	f002 fb4b 	bl	8003550 <counterIc1DutyCycleInit>
	cmdIn = (error > 0) ? error : CMD_END;
 8000eba:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ebc:	e6a5      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetTiMode_Dependent();
 8000ebe:	f002 fbaf 	bl	8003620 <counterSetTiMode_Dependent>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ec4:	e6a1      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(100);
 8000ec6:	2064      	movs	r0, #100	; 0x64
 8000ec8:	f002 fab2 	bl	8003430 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ece:	e69c      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_RisingFalling();
 8000ed0:	f002 fb66 	bl	80035a0 <counterSetIcTi1_RisingFalling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000ed4:	4800      	ldr	r0, [pc, #0]	; (8000ed8 <parseCounterCmd+0x2e0>)
 8000ed6:	e698      	b.n	8000c0a <parseCounterCmd+0x12>
 8000ed8:	5f444e45 	.word	0x5f444e45
 8000edc:	45544147 	.word	0x45544147
 8000ee0:	32465542 	.word	0x32465542
 8000ee4:	32455250 	.word	0x32455250
 8000ee8:	a0a087cf 	.word	0xa0a087cf
 8000eec:	5f5f7834 	.word	0x5f5f7834
 8000ef0:	544e5645 	.word	0x544e5645
 8000ef4:	5f314652 	.word	0x5f314652
 8000ef8:	5f525245 	.word	0x5f525245
 8000efc:	444d4954 	.word	0x444d4954
 8000f00:	3f474643 	.word	0x3f474643
 8000f04:	20004cb4 	.word	0x20004cb4
 8000f08:	5f525445 	.word	0x5f525445
 8000f0c:	5f5f4349 	.word	0x5f5f4349
 8000f10:	59435544 	.word	0x59435544
 8000f14:	54525453 	.word	0x54525453
 8000f18:	31494344 	.word	0x31494344
 8000f1c:	32494344 	.word	0x32494344
 8000f20:	44514553 	.word	0x44514553
 8000f24:	49514553 	.word	0x49514553
 8000f28:	6d303031 	.word	0x6d303031
 8000f2c:	6d303035 	.word	0x6d303035
 8000f30:	5f5f7831 	.word	0x5f5f7831
		if(isCounterEtrGate(cmdIn)){
 8000f34:	f102 4272 	add.w	r2, r2, #4060086272	; 0xf2000000
 8000f38:	f502 123d 	add.w	r2, r2, #3096576	; 0x2f4000
 8000f3c:	f502 723f 	add.w	r2, r2, #764	; 0x2fc
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d010      	beq.n	8000f66 <parseCounterCmd+0x36e>
 8000f44:	3204      	adds	r2, #4
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <parseCounterCmd+0x37a>
 8000f4a:	f502 129d 	add.w	r2, r2, #1286144	; 0x13a000
 8000f4e:	f502 52e7 	add.w	r2, r2, #7392	; 0x1ce0
 8000f52:	321c      	adds	r2, #28
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f47f aeae 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetEtrGate(10000);
 8000f5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f5e:	f002 fa67 	bl	8003430 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f62:	4849      	ldr	r0, [pc, #292]	; (8001088 <parseCounterCmd+0x490>)
 8000f64:	e651      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(1000);
 8000f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6a:	f002 fa61 	bl	8003430 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f6e:	4846      	ldr	r0, [pc, #280]	; (8001088 <parseCounterCmd+0x490>)
 8000f70:	e64b      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetEtrGate(5000);
 8000f72:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f76:	f002 fa5b 	bl	8003430 <counterSetEtrGate>
	cmdIn = (error > 0) ? error : CMD_END;
 8000f7a:	4843      	ldr	r0, [pc, #268]	; (8001088 <parseCounterCmd+0x490>)
 8000f7c:	e645      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcTiEvent(cmdIn)){
 8000f7e:	f5a2 4277 	sub.w	r2, r2, #63232	; 0xf700
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d010      	beq.n	8000fa8 <parseCounterCmd+0x3b0>
 8000f86:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d010      	beq.n	8000fb0 <parseCounterCmd+0x3b8>
 8000f8e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8000f92:	3a0c      	subs	r2, #12
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00f      	beq.n	8000fb8 <parseCounterCmd+0x3c0>
 8000f98:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d10f      	bne.n	8000fc0 <parseCounterCmd+0x3c8>
				counterSetIcTi2_Falling();
 8000fa0:	f002 fb2a 	bl	80035f8 <counterSetIcTi2_Falling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fa4:	4838      	ldr	r0, [pc, #224]	; (8001088 <parseCounterCmd+0x490>)
 8000fa6:	e630      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_Rising();
 8000fa8:	f002 fb04 	bl	80035b4 <counterSetIcTi1_Rising>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fac:	4836      	ldr	r0, [pc, #216]	; (8001088 <parseCounterCmd+0x490>)
 8000fae:	e62c      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi2_Rising();
 8000fb0:	f002 fb1a 	bl	80035e8 <counterSetIcTi2_Rising>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fb4:	4834      	ldr	r0, [pc, #208]	; (8001088 <parseCounterCmd+0x490>)
 8000fb6:	e628      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetIcTi1_Falling();
 8000fb8:	f002 fb04 	bl	80035c4 <counterSetIcTi1_Falling>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fbc:	4832      	ldr	r0, [pc, #200]	; (8001088 <parseCounterCmd+0x490>)
 8000fbe:	e624      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcTiEvent(cmdIn)){
 8000fc0:	f102 4263 	add.w	r2, r2, #3808428032	; 0xe3000000
 8000fc4:	f502 2270 	add.w	r2, r2, #983040	; 0xf0000
 8000fc8:	f202 220d 	addw	r2, r2, #525	; 0x20d
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d008      	beq.n	8000fe2 <parseCounterCmd+0x3ea>
 8000fd0:	f5a2 027f 	sub.w	r2, r2, #16711680	; 0xff0000
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	f47f ae6e 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetTiSequence_BA();
 8000fda:	f002 fb17 	bl	800360c <counterSetTiSequence_BA>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fde:	482a      	ldr	r0, [pc, #168]	; (8001088 <parseCounterCmd+0x490>)
 8000fe0:	e613      	b.n	8000c0a <parseCounterCmd+0x12>
				counterSetTiSequence_AB();
 8000fe2:	f002 fb11 	bl	8003608 <counterSetTiSequence_AB>
	cmdIn = (error > 0) ? error : CMD_END;
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <parseCounterCmd+0x490>)
 8000fe8:	e60f      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcDutyCycle(cmdIn)){
 8000fea:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 8000fee:	f502 027b 	add.w	r2, r2, #16449536	; 0xfb0000
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d011      	beq.n	800101a <parseCounterCmd+0x422>
 8000ff6:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d011      	beq.n	8001022 <parseCounterCmd+0x42a>
 8000ffe:	f102 5234 	add.w	r2, r2, #754974720	; 0x2d000000
 8001002:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001006:	4293      	cmp	r3, r2
 8001008:	d00f      	beq.n	800102a <parseCounterCmd+0x432>
 800100a:	f502 1298 	add.w	r2, r2, #1245184	; 0x130000
 800100e:	4293      	cmp	r3, r2
 8001010:	f47f ae51 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterIcDutyCycleDisable();
 8001014:	f002 fac2 	bl	800359c <counterIcDutyCycleDisable>
 8001018:	e5f6      	b.n	8000c08 <parseCounterCmd+0x10>
				counterIc1DutyCycleDeinit();
 800101a:	f002 faa1 	bl	8003560 <counterIc1DutyCycleDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <parseCounterCmd+0x490>)
 8001020:	e5f3      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIc2DutyCycleDeinit();
 8001022:	f002 faaf 	bl	8003584 <counterIc2DutyCycleDeinit>
	cmdIn = (error > 0) ? error : CMD_END;
 8001026:	4818      	ldr	r0, [pc, #96]	; (8001088 <parseCounterCmd+0x490>)
 8001028:	e5ef      	b.n	8000c0a <parseCounterCmd+0x12>
				counterIcDutyCycleEnable();
 800102a:	f002 fab5 	bl	8003598 <counterIcDutyCycleEnable>
	cmdIn = (error > 0) ? error : CMD_END;
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <parseCounterCmd+0x490>)
 8001030:	e5eb      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcPresc1(cmdIn)){
 8001032:	3304      	adds	r3, #4
 8001034:	429a      	cmp	r2, r3
 8001036:	f47f ae3e 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetIc1Prescaler(8);
 800103a:	2008      	movs	r0, #8
 800103c:	f002 fa64 	bl	8003508 <counterSetIc1Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8001040:	4811      	ldr	r0, [pc, #68]	; (8001088 <parseCounterCmd+0x490>)
 8001042:	e5e2      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterIcPresc2(cmdIn)){
 8001044:	3304      	adds	r3, #4
 8001046:	429a      	cmp	r2, r3
 8001048:	f47f ae35 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetIc2Prescaler(8);
 800104c:	2008      	movs	r0, #8
 800104e:	f002 fa6d 	bl	800352c <counterSetIc2Prescaler>
	cmdIn = (error > 0) ? error : CMD_END;
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <parseCounterCmd+0x490>)
 8001054:	e5d9      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterMode(cmdIn)){
 8001056:	f102 427f 	add.w	r2, r2, #4278190080	; 0xff000000
 800105a:	f502 0267 	add.w	r2, r2, #15138816	; 0xe70000
 800105e:	f202 2209 	addw	r2, r2, #521	; 0x209
 8001062:	4293      	cmp	r3, r2
 8001064:	d104      	bne.n	8001070 <parseCounterCmd+0x478>
				counterSetMode(REF);
 8001066:	2003      	movs	r0, #3
 8001068:	f002 f984 	bl	8003374 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <parseCounterCmd+0x490>)
 800106e:	e5cc      	b.n	8000c0a <parseCounterCmd+0x12>
		if(isCounterMode(cmdIn)){
 8001070:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8001074:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8001078:	4293      	cmp	r3, r2
 800107a:	f47f ae1c 	bne.w	8000cb6 <parseCounterCmd+0xbe>
				counterSetMode(TI);
 800107e:	2002      	movs	r0, #2
 8001080:	f002 f978 	bl	8003374 <counterSetMode>
	cmdIn = (error > 0) ? error : CMD_END;
 8001084:	4800      	ldr	r0, [pc, #0]	; (8001088 <parseCounterCmd+0x490>)
 8001086:	e5c0      	b.n	8000c0a <parseCounterCmd+0x12>
 8001088:	5f444e45 	.word	0x5f444e45

0800108c <parseScopeCmd>:
command parseScopeCmd(void){
 800108c:	b510      	push	{r4, lr}
 800108e:	b082      	sub	sp, #8
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001090:	4668      	mov	r0, sp
 8001092:	2105      	movs	r1, #5
 8001094:	f001 f920 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001098:	2803      	cmp	r0, #3
 800109a:	d806      	bhi.n	80010aa <parseScopeCmd+0x1e>
		cmdIn=CMD_END;
 800109c:	4bc4      	ldr	r3, [pc, #784]	; (80013b0 <parseScopeCmd+0x324>)
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf14      	ite	ne
 80010a2:	2032      	movne	r0, #50	; 0x32
 80010a4:	4618      	moveq	r0, r3
}
 80010a6:	b002      	add	sp, #8
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	9800      	ldr	r0, [sp, #0]
	switch(cmdIn){
 80010ac:	4bc1      	ldr	r3, [pc, #772]	; (80013b4 <parseScopeCmd+0x328>)
 80010ae:	4298      	cmp	r0, r3
 80010b0:	f000 80d9 	beq.w	8001266 <parseScopeCmd+0x1da>
 80010b4:	d830      	bhi.n	8001118 <parseScopeCmd+0x8c>
 80010b6:	f1a3 733f 	sub.w	r3, r3, #50069504	; 0x2fc0000
 80010ba:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80010be:	4298      	cmp	r0, r3
 80010c0:	d051      	beq.n	8001166 <parseScopeCmd+0xda>
 80010c2:	f240 80a3 	bls.w	800120c <parseScopeCmd+0x180>
 80010c6:	4bbc      	ldr	r3, [pc, #752]	; (80013b8 <parseScopeCmd+0x32c>)
 80010c8:	4298      	cmp	r0, r3
 80010ca:	f000 80fe 	beq.w	80012ca <parseScopeCmd+0x23e>
 80010ce:	f240 8140 	bls.w	8001352 <parseScopeCmd+0x2c6>
 80010d2:	4bba      	ldr	r3, [pc, #744]	; (80013bc <parseScopeCmd+0x330>)
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d03c      	beq.n	8001152 <parseScopeCmd+0xc6>
 80010d8:	f503 239e 	add.w	r3, r3, #323584	; 0x4f000
 80010dc:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80010e0:	4298      	cmp	r0, r3
 80010e2:	f040 809d 	bne.w	8001220 <parseScopeCmd+0x194>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80010e6:	4668      	mov	r0, sp
 80010e8:	2105      	movs	r1, #5
 80010ea:	f001 f8f5 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80010ee:	2803      	cmp	r0, #3
 80010f0:	d936      	bls.n	8001160 <parseScopeCmd+0xd4>
 80010f2:	9a00      	ldr	r2, [sp, #0]
		if(isScopeNumOfSamples(cmdIn)){
 80010f4:	4bb2      	ldr	r3, [pc, #712]	; (80013c0 <parseScopeCmd+0x334>)
 80010f6:	4413      	add	r3, r2
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	f240 8193 	bls.w	8001424 <parseScopeCmd+0x398>
 80010fe:	4bb1      	ldr	r3, [pc, #708]	; (80013c4 <parseScopeCmd+0x338>)
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 8215 	bne.w	8001530 <parseScopeCmd+0x4a4>
				error=scopeSetNumOfSamples(500);
 8001106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800110a:	f003 ff15 	bl	8004f38 <scopeSetNumOfSamples>
	if(error>0){
 800110e:	2800      	cmp	r0, #0
 8001110:	d1c9      	bne.n	80010a6 <parseScopeCmd+0x1a>
		cmdIn=CMD_END;
 8001112:	48a7      	ldr	r0, [pc, #668]	; (80013b0 <parseScopeCmd+0x324>)
}
 8001114:	b002      	add	sp, #8
 8001116:	bd10      	pop	{r4, pc}
	switch(cmdIn){
 8001118:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <parseScopeCmd+0x33c>)
 800111a:	4298      	cmp	r0, r3
 800111c:	d036      	beq.n	800118c <parseScopeCmd+0x100>
 800111e:	d869      	bhi.n	80011f4 <parseScopeCmd+0x168>
 8001120:	f1a3 639d 	sub.w	r3, r3, #82313216	; 0x4e80000
 8001124:	f5a3 23e1 	sub.w	r3, r3, #460800	; 0x70800
 8001128:	f2a3 43fa 	subw	r3, r3, #1274	; 0x4fa
 800112c:	4298      	cmp	r0, r3
 800112e:	f000 80b7 	beq.w	80012a0 <parseScopeCmd+0x214>
 8001132:	f240 8116 	bls.w	8001362 <parseScopeCmd+0x2d6>
 8001136:	4ba5      	ldr	r3, [pc, #660]	; (80013cc <parseScopeCmd+0x340>)
 8001138:	4298      	cmp	r0, r3
 800113a:	d040      	beq.n	80011be <parseScopeCmd+0x132>
 800113c:	f103 7303 	add.w	r3, r3, #34340864	; 0x20c0000
 8001140:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001144:	3310      	adds	r3, #16
 8001146:	4298      	cmp	r0, r3
 8001148:	d16a      	bne.n	8001220 <parseScopeCmd+0x194>
		scopeStop();
 800114a:	f004 f8d7 	bl	80052fc <scopeStop>
		cmdIn=CMD_END;
 800114e:	4898      	ldr	r0, [pc, #608]	; (80013b0 <parseScopeCmd+0x324>)
 8001150:	e7a9      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001152:	4668      	mov	r0, sp
 8001154:	2105      	movs	r1, #5
 8001156:	f001 f8bf 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800115a:	2803      	cmp	r0, #3
 800115c:	f200 80e6 	bhi.w	800132c <parseScopeCmd+0x2a0>
 8001160:	2036      	movs	r0, #54	; 0x36
}
 8001162:	b002      	add	sp, #8
 8001164:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001166:	4668      	mov	r0, sp
 8001168:	2105      	movs	r1, #5
 800116a:	f001 f8b5 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800116e:	2803      	cmp	r0, #3
 8001170:	d9f6      	bls.n	8001160 <parseScopeCmd+0xd4>
 8001172:	9b00      	ldr	r3, [sp, #0]
		if(isScopeTrigEdge(cmdIn)){
 8001174:	4a96      	ldr	r2, [pc, #600]	; (80013d0 <parseScopeCmd+0x344>)
 8001176:	4293      	cmp	r3, r2
 8001178:	f000 816d 	beq.w	8001456 <parseScopeCmd+0x3ca>
 800117c:	4a95      	ldr	r2, [pc, #596]	; (80013d4 <parseScopeCmd+0x348>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d1ee      	bne.n	8001160 <parseScopeCmd+0xd4>
				scopeSetTriggerEdge(EDGE_FALLING);
 8001182:	2001      	movs	r0, #1
 8001184:	f003 fde6 	bl	8004d54 <scopeSetTriggerEdge>
		cmdIn=CMD_END;
 8001188:	4889      	ldr	r0, [pc, #548]	; (80013b0 <parseScopeCmd+0x324>)
 800118a:	e78c      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800118c:	4668      	mov	r0, sp
 800118e:	2105      	movs	r1, #5
 8001190:	f001 f8a2 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001194:	2803      	cmp	r0, #3
 8001196:	f200 80ba 	bhi.w	800130e <parseScopeCmd+0x282>
 800119a:	4a85      	ldr	r2, [pc, #532]	; (80013b0 <parseScopeCmd+0x324>)
 800119c:	4b8e      	ldr	r3, [pc, #568]	; (80013d8 <parseScopeCmd+0x34c>)
 800119e:	2800      	cmp	r0, #0
 80011a0:	bf0c      	ite	eq
 80011a2:	4610      	moveq	r0, r2
 80011a4:	4618      	movne	r0, r3
		if(isScopeFreq(cmdIn)){
 80011a6:	4a8d      	ldr	r2, [pc, #564]	; (80013dc <parseScopeCmd+0x350>)
 80011a8:	4290      	cmp	r0, r2
 80011aa:	f240 8177 	bls.w	800149c <parseScopeCmd+0x410>
 80011ae:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <parseScopeCmd+0x354>)
 80011b0:	4298      	cmp	r0, r3
 80011b2:	d1d5      	bne.n	8001160 <parseScopeCmd+0xd4>
				error=scopeSetSamplingFreq(UINT32_MAX);
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f003 fe54 	bl	8004e64 <scopeSetSamplingFreq>
 80011bc:	e7a7      	b.n	800110e <parseScopeCmd+0x82>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80011be:	4668      	mov	r0, sp
 80011c0:	2105      	movs	r1, #5
 80011c2:	f001 f889 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80011c6:	2803      	cmp	r0, #3
 80011c8:	d9ca      	bls.n	8001160 <parseScopeCmd+0xd4>
 80011ca:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 80011cc:	4b85      	ldr	r3, [pc, #532]	; (80013e4 <parseScopeCmd+0x358>)
 80011ce:	4413      	add	r3, r2
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d8c5      	bhi.n	8001160 <parseScopeCmd+0xd4>
			if(cmdIn == CMD_CHANNELS_1){
 80011d4:	4b84      	ldr	r3, [pc, #528]	; (80013e8 <parseScopeCmd+0x35c>)
 80011d6:	429a      	cmp	r2, r3
 80011d8:	f000 8154 	beq.w	8001484 <parseScopeCmd+0x3f8>
			}else if(cmdIn == CMD_CHANNELS_2){
 80011dc:	4b83      	ldr	r3, [pc, #524]	; (80013ec <parseScopeCmd+0x360>)
 80011de:	429a      	cmp	r2, r3
 80011e0:	f000 8154 	beq.w	800148c <parseScopeCmd+0x400>
			}else if(cmdIn == CMD_CHANNELS_3){
 80011e4:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <parseScopeCmd+0x364>)
 80011e6:	429a      	cmp	r2, r3
 80011e8:	f040 80de 	bne.w	80013a8 <parseScopeCmd+0x31c>
				error=scopeSetNumOfChannels(3);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f003 fecb 	bl	8004f88 <scopeSetNumOfChannels>
 80011f2:	e78c      	b.n	800110e <parseScopeCmd+0x82>
	switch(cmdIn){
 80011f4:	4b7f      	ldr	r3, [pc, #508]	; (80013f4 <parseScopeCmd+0x368>)
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d06a      	beq.n	80012d0 <parseScopeCmd+0x244>
 80011fa:	d96d      	bls.n	80012d8 <parseScopeCmd+0x24c>
 80011fc:	4b7e      	ldr	r3, [pc, #504]	; (80013f8 <parseScopeCmd+0x36c>)
 80011fe:	4298      	cmp	r0, r3
 8001200:	f040 8132 	bne.w	8001468 <parseScopeCmd+0x3dc>
		scopeRestart();
 8001204:	f004 f856 	bl	80052b4 <scopeRestart>
		cmdIn=CMD_END;
 8001208:	4869      	ldr	r0, [pc, #420]	; (80013b0 <parseScopeCmd+0x324>)
 800120a:	e74c      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 800120c:	4b7b      	ldr	r3, [pc, #492]	; (80013fc <parseScopeCmd+0x370>)
 800120e:	4298      	cmp	r0, r3
 8001210:	d01b      	beq.n	800124a <parseScopeCmd+0x1be>
 8001212:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <parseScopeCmd+0x374>)
 8001214:	4298      	cmp	r0, r3
 8001216:	d005      	beq.n	8001224 <parseScopeCmd+0x198>
 8001218:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <parseScopeCmd+0x378>)
 800121a:	4298      	cmp	r0, r3
 800121c:	f000 8094 	beq.w	8001348 <parseScopeCmd+0x2bc>
 8001220:	2032      	movs	r0, #50	; 0x32
 8001222:	e740      	b.n	80010a6 <parseScopeCmd+0x1a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001224:	4668      	mov	r0, sp
 8001226:	2105      	movs	r1, #5
 8001228:	f001 f856 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800122c:	2803      	cmp	r0, #3
 800122e:	d997      	bls.n	8001160 <parseScopeCmd+0xd4>
 8001230:	9b00      	ldr	r3, [sp, #0]
		if(isScopeDataDepth(cmdIn)){
 8001232:	4a75      	ldr	r2, [pc, #468]	; (8001408 <parseScopeCmd+0x37c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	f000 8105 	beq.w	8001444 <parseScopeCmd+0x3b8>
 800123a:	4a74      	ldr	r2, [pc, #464]	; (800140c <parseScopeCmd+0x380>)
 800123c:	4293      	cmp	r3, r2
 800123e:	f040 81c1 	bne.w	80015c4 <parseScopeCmd+0x538>
				error=scopeSetDataDepth(10);
 8001242:	200a      	movs	r0, #10
 8001244:	f003 fda8 	bl	8004d98 <scopeSetDataDepth>
 8001248:	e761      	b.n	800110e <parseScopeCmd+0x82>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800124a:	4b71      	ldr	r3, [pc, #452]	; (8001410 <parseScopeCmd+0x384>)
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	4669      	mov	r1, sp
		passMsg = MSG_SCOPE_INPUTS;
 8001250:	2410      	movs	r4, #16
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001252:	2300      	movs	r3, #0
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_SCOPE_INPUTS;
 8001258:	f8ad 4000 	strh.w	r4, [sp]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800125c:	f00b f862 	bl	800c324 <xQueueGenericSend>
		cmdIn=CMD_END;
 8001260:	4853      	ldr	r0, [pc, #332]	; (80013b0 <parseScopeCmd+0x324>)
}
 8001262:	b002      	add	sp, #8
 8001264:	bd10      	pop	{r4, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001266:	4668      	mov	r0, sp
 8001268:	2105      	movs	r1, #5
 800126a:	f001 f835 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800126e:	2803      	cmp	r0, #3
 8001270:	f67f af76 	bls.w	8001160 <parseScopeCmd+0xd4>
 8001274:	9a00      	ldr	r2, [sp, #0]
		if(isChannel(cmdIn)){
 8001276:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <parseScopeCmd+0x358>)
 8001278:	4413      	add	r3, r2
 800127a:	2b03      	cmp	r3, #3
 800127c:	f63f af70 	bhi.w	8001160 <parseScopeCmd+0xd4>
			if(cmdIn == CMD_CHANNELS_1){
 8001280:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <parseScopeCmd+0x35c>)
 8001282:	429a      	cmp	r2, r3
 8001284:	f000 80fa 	beq.w	800147c <parseScopeCmd+0x3f0>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001288:	4b58      	ldr	r3, [pc, #352]	; (80013ec <parseScopeCmd+0x360>)
 800128a:	429a      	cmp	r2, r3
 800128c:	f000 8102 	beq.w	8001494 <parseScopeCmd+0x408>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001290:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <parseScopeCmd+0x364>)
 8001292:	429a      	cmp	r2, r3
 8001294:	f040 8084 	bne.w	80013a0 <parseScopeCmd+0x314>
				error=scopeSetTrigChannel(3);
 8001298:	2003      	movs	r0, #3
 800129a:	f003 ff13 	bl	80050c4 <scopeSetTrigChannel>
 800129e:	e736      	b.n	800110e <parseScopeCmd+0x82>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80012a0:	4668      	mov	r0, sp
 80012a2:	2105      	movs	r1, #5
 80012a4:	f001 f818 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80012a8:	2803      	cmp	r0, #3
 80012aa:	f67f af59 	bls.w	8001160 <parseScopeCmd+0xd4>
 80012ae:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80012b0:	4c3f      	ldr	r4, [pc, #252]	; (80013b0 <parseScopeCmd+0x324>)
 80012b2:	42a0      	cmp	r0, r4
 80012b4:	f43f af54 	beq.w	8001160 <parseScopeCmd+0xd4>
 80012b8:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <parseScopeCmd+0x34c>)
 80012ba:	4298      	cmp	r0, r3
 80012bc:	f43f af50 	beq.w	8001160 <parseScopeCmd+0xd4>
			scopeSetTrigLevel((uint16_t)cmdIn);
 80012c0:	b280      	uxth	r0, r0
 80012c2:	f003 fe11 	bl	8004ee8 <scopeSetTrigLevel>
		cmdIn=CMD_END;
 80012c6:	4620      	mov	r0, r4
 80012c8:	e6ed      	b.n	80010a6 <parseScopeCmd+0x1a>
		error=scopeSetADCInputChannelVref();
 80012ca:	f003 ffad 	bl	8005228 <scopeSetADCInputChannelVref>
 80012ce:	e71e      	b.n	800110e <parseScopeCmd+0x82>
		scopeStart();
 80012d0:	f004 f802 	bl	80052d8 <scopeStart>
		cmdIn=CMD_END;
 80012d4:	4836      	ldr	r0, [pc, #216]	; (80013b0 <parseScopeCmd+0x324>)
 80012d6:	e6e6      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 80012d8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80012dc:	f2a3 2303 	subw	r3, r3, #515	; 0x203
 80012e0:	4298      	cmp	r0, r3
 80012e2:	d19d      	bne.n	8001220 <parseScopeCmd+0x194>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80012e4:	4668      	mov	r0, sp
 80012e6:	2105      	movs	r1, #5
 80012e8:	f000 fff6 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80012ec:	2803      	cmp	r0, #3
 80012ee:	f67f af37 	bls.w	8001160 <parseScopeCmd+0xd4>
 80012f2:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80012f4:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <parseScopeCmd+0x324>)
 80012f6:	4298      	cmp	r0, r3
 80012f8:	f43f af32 	beq.w	8001160 <parseScopeCmd+0xd4>
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <parseScopeCmd+0x34c>)
 80012fe:	4298      	cmp	r0, r3
 8001300:	f43f af2e 	beq.w	8001160 <parseScopeCmd+0xd4>
			scopeSetPretrigger((uint16_t)cmdIn);
 8001304:	b280      	uxth	r0, r0
 8001306:	f003 fe03 	bl	8004f10 <scopeSetPretrigger>
		cmdIn=CMD_END;
 800130a:	4829      	ldr	r0, [pc, #164]	; (80013b0 <parseScopeCmd+0x324>)
 800130c:	e6cb      	b.n	80010a6 <parseScopeCmd+0x1a>
 800130e:	9800      	ldr	r0, [sp, #0]
		if(isScopeFreq(cmdIn)){
 8001310:	4b40      	ldr	r3, [pc, #256]	; (8001414 <parseScopeCmd+0x388>)
 8001312:	4403      	add	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	f240 808d 	bls.w	8001434 <parseScopeCmd+0x3a8>
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <parseScopeCmd+0x38c>)
 800131c:	4298      	cmp	r0, r3
 800131e:	f040 812f 	bne.w	8001580 <parseScopeCmd+0x4f4>
				error=scopeSetSamplingFreq(5000);
 8001322:	f241 3088 	movw	r0, #5000	; 0x1388
 8001326:	f003 fd9d 	bl	8004e64 <scopeSetSamplingFreq>
 800132a:	e6f0      	b.n	800110e <parseScopeCmd+0x82>
 800132c:	9b00      	ldr	r3, [sp, #0]
		if(isScopeTrigMode(cmdIn)){
 800132e:	4a3b      	ldr	r2, [pc, #236]	; (800141c <parseScopeCmd+0x390>)
 8001330:	4293      	cmp	r3, r2
 8001332:	f000 8094 	beq.w	800145e <parseScopeCmd+0x3d2>
 8001336:	4a3a      	ldr	r2, [pc, #232]	; (8001420 <parseScopeCmd+0x394>)
 8001338:	4293      	cmp	r3, r2
 800133a:	f040 815d 	bne.w	80015f8 <parseScopeCmd+0x56c>
				scopeSetTriggerMode(TRIG_AUTO);
 800133e:	2001      	movs	r0, #1
 8001340:	f003 fcf4 	bl	8004d2c <scopeSetTriggerMode>
		cmdIn=CMD_END;
 8001344:	481a      	ldr	r0, [pc, #104]	; (80013b0 <parseScopeCmd+0x324>)
 8001346:	e6ae      	b.n	80010a6 <parseScopeCmd+0x1a>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001348:	4b31      	ldr	r3, [pc, #196]	; (8001410 <parseScopeCmd+0x384>)
 800134a:	4669      	mov	r1, sp
 800134c:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_SCOPE_CONFIG;
 800134e:	240f      	movs	r4, #15
 8001350:	e77f      	b.n	8001252 <parseScopeCmd+0x1c6>
	switch(cmdIn){
 8001352:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8001356:	4298      	cmp	r0, r3
 8001358:	f47f af62 	bne.w	8001220 <parseScopeCmd+0x194>
		error=scopeSetADCInputChannelDefault();
 800135c:	f003 ff24 	bl	80051a8 <scopeSetADCInputChannelDefault>
 8001360:	e6d5      	b.n	800110e <parseScopeCmd+0x82>
	switch(cmdIn){
 8001362:	f1a3 6382 	sub.w	r3, r3, #68157440	; 0x4100000
 8001366:	f5a3 3339 	sub.w	r3, r3, #189440	; 0x2e400
 800136a:	f2a3 230b 	subw	r3, r3, #523	; 0x20b
 800136e:	4298      	cmp	r0, r3
 8001370:	f47f af56 	bne.w	8001220 <parseScopeCmd+0x194>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001374:	4668      	mov	r0, sp
 8001376:	2105      	movs	r1, #5
 8001378:	f000 ffae 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800137c:	2803      	cmp	r0, #3
 800137e:	f67f aeef 	bls.w	8001160 <parseScopeCmd+0xd4>
 8001382:	9800      	ldr	r0, [sp, #0]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <parseScopeCmd+0x324>)
 8001386:	4298      	cmp	r0, r3
 8001388:	f43f aeea 	beq.w	8001160 <parseScopeCmd+0xd4>
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <parseScopeCmd+0x34c>)
 800138e:	4298      	cmp	r0, r3
 8001390:	f43f aee6 	beq.w	8001160 <parseScopeCmd+0xd4>
			error=scopeSetADCInputChannel((uint8_t)(cmdIn>>8),(uint8_t)(cmdIn));
 8001394:	b2c1      	uxtb	r1, r0
 8001396:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800139a:	f003 fec1 	bl	8005120 <scopeSetADCInputChannel>
 800139e:	e6b6      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetTrigChannel(4);
 80013a0:	2004      	movs	r0, #4
 80013a2:	f003 fe8f 	bl	80050c4 <scopeSetTrigChannel>
 80013a6:	e6b2      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetNumOfChannels(4);
 80013a8:	2004      	movs	r0, #4
 80013aa:	f003 fded 	bl	8004f88 <scopeSetNumOfChannels>
 80013ae:	e6ae      	b.n	800110e <parseScopeCmd+0x82>
 80013b0:	5f444e45 	.word	0x5f444e45
 80013b4:	48435254 	.word	0x48435254
 80013b8:	46455241 	.word	0x46455241
 80013bc:	47495254 	.word	0x47495254
 80013c0:	a0cfcfcf 	.word	0xa0cfcfcf
 80013c4:	5f303035 	.word	0x5f303035
 80013c8:	51455246 	.word	0x51455246
 80013cc:	4e414843 	.word	0x4e414843
 80013d0:	45534952 	.word	0x45534952
 80013d4:	4c4c4146 	.word	0x4c4c4146
 80013d8:	5f525245 	.word	0x5f525245
 80013dc:	07fffffe 	.word	0x07fffffe
 80013e0:	5f58414d 	.word	0x5f58414d
 80013e4:	a0b7bccf 	.word	0xa0b7bccf
 80013e8:	5f484331 	.word	0x5f484331
 80013ec:	5f484332 	.word	0x5f484332
 80013f0:	5f484333 	.word	0x5f484333
 80013f4:	54525453 	.word	0x54525453
 80013f8:	5458454e 	.word	0x5458454e
 80013fc:	3f504e49 	.word	0x3f504e49
 8001400:	41544144 	.word	0x41544144
 8001404:	3f474643 	.word	0x3f474643
 8001408:	5f423231 	.word	0x5f423231
 800140c:	5f423031 	.word	0x5f423031
 8001410:	20004cb4 	.word	0x20004cb4
 8001414:	a0a0b4cf 	.word	0xa0a0b4cf
 8001418:	5f5f4b35 	.word	0x5f5f4b35
 800141c:	4d524f4e 	.word	0x4d524f4e
 8001420:	4f545541 	.word	0x4f545541
			if(cmdIn == CMD_SAMPLES_100){
 8001424:	4b8e      	ldr	r3, [pc, #568]	; (8001660 <parseScopeCmd+0x5d4>)
 8001426:	429a      	cmp	r2, r3
				error=scopeSetNumOfSamples(100);
 8001428:	bf0c      	ite	eq
 800142a:	2064      	moveq	r0, #100	; 0x64
				error=scopeSetNumOfSamples(200);
 800142c:	20c8      	movne	r0, #200	; 0xc8
 800142e:	f003 fd83 	bl	8004f38 <scopeSetNumOfSamples>
 8001432:	e66c      	b.n	800110e <parseScopeCmd+0x82>
			if(cmdIn == CMD_FREQ_1K){
 8001434:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <parseScopeCmd+0x5d8>)
 8001436:	4298      	cmp	r0, r3
 8001438:	d108      	bne.n	800144c <parseScopeCmd+0x3c0>
				error=scopeSetSamplingFreq(1000);
 800143a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143e:	f003 fd11 	bl	8004e64 <scopeSetSamplingFreq>
 8001442:	e664      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetDataDepth(12);
 8001444:	200c      	movs	r0, #12
 8001446:	f003 fca7 	bl	8004d98 <scopeSetDataDepth>
 800144a:	e660      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetSamplingFreq(2000);
 800144c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001450:	f003 fd08 	bl	8004e64 <scopeSetSamplingFreq>
 8001454:	e65b      	b.n	800110e <parseScopeCmd+0x82>
				scopeSetTriggerEdge(EDGE_RISING);
 8001456:	2000      	movs	r0, #0
 8001458:	f003 fc7c 	bl	8004d54 <scopeSetTriggerEdge>
 800145c:	e659      	b.n	8001112 <parseScopeCmd+0x86>
				scopeSetTriggerMode(TRIG_NORMAL);
 800145e:	2000      	movs	r0, #0
 8001460:	f003 fc64 	bl	8004d2c <scopeSetTriggerMode>
		cmdIn=CMD_END;
 8001464:	4880      	ldr	r0, [pc, #512]	; (8001668 <parseScopeCmd+0x5dc>)
 8001466:	e61e      	b.n	80010a6 <parseScopeCmd+0x1a>
	switch(cmdIn){
 8001468:	f103 632e 	add.w	r3, r3, #182452224	; 0xae00000
 800146c:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 8001470:	f603 03f7 	addw	r3, r3, #2295	; 0x8f7
 8001474:	4298      	cmp	r0, r3
 8001476:	f43f ae16 	beq.w	80010a6 <parseScopeCmd+0x1a>
 800147a:	e6d1      	b.n	8001220 <parseScopeCmd+0x194>
				error=scopeSetTrigChannel(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f003 fe21 	bl	80050c4 <scopeSetTrigChannel>
 8001482:	e644      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetNumOfChannels(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f003 fd7f 	bl	8004f88 <scopeSetNumOfChannels>
 800148a:	e640      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetNumOfChannels(2);
 800148c:	2002      	movs	r0, #2
 800148e:	f003 fd7b 	bl	8004f88 <scopeSetNumOfChannels>
 8001492:	e63c      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetTrigChannel(2);
 8001494:	2002      	movs	r0, #2
 8001496:	f003 fe15 	bl	80050c4 <scopeSetTrigChannel>
 800149a:	e638      	b.n	800110e <parseScopeCmd+0x82>
			}else if(cmdIn == CMD_FREQ_10K){
 800149c:	4b73      	ldr	r3, [pc, #460]	; (800166c <parseScopeCmd+0x5e0>)
 800149e:	4298      	cmp	r0, r3
 80014a0:	d020      	beq.n	80014e4 <parseScopeCmd+0x458>
			}else if(cmdIn == CMD_FREQ_20K){
 80014a2:	4b73      	ldr	r3, [pc, #460]	; (8001670 <parseScopeCmd+0x5e4>)
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d104      	bne.n	80014b2 <parseScopeCmd+0x426>
				error=scopeSetSamplingFreq(20000);
 80014a8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80014ac:	f003 fcda 	bl	8004e64 <scopeSetSamplingFreq>
 80014b0:	e62d      	b.n	800110e <parseScopeCmd+0x82>
			}else if(cmdIn == CMD_FREQ_50K){
 80014b2:	3303      	adds	r3, #3
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d01a      	beq.n	80014ee <parseScopeCmd+0x462>
			}else if(cmdIn == CMD_FREQ_100K){
 80014b8:	4b6e      	ldr	r3, [pc, #440]	; (8001674 <parseScopeCmd+0x5e8>)
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d01c      	beq.n	80014f8 <parseScopeCmd+0x46c>
			}else if(cmdIn == CMD_FREQ_200K){
 80014be:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <parseScopeCmd+0x5ec>)
 80014c0:	4298      	cmp	r0, r3
 80014c2:	d01d      	beq.n	8001500 <parseScopeCmd+0x474>
			}else if(cmdIn == CMD_FREQ_500K){
 80014c4:	4b6d      	ldr	r3, [pc, #436]	; (800167c <parseScopeCmd+0x5f0>)
 80014c6:	4298      	cmp	r0, r3
 80014c8:	d01e      	beq.n	8001508 <parseScopeCmd+0x47c>
			}else if(cmdIn == CMD_FREQ_10M){
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <parseScopeCmd+0x5f4>)
 80014cc:	4298      	cmp	r0, r3
 80014ce:	d02b      	beq.n	8001528 <parseScopeCmd+0x49c>
			}else if(cmdIn == CMD_FREQ_MAX){
 80014d0:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <parseScopeCmd+0x5f8>)
 80014d2:	4298      	cmp	r0, r3
 80014d4:	f43f ae6e 	beq.w	80011b4 <parseScopeCmd+0x128>
			}else if(cmdIn < 0x07FFFFFF){
 80014d8:	4290      	cmp	r0, r2
 80014da:	f63f ae1a 	bhi.w	8001112 <parseScopeCmd+0x86>
				error=scopeSetSamplingFreq(5000000);
 80014de:	f003 fcc1 	bl	8004e64 <scopeSetSamplingFreq>
 80014e2:	e614      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetSamplingFreq(10000);
 80014e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80014e8:	f003 fcbc 	bl	8004e64 <scopeSetSamplingFreq>
 80014ec:	e60f      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetSamplingFreq(50000);
 80014ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014f2:	f003 fcb7 	bl	8004e64 <scopeSetSamplingFreq>
 80014f6:	e60a      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetSamplingFreq(100000);
 80014f8:	4863      	ldr	r0, [pc, #396]	; (8001688 <parseScopeCmd+0x5fc>)
 80014fa:	f003 fcb3 	bl	8004e64 <scopeSetSamplingFreq>
 80014fe:	e606      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetSamplingFreq(200000);
 8001500:	4862      	ldr	r0, [pc, #392]	; (800168c <parseScopeCmd+0x600>)
 8001502:	f003 fcaf 	bl	8004e64 <scopeSetSamplingFreq>
 8001506:	e602      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetSamplingFreq(500000);
 8001508:	4861      	ldr	r0, [pc, #388]	; (8001690 <parseScopeCmd+0x604>)
 800150a:	f003 fcab 	bl	8004e64 <scopeSetSamplingFreq>
 800150e:	e5fe      	b.n	800110e <parseScopeCmd+0x82>
		if(isScopeFreq(cmdIn)){
 8001510:	3303      	adds	r3, #3
 8001512:	4298      	cmp	r0, r3
 8001514:	f000 8094 	beq.w	8001640 <parseScopeCmd+0x5b4>
 8001518:	f5a3 1390 	sub.w	r3, r3, #1179648	; 0x120000
 800151c:	f5a3 53e8 	sub.w	r3, r3, #7424	; 0x1d00
 8001520:	3b04      	subs	r3, #4
 8001522:	4298      	cmp	r0, r3
 8001524:	f47f ae3f 	bne.w	80011a6 <parseScopeCmd+0x11a>
				error=scopeSetSamplingFreq(10000000);
 8001528:	485a      	ldr	r0, [pc, #360]	; (8001694 <parseScopeCmd+0x608>)
 800152a:	f003 fc9b 	bl	8004e64 <scopeSetSamplingFreq>
 800152e:	e5ee      	b.n	800110e <parseScopeCmd+0x82>
		if(isScopeNumOfSamples(cmdIn)){
 8001530:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 8001534:	f503 53d7 	add.w	r3, r3, #6880	; 0x1ae0
 8001538:	331c      	adds	r3, #28
 800153a:	429a      	cmp	r2, r3
 800153c:	d011      	beq.n	8001562 <parseScopeCmd+0x4d6>
 800153e:	3301      	adds	r3, #1
 8001540:	429a      	cmp	r2, r3
 8001542:	d013      	beq.n	800156c <parseScopeCmd+0x4e0>
 8001544:	3303      	adds	r3, #3
 8001546:	429a      	cmp	r2, r3
 8001548:	d015      	beq.n	8001576 <parseScopeCmd+0x4ea>
 800154a:	f5a3 13a0 	sub.w	r3, r3, #1310720	; 0x140000
 800154e:	f5a3 53d8 	sub.w	r3, r3, #6912	; 0x1b00
 8001552:	3b04      	subs	r3, #4
 8001554:	429a      	cmp	r2, r3
 8001556:	d157      	bne.n	8001608 <parseScopeCmd+0x57c>
				error=scopeSetNumOfSamples(10000);
 8001558:	f242 7010 	movw	r0, #10000	; 0x2710
 800155c:	f003 fcec 	bl	8004f38 <scopeSetNumOfSamples>
 8001560:	e5d5      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetNumOfSamples(1000);
 8001562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001566:	f003 fce7 	bl	8004f38 <scopeSetNumOfSamples>
 800156a:	e5d0      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetNumOfSamples(2000);
 800156c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001570:	f003 fce2 	bl	8004f38 <scopeSetNumOfSamples>
 8001574:	e5cb      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetNumOfSamples(5000);
 8001576:	f241 3088 	movw	r0, #5000	; 0x1388
 800157a:	f003 fcdd 	bl	8004f38 <scopeSetNumOfSamples>
 800157e:	e5c6      	b.n	800110e <parseScopeCmd+0x82>
		if(isScopeFreq(cmdIn)){
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <parseScopeCmd+0x5e0>)
 8001582:	4298      	cmp	r0, r3
 8001584:	d0ae      	beq.n	80014e4 <parseScopeCmd+0x458>
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <parseScopeCmd+0x5e4>)
 8001588:	4298      	cmp	r0, r3
 800158a:	d08d      	beq.n	80014a8 <parseScopeCmd+0x41c>
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <parseScopeCmd+0x60c>)
 800158e:	4298      	cmp	r0, r3
 8001590:	d0ad      	beq.n	80014ee <parseScopeCmd+0x462>
 8001592:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 8001596:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 800159a:	3b04      	subs	r3, #4
 800159c:	4298      	cmp	r0, r3
 800159e:	d0ab      	beq.n	80014f8 <parseScopeCmd+0x46c>
 80015a0:	3301      	adds	r3, #1
 80015a2:	4298      	cmp	r0, r3
 80015a4:	d0ac      	beq.n	8001500 <parseScopeCmd+0x474>
 80015a6:	3303      	adds	r3, #3
 80015a8:	4298      	cmp	r0, r3
 80015aa:	d0ad      	beq.n	8001508 <parseScopeCmd+0x47c>
 80015ac:	f103 53a1 	add.w	r3, r3, #337641472	; 0x14200000
 80015b0:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
 80015b4:	f603 43fc 	addw	r3, r3, #3324	; 0xcfc
 80015b8:	4298      	cmp	r0, r3
 80015ba:	d116      	bne.n	80015ea <parseScopeCmd+0x55e>
				error=scopeSetSamplingFreq(1000000);
 80015bc:	4837      	ldr	r0, [pc, #220]	; (800169c <parseScopeCmd+0x610>)
 80015be:	f003 fc51 	bl	8004e64 <scopeSetSamplingFreq>
 80015c2:	e5a4      	b.n	800110e <parseScopeCmd+0x82>
		if(isScopeDataDepth(cmdIn)){
 80015c4:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 80015c8:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 80015cc:	3207      	adds	r2, #7
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <parseScopeCmd+0x556>
 80015d2:	3a02      	subs	r2, #2
 80015d4:	4293      	cmp	r3, r2
 80015d6:	f47f adc3 	bne.w	8001160 <parseScopeCmd+0xd4>
				error=scopeSetDataDepth(6);
 80015da:	2006      	movs	r0, #6
 80015dc:	f003 fbdc 	bl	8004d98 <scopeSetDataDepth>
 80015e0:	e595      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetDataDepth(8);
 80015e2:	2008      	movs	r0, #8
 80015e4:	f003 fbd8 	bl	8004d98 <scopeSetDataDepth>
 80015e8:	e591      	b.n	800110e <parseScopeCmd+0x82>
		if(isScopeFreq(cmdIn)){
 80015ea:	3301      	adds	r3, #1
 80015ec:	4298      	cmp	r0, r3
 80015ee:	d18f      	bne.n	8001510 <parseScopeCmd+0x484>
				error=scopeSetSamplingFreq(2000000);
 80015f0:	482b      	ldr	r0, [pc, #172]	; (80016a0 <parseScopeCmd+0x614>)
 80015f2:	f003 fc37 	bl	8004e64 <scopeSetSamplingFreq>
 80015f6:	e58a      	b.n	800110e <parseScopeCmd+0x82>
		if(isScopeTrigMode(cmdIn)){
 80015f8:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <parseScopeCmd+0x618>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d122      	bne.n	8001644 <parseScopeCmd+0x5b8>
				scopeSetTriggerMode(TRIG_AUTO_FAST);
 80015fe:	2002      	movs	r0, #2
 8001600:	f003 fb94 	bl	8004d2c <scopeSetTriggerMode>
		cmdIn=CMD_END;
 8001604:	4818      	ldr	r0, [pc, #96]	; (8001668 <parseScopeCmd+0x5dc>)
 8001606:	e54e      	b.n	80010a6 <parseScopeCmd+0x1a>
		if(isScopeNumOfSamples(cmdIn)){
 8001608:	3301      	adds	r3, #1
 800160a:	429a      	cmp	r2, r3
 800160c:	d00e      	beq.n	800162c <parseScopeCmd+0x5a0>
 800160e:	3303      	adds	r3, #3
 8001610:	429a      	cmp	r2, r3
 8001612:	d010      	beq.n	8001636 <parseScopeCmd+0x5aa>
 8001614:	f103 436c 	add.w	r3, r3, #3959422976	; 0xec000000
 8001618:	f5a3 13d8 	sub.w	r3, r3, #1769472	; 0x1b0000
 800161c:	3b04      	subs	r3, #4
 800161e:	429a      	cmp	r2, r3
 8001620:	f47f ad9e 	bne.w	8001160 <parseScopeCmd+0xd4>
				error=scopeSetNumOfSamples(100000);
 8001624:	4818      	ldr	r0, [pc, #96]	; (8001688 <parseScopeCmd+0x5fc>)
 8001626:	f003 fc87 	bl	8004f38 <scopeSetNumOfSamples>
 800162a:	e570      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetNumOfSamples(20000);
 800162c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001630:	f003 fc82 	bl	8004f38 <scopeSetNumOfSamples>
 8001634:	e56b      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetNumOfSamples(50000);
 8001636:	f24c 3050 	movw	r0, #50000	; 0xc350
 800163a:	f003 fc7d 	bl	8004f38 <scopeSetNumOfSamples>
 800163e:	e566      	b.n	800110e <parseScopeCmd+0x82>
				error=scopeSetSamplingFreq(5000000);
 8001640:	4819      	ldr	r0, [pc, #100]	; (80016a8 <parseScopeCmd+0x61c>)
 8001642:	e74c      	b.n	80014de <parseScopeCmd+0x452>
		if(isScopeTrigMode(cmdIn)){
 8001644:	f102 4268 	add.w	r2, r2, #3892314112	; 0xe8000000
 8001648:	f502 224e 	add.w	r2, r2, #843776	; 0xce000
 800164c:	f602 220d 	addw	r2, r2, #2573	; 0xa0d
 8001650:	4293      	cmp	r3, r2
 8001652:	f47f ad85 	bne.w	8001160 <parseScopeCmd+0xd4>
				scopeSetTriggerMode(TRIG_SINGLE);
 8001656:	2003      	movs	r0, #3
 8001658:	f003 fb68 	bl	8004d2c <scopeSetTriggerMode>
		cmdIn=CMD_END;
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <parseScopeCmd+0x5dc>)
 800165e:	e522      	b.n	80010a6 <parseScopeCmd+0x1a>
 8001660:	5f303031 	.word	0x5f303031
 8001664:	5f5f4b31 	.word	0x5f5f4b31
 8001668:	5f444e45 	.word	0x5f444e45
 800166c:	5f4b3031 	.word	0x5f4b3031
 8001670:	5f4b3032 	.word	0x5f4b3032
 8001674:	4b303031 	.word	0x4b303031
 8001678:	4b303032 	.word	0x4b303032
 800167c:	4b303035 	.word	0x4b303035
 8001680:	5f4d3031 	.word	0x5f4d3031
 8001684:	5f58414d 	.word	0x5f58414d
 8001688:	000186a0 	.word	0x000186a0
 800168c:	00030d40 	.word	0x00030d40
 8001690:	0007a120 	.word	0x0007a120
 8001694:	00989680 	.word	0x00989680
 8001698:	5f4b3035 	.word	0x5f4b3035
 800169c:	000f4240 	.word	0x000f4240
 80016a0:	001e8480 	.word	0x001e8480
 80016a4:	5f415f46 	.word	0x5f415f46
 80016a8:	004c4b40 	.word	0x004c4b40

080016ac <parseSyncPwmCmd>:
command parseSyncPwmCmd(void){
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80016b0:	ad02      	add	r5, sp, #8
 80016b2:	4628      	mov	r0, r5
 80016b4:	2105      	movs	r1, #5
 80016b6:	f000 fe0f 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80016ba:	2803      	cmp	r0, #3
 80016bc:	d806      	bhi.n	80016cc <parseSyncPwmCmd+0x20>
	cmdIn = (error > 0) ? error : CMD_END;	
 80016be:	4b70      	ldr	r3, [pc, #448]	; (8001880 <parseSyncPwmCmd+0x1d4>)
		return BUILD_CMD(cmdNext);
	}else if(bytesRead == 0){
 80016c0:	2800      	cmp	r0, #0
	cmdIn = (error > 0) ? error : CMD_END;	
 80016c2:	bf14      	ite	ne
 80016c4:	2097      	movne	r0, #151	; 0x97
 80016c6:	4618      	moveq	r0, r3
}
 80016c8:	b004      	add	sp, #16
 80016ca:	bd70      	pop	{r4, r5, r6, pc}
 80016cc:	9802      	ldr	r0, [sp, #8]
	switch(cmdIn){
 80016ce:	4b6d      	ldr	r3, [pc, #436]	; (8001884 <parseSyncPwmCmd+0x1d8>)
 80016d0:	4298      	cmp	r0, r3
 80016d2:	d069      	beq.n	80017a8 <parseSyncPwmCmd+0xfc>
 80016d4:	d924      	bls.n	8001720 <parseSyncPwmCmd+0x74>
 80016d6:	4b6c      	ldr	r3, [pc, #432]	; (8001888 <parseSyncPwmCmd+0x1dc>)
 80016d8:	4298      	cmp	r0, r3
 80016da:	d00f      	beq.n	80016fc <parseSyncPwmCmd+0x50>
 80016dc:	d96d      	bls.n	80017ba <parseSyncPwmCmd+0x10e>
 80016de:	4b6b      	ldr	r3, [pc, #428]	; (800188c <parseSyncPwmCmd+0x1e0>)
 80016e0:	4298      	cmp	r0, r3
 80016e2:	f040 80b1 	bne.w	8001848 <parseSyncPwmCmd+0x19c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80016e6:	2105      	movs	r1, #5
 80016e8:	4628      	mov	r0, r5
 80016ea:	f000 fdf5 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80016ee:	2803      	cmp	r0, #3
 80016f0:	d87e      	bhi.n	80017f0 <parseSyncPwmCmd+0x144>
		secondHalfOfDouble = commBufferReadUInt32();
 80016f2:	f000 fe49 	bl	8002388 <commBufferReadUInt32>
	cmdIn = (error > 0) ? error : CMD_END;	
 80016f6:	2097      	movs	r0, #151	; 0x97
}
 80016f8:	b004      	add	sp, #16
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80016fc:	4628      	mov	r0, r5
 80016fe:	2105      	movs	r1, #5
 8001700:	f000 fdea 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001704:	2803      	cmp	r0, #3
 8001706:	d9f6      	bls.n	80016f6 <parseSyncPwmCmd+0x4a>
 8001708:	9b02      	ldr	r3, [sp, #8]
		if(isSyncPwmStepMode(cmdIn)){
 800170a:	4a61      	ldr	r2, [pc, #388]	; (8001890 <parseSyncPwmCmd+0x1e4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	f000 8097 	beq.w	8001840 <parseSyncPwmCmd+0x194>
 8001712:	4a60      	ldr	r2, [pc, #384]	; (8001894 <parseSyncPwmCmd+0x1e8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d1ee      	bne.n	80016f6 <parseSyncPwmCmd+0x4a>
				syncPwmResetStepMode();
 8001718:	f003 fece 	bl	80054b8 <syncPwmResetStepMode>
	cmdIn = (error > 0) ? error : CMD_END;	
 800171c:	4858      	ldr	r0, [pc, #352]	; (8001880 <parseSyncPwmCmd+0x1d4>)
 800171e:	e7d3      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
	switch(cmdIn){
 8001720:	f103 4373 	add.w	r3, r3, #4076863488	; 0xf3000000
 8001724:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001728:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800172c:	4298      	cmp	r0, r3
 800172e:	d027      	beq.n	8001780 <parseSyncPwmCmd+0xd4>
 8001730:	f103 633f 	add.w	r3, r3, #200278016	; 0xbf00000
 8001734:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8001738:	4298      	cmp	r0, r3
 800173a:	d010      	beq.n	800175e <parseSyncPwmCmd+0xb2>
 800173c:	4b56      	ldr	r3, [pc, #344]	; (8001898 <parseSyncPwmCmd+0x1ec>)
 800173e:	4298      	cmp	r0, r3
 8001740:	d1d9      	bne.n	80016f6 <parseSyncPwmCmd+0x4a>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001742:	4b56      	ldr	r3, [pc, #344]	; (800189c <parseSyncPwmCmd+0x1f0>)
 8001744:	4629      	mov	r1, r5
 8001746:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_SYNCPWM_CONFIG;
 8001748:	242c      	movs	r4, #44	; 0x2c
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800174a:	2300      	movs	r3, #0
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_SYNCPWM_CONFIG;
 8001750:	f8ad 4008 	strh.w	r4, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001754:	f00a fde6 	bl	800c324 <xQueueGenericSend>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001758:	4849      	ldr	r0, [pc, #292]	; (8001880 <parseSyncPwmCmd+0x1d4>)
}
 800175a:	b004      	add	sp, #16
 800175c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800175e:	4628      	mov	r0, r5
 8001760:	2105      	movs	r1, #5
 8001762:	f000 fdb9 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001766:	2803      	cmp	r0, #3
 8001768:	d9c5      	bls.n	80016f6 <parseSyncPwmCmd+0x4a>
 800176a:	9b02      	ldr	r3, [sp, #8]
		if(isSyncPwm(cmdIn)){
 800176c:	4a4c      	ldr	r2, [pc, #304]	; (80018a0 <parseSyncPwmCmd+0x1f4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d062      	beq.n	8001838 <parseSyncPwmCmd+0x18c>
 8001772:	4a4c      	ldr	r2, [pc, #304]	; (80018a4 <parseSyncPwmCmd+0x1f8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d171      	bne.n	800185c <parseSyncPwmCmd+0x1b0>
				syncPwmSendDeinit();
 8001778:	f003 fe42 	bl	8005400 <syncPwmSendDeinit>
	cmdIn = (error > 0) ? error : CMD_END;	
 800177c:	4840      	ldr	r0, [pc, #256]	; (8001880 <parseSyncPwmCmd+0x1d4>)
 800177e:	e7a3      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001780:	4628      	mov	r0, r5
 8001782:	2105      	movs	r1, #5
 8001784:	f000 fda8 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001788:	2803      	cmp	r0, #3
 800178a:	d9b4      	bls.n	80016f6 <parseSyncPwmCmd+0x4a>
 800178c:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800178e:	4c3c      	ldr	r4, [pc, #240]	; (8001880 <parseSyncPwmCmd+0x1d4>)
 8001790:	42a0      	cmp	r0, r4
 8001792:	d0b0      	beq.n	80016f6 <parseSyncPwmCmd+0x4a>
 8001794:	4b44      	ldr	r3, [pc, #272]	; (80018a8 <parseSyncPwmCmd+0x1fc>)
 8001796:	4298      	cmp	r0, r3
 8001798:	d0ad      	beq.n	80016f6 <parseSyncPwmCmd+0x4a>
			syncPwmSetChannelState(((cmdIn)&0xff00)>>8,(uint8_t)(cmdIn));
 800179a:	b2c1      	uxtb	r1, r0
 800179c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80017a0:	f003 fe86 	bl	80054b0 <syncPwmSetChannelState>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017a4:	4620      	mov	r0, r4
 80017a6:	e78f      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80017a8:	4628      	mov	r0, r5
 80017aa:	2105      	movs	r1, #5
 80017ac:	f000 fd94 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80017b0:	2803      	cmp	r0, #3
 80017b2:	d835      	bhi.n	8001820 <parseSyncPwmCmd+0x174>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017b4:	4832      	ldr	r0, [pc, #200]	; (8001880 <parseSyncPwmCmd+0x1d4>)
}
 80017b6:	b004      	add	sp, #16
 80017b8:	bd70      	pop	{r4, r5, r6, pc}
	switch(cmdIn){
 80017ba:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 80017be:	f503 231e 	add.w	r3, r3, #647168	; 0x9e000
 80017c2:	f503 636f 	add.w	r3, r3, #3824	; 0xef0
 80017c6:	4298      	cmp	r0, r3
 80017c8:	d195      	bne.n	80016f6 <parseSyncPwmCmd+0x4a>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80017ca:	4628      	mov	r0, r5
 80017cc:	2105      	movs	r1, #5
 80017ce:	f000 fd83 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80017d2:	2803      	cmp	r0, #3
 80017d4:	d9ee      	bls.n	80017b4 <parseSyncPwmCmd+0x108>
 80017d6:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017d8:	4c29      	ldr	r4, [pc, #164]	; (8001880 <parseSyncPwmCmd+0x1d4>)
 80017da:	42a0      	cmp	r0, r4
 80017dc:	d0ea      	beq.n	80017b4 <parseSyncPwmCmd+0x108>
 80017de:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <parseSyncPwmCmd+0x1fc>)
 80017e0:	4298      	cmp	r0, r3
 80017e2:	d0e7      	beq.n	80017b4 <parseSyncPwmCmd+0x108>
			syncPwmChannelConfig(((cmdIn)&0xffff0000)>>16,(uint16_t)(cmdIn));
 80017e4:	b281      	uxth	r1, r0
 80017e6:	0c00      	lsrs	r0, r0, #16
 80017e8:	f003 fe46 	bl	8005478 <syncPwmChannelConfig>
	cmdIn = (error > 0) ? error : CMD_END;	
 80017ec:	4620      	mov	r0, r4
 80017ee:	e76b      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
 80017f0:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80017f2:	4c23      	ldr	r4, [pc, #140]	; (8001880 <parseSyncPwmCmd+0x1d4>)
		secondHalfOfDouble = commBufferReadUInt32();
 80017f4:	f000 fdc8 	bl	8002388 <commBufferReadUInt32>
	}
}

double makeDoubleFromTwo32bit(uint32_t word1, uint32_t word2){
	uint32_t makeArray[2];
	makeArray[0] = word1;
 80017f8:	e9cd 0602 	strd	r0, r6, [sp, #8]
	makeArray[1] = word2;

	double doubleVal;
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 80017fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001800:	466b      	mov	r3, sp
 8001802:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001806:	42a6      	cmp	r6, r4
	return doubleVal;
 8001808:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 800180c:	f43f af73 	beq.w	80016f6 <parseSyncPwmCmd+0x4a>
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <parseSyncPwmCmd+0x1fc>)
 8001812:	429e      	cmp	r6, r3
 8001814:	f43f af6f 	beq.w	80016f6 <parseSyncPwmCmd+0x4a>
			syncPwmSetFreq(freq);
 8001818:	f003 fe32 	bl	8005480 <syncPwmSetFreq>
	cmdIn = (error > 0) ? error : CMD_END;	
 800181c:	4620      	mov	r0, r4
 800181e:	e753      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
 8001820:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001822:	4c17      	ldr	r4, [pc, #92]	; (8001880 <parseSyncPwmCmd+0x1d4>)
 8001824:	42a0      	cmp	r0, r4
 8001826:	d0c5      	beq.n	80017b4 <parseSyncPwmCmd+0x108>
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <parseSyncPwmCmd+0x1fc>)
 800182a:	4298      	cmp	r0, r3
 800182c:	d0c2      	beq.n	80017b4 <parseSyncPwmCmd+0x108>
			syncPwmChannelNumber((uint8_t)cmdIn);
 800182e:	b2c0      	uxtb	r0, r0
 8001830:	f003 fe1c 	bl	800546c <syncPwmChannelNumber>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001834:	4620      	mov	r0, r4
 8001836:	e747      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
				syncPwmSendInit();
 8001838:	f003 fdd0 	bl	80053dc <syncPwmSendInit>
	cmdIn = (error > 0) ? error : CMD_END;	
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <parseSyncPwmCmd+0x1d4>)
 800183e:	e743      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
				syncPwmSetStepMode();
 8001840:	f003 fe38 	bl	80054b4 <syncPwmSetStepMode>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001844:	480e      	ldr	r0, [pc, #56]	; (8001880 <parseSyncPwmCmd+0x1d4>)
 8001846:	e73f      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
	switch(cmdIn){
 8001848:	f103 635f 	add.w	r3, r3, #233832448	; 0xdf00000
 800184c:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8001850:	f203 33f2 	addw	r3, r3, #1010	; 0x3f2
 8001854:	4298      	cmp	r0, r3
 8001856:	f43f af37 	beq.w	80016c8 <parseSyncPwmCmd+0x1c>
 800185a:	e74c      	b.n	80016f6 <parseSyncPwmCmd+0x4a>
		if(isSyncPwm(cmdIn)){
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <parseSyncPwmCmd+0x200>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d103      	bne.n	800186a <parseSyncPwmCmd+0x1be>
				syncPwmSendStart();
 8001862:	f003 fddf 	bl	8005424 <syncPwmSendStart>
	cmdIn = (error > 0) ? error : CMD_END;	
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <parseSyncPwmCmd+0x1d4>)
 8001868:	e72e      	b.n	80016c8 <parseSyncPwmCmd+0x1c>
		if(isSyncPwm(cmdIn)){
 800186a:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 800186e:	f502 027d 	add.w	r2, r2, #16580608	; 0xfd0000
 8001872:	4293      	cmp	r3, r2
 8001874:	f47f af3f 	bne.w	80016f6 <parseSyncPwmCmd+0x4a>
				syncPwmSendStop();
 8001878:	f003 fde6 	bl	8005448 <syncPwmSendStop>
 800187c:	e79a      	b.n	80017b4 <parseSyncPwmCmd+0x108>
 800187e:	bf00      	nop
 8001880:	5f444e45 	.word	0x5f444e45
 8001884:	4d554e43 	.word	0x4d554e43
 8001888:	50455453 	.word	0x50455453
 800188c:	51524653 	.word	0x51524653
 8001890:	45455453 	.word	0x45455453
 8001894:	44455453 	.word	0x44455453
 8001898:	3f474643 	.word	0x3f474643
 800189c:	20004cb4 	.word	0x20004cb4
 80018a0:	54494e49 	.word	0x54494e49
 80018a4:	494e4944 	.word	0x494e4944
 80018a8:	5f525245 	.word	0x5f525245
 80018ac:	54525453 	.word	0x54525453

080018b0 <parseLogAnlysCmd>:
command parseLogAnlysCmd(void){
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80018b4:	ae02      	add	r6, sp, #8
 80018b6:	4630      	mov	r0, r6
 80018b8:	2105      	movs	r1, #5
 80018ba:	f000 fd0d 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80018be:	2803      	cmp	r0, #3
 80018c0:	d852      	bhi.n	8001968 <parseLogAnlysCmd+0xb8>
		return CMD_END;
 80018c2:	4db0      	ldr	r5, [pc, #704]	; (8001b84 <parseLogAnlysCmd+0x2d4>)
 80018c4:	4bb0      	ldr	r3, [pc, #704]	; (8001b88 <parseLogAnlysCmd+0x2d8>)
 80018c6:	2800      	cmp	r0, #0
 80018c8:	bf08      	it	eq
 80018ca:	461d      	moveq	r5, r3
 80018cc:	4caf      	ldr	r4, [pc, #700]	; (8001b8c <parseLogAnlysCmd+0x2dc>)
	while(logAnlys.state == LOGA_DATA_SENDING);
 80018ce:	7ca3      	ldrb	r3, [r4, #18]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d0fc      	beq.n	80018ce <parseLogAnlysCmd+0x1e>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 80018d4:	7ca3      	ldrb	r3, [r4, #18]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d048      	beq.n	800196c <parseLogAnlysCmd+0xbc>
	switch (cmdIn)
 80018da:	4bad      	ldr	r3, [pc, #692]	; (8001b90 <parseLogAnlysCmd+0x2e0>)
 80018dc:	429d      	cmp	r5, r3
 80018de:	f000 80f0 	beq.w	8001ac2 <parseLogAnlysCmd+0x212>
 80018e2:	d824      	bhi.n	800192e <parseLogAnlysCmd+0x7e>
 80018e4:	f103 4376 	add.w	r3, r3, #4127195136	; 0xf6000000
 80018e8:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80018ec:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 80018f0:	429d      	cmp	r5, r3
 80018f2:	f000 80cc 	beq.w	8001a8e <parseLogAnlysCmd+0x1de>
 80018f6:	d947      	bls.n	8001988 <parseLogAnlysCmd+0xd8>
 80018f8:	4ba6      	ldr	r3, [pc, #664]	; (8001b94 <parseLogAnlysCmd+0x2e4>)
 80018fa:	429d      	cmp	r5, r3
 80018fc:	f000 808a 	beq.w	8001a14 <parseLogAnlysCmd+0x164>
 8001900:	f103 63de 	add.w	r3, r3, #116391936	; 0x6f00000
 8001904:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8001908:	f203 5301 	addw	r3, r3, #1281	; 0x501
 800190c:	429d      	cmp	r5, r3
 800190e:	d123      	bne.n	8001958 <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001910:	4630      	mov	r0, r6
 8001912:	2105      	movs	r1, #5
 8001914:	f000 fce0 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001918:	2803      	cmp	r0, #3
 800191a:	f200 8108 	bhi.w	8001b2e <parseLogAnlysCmd+0x27e>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 800191e:	7ca3      	ldrb	r3, [r4, #18]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d12b      	bne.n	800197c <parseLogAnlysCmd+0xcc>
		logAnlysStart();
 8001924:	f002 fd6a 	bl	80043fc <logAnlysStart>
	cmdIn = (error > 0) ? error : CMD_END;
 8001928:	4897      	ldr	r0, [pc, #604]	; (8001b88 <parseLogAnlysCmd+0x2d8>)
}
 800192a:	b004      	add	sp, #16
 800192c:	bd70      	pop	{r4, r5, r6, pc}
	switch (cmdIn)
 800192e:	4b9a      	ldr	r3, [pc, #616]	; (8001b98 <parseLogAnlysCmd+0x2e8>)
 8001930:	429d      	cmp	r5, r3
 8001932:	f000 8098 	beq.w	8001a66 <parseLogAnlysCmd+0x1b6>
 8001936:	d953      	bls.n	80019e0 <parseLogAnlysCmd+0x130>
 8001938:	4b98      	ldr	r3, [pc, #608]	; (8001b9c <parseLogAnlysCmd+0x2ec>)
 800193a:	429d      	cmp	r5, r3
 800193c:	d042      	beq.n	80019c4 <parseLogAnlysCmd+0x114>
 800193e:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8001942:	33fd      	adds	r3, #253	; 0xfd
 8001944:	429d      	cmp	r5, r3
 8001946:	f000 8085 	beq.w	8001a54 <parseLogAnlysCmd+0x1a4>
 800194a:	f5a3 2320 	sub.w	r3, r3, #655360	; 0xa0000
 800194e:	f46f 7283 	mvn.w	r2, #262	; 0x106
 8001952:	4413      	add	r3, r2
 8001954:	429d      	cmp	r5, r3
 8001956:	d03d      	beq.n	80019d4 <parseLogAnlysCmd+0x124>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001958:	7ca3      	ldrb	r3, [r4, #18]
 800195a:	2b04      	cmp	r3, #4
 800195c:	d101      	bne.n	8001962 <parseLogAnlysCmd+0xb2>
		logAnlysStart();
 800195e:	f002 fd4d 	bl	80043fc <logAnlysStart>
	cmdIn = (error > 0) ? error : CMD_END;
 8001962:	2098      	movs	r0, #152	; 0x98
}
 8001964:	b004      	add	sp, #16
 8001966:	bd70      	pop	{r4, r5, r6, pc}
 8001968:	9d02      	ldr	r5, [sp, #8]
 800196a:	e7af      	b.n	80018cc <parseLogAnlysCmd+0x1c>
	if((logAnlys.state == LOGA_SAMPLING) && (cmdIn != CMD_LOG_ANLYS_STOP)){
 800196c:	4b8c      	ldr	r3, [pc, #560]	; (8001ba0 <parseLogAnlysCmd+0x2f0>)
 800196e:	429d      	cmp	r5, r3
 8001970:	d107      	bne.n	8001982 <parseLogAnlysCmd+0xd2>
		logAnlysSendStop();
 8001972:	f002 fd1f 	bl	80043b4 <logAnlysSendStop>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001976:	7ca3      	ldrb	r3, [r4, #18]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d028      	beq.n	80019ce <parseLogAnlysCmd+0x11e>
	cmdIn = (error > 0) ? error : CMD_END;
 800197c:	4882      	ldr	r0, [pc, #520]	; (8001b88 <parseLogAnlysCmd+0x2d8>)
}
 800197e:	b004      	add	sp, #16
 8001980:	bd70      	pop	{r4, r5, r6, pc}
		logAnlysStop(); 
 8001982:	f002 fd57 	bl	8004434 <logAnlysStop>
 8001986:	e7a8      	b.n	80018da <parseLogAnlysCmd+0x2a>
	switch (cmdIn)
 8001988:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 800198c:	f46f 6141 	mvn.w	r1, #3088	; 0xc10
 8001990:	440b      	add	r3, r1
 8001992:	429d      	cmp	r5, r3
 8001994:	d04f      	beq.n	8001a36 <parseLogAnlysCmd+0x186>
 8001996:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800199a:	f603 4311 	addw	r3, r3, #3089	; 0xc11
 800199e:	429d      	cmp	r5, r3
 80019a0:	d1da      	bne.n	8001958 <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019a2:	4630      	mov	r0, r6
 80019a4:	2105      	movs	r1, #5
 80019a6:	f000 fc97 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80019aa:	2803      	cmp	r0, #3
 80019ac:	d9d4      	bls.n	8001958 <parseLogAnlysCmd+0xa8>
 80019ae:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 80019b0:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <parseLogAnlysCmd+0x2d8>)
 80019b2:	429d      	cmp	r5, r3
 80019b4:	d0d0      	beq.n	8001958 <parseLogAnlysCmd+0xa8>
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <parseLogAnlysCmd+0x2d4>)
 80019b8:	429d      	cmp	r5, r3
 80019ba:	d0cd      	beq.n	8001958 <parseLogAnlysCmd+0xa8>
			logAnlysSetTriggerChannel((uint32_t)cmdIn);
 80019bc:	4628      	mov	r0, r5
 80019be:	f002 fd7b 	bl	80044b8 <logAnlysSetTriggerChannel>
 80019c2:	e09b      	b.n	8001afc <parseLogAnlysCmd+0x24c>
		logAnlysSendStart();
 80019c4:	f002 fce4 	bl	8004390 <logAnlysSendStart>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80019c8:	7ca3      	ldrb	r3, [r4, #18]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d1d6      	bne.n	800197c <parseLogAnlysCmd+0xcc>
		logAnlysStart();
 80019ce:	f002 fd15 	bl	80043fc <logAnlysStart>
 80019d2:	e7d3      	b.n	800197c <parseLogAnlysCmd+0xcc>
		logAnlysSendInit();
 80019d4:	f002 fcb8 	bl	8004348 <logAnlysSendInit>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 80019d8:	7ca3      	ldrb	r3, [r4, #18]
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d1ce      	bne.n	800197c <parseLogAnlysCmd+0xcc>
 80019de:	e7f6      	b.n	80019ce <parseLogAnlysCmd+0x11e>
	switch (cmdIn)
 80019e0:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 80019e4:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 80019e8:	f603 3303 	addw	r3, r3, #2819	; 0xb03
 80019ec:	429d      	cmp	r5, r3
 80019ee:	f040 80af 	bne.w	8001b50 <parseLogAnlysCmd+0x2a0>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80019f2:	4630      	mov	r0, r6
 80019f4:	2105      	movs	r1, #5
 80019f6:	f000 fc6f 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80019fa:	2803      	cmp	r0, #3
 80019fc:	d9ac      	bls.n	8001958 <parseLogAnlysCmd+0xa8>
 80019fe:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a00:	4b61      	ldr	r3, [pc, #388]	; (8001b88 <parseLogAnlysCmd+0x2d8>)
 8001a02:	429d      	cmp	r5, r3
 8001a04:	d0a8      	beq.n	8001958 <parseLogAnlysCmd+0xa8>
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <parseLogAnlysCmd+0x2d4>)
 8001a08:	429d      	cmp	r5, r3
 8001a0a:	d0a5      	beq.n	8001958 <parseLogAnlysCmd+0xa8>
			logAnlysSetSamplesNum((uint16_t)cmdIn);
 8001a0c:	b2a8      	uxth	r0, r5
 8001a0e:	f002 fd1d 	bl	800444c <logAnlysSetSamplesNum>
 8001a12:	e073      	b.n	8001afc <parseLogAnlysCmd+0x24c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a14:	4630      	mov	r0, r6
 8001a16:	2105      	movs	r1, #5
 8001a18:	f000 fc5e 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a1c:	2803      	cmp	r0, #3
 8001a1e:	d99b      	bls.n	8001958 <parseLogAnlysCmd+0xa8>
 8001a20:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a22:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <parseLogAnlysCmd+0x2d8>)
 8001a24:	429d      	cmp	r5, r3
 8001a26:	d097      	beq.n	8001958 <parseLogAnlysCmd+0xa8>
 8001a28:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <parseLogAnlysCmd+0x2d4>)
 8001a2a:	429d      	cmp	r5, r3
 8001a2c:	d094      	beq.n	8001958 <parseLogAnlysCmd+0xa8>
			logAnlysSetSamplingFreq((uint32_t)cmdIn);
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f002 fd0a 	bl	8004448 <logAnlysSetSamplingFreq>
 8001a34:	e062      	b.n	8001afc <parseLogAnlysCmd+0x24c>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001a36:	4b5b      	ldr	r3, [pc, #364]	; (8001ba4 <parseLogAnlysCmd+0x2f4>)
 8001a38:	4631      	mov	r1, r6
 8001a3a:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_LOGAN_CONFIG;
 8001a3c:	2518      	movs	r5, #24
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_LOGAN_CONFIG;
 8001a44:	f8ad 5008 	strh.w	r5, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001a48:	f00a fc6c 	bl	800c324 <xQueueGenericSend>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001a4c:	7ca3      	ldrb	r3, [r4, #18]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d194      	bne.n	800197c <parseLogAnlysCmd+0xcc>
 8001a52:	e7bc      	b.n	80019ce <parseLogAnlysCmd+0x11e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a54:	2105      	movs	r1, #5
 8001a56:	4630      	mov	r0, r6
 8001a58:	f000 fc3e 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a5c:	2803      	cmp	r0, #3
 8001a5e:	d837      	bhi.n	8001ad0 <parseLogAnlysCmd+0x220>
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 8001a60:	f000 fc92 	bl	8002388 <commBufferReadUInt32>
 8001a64:	e778      	b.n	8001958 <parseLogAnlysCmd+0xa8>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a66:	4630      	mov	r0, r6
 8001a68:	2105      	movs	r1, #5
 8001a6a:	f000 fc35 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a6e:	2803      	cmp	r0, #3
 8001a70:	f67f af72 	bls.w	8001958 <parseLogAnlysCmd+0xa8>
 8001a74:	9d02      	ldr	r5, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001a76:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <parseLogAnlysCmd+0x2d8>)
 8001a78:	429d      	cmp	r5, r3
 8001a7a:	f43f af6d 	beq.w	8001958 <parseLogAnlysCmd+0xa8>
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <parseLogAnlysCmd+0x2d4>)
 8001a80:	429d      	cmp	r5, r3
 8001a82:	f43f af69 	beq.w	8001958 <parseLogAnlysCmd+0xa8>
			logAnlysSetPretrigger((uint32_t)cmdIn);
 8001a86:	4628      	mov	r0, r5
 8001a88:	f002 fcf4 	bl	8004474 <logAnlysSetPretrigger>
 8001a8c:	e036      	b.n	8001afc <parseLogAnlysCmd+0x24c>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001a8e:	4630      	mov	r0, r6
 8001a90:	2105      	movs	r1, #5
 8001a92:	f000 fc21 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001a96:	2803      	cmp	r0, #3
 8001a98:	f67f af41 	bls.w	800191e <parseLogAnlysCmd+0x6e>
 8001a9c:	9b02      	ldr	r3, [sp, #8]
		if(isLogAnlysTriggerEvent(cmdIn)){
 8001a9e:	4a42      	ldr	r2, [pc, #264]	; (8001ba8 <parseLogAnlysCmd+0x2f8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d05d      	beq.n	8001b60 <parseLogAnlysCmd+0x2b0>
 8001aa4:	f102 62df 	add.w	r2, r2, #116916224	; 0x6f80000
 8001aa8:	f502 4277 	add.w	r2, r2, #63232	; 0xf700
 8001aac:	32f4      	adds	r2, #244	; 0xf4
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	f47f af35 	bne.w	800191e <parseLogAnlysCmd+0x6e>
				logAnlysSetTriggerFalling();
 8001ab4:	f002 fcfa 	bl	80044ac <logAnlysSetTriggerFalling>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001ab8:	7ca3      	ldrb	r3, [r4, #18]
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	f47f af5e 	bne.w	800197c <parseLogAnlysCmd+0xcc>
 8001ac0:	e730      	b.n	8001924 <parseLogAnlysCmd+0x74>
		logAnlysSendDeinit();
 8001ac2:	f002 fc53 	bl	800436c <logAnlysSendDeinit>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001ac6:	7ca3      	ldrb	r3, [r4, #18]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	f47f af57 	bne.w	800197c <parseLogAnlysCmd+0xcc>
 8001ace:	e77e      	b.n	80019ce <parseLogAnlysCmd+0x11e>
 8001ad0:	9d02      	ldr	r5, [sp, #8]
		uint32_t secondHalfOfDouble = commBufferReadUInt32();
 8001ad2:	f000 fc59 	bl	8002388 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001ad6:	e9cd 0502 	strd	r0, r5, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001ada:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001ade:	466b      	mov	r3, sp
 8001ae0:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <parseLogAnlysCmd+0x2d8>)
 8001ae6:	429d      	cmp	r5, r3
	return doubleVal;
 8001ae8:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001aec:	f43f af34 	beq.w	8001958 <parseLogAnlysCmd+0xa8>
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <parseLogAnlysCmd+0x2d4>)
 8001af2:	429d      	cmp	r5, r3
 8001af4:	f43f af30 	beq.w	8001958 <parseLogAnlysCmd+0xa8>
			logAnlysSetPosttrigger(postTrigTime);
 8001af8:	f002 fcd0 	bl	800449c <logAnlysSetPosttrigger>
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001afc:	7ca3      	ldrb	r3, [r4, #18]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	f43f af10 	beq.w	8001924 <parseLogAnlysCmd+0x74>
			|| (cmdIn == CMD_LOG_ANLYS_POSTTRIG)
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <parseLogAnlysCmd+0x2fc>)
 8001b06:	429d      	cmp	r5, r3
 8001b08:	f43f af0c 	beq.w	8001924 <parseLogAnlysCmd+0x74>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_EVENT)
 8001b0c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001b10:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001b14:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8001b18:	f025 6200 	bic.w	r2, r5, #134217728	; 0x8000000
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f43f af56 	beq.w	80019ce <parseLogAnlysCmd+0x11e>
			|| (cmdIn == CMD_LOG_ANLYS_TRIGGER_CHANNEL)
 8001b22:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
 8001b26:	429d      	cmp	r5, r3
 8001b28:	f43f af51 	beq.w	80019ce <parseLogAnlysCmd+0x11e>
 8001b2c:	e726      	b.n	800197c <parseLogAnlysCmd+0xcc>
 8001b2e:	9d02      	ldr	r5, [sp, #8]
		if(isLogAnlysTriggerMode(cmdIn)){
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <parseLogAnlysCmd+0x300>)
 8001b32:	429d      	cmp	r5, r3
 8001b34:	d009      	beq.n	8001b4a <parseLogAnlysCmd+0x29a>
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <parseLogAnlysCmd+0x304>)
 8001b38:	429d      	cmp	r5, r3
 8001b3a:	d114      	bne.n	8001b66 <parseLogAnlysCmd+0x2b6>
				logAnlys.triggerMode = LOGA_MODE_NORMAL;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	7523      	strb	r3, [r4, #20]
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001b40:	7ca3      	ldrb	r3, [r4, #18]
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	f47f af1a 	bne.w	800197c <parseLogAnlysCmd+0xcc>
 8001b48:	e6ec      	b.n	8001924 <parseLogAnlysCmd+0x74>
				logAnlys.triggerMode = LOGA_MODE_AUTO;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	7523      	strb	r3, [r4, #20]
 8001b4e:	e6e6      	b.n	800191e <parseLogAnlysCmd+0x6e>
	switch (cmdIn)
 8001b50:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001b54:	f5a3 4379 	sub.w	r3, r3, #63744	; 0xf900
 8001b58:	429d      	cmp	r5, r3
 8001b5a:	f47f aefd 	bne.w	8001958 <parseLogAnlysCmd+0xa8>
 8001b5e:	e708      	b.n	8001972 <parseLogAnlysCmd+0xc2>
				logAnlysSetTriggerRising();
 8001b60:	f002 fc9e 	bl	80044a0 <logAnlysSetTriggerRising>
 8001b64:	e6db      	b.n	800191e <parseLogAnlysCmd+0x6e>
		if(isLogAnlysTriggerMode(cmdIn)){
 8001b66:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 8001b6a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8001b6e:	f2a3 53fb 	subw	r3, r3, #1531	; 0x5fb
 8001b72:	429d      	cmp	r5, r3
 8001b74:	d1c2      	bne.n	8001afc <parseLogAnlysCmd+0x24c>
				logAnlys.triggerMode = LOGA_MODE_SINGLE;  ////// myslim ze nestaci jenom zmenit mode ale musi se znova spustit vzorkovani nebo neco ne???????
 8001b76:	2302      	movs	r3, #2
 8001b78:	7523      	strb	r3, [r4, #20]
	if((logAnlys.state == LOGA_WAIT_FOR_RESTART) 
 8001b7a:	7ca3      	ldrb	r3, [r4, #18]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	f47f aefd 	bne.w	800197c <parseLogAnlysCmd+0xcc>
 8001b82:	e6cf      	b.n	8001924 <parseLogAnlysCmd+0x74>
 8001b84:	5f525245 	.word	0x5f525245
 8001b88:	5f444e45 	.word	0x5f444e45
 8001b8c:	20007028 	.word	0x20007028
 8001b90:	4e494544 	.word	0x4e494544
 8001b94:	46504d53 	.word	0x46504d53
 8001b98:	54455250 	.word	0x54455250
 8001b9c:	54525453 	.word	0x54525453
 8001ba0:	504f5453 	.word	0x504f5453
 8001ba4:	20004cb4 	.word	0x20004cb4
 8001ba8:	45534952 	.word	0x45534952
 8001bac:	54534f50 	.word	0x54534f50
 8001bb0:	4f545541 	.word	0x4f545541
 8001bb4:	4d524f4e 	.word	0x4d524f4e

08001bb8 <parseGeneratorCmd>:
command parseGeneratorCmd(void){
 8001bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bbc:	b084      	sub	sp, #16
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001bbe:	ad02      	add	r5, sp, #8
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	f000 fb88 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001bc8:	2803      	cmp	r0, #3
 8001bca:	d807      	bhi.n	8001bdc <parseGeneratorCmd+0x24>
		cmdIn=CMD_END;
 8001bcc:	4bc0      	ldr	r3, [pc, #768]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2064      	movne	r0, #100	; 0x64
 8001bd4:	4618      	moveq	r0, r3
}
 8001bd6:	b004      	add	sp, #16
 8001bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bdc:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 8001bde:	4abd      	ldr	r2, [pc, #756]	; (8001ed4 <parseGeneratorCmd+0x31c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	f000 813e 	beq.w	8001e62 <parseGeneratorCmd+0x2aa>
 8001be6:	d833      	bhi.n	8001c50 <parseGeneratorCmd+0x98>
 8001be8:	4abb      	ldr	r2, [pc, #748]	; (8001ed8 <parseGeneratorCmd+0x320>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	f000 812c 	beq.w	8001e48 <parseGeneratorCmd+0x290>
 8001bf0:	d84c      	bhi.n	8001c8c <parseGeneratorCmd+0xd4>
 8001bf2:	4aba      	ldr	r2, [pc, #744]	; (8001edc <parseGeneratorCmd+0x324>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	f000 813c 	beq.w	8001e72 <parseGeneratorCmd+0x2ba>
 8001bfa:	f240 818b 	bls.w	8001f14 <parseGeneratorCmd+0x35c>
 8001bfe:	4ab8      	ldr	r2, [pc, #736]	; (8001ee0 <parseGeneratorCmd+0x328>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	f000 80b4 	beq.w	8001d6e <parseGeneratorCmd+0x1b6>
 8001c06:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
 8001c0a:	f202 22fb 	addw	r2, r2, #763	; 0x2fb
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	f040 81e6 	bne.w	8001fe0 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001c14:	2105      	movs	r1, #5
 8001c16:	4628      	mov	r0, r5
 8001c18:	f000 fb5e 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001c1c:	2803      	cmp	r0, #3
 8001c1e:	f240 812e 	bls.w	8001e7e <parseGeneratorCmd+0x2c6>
 8001c22:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001c24:	4caa      	ldr	r4, [pc, #680]	; (8001ed0 <parseGeneratorCmd+0x318>)
		secondHalfOfDouble = commBufferReadUInt32();
 8001c26:	f000 fbaf 	bl	8002388 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001c2a:	e9cd 0602 	strd	r0, r6, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001c2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c32:	466b      	mov	r3, sp
 8001c34:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001c38:	42a6      	cmp	r6, r4
	return doubleVal;
 8001c3a:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001c3e:	d021      	beq.n	8001c84 <parseGeneratorCmd+0xcc>
 8001c40:	4ba8      	ldr	r3, [pc, #672]	; (8001ee4 <parseGeneratorCmd+0x32c>)
 8001c42:	429e      	cmp	r6, r3
 8001c44:	d01e      	beq.n	8001c84 <parseGeneratorCmd+0xcc>
			genPwmSetFrequency(freq, 1);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f002 f8b0 	bl	8003dac <genPwmSetFrequency>
		cmdIn=CMD_END;
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	e7c2      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
	switch(cmdIn){
 8001c50:	4aa5      	ldr	r2, [pc, #660]	; (8001ee8 <parseGeneratorCmd+0x330>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d06f      	beq.n	8001d36 <parseGeneratorCmd+0x17e>
 8001c56:	f200 809f 	bhi.w	8001d98 <parseGeneratorCmd+0x1e0>
 8001c5a:	f1a2 7241 	sub.w	r2, r2, #50593792	; 0x3040000
 8001c5e:	f6a2 2203 	subw	r2, r2, #2563	; 0xa03
 8001c62:	4293      	cmp	r3, r2
 8001c64:	f000 80d0 	beq.w	8001e08 <parseGeneratorCmd+0x250>
 8001c68:	f240 8172 	bls.w	8001f50 <parseGeneratorCmd+0x398>
 8001c6c:	4a9f      	ldr	r2, [pc, #636]	; (8001eec <parseGeneratorCmd+0x334>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d079      	beq.n	8001d66 <parseGeneratorCmd+0x1ae>
 8001c72:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
 8001c76:	f6a2 22ef 	subw	r2, r2, #2799	; 0xaef
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	f040 81b0 	bne.w	8001fe0 <parseGeneratorCmd+0x428>
		genStop();
 8001c80:	f002 fabe 	bl	8004200 <genStop>
		cmdIn=CMD_END;
 8001c84:	4892      	ldr	r0, [pc, #584]	; (8001ed0 <parseGeneratorCmd+0x318>)
}
 8001c86:	b004      	add	sp, #16
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch(cmdIn){
 8001c8c:	4a98      	ldr	r2, [pc, #608]	; (8001ef0 <parseGeneratorCmd+0x338>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	f000 80eb 	beq.w	8001e6a <parseGeneratorCmd+0x2b2>
 8001c94:	f240 8167 	bls.w	8001f66 <parseGeneratorCmd+0x3ae>
 8001c98:	4a96      	ldr	r2, [pc, #600]	; (8001ef4 <parseGeneratorCmd+0x33c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <parseGeneratorCmd+0x11a>
 8001c9e:	f102 727c 	add.w	r2, r2, #66060288	; 0x3f00000
 8001ca2:	f602 6209 	addw	r2, r2, #3593	; 0xe09
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	f040 819a 	bne.w	8001fe0 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001cac:	4628      	mov	r0, r5
 8001cae:	2105      	movs	r1, #5
 8001cb0:	f000 fb12 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001cb4:	2803      	cmp	r0, #3
 8001cb6:	d9e5      	bls.n	8001c84 <parseGeneratorCmd+0xcc>
 8001cb8:	9b02      	ldr	r3, [sp, #8]
		if(isGeneratorMode(cmdIn)){
 8001cba:	4a8f      	ldr	r2, [pc, #572]	; (8001ef8 <parseGeneratorCmd+0x340>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	f000 8177 	beq.w	8001fb0 <parseGeneratorCmd+0x3f8>
 8001cc2:	4a8e      	ldr	r2, [pc, #568]	; (8001efc <parseGeneratorCmd+0x344>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d1dd      	bne.n	8001c84 <parseGeneratorCmd+0xcc>
				genSetMode(GEN_DAC);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f002 f83b 	bl	8003d44 <genSetMode>
		cmdIn=CMD_END;
 8001cce:	4880      	ldr	r0, [pc, #512]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001cd0:	e781      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	f000 faff 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001cda:	2803      	cmp	r0, #3
 8001cdc:	f200 80d6 	bhi.w	8001e8c <parseGeneratorCmd+0x2d4>
	}else if(bytesRead == 0){
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	f244 534e 	movw	r3, #17742	; 0x454e
 8001ce6:	f244 5752 	movw	r7, #17746	; 0x4552
 8001cea:	bf13      	iteet	ne
 8001cec:	f04f 0852 	movne.w	r8, #82	; 0x52
 8001cf0:	461f      	moveq	r7, r3
 8001cf2:	f04f 0844 	moveq.w	r8, #68	; 0x44
 8001cf6:	26a4      	movne	r6, #164	; 0xa4
 8001cf8:	bf08      	it	eq
 8001cfa:	2688      	moveq	r6, #136	; 0x88
 8001cfc:	235f      	movs	r3, #95	; 0x5f
		chan=cmdIn>>24;
 8001cfe:	f88d 3008 	strb.w	r3, [sp, #8]
 8001d02:	f241 3488 	movw	r4, #5000	; 0x1388
 8001d06:	e004      	b.n	8001d12 <parseGeneratorCmd+0x15a>
 8001d08:	3c01      	subs	r4, #1
 8001d0a:	b2a4      	uxth	r4, r4
			osDelay(1);
 8001d0c:	f00a fa70 	bl	800c1f0 <osDelay>
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001d10:	b12c      	cbz	r4, 8001d1e <parseGeneratorCmd+0x166>
 8001d12:	f000 fc23 	bl	800255c <getBytesAvailable>
 8001d16:	42b0      	cmp	r0, r6
			osDelay(1);
 8001d18:	f04f 0001 	mov.w	r0, #1
		while(watchDog>0 && getBytesAvailable()<length*2+1){
 8001d1c:	ddf4      	ble.n	8001d08 <parseGeneratorCmd+0x150>
		if(getBytesAvailable()<length*2+1){
 8001d1e:	f000 fc1d 	bl	800255c <getBytesAvailable>
 8001d22:	42b0      	cmp	r0, r6
 8001d24:	f300 812a 	bgt.w	8001f7c <parseGeneratorCmd+0x3c4>
			while(commBufferReadByte(&chan)==0);
 8001d28:	4628      	mov	r0, r5
 8001d2a:	f000 faa9 	bl	8002280 <commBufferReadByte>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d0fa      	beq.n	8001d28 <parseGeneratorCmd+0x170>
 8001d32:	2068      	movs	r0, #104	; 0x68
 8001d34:	e74f      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d36:	4628      	mov	r0, r5
 8001d38:	2105      	movs	r1, #5
 8001d3a:	f000 facd 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001d3e:	2803      	cmp	r0, #3
 8001d40:	d9a0      	bls.n	8001c84 <parseGeneratorCmd+0xcc>
 8001d42:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001d44:	4b62      	ldr	r3, [pc, #392]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001d46:	4298      	cmp	r0, r3
 8001d48:	d09c      	beq.n	8001c84 <parseGeneratorCmd+0xcc>
 8001d4a:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <parseGeneratorCmd+0x32c>)
 8001d4c:	4298      	cmp	r0, r3
 8001d4e:	d099      	beq.n	8001c84 <parseGeneratorCmd+0xcc>
			error=genSetFrequency(((cmdIn)&0xffffff00)>>8,(uint8_t)(cmdIn));
 8001d50:	b2c1      	uxtb	r1, r0
 8001d52:	0a00      	lsrs	r0, r0, #8
 8001d54:	f002 f898 	bl	8003e88 <genSetFrequency>
 8001d58:	4604      	mov	r4, r0
	if(error>0){
 8001d5a:	2c00      	cmp	r4, #0
 8001d5c:	d092      	beq.n	8001c84 <parseGeneratorCmd+0xcc>
 8001d5e:	4620      	mov	r0, r4
}
 8001d60:	b004      	add	sp, #16
 8001d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		genSetOutputBuffer();
 8001d66:	f002 f96d 	bl	8004044 <genSetOutputBuffer>
		cmdIn=CMD_END;
 8001d6a:	4859      	ldr	r0, [pc, #356]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001d6c:	e733      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001d6e:	4628      	mov	r0, r5
 8001d70:	2105      	movs	r1, #5
 8001d72:	f000 fab1 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001d76:	2803      	cmp	r0, #3
 8001d78:	d984      	bls.n	8001c84 <parseGeneratorCmd+0xcc>
 8001d7a:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001d7c:	4b54      	ldr	r3, [pc, #336]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001d7e:	4298      	cmp	r0, r3
 8001d80:	d080      	beq.n	8001c84 <parseGeneratorCmd+0xcc>
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <parseGeneratorCmd+0x32c>)
 8001d84:	4298      	cmp	r0, r3
 8001d86:	f43f af7d 	beq.w	8001c84 <parseGeneratorCmd+0xcc>
			error=genSetLength(cmdIn, 2);
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	f002 f8e2 	bl	8003f54 <genSetLength>
 8001d90:	4604      	mov	r4, r0
	if(error>0){
 8001d92:	2c00      	cmp	r4, #0
 8001d94:	d1e3      	bne.n	8001d5e <parseGeneratorCmd+0x1a6>
 8001d96:	e775      	b.n	8001c84 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <parseGeneratorCmd+0x344>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01a      	beq.n	8001dd4 <parseGeneratorCmd+0x21c>
 8001d9e:	f200 8114 	bhi.w	8001fca <parseGeneratorCmd+0x412>
 8001da2:	f102 4275 	add.w	r2, r2, #4110417920	; 0xf5000000
 8001da6:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8001daa:	f202 220e 	addw	r2, r2, #526	; 0x20e
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00c      	beq.n	8001dcc <parseGeneratorCmd+0x214>
 8001db2:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
 8001db6:	f202 1201 	addw	r2, r2, #257	; 0x101
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	f040 8110 	bne.w	8001fe0 <parseGeneratorCmd+0x428>
		genStart();
 8001dc0:	f002 fa0c 	bl	80041dc <genStart>
		genStatusOK();
 8001dc4:	f002 f8ac 	bl	8003f20 <genStatusOK>
		cmdIn=CMD_END;
 8001dc8:	4841      	ldr	r0, [pc, #260]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001dca:	e704      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
		genReset();
 8001dcc:	f002 fa2a 	bl	8004224 <genReset>
		cmdIn=CMD_END;
 8001dd0:	483f      	ldr	r0, [pc, #252]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001dd2:	e700      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	2105      	movs	r1, #5
 8001dd8:	f000 fa7e 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001ddc:	2803      	cmp	r0, #3
 8001dde:	d851      	bhi.n	8001e84 <parseGeneratorCmd+0x2cc>
	}else if(bytesRead == 0){
 8001de0:	2800      	cmp	r0, #0
 8001de2:	f645 7244 	movw	r2, #24388	; 0x5f44
 8001de6:	f644 6345 	movw	r3, #20037	; 0x4e45
 8001dea:	f645 7152 	movw	r1, #24402	; 0x5f52
 8001dee:	f245 2045 	movw	r0, #21061	; 0x5245
 8001df2:	bf04      	itt	eq
 8001df4:	4611      	moveq	r1, r2
 8001df6:	4618      	moveq	r0, r3
		error=genSetDAC((uint16_t)(cmdIn),(uint16_t)(cmdIn>>16));
 8001df8:	f002 f928 	bl	800404c <genSetDAC>
 8001dfc:	4604      	mov	r4, r0
		genStatusOK();
 8001dfe:	f002 f88f 	bl	8003f20 <genStatusOK>
	if(error>0){
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	d1ab      	bne.n	8001d5e <parseGeneratorCmd+0x1a6>
 8001e06:	e73d      	b.n	8001c84 <parseGeneratorCmd+0xcc>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001e08:	4628      	mov	r0, r5
 8001e0a:	2105      	movs	r1, #5
 8001e0c:	f000 fa64 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001e10:	2803      	cmp	r0, #3
 8001e12:	f67f af37 	bls.w	8001c84 <parseGeneratorCmd+0xcc>
 8001e16:	9a02      	ldr	r2, [sp, #8]
		if(isChannel(cmdIn)){
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <parseGeneratorCmd+0x348>)
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	f63f af31 	bhi.w	8001c84 <parseGeneratorCmd+0xcc>
			if(cmdIn == CMD_CHANNELS_1){
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <parseGeneratorCmd+0x34c>)
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f000 80c8 	beq.w	8001fba <parseGeneratorCmd+0x402>
			}else if(cmdIn == CMD_CHANNELS_2){
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <parseGeneratorCmd+0x350>)
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f000 80d9 	beq.w	8001fe4 <parseGeneratorCmd+0x42c>
			}else if(cmdIn == CMD_CHANNELS_3){
 8001e32:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <parseGeneratorCmd+0x354>)
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 80b3 	bne.w	8001fa0 <parseGeneratorCmd+0x3e8>
				error=genSetNumOfChannels(3);
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f002 f8be 	bl	8003fbc <genSetNumOfChannels>
 8001e40:	4604      	mov	r4, r0
	if(error>0){
 8001e42:	2c00      	cmp	r4, #0
 8001e44:	d18b      	bne.n	8001d5e <parseGeneratorCmd+0x1a6>
 8001e46:	e71d      	b.n	8001c84 <parseGeneratorCmd+0xcc>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <parseGeneratorCmd+0x358>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	4629      	mov	r1, r5
		passMsg = MSG_GEN_PWM_CONFIG;
 8001e4e:	2420      	movs	r4, #32
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001e50:	2300      	movs	r3, #0
 8001e52:	f04f 32ff 	mov.w	r2, #4294967295
		passMsg = MSG_GEN_PWM_CONFIG;
 8001e56:	f8ad 4008 	strh.w	r4, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001e5a:	f00a fa63 	bl	800c324 <xQueueGenericSend>
		cmdIn=CMD_END;
 8001e5e:	481c      	ldr	r0, [pc, #112]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001e60:	e711      	b.n	8001c86 <parseGeneratorCmd+0xce>
		genUnsetOutputBuffer();
 8001e62:	f002 f8f1 	bl	8004048 <genUnsetOutputBuffer>
		cmdIn=CMD_END;
 8001e66:	481a      	ldr	r0, [pc, #104]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001e68:	e6b5      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
		genSendRealSamplingFreq();
 8001e6a:	f002 f82b 	bl	8003ec4 <genSendRealSamplingFreq>
		cmdIn=CMD_END;
 8001e6e:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <parseGeneratorCmd+0x318>)
 8001e70:	e6b1      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001e72:	2105      	movs	r1, #5
 8001e74:	4628      	mov	r0, r5
 8001e76:	f000 fa2f 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001e7a:	2803      	cmp	r0, #3
 8001e7c:	d80f      	bhi.n	8001e9e <parseGeneratorCmd+0x2e6>
		secondHalfOfDouble = commBufferReadUInt32();
 8001e7e:	f000 fa83 	bl	8002388 <commBufferReadUInt32>
 8001e82:	e6ff      	b.n	8001c84 <parseGeneratorCmd+0xcc>
 8001e84:	9902      	ldr	r1, [sp, #8]
 8001e86:	b288      	uxth	r0, r1
 8001e88:	0c09      	lsrs	r1, r1, #16
 8001e8a:	e7b5      	b.n	8001df8 <parseGeneratorCmd+0x240>
 8001e8c:	9b02      	ldr	r3, [sp, #8]
 8001e8e:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8001e92:	ba5f      	rev16	r7, r3
 8001e94:	004e      	lsls	r6, r1, #1
 8001e96:	4688      	mov	r8, r1
 8001e98:	b2bf      	uxth	r7, r7
 8001e9a:	0e1b      	lsrs	r3, r3, #24
 8001e9c:	e72f      	b.n	8001cfe <parseGeneratorCmd+0x146>
 8001e9e:	9e02      	ldr	r6, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001ea0:	4c0b      	ldr	r4, [pc, #44]	; (8001ed0 <parseGeneratorCmd+0x318>)
		secondHalfOfDouble = commBufferReadUInt32();
 8001ea2:	f000 fa71 	bl	8002388 <commBufferReadUInt32>
	makeArray[0] = word1;
 8001ea6:	e9cd 0602 	strd	r0, r6, [sp, #8]
	memcpy(&doubleVal, makeArray, sizeof(doubleVal));
 8001eaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001eae:	466b      	mov	r3, sp
 8001eb0:	e883 0003 	stmia.w	r3, {r0, r1}
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001eb4:	42a6      	cmp	r6, r4
	return doubleVal;
 8001eb6:	ed9d 0b00 	vldr	d0, [sp]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001eba:	f43f aee3 	beq.w	8001c84 <parseGeneratorCmd+0xcc>
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <parseGeneratorCmd+0x32c>)
 8001ec0:	429e      	cmp	r6, r3
 8001ec2:	f43f aedf 	beq.w	8001c84 <parseGeneratorCmd+0xcc>
			genPwmSetFrequency(freq, 0);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f001 ff70 	bl	8003dac <genPwmSetFrequency>
		cmdIn=CMD_END;
 8001ecc:	4620      	mov	r0, r4
 8001ece:	e682      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
 8001ed0:	5f444e45 	.word	0x5f444e45
 8001ed4:	464f5f42 	.word	0x464f5f42
 8001ed8:	3f464350 	.word	0x3f464350
 8001edc:	31524647 	.word	0x31524647
 8001ee0:	3248434c 	.word	0x3248434c
 8001ee4:	5f525245 	.word	0x5f525245
 8001ee8:	51455246 	.word	0x51455246
 8001eec:	4e4f5f42 	.word	0x4e4f5f42
 8001ef0:	3f515246 	.word	0x3f515246
 8001ef4:	41544144 	.word	0x41544144
 8001ef8:	5f4d5750 	.word	0x5f4d5750
 8001efc:	5f434144 	.word	0x5f434144
 8001f00:	a0b7bccf 	.word	0xa0b7bccf
 8001f04:	5f484331 	.word	0x5f484331
 8001f08:	5f484332 	.word	0x5f484332
 8001f0c:	5f484333 	.word	0x5f484333
 8001f10:	20004cb4 	.word	0x20004cb4
	switch(cmdIn){
 8001f14:	f5a2 2220 	sub.w	r2, r2, #655360	; 0xa0000
 8001f18:	f2a2 22fb 	subw	r2, r2, #763	; 0x2fb
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d15f      	bne.n	8001fe0 <parseGeneratorCmd+0x428>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8001f20:	4628      	mov	r0, r5
 8001f22:	2105      	movs	r1, #5
 8001f24:	f000 f9d8 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 8001f28:	2803      	cmp	r0, #3
 8001f2a:	f67f aeab 	bls.w	8001c84 <parseGeneratorCmd+0xcc>
 8001f2e:	9802      	ldr	r0, [sp, #8]
		if(cmdIn != CMD_END && cmdIn != CMD_ERR){
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <parseGeneratorCmd+0x444>)
 8001f32:	4298      	cmp	r0, r3
 8001f34:	f43f aea6 	beq.w	8001c84 <parseGeneratorCmd+0xcc>
 8001f38:	4b31      	ldr	r3, [pc, #196]	; (8002000 <parseGeneratorCmd+0x448>)
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	f43f aea2 	beq.w	8001c84 <parseGeneratorCmd+0xcc>
			error=genSetLength(cmdIn, 1);
 8001f40:	2101      	movs	r1, #1
 8001f42:	f002 f807 	bl	8003f54 <genSetLength>
 8001f46:	4604      	mov	r4, r0
	if(error>0){
 8001f48:	2c00      	cmp	r4, #0
 8001f4a:	f47f af08 	bne.w	8001d5e <parseGeneratorCmd+0x1a6>
 8001f4e:	e699      	b.n	8001c84 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001f50:	f102 427b 	add.w	r2, r2, #4211081216	; 0xfb000000
 8001f54:	f502 3242 	add.w	r2, r2, #198656	; 0x30800
 8001f58:	3204      	adds	r2, #4
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d140      	bne.n	8001fe0 <parseGeneratorCmd+0x428>
		generator_deinit();
 8001f5e:	f001 ff15 	bl	8003d8c <generator_deinit>
		cmdIn=CMD_END;
 8001f62:	4826      	ldr	r0, [pc, #152]	; (8001ffc <parseGeneratorCmd+0x444>)
 8001f64:	e637      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
	switch(cmdIn){
 8001f66:	f5a2 2220 	sub.w	r2, r2, #655360	; 0xa0000
 8001f6a:	f6a2 4203 	subw	r2, r2, #3075	; 0xc03
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d136      	bne.n	8001fe0 <parseGeneratorCmd+0x428>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <parseGeneratorCmd+0x44c>)
 8001f74:	4629      	mov	r1, r5
 8001f76:	6818      	ldr	r0, [r3, #0]
		passMsg = MSG_GEN_CONFIG;
 8001f78:	241f      	movs	r4, #31
 8001f7a:	e769      	b.n	8001e50 <parseGeneratorCmd+0x298>
			error=genSetData(index,length*2,chan);
 8001f7c:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8001f80:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8001f84:	4638      	mov	r0, r7
 8001f86:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001f8a:	f001 ff35 	bl	8003df8 <genSetData>
			if (error){
 8001f8e:	4604      	mov	r4, r0
 8001f90:	b380      	cbz	r0, 8001ff4 <parseGeneratorCmd+0x43c>
				while(commBufferReadByte(&chan)==0);
 8001f92:	4628      	mov	r0, r5
 8001f94:	f000 f974 	bl	8002280 <commBufferReadByte>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d0fa      	beq.n	8001f92 <parseGeneratorCmd+0x3da>
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	e6df      	b.n	8001d60 <parseGeneratorCmd+0x1a8>
				error=genSetNumOfChannels(4);
 8001fa0:	2004      	movs	r0, #4
 8001fa2:	f002 f80b 	bl	8003fbc <genSetNumOfChannels>
 8001fa6:	4604      	mov	r4, r0
	if(error>0){
 8001fa8:	2c00      	cmp	r4, #0
 8001faa:	f47f aed8 	bne.w	8001d5e <parseGeneratorCmd+0x1a6>
 8001fae:	e669      	b.n	8001c84 <parseGeneratorCmd+0xcc>
				genSetMode(GEN_PWM);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f001 fec7 	bl	8003d44 <genSetMode>
		cmdIn=CMD_END;
 8001fb6:	4811      	ldr	r0, [pc, #68]	; (8001ffc <parseGeneratorCmd+0x444>)
 8001fb8:	e60d      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
				error=genSetNumOfChannels(1);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f001 fffe 	bl	8003fbc <genSetNumOfChannels>
 8001fc0:	4604      	mov	r4, r0
	if(error>0){
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	f47f aecb 	bne.w	8001d5e <parseGeneratorCmd+0x1a6>
 8001fc8:	e65c      	b.n	8001c84 <parseGeneratorCmd+0xcc>
	switch(cmdIn){
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <parseGeneratorCmd+0x444>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	f43f ae59 	beq.w	8001c84 <parseGeneratorCmd+0xcc>
 8001fd2:	f502 221f 	add.w	r2, r2, #651264	; 0x9f000
 8001fd6:	f202 7202 	addw	r2, r2, #1794	; 0x702
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	f43f ae52 	beq.w	8001c84 <parseGeneratorCmd+0xcc>
 8001fe0:	2064      	movs	r0, #100	; 0x64
 8001fe2:	e5f8      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
				error=genSetNumOfChannels(2);
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f001 ffe9 	bl	8003fbc <genSetNumOfChannels>
 8001fea:	4604      	mov	r4, r0
	if(error>0){
 8001fec:	2c00      	cmp	r4, #0
 8001fee:	f47f aeb6 	bne.w	8001d5e <parseGeneratorCmd+0x1a6>
 8001ff2:	e647      	b.n	8001c84 <parseGeneratorCmd+0xcc>
				genDataOKSendNext();
 8001ff4:	f001 ff82 	bl	8003efc <genDataOKSendNext>
		cmdIn=CMD_END;
 8001ff8:	4800      	ldr	r0, [pc, #0]	; (8001ffc <parseGeneratorCmd+0x444>)
 8001ffa:	e5ec      	b.n	8001bd6 <parseGeneratorCmd+0x1e>
 8001ffc:	5f444e45 	.word	0x5f444e45
 8002000:	5f525245 	.word	0x5f525245
 8002004:	20004cb4 	.word	0x20004cb4

08002008 <CmdParserTask>:
void CmdParserTask(void const *argument){
 8002008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200c:	b085      	sub	sp, #20
	uint16_t message = 0xFFFF;
 800200e:	f10d 0910 	add.w	r9, sp, #16
 8002012:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8002016:	2200      	movs	r2, #0
 8002018:	2102      	movs	r1, #2
 800201a:	2020      	movs	r0, #32
	uint16_t message = 0xFFFF;
 800201c:	f829 3d0a 	strh.w	r3, [r9, #-10]!
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 8002020:	f00a f93c 	bl	800c29c <xQueueGenericCreate>
 8002024:	f8df a250 	ldr.w	sl, [pc, #592]	; 8002278 <CmdParserTask+0x270>
				switch (BUILD_CMD(cmdIn)){
 8002028:	f8df b250 	ldr.w	fp, [pc, #592]	; 800227c <CmdParserTask+0x274>
	cmdParserMessageQueue = xQueueCreate(32, sizeof(message)/sizeof(uint8_t));
 800202c:	f8ca 0000 	str.w	r0, [sl]
 8002030:	e001      	b.n	8002036 <CmdParserTask+0x2e>
 8002032:	f8da 0000 	ldr.w	r0, [sl]
		xQueueReceive(cmdParserMessageQueue, &message, portMAX_DELAY);
 8002036:	2300      	movs	r3, #0
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	4649      	mov	r1, r9
 800203e:	f00a fc19 	bl	800c874 <xQueueGenericReceive>
		if(message == MSG_COMMS_TRY_PARSE){//parsing of command
 8002042:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002046:	2b32      	cmp	r3, #50	; 0x32
 8002048:	d1f3      	bne.n	8002032 <CmdParserTask+0x2a>
 800204a:	46a0      	mov	r8, r4
 800204c:	462c      	mov	r4, r5
 800204e:	4635      	mov	r5, r6
 8002050:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8002054:	e003      	b.n	800205e <CmdParserTask+0x56>
 8002056:	46a0      	mov	r8, r4
 8002058:	462c      	mov	r4, r5
 800205a:	4635      	mov	r5, r6
 800205c:	461e      	mov	r6, r3
				byteRead = commBufferReadByte(&chr);
 800205e:	f10d 0005 	add.w	r0, sp, #5
 8002062:	f000 f90d 	bl	8002280 <commBufferReadByte>
			}while(byteRead==0 && chr != ':' && chr != ';');
 8002066:	2800      	cmp	r0, #0
 8002068:	d1e3      	bne.n	8002032 <CmdParserTask+0x2a>
 800206a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800206e:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
 8002072:	2a01      	cmp	r2, #1
 8002074:	d8ef      	bhi.n	8002056 <CmdParserTask+0x4e>
				switch (BUILD_CMD(cmdIn)){
 8002076:	042b      	lsls	r3, r5, #16
 8002078:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800207c:	ea43 0808 	orr.w	r8, r3, r8
 8002080:	ea48 2804 	orr.w	r8, r8, r4, lsl #8
 8002084:	45d8      	cmp	r8, fp
 8002086:	4607      	mov	r7, r0
 8002088:	d06c      	beq.n	8002164 <CmdParserTask+0x15c>
 800208a:	dc16      	bgt.n	80020ba <CmdParserTask+0xb2>
 800208c:	4b70      	ldr	r3, [pc, #448]	; (8002250 <CmdParserTask+0x248>)
 800208e:	4598      	cmp	r8, r3
 8002090:	f000 80a6 	beq.w	80021e0 <CmdParserTask+0x1d8>
 8002094:	dc3a      	bgt.n	800210c <CmdParserTask+0x104>
 8002096:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <CmdParserTask+0x24c>)
 8002098:	4598      	cmp	r8, r3
 800209a:	f000 80a4 	beq.w	80021e6 <CmdParserTask+0x1de>
 800209e:	4b6e      	ldr	r3, [pc, #440]	; (8002258 <CmdParserTask+0x250>)
 80020a0:	4598      	cmp	r8, r3
 80020a2:	d175      	bne.n	8002190 <CmdParserTask+0x188>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80020a4:	463b      	mov	r3, r7
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80020a6:	486d      	ldr	r0, [pc, #436]	; (800225c <CmdParserTask+0x254>)
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	a902      	add	r1, sp, #8
 80020ae:	6800      	ldr	r0, [r0, #0]
					passMsg = MSG_SYSTEM_VERSION;
 80020b0:	f8ad 7008 	strh.w	r7, [sp, #8]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80020b4:	f00a f936 	bl	800c324 <xQueueGenericSend>
					break;
 80020b8:	e7bb      	b.n	8002032 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 80020ba:	4b69      	ldr	r3, [pc, #420]	; (8002260 <CmdParserTask+0x258>)
 80020bc:	4598      	cmp	r8, r3
 80020be:	d059      	beq.n	8002174 <CmdParserTask+0x16c>
 80020c0:	dc40      	bgt.n	8002144 <CmdParserTask+0x13c>
 80020c2:	f103 437b 	add.w	r3, r3, #4211081216	; 0xfb000000
 80020c6:	f503 037b 	add.w	r3, r3, #16449536	; 0xfb0000
 80020ca:	4598      	cmp	r8, r3
 80020cc:	d075      	beq.n	80021ba <CmdParserTask+0x1b2>
 80020ce:	f103 733f 	add.w	r3, r3, #50069504	; 0x2fc0000
 80020d2:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 80020d6:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80020da:	4598      	cmp	r8, r3
 80020dc:	d158      	bne.n	8002190 <CmdParserTask+0x188>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80020de:	2105      	movs	r1, #5
 80020e0:	a802      	add	r0, sp, #8
 80020e2:	f000 f8f9 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 80020e6:	2803      	cmp	r0, #3
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 80020e8:	4603      	mov	r3, r0
	if(bytesRead >= 4){
 80020ea:	f200 809d 	bhi.w	8002228 <CmdParserTask+0x220>
 80020ee:	4a5b      	ldr	r2, [pc, #364]	; (800225c <CmdParserTask+0x254>)
 80020f0:	6810      	ldr	r0, [r2, #0]
	}else if(bytesRead == 0){
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8083 	bne.w	80021fe <CmdParserTask+0x1f6>
		uint16_t passMsg = MSG_ACK;
 80020f8:	2735      	movs	r7, #53	; 0x35
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 80020fa:	2300      	movs	r3, #0
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	a902      	add	r1, sp, #8
		err[0]=ERROR_PREFIX;
 8002102:	f8ad 7008 	strh.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002106:	f00a f90d 	bl	800c324 <xQueueGenericSend>
 800210a:	e792      	b.n	8002032 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 800210c:	4b55      	ldr	r3, [pc, #340]	; (8002264 <CmdParserTask+0x25c>)
 800210e:	4598      	cmp	r8, r3
 8002110:	d05b      	beq.n	80021ca <CmdParserTask+0x1c2>
 8002112:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002116:	f203 63f9 	addw	r3, r3, #1785	; 0x6f9
 800211a:	4598      	cmp	r8, r3
 800211c:	d138      	bne.n	8002190 <CmdParserTask+0x188>
					tempCmd = parseLogAnlysCmd();
 800211e:	f7ff fbc7 	bl	80018b0 <parseLogAnlysCmd>
	if(cmd == CMD_END){
 8002122:	4b51      	ldr	r3, [pc, #324]	; (8002268 <CmdParserTask+0x260>)
 8002124:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002126:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 8002128:	d01a      	beq.n	8002160 <CmdParserTask+0x158>
		err[1]=cmd;
 800212a:	f88d 0009 	strb.w	r0, [sp, #9]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 800212e:	484b      	ldr	r0, [pc, #300]	; (800225c <CmdParserTask+0x254>)
		err[0]=ERROR_PREFIX;
 8002130:	2745      	movs	r7, #69	; 0x45
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	a902      	add	r1, sp, #8
 8002138:	6800      	ldr	r0, [r0, #0]
		err[0]=ERROR_PREFIX;
 800213a:	f88d 7008 	strb.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, err, portMAX_DELAY);
 800213e:	f00a f8f1 	bl	800c324 <xQueueGenericSend>
 8002142:	e776      	b.n	8002032 <CmdParserTask+0x2a>
				switch (BUILD_CMD(cmdIn)){
 8002144:	4b49      	ldr	r3, [pc, #292]	; (800226c <CmdParserTask+0x264>)
 8002146:	4598      	cmp	r8, r3
 8002148:	d042      	beq.n	80021d0 <CmdParserTask+0x1c8>
 800214a:	f503 23c1 	add.w	r3, r3, #395264	; 0x60800
 800214e:	33fc      	adds	r3, #252	; 0xfc
 8002150:	4598      	cmp	r8, r3
 8002152:	d11d      	bne.n	8002190 <CmdParserTask+0x188>
					tempCmd = parseCounterCmd();
 8002154:	f7fe fd50 	bl	8000bf8 <parseCounterCmd>
	if(cmd == CMD_END){
 8002158:	4b43      	ldr	r3, [pc, #268]	; (8002268 <CmdParserTask+0x260>)
 800215a:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800215c:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 800215e:	d1e4      	bne.n	800212a <CmdParserTask+0x122>
		uint16_t passMsg = MSG_ACK;
 8002160:	2735      	movs	r7, #53	; 0x35
 8002162:	e7a0      	b.n	80020a6 <CmdParserTask+0x9e>
					tempCmd = parseScopeCmd();
 8002164:	f7fe ff92 	bl	800108c <parseScopeCmd>
	if(cmd == CMD_END){
 8002168:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <CmdParserTask+0x260>)
 800216a:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800216c:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 800216e:	d1dc      	bne.n	800212a <CmdParserTask+0x122>
		uint16_t passMsg = MSG_ACK;
 8002170:	2735      	movs	r7, #53	; 0x35
 8002172:	e798      	b.n	80020a6 <CmdParserTask+0x9e>
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 8002174:	2105      	movs	r1, #5
 8002176:	a802      	add	r0, sp, #8
 8002178:	f000 f8ae 	bl	80022d8 <commBufferReadNBytes>
	if(bytesRead >= 4){
 800217c:	2803      	cmp	r0, #3
	uint8_t bytesRead = commBufferReadNBytes(cmdNext, 5);
 800217e:	4603      	mov	r3, r0
	if(bytesRead >= 4){
 8002180:	d840      	bhi.n	8002204 <CmdParserTask+0x1fc>
 8002182:	4a36      	ldr	r2, [pc, #216]	; (800225c <CmdParserTask+0x254>)
 8002184:	6810      	ldr	r0, [r2, #0]
	}else if(bytesRead == 0){
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0b6      	beq.n	80020f8 <CmdParserTask+0xf0>
		err[0]=ERROR_PREFIX;
 800218a:	f240 1745 	movw	r7, #325	; 0x145
 800218e:	e7b4      	b.n	80020fa <CmdParserTask+0xf2>
					xQueueSendToBack(messageQueue, UNSUPORTED_FUNCTION_ERR_STR, portMAX_DELAY);
 8002190:	4832      	ldr	r0, [pc, #200]	; (800225c <CmdParserTask+0x254>)
 8002192:	4937      	ldr	r1, [pc, #220]	; (8002270 <CmdParserTask+0x268>)
 8002194:	6800      	ldr	r0, [r0, #0]
 8002196:	2300      	movs	r3, #0
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	f00a f8c2 	bl	800c324 <xQueueGenericSend>
					while(commBufferReadByte(&chr)==0 && chr!=';');
 80021a0:	e004      	b.n	80021ac <CmdParserTask+0x1a4>
 80021a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80021a6:	2b3b      	cmp	r3, #59	; 0x3b
 80021a8:	f43f af43 	beq.w	8002032 <CmdParserTask+0x2a>
 80021ac:	f10d 0005 	add.w	r0, sp, #5
 80021b0:	f000 f866 	bl	8002280 <commBufferReadByte>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d0f4      	beq.n	80021a2 <CmdParserTask+0x19a>
 80021b8:	e73b      	b.n	8002032 <CmdParserTask+0x2a>
					tempCmd = parseSyncPwmCmd();
 80021ba:	f7ff fa77 	bl	80016ac <parseSyncPwmCmd>
	if(cmd == CMD_END){
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <CmdParserTask+0x260>)
 80021c0:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021c2:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 80021c4:	d1b1      	bne.n	800212a <CmdParserTask+0x122>
		uint16_t passMsg = MSG_ACK;
 80021c6:	2735      	movs	r7, #53	; 0x35
 80021c8:	e76d      	b.n	80020a6 <CmdParserTask+0x9e>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021ca:	463b      	mov	r3, r7
					passMsg = MSG_SHIELD_AVAIL;
 80021cc:	2704      	movs	r7, #4
 80021ce:	e76a      	b.n	80020a6 <CmdParserTask+0x9e>
					tempCmd = parseGeneratorCmd();
 80021d0:	f7ff fcf2 	bl	8001bb8 <parseGeneratorCmd>
	if(cmd == CMD_END){
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <CmdParserTask+0x260>)
 80021d6:	4298      	cmp	r0, r3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021d8:	463b      	mov	r3, r7
	if(cmd == CMD_END){
 80021da:	d1a6      	bne.n	800212a <CmdParserTask+0x122>
		uint16_t passMsg = MSG_ACK;
 80021dc:	2735      	movs	r7, #53	; 0x35
 80021de:	e762      	b.n	80020a6 <CmdParserTask+0x9e>
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80021e0:	463b      	mov	r3, r7
					passMsg = MSG_SYSTEM_VERSION;
 80021e2:	2701      	movs	r7, #1
 80021e4:	e75f      	b.n	80020a6 <CmdParserTask+0x9e>
					resetDevice();
 80021e6:	f00c fc91 	bl	800eb0c <resetDevice>
					break;
 80021ea:	e722      	b.n	8002032 <CmdParserTask+0x2a>
	switch(cmdIn){
 80021ec:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 80021f0:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 80021f4:	f602 0202 	addw	r2, r2, #2050	; 0x802
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f43f af7d 	beq.w	80020f8 <CmdParserTask+0xf0>
		err[0]=ERROR_PREFIX;
 80021fe:	f240 2745 	movw	r7, #581	; 0x245
 8002202:	e77a      	b.n	80020fa <CmdParserTask+0xf2>
 8002204:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 8002206:	4a1b      	ldr	r2, [pc, #108]	; (8002274 <CmdParserTask+0x26c>)
 8002208:	4914      	ldr	r1, [pc, #80]	; (800225c <CmdParserTask+0x254>)
 800220a:	4293      	cmp	r3, r2
 800220c:	6808      	ldr	r0, [r1, #0]
 800220e:	d114      	bne.n	800223a <CmdParserTask+0x232>
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002210:	463b      	mov	r3, r7
		passMsg = MSG_SYSTEM_CONFIG;
 8002212:	2702      	movs	r7, #2
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	a902      	add	r1, sp, #8
		passMsg = MSG_COMMS_CONFIG;
 800221a:	f8ad 7008 	strh.w	r7, [sp, #8]
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800221e:	f00a f881 	bl	800c324 <xQueueGenericSend>
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <CmdParserTask+0x254>)
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	e767      	b.n	80020f8 <CmdParserTask+0xf0>
 8002228:	9b02      	ldr	r3, [sp, #8]
	switch(cmdIn){
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <CmdParserTask+0x26c>)
 800222c:	490b      	ldr	r1, [pc, #44]	; (800225c <CmdParserTask+0x254>)
 800222e:	4293      	cmp	r3, r2
 8002230:	6808      	ldr	r0, [r1, #0]
 8002232:	d1db      	bne.n	80021ec <CmdParserTask+0x1e4>
		passMsg = MSG_COMMS_CONFIG;
 8002234:	2703      	movs	r7, #3
		xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8002236:	2300      	movs	r3, #0
 8002238:	e7ec      	b.n	8002214 <CmdParserTask+0x20c>
	switch(cmdIn){
 800223a:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 800223e:	f502 12e8 	add.w	r2, r2, #1900544	; 0x1d0000
 8002242:	f602 0202 	addw	r2, r2, #2050	; 0x802
 8002246:	4293      	cmp	r3, r2
 8002248:	f43f af56 	beq.w	80020f8 <CmdParserTask+0xf0>
 800224c:	e79d      	b.n	800218a <CmdParserTask+0x182>
 800224e:	bf00      	nop
 8002250:	3f524556 	.word	0x3f524556
 8002254:	21534552 	.word	0x21534552
 8002258:	3f4e4449 	.word	0x3f4e4449
 800225c:	20004cb4 	.word	0x20004cb4
 8002260:	54535953 	.word	0x54535953
 8002264:	3f5f4853 	.word	0x3f5f4853
 8002268:	5f444e45 	.word	0x5f444e45
 800226c:	5f4e4547 	.word	0x5f4e4547
 8002270:	08014be8 	.word	0x08014be8
 8002274:	3f474643 	.word	0x3f474643
 8002278:	20004cb0 	.word	0x20004cb0
 800227c:	5043534f 	.word	0x5043534f

08002280 <commBufferReadByte>:
 * @brief  Read byte from coms buffer
 * @param  pointer where byte will be written
 * @retval 0 success, 1 error - buffer empty
 */
uint8_t commBufferReadByte(uint8_t *ret){
	if(comm.state == BUFF_EMPTY){
 8002280:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <commBufferReadByte+0x50>)
 8002282:	7a91      	ldrb	r1, [r2, #10]
 8002284:	b1b1      	cbz	r1, 80022b4 <commBufferReadByte+0x34>
uint8_t commBufferReadByte(uint8_t *ret){
 8002286:	b4f0      	push	{r4, r5, r6, r7}
		return 1;
	}else{
		*ret = *(comm.memory + comm.readPointer);
 8002288:	8915      	ldrh	r5, [r2, #8]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <commBufferReadByte+0x54>)
		*ret = *(comm.memory + comm.readPointer);
 800228c:	6814      	ldr	r4, [r2, #0]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800228e:	1c6e      	adds	r6, r5, #1
 8002290:	fba3 7306 	umull	r7, r3, r3, r6
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	f240 57dc 	movw	r7, #1500	; 0x5dc
 800229a:	fb07 6313 	mls	r3, r7, r3, r6
 800229e:	b29b      	uxth	r3, r3
		*ret = *(comm.memory + comm.readPointer);
 80022a0:	5d64      	ldrb	r4, [r4, r5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022a2:	8113      	strh	r3, [r2, #8]
		if(comm.state == BUFF_FULL){
 80022a4:	2902      	cmp	r1, #2
		*ret = *(comm.memory + comm.readPointer);
 80022a6:	7004      	strb	r4, [r0, #0]
		if(comm.state == BUFF_FULL){
 80022a8:	d006      	beq.n	80022b8 <commBufferReadByte+0x38>
			comm.state = BUFF_DATA;
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022aa:	2901      	cmp	r1, #1
 80022ac:	d009      	beq.n	80022c2 <commBufferReadByte+0x42>
			comm.state = BUFF_EMPTY;
		}
		return 0;
 80022ae:	2000      	movs	r0, #0
	}
}
 80022b0:	bcf0      	pop	{r4, r5, r6, r7}
 80022b2:	4770      	bx	lr
		return 1;
 80022b4:	2001      	movs	r0, #1
}
 80022b6:	4770      	bx	lr
			comm.state = BUFF_DATA;
 80022b8:	2301      	movs	r3, #1
		return 0;
 80022ba:	2000      	movs	r0, #0
			comm.state = BUFF_DATA;
 80022bc:	7293      	strb	r3, [r2, #10]
}
 80022be:	bcf0      	pop	{r4, r5, r6, r7}
 80022c0:	4770      	bx	lr
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022c2:	88d1      	ldrh	r1, [r2, #6]
 80022c4:	4299      	cmp	r1, r3
			comm.state = BUFF_EMPTY;
 80022c6:	f04f 0000 	mov.w	r0, #0
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022ca:	d1f1      	bne.n	80022b0 <commBufferReadByte+0x30>
			comm.state = BUFF_EMPTY;
 80022cc:	7290      	strb	r0, [r2, #10]
 80022ce:	e7ef      	b.n	80022b0 <commBufferReadByte+0x30>
 80022d0:	2000020c 	.word	0x2000020c
 80022d4:	057619f1 	.word	0x057619f1

080022d8 <commBufferReadNBytes>:
 * @brief  Read N bytes from coms buffer
 * @param  pointer where bytes will be written and number of bytes to read
 * @retval Number of bytes read
 */
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
	for(uint16_t i = 0; i < count; i++){
 80022d8:	2900      	cmp	r1, #0
 80022da:	d049      	beq.n	8002370 <commBufferReadNBytes+0x98>
uint8_t commBufferReadNBytes(uint8_t *mem, uint16_t count){
 80022dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(comm.state == BUFF_EMPTY){
 80022e0:	4e27      	ldr	r6, [pc, #156]	; (8002380 <commBufferReadNBytes+0xa8>)
 80022e2:	7ab4      	ldrb	r4, [r6, #10]
 80022e4:	b34c      	cbz	r4, 800233a <commBufferReadNBytes+0x62>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022e6:	f04f 0800 	mov.w	r8, #0
		*ret = *(comm.memory + comm.readPointer);
 80022ea:	f8d6 e000 	ldr.w	lr, [r6]
 80022ee:	8935      	ldrh	r5, [r6, #8]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80022f0:	f8b6 9006 	ldrh.w	r9, [r6, #6]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022f4:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8002384 <commBufferReadNBytes+0xac>
 80022f8:	3801      	subs	r0, #1
	for(uint16_t i = 0; i < count; i++){
 80022fa:	4643      	mov	r3, r8
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80022fc:	f240 57dc 	movw	r7, #1500	; 0x5dc
 8002300:	f105 0a01 	add.w	sl, r5, #1
 8002304:	fbac b20a 	umull	fp, r2, ip, sl
 8002308:	0952      	lsrs	r2, r2, #5
		*ret = *(comm.memory + comm.readPointer);
 800230a:	f81e 5005 	ldrb.w	r5, [lr, r5]
 800230e:	f800 5f01 	strb.w	r5, [r0, #1]!
 8002312:	3301      	adds	r3, #1
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002314:	fb07 a212 	mls	r2, r7, r2, sl
		if(comm.state == BUFF_FULL){
 8002318:	2c02      	cmp	r4, #2
 800231a:	b29b      	uxth	r3, r3
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800231c:	b295      	uxth	r5, r2
		if(comm.state == BUFF_FULL){
 800231e:	d00f      	beq.n	8002340 <commBufferReadNBytes+0x68>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002320:	2c01      	cmp	r4, #1
 8002322:	d013      	beq.n	800234c <commBufferReadNBytes+0x74>
	for(uint16_t i = 0; i < count; i++){
 8002324:	4299      	cmp	r1, r3
 8002326:	d915      	bls.n	8002354 <commBufferReadNBytes+0x7c>
	if(comm.state == BUFF_EMPTY){
 8002328:	2c00      	cmp	r4, #0
 800232a:	d1e9      	bne.n	8002300 <commBufferReadNBytes+0x28>
 800232c:	8135      	strh	r5, [r6, #8]
 800232e:	f1b8 0f00 	cmp.w	r8, #0
 8002332:	d11f      	bne.n	8002374 <commBufferReadNBytes+0x9c>
 8002334:	b2d8      	uxtb	r0, r3
		if(commBufferReadByte(mem++) == 1){
			return i;
		}
	}
	return count;
}
 8002336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(comm.state == BUFF_EMPTY){
 800233a:	4620      	mov	r0, r4
}
 800233c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(uint16_t i = 0; i < count; i++){
 8002340:	4299      	cmp	r1, r3
 8002342:	d919      	bls.n	8002378 <commBufferReadNBytes+0xa0>
 8002344:	f04f 0801 	mov.w	r8, #1
	if(comm.state == BUFF_EMPTY){
 8002348:	4644      	mov	r4, r8
 800234a:	e7d9      	b.n	8002300 <commBufferReadNBytes+0x28>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 800234c:	454d      	cmp	r5, r9
 800234e:	d008      	beq.n	8002362 <commBufferReadNBytes+0x8a>
	for(uint16_t i = 0; i < count; i++){
 8002350:	4299      	cmp	r1, r3
 8002352:	d8d5      	bhi.n	8002300 <commBufferReadNBytes+0x28>
 8002354:	8135      	strh	r5, [r6, #8]
 8002356:	f1b8 0f00 	cmp.w	r8, #0
 800235a:	d000      	beq.n	800235e <commBufferReadNBytes+0x86>
 800235c:	72b4      	strb	r4, [r6, #10]
	return count;
 800235e:	b2c8      	uxtb	r0, r1
 8002360:	e7ec      	b.n	800233c <commBufferReadNBytes+0x64>
			comm.state = BUFF_EMPTY;
 8002362:	2200      	movs	r2, #0
	for(uint16_t i = 0; i < count; i++){
 8002364:	4299      	cmp	r1, r3
 8002366:	8135      	strh	r5, [r6, #8]
			comm.state = BUFF_EMPTY;
 8002368:	72b2      	strb	r2, [r6, #10]
	for(uint16_t i = 0; i < count; i++){
 800236a:	d9f8      	bls.n	800235e <commBufferReadNBytes+0x86>
 800236c:	b2d8      	uxtb	r0, r3
 800236e:	e7e2      	b.n	8002336 <commBufferReadNBytes+0x5e>
	return count;
 8002370:	b2c8      	uxtb	r0, r1
}
 8002372:	4770      	bx	lr
 8002374:	72b4      	strb	r4, [r6, #10]
 8002376:	e7dd      	b.n	8002334 <commBufferReadNBytes+0x5c>
 8002378:	2301      	movs	r3, #1
 800237a:	8135      	strh	r5, [r6, #8]
 800237c:	72b3      	strb	r3, [r6, #10]
 800237e:	e7ee      	b.n	800235e <commBufferReadNBytes+0x86>
 8002380:	2000020c 	.word	0x2000020c
 8002384:	057619f1 	.word	0x057619f1

08002388 <commBufferReadUInt32>:

uint32_t commBufferReadUInt32(void){
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
		*ret = *(comm.memory + comm.readPointer);
 800238a:	4940      	ldr	r1, [pc, #256]	; (800248c <commBufferReadUInt32+0x104>)
 800238c:	7a8a      	ldrb	r2, [r1, #10]
 800238e:	6808      	ldr	r0, [r1, #0]
 8002390:	890d      	ldrh	r5, [r1, #8]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002392:	88cc      	ldrh	r4, [r1, #6]
uint32_t commBufferReadUInt32(void){
 8002394:	b083      	sub	sp, #12
	if(comm.state == BUFF_EMPTY){
 8002396:	b1e2      	cbz	r2, 80023d2 <commBufferReadUInt32+0x4a>
		*ret = *(comm.memory + comm.readPointer);
 8002398:	5d46      	ldrb	r6, [r0, r5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <commBufferReadUInt32+0x108>)
		*ret = *(comm.memory + comm.readPointer);
 800239c:	f88d 6004 	strb.w	r6, [sp, #4]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023a0:	1c6e      	adds	r6, r5, #1
 80023a2:	fba3 7506 	umull	r7, r5, r3, r6
 80023a6:	096d      	lsrs	r5, r5, #5
 80023a8:	f240 57dc 	movw	r7, #1500	; 0x5dc
 80023ac:	fb07 6515 	mls	r5, r7, r5, r6
		if(comm.state == BUFF_FULL){
 80023b0:	2a02      	cmp	r2, #2
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023b2:	b2ae      	uxth	r6, r5
		if(comm.state == BUFF_FULL){
 80023b4:	d045      	beq.n	8002442 <commBufferReadUInt32+0xba>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023b6:	2a01      	cmp	r2, #1
 80023b8:	d052      	beq.n	8002460 <commBufferReadUInt32+0xd8>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023ba:	1c6e      	adds	r6, r5, #1
 80023bc:	fba3 c306 	umull	ip, r3, r3, r6
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	fb07 6313 	mls	r3, r7, r3, r6
		*ret = *(comm.memory + comm.readPointer);
 80023c6:	5d45      	ldrb	r5, [r0, r5]
 80023c8:	f88d 5005 	strb.w	r5, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023cc:	b29b      	uxth	r3, r3
	if(comm.state == BUFF_EMPTY){
 80023ce:	b91a      	cbnz	r2, 80023d8 <commBufferReadUInt32+0x50>
 80023d0:	810b      	strh	r3, [r1, #8]
	uint8_t array[4];
	commBufferReadNBytes(array, sizeof(array)/sizeof(array[0]));
	uint32_t finalVal = array[0] & 0xFF;
	finalVal |= (0xFF & array[1]) << 8;
	finalVal |= (0xFF & array[2]) << 16;
	finalVal |= (0xFF & array[3]) << 24;
 80023d2:	9801      	ldr	r0, [sp, #4]
	return finalVal;
}
 80023d4:	b003      	add	sp, #12
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(comm.state == BUFF_EMPTY){
 80023d8:	2600      	movs	r6, #0
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023da:	4d2d      	ldr	r5, [pc, #180]	; (8002490 <commBufferReadUInt32+0x108>)
		*ret = *(comm.memory + comm.readPointer);
 80023dc:	5cc7      	ldrb	r7, [r0, r3]
 80023de:	f88d 7006 	strb.w	r7, [sp, #6]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023e2:	3301      	adds	r3, #1
 80023e4:	fba5 c703 	umull	ip, r7, r5, r3
 80023e8:	097f      	lsrs	r7, r7, #5
 80023ea:	f240 5cdc 	movw	ip, #1500	; 0x5dc
 80023ee:	fb0c 3717 	mls	r7, ip, r7, r3
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023f2:	2a01      	cmp	r2, #1
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023f4:	b2bb      	uxth	r3, r7
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80023f6:	d00f      	beq.n	8002418 <commBufferReadUInt32+0x90>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 80023f8:	1c7c      	adds	r4, r7, #1
 80023fa:	fba5 5304 	umull	r5, r3, r5, r4
 80023fe:	095b      	lsrs	r3, r3, #5
		*ret = *(comm.memory + comm.readPointer);
 8002400:	5dc0      	ldrb	r0, [r0, r7]
 8002402:	f88d 0007 	strb.w	r0, [sp, #7]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002406:	fb0c 4313 	mls	r3, ip, r3, r4
		if(comm.state == BUFF_FULL){
 800240a:	2a02      	cmp	r2, #2
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800240c:	b29b      	uxth	r3, r3
		if(comm.state == BUFF_FULL){
 800240e:	d112      	bne.n	8002436 <commBufferReadUInt32+0xae>
 8002410:	810b      	strh	r3, [r1, #8]
			comm.state = BUFF_DATA;
 8002412:	2201      	movs	r2, #1
 8002414:	728a      	strb	r2, [r1, #10]
 8002416:	e7dc      	b.n	80023d2 <commBufferReadUInt32+0x4a>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002418:	429c      	cmp	r4, r3
 800241a:	d02f      	beq.n	800247c <commBufferReadUInt32+0xf4>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 800241c:	f107 0e01 	add.w	lr, r7, #1
 8002420:	fba5 350e 	umull	r3, r5, r5, lr
 8002424:	096b      	lsrs	r3, r5, #5
 8002426:	fb0c e313 	mls	r3, ip, r3, lr
 800242a:	b29b      	uxth	r3, r3
		*ret = *(comm.memory + comm.readPointer);
 800242c:	5dc0      	ldrb	r0, [r0, r7]
 800242e:	f88d 0007 	strb.w	r0, [sp, #7]
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002432:	429c      	cmp	r4, r3
 8002434:	d026      	beq.n	8002484 <commBufferReadUInt32+0xfc>
 8002436:	810b      	strh	r3, [r1, #8]
 8002438:	2e00      	cmp	r6, #0
 800243a:	d1eb      	bne.n	8002414 <commBufferReadUInt32+0x8c>
	finalVal |= (0xFF & array[3]) << 24;
 800243c:	9801      	ldr	r0, [sp, #4]
}
 800243e:	b003      	add	sp, #12
 8002440:	bdf0      	pop	{r4, r5, r6, r7, pc}
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002442:	1c6e      	adds	r6, r5, #1
 8002444:	fba3 3206 	umull	r3, r2, r3, r6
 8002448:	0952      	lsrs	r2, r2, #5
 800244a:	fb07 6312 	mls	r3, r7, r2, r6
		*ret = *(comm.memory + comm.readPointer);
 800244e:	5d42      	ldrb	r2, [r0, r5]
 8002450:	f88d 2005 	strb.w	r2, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002454:	b29b      	uxth	r3, r3
 8002456:	2601      	movs	r6, #1
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002458:	429c      	cmp	r4, r3
 800245a:	d00f      	beq.n	800247c <commBufferReadUInt32+0xf4>
 800245c:	2201      	movs	r2, #1
 800245e:	e7bc      	b.n	80023da <commBufferReadUInt32+0x52>
 8002460:	42b4      	cmp	r4, r6
 8002462:	d00b      	beq.n	800247c <commBufferReadUInt32+0xf4>
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002464:	1c6e      	adds	r6, r5, #1
 8002466:	fba3 3206 	umull	r3, r2, r3, r6
 800246a:	0952      	lsrs	r2, r2, #5
 800246c:	fb07 6312 	mls	r3, r7, r2, r6
		*ret = *(comm.memory + comm.readPointer);
 8002470:	5d42      	ldrb	r2, [r0, r5]
 8002472:	f88d 2005 	strb.w	r2, [sp, #5]
		comm.readPointer = (comm.readPointer + 1) % COMM_BUFFER_SIZE;
 8002476:	b29b      	uxth	r3, r3
 8002478:	2600      	movs	r6, #0
 800247a:	e7ed      	b.n	8002458 <commBufferReadUInt32+0xd0>
 800247c:	2300      	movs	r3, #0
 800247e:	810c      	strh	r4, [r1, #8]
 8002480:	728b      	strb	r3, [r1, #10]
 8002482:	e7a6      	b.n	80023d2 <commBufferReadUInt32+0x4a>
 8002484:	810c      	strh	r4, [r1, #8]
			comm.state = BUFF_EMPTY;
 8002486:	2200      	movs	r2, #0
 8002488:	e7c4      	b.n	8002414 <commBufferReadUInt32+0x8c>
 800248a:	bf00      	nop
 800248c:	2000020c 	.word	0x2000020c
 8002490:	057619f1 	.word	0x057619f1

08002494 <commInputByte>:
/**
 * @brief  Processing of incoming byte
 * @param  incomming byte
 * @retval 0 success, 1 error - buffer full
 */
uint8_t commInputByte(uint8_t chr){
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	492e      	ldr	r1, [pc, #184]	; (8002550 <commInputByte+0xbc>)
	portBASE_TYPE xHigherPriorityTaskWoken;
	uint8_t result=0;	
	if (chr==';'){
 8002498:	283b      	cmp	r0, #59	; 0x3b
uint8_t commInputByte(uint8_t chr){
 800249a:	b082      	sub	sp, #8
 800249c:	7a8b      	ldrb	r3, [r1, #10]
	if (chr==';'){
 800249e:	d01a      	beq.n	80024d6 <commInputByte+0x42>
	if(comm.state == BUFF_FULL){
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d014      	beq.n	80024ce <commInputByte+0x3a>
		*(comm.memory + comm.writePointer) = chr;
 80024a4:	88ce      	ldrh	r6, [r1, #6]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80024a6:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <commInputByte+0xc0>)
		*(comm.memory + comm.writePointer) = chr;
 80024a8:	680d      	ldr	r5, [r1, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80024aa:	1c74      	adds	r4, r6, #1
 80024ac:	fba2 c204 	umull	ip, r2, r2, r4
 80024b0:	0952      	lsrs	r2, r2, #5
		*(comm.memory + comm.writePointer) = chr;
 80024b2:	55a8      	strb	r0, [r5, r6]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80024b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80024b8:	fb00 4212 	mls	r2, r0, r2, r4
 80024bc:	b292      	uxth	r2, r2
 80024be:	80ca      	strh	r2, [r1, #6]
		if(comm.state == BUFF_EMPTY){
 80024c0:	b35b      	cbz	r3, 800251a <commInputByte+0x86>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d02f      	beq.n	8002526 <commInputByte+0x92>
		return 0;
 80024c6:	2400      	movs	r4, #0
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
		return result;
	}else{
		return commBufferStoreByte(chr);
	}
}
 80024c8:	4620      	mov	r0, r4
 80024ca:	b002      	add	sp, #8
 80024cc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 80024ce:	2401      	movs	r4, #1
}
 80024d0:	4620      	mov	r0, r4
 80024d2:	b002      	add	sp, #8
 80024d4:	bd70      	pop	{r4, r5, r6, pc}
	if(comm.state == BUFF_FULL){
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d030      	beq.n	800253c <commInputByte+0xa8>
		*(comm.memory + comm.writePointer) = chr;
 80024da:	88ce      	ldrh	r6, [r1, #6]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80024dc:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <commInputByte+0xc0>)
		*(comm.memory + comm.writePointer) = chr;
 80024de:	680d      	ldr	r5, [r1, #0]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80024e0:	1c74      	adds	r4, r6, #1
 80024e2:	fba2 c204 	umull	ip, r2, r2, r4
 80024e6:	0952      	lsrs	r2, r2, #5
		*(comm.memory + comm.writePointer) = chr;
 80024e8:	55a8      	strb	r0, [r5, r6]
		comm.writePointer = (comm.writePointer + 1) % COMM_BUFFER_SIZE;
 80024ea:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80024ee:	fb00 4212 	mls	r2, r0, r2, r4
 80024f2:	b292      	uxth	r2, r2
 80024f4:	80ca      	strh	r2, [r1, #6]
		if(comm.state == BUFF_EMPTY){
 80024f6:	b1eb      	cbz	r3, 8002534 <commInputByte+0xa0>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d021      	beq.n	8002540 <commInputByte+0xac>
		return 0;
 80024fc:	2400      	movs	r4, #0
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <commInputByte+0xc4>)
		uint16_t passMsg = MSG_COMMS_TRY_PARSE;
 8002500:	2332      	movs	r3, #50	; 0x32
 8002502:	f8ad 3002 	strh.w	r3, [sp, #2]
		xQueueSendToBackFromISR(cmdParserMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8002506:	6810      	ldr	r0, [r2, #0]
 8002508:	2300      	movs	r3, #0
 800250a:	aa01      	add	r2, sp, #4
 800250c:	f10d 0102 	add.w	r1, sp, #2
 8002510:	f00a f91a 	bl	800c748 <xQueueGenericSendFromISR>
}
 8002514:	4620      	mov	r0, r4
 8002516:	b002      	add	sp, #8
 8002518:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800251a:	461c      	mov	r4, r3
			comm.state = BUFF_DATA;
 800251c:	2201      	movs	r2, #1
}
 800251e:	4620      	mov	r0, r4
			comm.state = BUFF_DATA;
 8002520:	728a      	strb	r2, [r1, #10]
}
 8002522:	b002      	add	sp, #8
 8002524:	bd70      	pop	{r4, r5, r6, pc}
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002526:	890b      	ldrh	r3, [r1, #8]
 8002528:	4293      	cmp	r3, r2
 800252a:	d1cc      	bne.n	80024c6 <commInputByte+0x32>
			comm.state = BUFF_FULL;
 800252c:	2302      	movs	r3, #2
 800252e:	728b      	strb	r3, [r1, #10]
		return 0;
 8002530:	2400      	movs	r4, #0
 8002532:	e7cd      	b.n	80024d0 <commInputByte+0x3c>
			comm.state = BUFF_DATA;
 8002534:	2201      	movs	r2, #1
		return 0;
 8002536:	461c      	mov	r4, r3
			comm.state = BUFF_DATA;
 8002538:	728a      	strb	r2, [r1, #10]
 800253a:	e7e0      	b.n	80024fe <commInputByte+0x6a>
		return 1;
 800253c:	2401      	movs	r4, #1
 800253e:	e7de      	b.n	80024fe <commInputByte+0x6a>
		}else if(comm.state == BUFF_DATA && comm.writePointer == comm.readPointer){
 8002540:	890b      	ldrh	r3, [r1, #8]
 8002542:	4293      	cmp	r3, r2
 8002544:	d1da      	bne.n	80024fc <commInputByte+0x68>
			comm.state = BUFF_FULL;
 8002546:	2302      	movs	r3, #2
 8002548:	728b      	strb	r3, [r1, #10]
		return 0;
 800254a:	2400      	movs	r4, #0
 800254c:	e7d7      	b.n	80024fe <commInputByte+0x6a>
 800254e:	bf00      	nop
 8002550:	2000020c 	.word	0x2000020c
 8002554:	057619f1 	.word	0x057619f1
 8002558:	20004cb0 	.word	0x20004cb0

0800255c <getBytesAvailable>:

uint16_t getBytesAvailable(){
	uint16_t result; 
	if(comm.state==BUFF_FULL){
 800255c:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <getBytesAvailable+0x34>)
 800255e:	7a90      	ldrb	r0, [r2, #10]
 8002560:	2802      	cmp	r0, #2
 8002562:	d011      	beq.n	8002588 <getBytesAvailable+0x2c>
		return COMM_BUFFER_SIZE;
	}else if(comm.state==BUFF_EMPTY){
 8002564:	b190      	cbz	r0, 800258c <getBytesAvailable+0x30>
		return 0;
	}else{
		result = (comm.writePointer+COMM_BUFFER_SIZE-comm.readPointer)%COMM_BUFFER_SIZE;
 8002566:	88d3      	ldrh	r3, [r2, #6]
 8002568:	8911      	ldrh	r1, [r2, #8]
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <getBytesAvailable+0x38>)
 800256c:	f203 50dc 	addw	r0, r3, #1500	; 0x5dc
 8002570:	1a43      	subs	r3, r0, r1
 8002572:	fb82 1203 	smull	r1, r2, r2, r3
 8002576:	17d8      	asrs	r0, r3, #31
 8002578:	ebc0 1062 	rsb	r0, r0, r2, asr #5
 800257c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002580:	fb02 3010 	mls	r0, r2, r0, r3
 8002584:	b280      	uxth	r0, r0
		return result;
 8002586:	4770      	bx	lr
		return COMM_BUFFER_SIZE;
 8002588:	f240 50dc 	movw	r0, #1500	; 0x5dc
	}
}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	2000020c 	.word	0x2000020c
 8002594:	057619f1 	.word	0x057619f1

08002598 <sendSystConf>:
/**
 * @brief  Send System configuration.
 * @param  None
 * @retval None
 */
void sendSystConf(){ //this is where you want to look - CFG parameters are send with ":" separator
 8002598:	b510      	push	{r4, lr}
	commsSendString(STR_SYSTEM);
 800259a:	483e      	ldr	r0, [pc, #248]	; (8002694 <sendSystConf+0xfc>)
	commsSendString(STR_CONFIG);
	commsSendString(IDN_STRING);
	commsSendString(":");
 800259c:	4c3e      	ldr	r4, [pc, #248]	; (8002698 <sendSystConf+0x100>)
	commsSendString(STR_SYSTEM);
 800259e:	f00c fae1 	bl	800eb64 <commsSendString>
	commsSendString(STR_CONFIG);
 80025a2:	483e      	ldr	r0, [pc, #248]	; (800269c <sendSystConf+0x104>)
 80025a4:	f00c fade 	bl	800eb64 <commsSendString>
	commsSendString(IDN_STRING);
 80025a8:	483d      	ldr	r0, [pc, #244]	; (80026a0 <sendSystConf+0x108>)
 80025aa:	f00c fadb 	bl	800eb64 <commsSendString>
	commsSendString(":");
 80025ae:	4620      	mov	r0, r4
 80025b0:	f00c fad8 	bl	800eb64 <commsSendString>
		commsSendString(SHIELD_STRING);
	}else if(isScopeShieldConnected()==2){
		commsSendString(SHIELD_STRING_2);
	}
#else
	commsSendString(STR_NACK);
 80025b4:	483b      	ldr	r0, [pc, #236]	; (80026a4 <sendSystConf+0x10c>)
 80025b6:	f00c fad5 	bl	800eb64 <commsSendString>
#endif
	commsSendString(":");
 80025ba:	4620      	mov	r0, r4
 80025bc:	f00c fad2 	bl	800eb64 <commsSendString>
	commsSendString(MCU);
 80025c0:	4839      	ldr	r0, [pc, #228]	; (80026a8 <sendSystConf+0x110>)
 80025c2:	f00c facf 	bl	800eb64 <commsSendString>
	commsSendString(":");
 80025c6:	4620      	mov	r0, r4
 80025c8:	f00c facc 	bl	800eb64 <commsSendString>
	commsSendUint32(HAL_RCC_GetHCLKFreq());  //CCLK
 80025cc:	f006 f800 	bl	80085d0 <HAL_RCC_GetHCLKFreq>
 80025d0:	f00c faa6 	bl	800eb20 <commsSendUint32>
	commsSendString(":");
 80025d4:	4620      	mov	r0, r4
 80025d6:	f00c fac5 	bl	800eb64 <commsSendString>
	commsSendBuff(MCU_UID,12);
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <sendSystConf+0x114>)
 80025dc:	210c      	movs	r1, #12
 80025de:	7818      	ldrb	r0, [r3, #0]
 80025e0:	f00c fab6 	bl	800eb50 <commsSendBuff>
	commsSendString(":");
 80025e4:	4620      	mov	r0, r4
 80025e6:	f00c fabd 	bl	800eb64 <commsSendString>
	commsSendString("LEO FW:"); 	//12
 80025ea:	4831      	ldr	r0, [pc, #196]	; (80026b0 <sendSystConf+0x118>)
 80025ec:	f00c faba 	bl	800eb64 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 80025f0:	4830      	ldr	r0, [pc, #192]	; (80026b4 <sendSystConf+0x11c>)
 80025f2:	f00c fab7 	bl	800eb64 <commsSendString>
	commsSendString(":");						//4
 80025f6:	4620      	mov	r0, r4
 80025f8:	f00c fab4 	bl	800eb64 <commsSendString>
	commsSendString("FreeRTOS:");//8
 80025fc:	482e      	ldr	r0, [pc, #184]	; (80026b8 <sendSystConf+0x120>)
 80025fe:	f00c fab1 	bl	800eb64 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 8002602:	482e      	ldr	r0, [pc, #184]	; (80026bc <sendSystConf+0x124>)
 8002604:	f00c faae 	bl	800eb64 <commsSendString>
	commsSendString(":");
 8002608:	4620      	mov	r0, r4
 800260a:	f00c faab 	bl	800eb64 <commsSendString>
	commsSendString("ST HAL:");				//6
 800260e:	482c      	ldr	r0, [pc, #176]	; (80026c0 <sendSystConf+0x128>)
 8002610:	f00c faa8 	bl	800eb64 <commsSendString>
	commsSend('V');
 8002614:	2056      	movs	r0, #86	; 0x56
 8002616:	f00c fa81 	bl	800eb1c <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 800261a:	f002 ff8b 	bl	8005534 <HAL_GetHalVersion>
 800261e:	0e00      	lsrs	r0, r0, #24
 8002620:	3030      	adds	r0, #48	; 0x30
 8002622:	b2c0      	uxtb	r0, r0
 8002624:	f00c fa7a 	bl	800eb1c <commsSend>
	commsSend('.');
 8002628:	202e      	movs	r0, #46	; 0x2e
 800262a:	f00c fa77 	bl	800eb1c <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 800262e:	f002 ff81 	bl	8005534 <HAL_GetHalVersion>
 8002632:	0c00      	lsrs	r0, r0, #16
 8002634:	3030      	adds	r0, #48	; 0x30
 8002636:	b2c0      	uxtb	r0, r0
 8002638:	f00c fa70 	bl	800eb1c <commsSend>
	commsSend('.');
 800263c:	202e      	movs	r0, #46	; 0x2e
 800263e:	f00c fa6d 	bl	800eb1c <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 8002642:	f002 ff77 	bl	8005534 <HAL_GetHalVersion>
 8002646:	0a00      	lsrs	r0, r0, #8
 8002648:	3030      	adds	r0, #48	; 0x30
 800264a:	b2c0      	uxtb	r0, r0
 800264c:	f00c fa66 	bl	800eb1c <commsSend>
	commsSendString(":");
 8002650:	4620      	mov	r0, r4
 8002652:	f00c fa87 	bl	800eb64 <commsSendString>
	commsSendString("COMM:");
 8002656:	481b      	ldr	r0, [pc, #108]	; (80026c4 <sendSystConf+0x12c>)
 8002658:	f00c fa84 	bl	800eb64 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 800265c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002660:	f00c fa5e 	bl	800eb20 <commsSendUint32>
	commsSendString(":");
 8002664:	4620      	mov	r0, r4
 8002666:	f00c fa7d 	bl	800eb64 <commsSendString>
	commsSendUint32(UART_SPEED);
 800266a:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 800266e:	f00c fa57 	bl	800eb20 <commsSendUint32>
	commsSendString(":");
 8002672:	4620      	mov	r0, r4
 8002674:	f00c fa76 	bl	800eb64 <commsSendString>
	commsSendString(USART_TX_PIN_STR);
 8002678:	4813      	ldr	r0, [pc, #76]	; (80026c8 <sendSystConf+0x130>)
 800267a:	f00c fa73 	bl	800eb64 <commsSendString>
	commsSendString(":");
 800267e:	4620      	mov	r0, r4
 8002680:	f00c fa70 	bl	800eb64 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8002684:	4811      	ldr	r0, [pc, #68]	; (80026cc <sendSystConf+0x134>)
 8002686:	f00c fa6d 	bl	800eb64 <commsSendString>
	commsSendString(":");
 800268a:	4620      	mov	r0, r4
	commsSendString(":");
	commsSendString(USB_DM_PIN_STR);
	commsSendString(":");
#endif

}
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	commsSendString(":");
 8002690:	f00c ba68 	b.w	800eb64 <commsSendString>
 8002694:	08014e24 	.word	0x08014e24
 8002698:	08014e88 	.word	0x08014e88
 800269c:	08014e2c 	.word	0x08014e2c
 80026a0:	08014e34 	.word	0x08014e34
 80026a4:	08014e44 	.word	0x08014e44
 80026a8:	08014e4c 	.word	0x08014e4c
 80026ac:	1ffff7ac 	.word	0x1ffff7ac
 80026b0:	08014e58 	.word	0x08014e58
 80026b4:	08014e60 	.word	0x08014e60
 80026b8:	08014e68 	.word	0x08014e68
 80026bc:	08014e74 	.word	0x08014e74
 80026c0:	08014e7c 	.word	0x08014e7c
 80026c4:	08014e84 	.word	0x08014e84
 80026c8:	08014e8c 	.word	0x08014e8c
 80026cc:	08014e94 	.word	0x08014e94

080026d0 <sendScopeConf>:
/**
 * @brief  Send Scope configuration.
 * @param  None
 * @retval None
 */
void sendScopeConf(){
 80026d0:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	commsSendString(STR_CONFIG);
 80026d2:	4821      	ldr	r0, [pc, #132]	; (8002758 <sendScopeConf+0x88>)
			break;
		case 1:
			commsSendString(SCOPE_CH2_PIN_STR);
			break;
		case 2:
			commsSendString(SCOPE_CH3_PIN_STR);
 80026d4:	4e21      	ldr	r6, [pc, #132]	; (800275c <sendScopeConf+0x8c>)
			break;
		case 3:
			commsSendString(SCOPE_CH4_PIN_STR);
 80026d6:	4d22      	ldr	r5, [pc, #136]	; (8002760 <sendScopeConf+0x90>)
			commsSendString(SCOPE_CH2_PIN_STR);
 80026d8:	4c22      	ldr	r4, [pc, #136]	; (8002764 <sendScopeConf+0x94>)
void sendScopeConf(){
 80026da:	b082      	sub	sp, #8
	commsSendString(STR_CONFIG);
 80026dc:	f00c fa42 	bl	800eb64 <commsSendString>
	commsSendUint32(MAX_SAMPLING_FREQ_12B);
 80026e0:	4821      	ldr	r0, [pc, #132]	; (8002768 <sendScopeConf+0x98>)
 80026e2:	f00c fa1d 	bl	800eb20 <commsSendUint32>
	commsSendUint32(MAX_SCOPE_BUFF_SIZE);
 80026e6:	f247 5030 	movw	r0, #30000	; 0x7530
 80026ea:	f00c fa19 	bl	800eb20 <commsSendUint32>
	commsSendUint32(MAX_ADC_CHANNELS);
 80026ee:	2004      	movs	r0, #4
 80026f0:	f00c fa16 	bl	800eb20 <commsSendUint32>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80026f4:	2300      	movs	r3, #0
 80026f6:	f88d 3007 	strb.w	r3, [sp, #7]
 80026fa:	e00e      	b.n	800271a <sendScopeConf+0x4a>
		switch(i){
 80026fc:	2b03      	cmp	r3, #3
			commsSendString(SCOPE_CH1_PIN_STR);
 80026fe:	481b      	ldr	r0, [pc, #108]	; (800276c <sendScopeConf+0x9c>)
		switch(i){
 8002700:	d015      	beq.n	800272e <sendScopeConf+0x5e>
 8002702:	2b01      	cmp	r3, #1
 8002704:	d00f      	beq.n	8002726 <sendScopeConf+0x56>
			commsSendString(SCOPE_CH4_PIN_STR);
 8002706:	f00c fa2d 	bl	800eb64 <commsSendString>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 800270a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800270e:	3301      	adds	r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b03      	cmp	r3, #3
 8002714:	f88d 3007 	strb.w	r3, [sp, #7]
 8002718:	d80b      	bhi.n	8002732 <sendScopeConf+0x62>
		switch(i){
 800271a:	2b02      	cmp	r3, #2
 800271c:	d1ee      	bne.n	80026fc <sendScopeConf+0x2c>
			commsSendString(SCOPE_CH3_PIN_STR);
 800271e:	4630      	mov	r0, r6
 8002720:	f00c fa20 	bl	800eb64 <commsSendString>
			break;
 8002724:	e7f1      	b.n	800270a <sendScopeConf+0x3a>
			commsSendString(SCOPE_CH2_PIN_STR);
 8002726:	4620      	mov	r0, r4
 8002728:	f00c fa1c 	bl	800eb64 <commsSendString>
			break;
 800272c:	e7ed      	b.n	800270a <sendScopeConf+0x3a>
			commsSendString(SCOPE_CH4_PIN_STR);
 800272e:	4628      	mov	r0, r5
 8002730:	e7e9      	b.n	8002706 <sendScopeConf+0x36>
			break;
		}
	}
	commsSendUint32(SCOPE_VREF);
 8002732:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002736:	f00c f9f3 	bl	800eb20 <commsSendUint32>
	commsSendUint32(SCOPE_VREF_INT);
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <sendScopeConf+0xa0>)
 800273c:	8818      	ldrh	r0, [r3, #0]
 800273e:	f00c f9ef 	bl	800eb20 <commsSendUint32>
	commsSendBuff((uint8_t*)scopeGetRanges(&i),i);
 8002742:	f10d 0007 	add.w	r0, sp, #7
 8002746:	f002 fdaf 	bl	80052a8 <scopeGetRanges>
 800274a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800274e:	f00c f9ff 	bl	800eb50 <commsSendBuff>
}
 8002752:	b002      	add	sp, #8
 8002754:	bd70      	pop	{r4, r5, r6, pc}
 8002756:	bf00      	nop
 8002758:	08014e2c 	.word	0x08014e2c
 800275c:	08014ddc 	.word	0x08014ddc
 8002760:	08014de4 	.word	0x08014de4
 8002764:	08014dd4 	.word	0x08014dd4
 8002768:	003d0900 	.word	0x003d0900
 800276c:	08014dcc 	.word	0x08014dcc
 8002770:	1ffff7ba 	.word	0x1ffff7ba

08002774 <sendScopeInputs>:
/**
 * @brief  Send Scope input channels.
 * @param  None
 * @retval None
 */
void sendScopeInputs(){
 8002774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t i,j;
	commsSendString("INP_");
 8002778:	482b      	ldr	r0, [pc, #172]	; (8002828 <sendScopeInputs+0xb4>)
 800277a:	4f2c      	ldr	r7, [pc, #176]	; (800282c <sendScopeInputs+0xb8>)
	if(MAX_ADC_CHANNELS>=4){
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
	}

	for (i=0;i<MAX_ADC_CHANNELS;i++){
		commsSendString("/");
 800277c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8002838 <sendScopeInputs+0xc4>
				break;
			case 1:
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
				break;
			case 2:
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 8002780:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002840 <sendScopeInputs+0xcc>
				break;
			case 3:
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002784:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002844 <sendScopeInputs+0xd0>
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 8002788:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8002848 <sendScopeInputs+0xd4>
	commsSendString("INP_");
 800278c:	f00c f9ea 	bl	800eb64 <commsSendString>
		commsSend(ANALOG_DEFAULT_INPUTS[0]);
 8002790:	2002      	movs	r0, #2
 8002792:	f00c f9c3 	bl	800eb1c <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[1]);
 8002796:	2004      	movs	r0, #4
 8002798:	f00c f9c0 	bl	800eb1c <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[2]);
 800279c:	2002      	movs	r0, #2
 800279e:	f00c f9bd 	bl	800eb1c <commsSend>
		commsSend(ANALOG_DEFAULT_INPUTS[3]);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f00c f9ba 	bl	800eb1c <commsSend>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80027a8:	2500      	movs	r5, #0
		commsSendString("/");
 80027aa:	4658      	mov	r0, fp
 80027ac:	f00c f9da 	bl	800eb64 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 80027b0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80027b4:	b316      	cbz	r6, 80027fc <sendScopeInputs+0x88>
 80027b6:	2400      	movs	r4, #0
 80027b8:	1c63      	adds	r3, r4, #1
			switch(i){
 80027ba:	2d02      	cmp	r5, #2
 80027bc:	4622      	mov	r2, r4
 80027be:	b2dc      	uxtb	r4, r3
 80027c0:	d016      	beq.n	80027f0 <sendScopeInputs+0x7c>
 80027c2:	2d03      	cmp	r5, #3
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <sendScopeInputs+0xbc>)
			switch(i){
 80027c6:	d025      	beq.n	8002814 <sendScopeInputs+0xa0>
 80027c8:	2d01      	cmp	r5, #1
				commsSendString((char *)ANALOG_CHANN_ADC1_NAME[j]);
 80027ca:	bf14      	ite	ne
 80027cc:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
				commsSendString((char *)ANALOG_CHANN_ADC2_NAME[j]);
 80027d0:	f858 0022 	ldreq.w	r0, [r8, r2, lsl #2]
 80027d4:	f00c f9c6 	bl	800eb64 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 80027d8:	42a6      	cmp	r6, r4
 80027da:	d90f      	bls.n	80027fc <sendScopeInputs+0x88>
			if(j>0){
 80027dc:	2c00      	cmp	r4, #0
 80027de:	d0eb      	beq.n	80027b8 <sendScopeInputs+0x44>
				commsSendString(":");
 80027e0:	4814      	ldr	r0, [pc, #80]	; (8002834 <sendScopeInputs+0xc0>)
 80027e2:	f00c f9bf 	bl	800eb64 <commsSendString>
 80027e6:	1c63      	adds	r3, r4, #1
			switch(i){
 80027e8:	2d02      	cmp	r5, #2
 80027ea:	4622      	mov	r2, r4
 80027ec:	b2dc      	uxtb	r4, r3
 80027ee:	d1e8      	bne.n	80027c2 <sendScopeInputs+0x4e>
				commsSendString((char *)ANALOG_CHANN_ADC3_NAME[j]);
 80027f0:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 80027f4:	f00c f9b6 	bl	800eb64 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 80027f8:	42a6      	cmp	r6, r4
 80027fa:	d8ef      	bhi.n	80027dc <sendScopeInputs+0x68>
	for (i=0;i<MAX_ADC_CHANNELS;i++){
 80027fc:	3501      	adds	r5, #1
 80027fe:	b2ed      	uxtb	r5, r5
 8002800:	2d04      	cmp	r5, #4
 8002802:	d1d2      	bne.n	80027aa <sendScopeInputs+0x36>
				break;
			}
		}
	}
	commsSendString("/");
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <sendScopeInputs+0xc4>)
 8002806:	f00c f9ad 	bl	800eb64 <commsSendString>
	commsSendString(";");
 800280a:	480c      	ldr	r0, [pc, #48]	; (800283c <sendScopeInputs+0xc8>)
}
 800280c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	commsSendString(";");
 8002810:	f00c b9a8 	b.w	800eb64 <commsSendString>
				commsSendString((char *)ANALOG_CHANN_ADC4_NAME[j]);
 8002814:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 8002818:	f00c f9a4 	bl	800eb64 <commsSendString>
		for (j=0;j<NUM_OF_ANALOG_INPUTS[i];j++){
 800281c:	42a6      	cmp	r6, r4
 800281e:	d9f1      	bls.n	8002804 <sendScopeInputs+0x90>
			if(j>0){
 8002820:	2c00      	cmp	r4, #0
 8002822:	d0c9      	beq.n	80027b8 <sendScopeInputs+0x44>
 8002824:	e7dc      	b.n	80027e0 <sendScopeInputs+0x6c>
 8002826:	bf00      	nop
 8002828:	08014dec 	.word	0x08014dec
 800282c:	08014d30 	.word	0x08014d30
 8002830:	08014bec 	.word	0x08014bec
 8002834:	08014e88 	.word	0x08014e88
 8002838:	08014df4 	.word	0x08014df4
 800283c:	08014df8 	.word	0x08014df8
 8002840:	08014c38 	.word	0x08014c38
 8002844:	08014c48 	.word	0x08014c48
 8002848:	08014c10 	.word	0x08014c10

0800284c <sendLogAnlysConf>:
}
#endif //USE_SYNC_PWM

#ifdef USE_LOG_ANLYS
void sendLogAnlysConf(void)
{
 800284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	commsSendString("LOGA");
 8002850:	4823      	ldr	r0, [pc, #140]	; (80028e0 <sendLogAnlysConf+0x94>)
			break;
		case 5:
			commsSendString(LOG_ANLYS_PIN_CH6);
			break;
		case 6:
			commsSendString(LOG_ANLYS_PIN_CH7);
 8002852:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800290c <sendLogAnlysConf+0xc0>
			commsSendString(LOG_ANLYS_PIN_CH6);
 8002856:	4f23      	ldr	r7, [pc, #140]	; (80028e4 <sendLogAnlysConf+0x98>)
			commsSendString(LOG_ANLYS_PIN_CH5);
 8002858:	4e23      	ldr	r6, [pc, #140]	; (80028e8 <sendLogAnlysConf+0x9c>)
	commsSendString("LOGA");
 800285a:	f00c f983 	bl	800eb64 <commsSendString>
	commsSendUint32(LOG_ANLYS_POSTTRIG_PERIPH_CLOCK);
 800285e:	4823      	ldr	r0, [pc, #140]	; (80028ec <sendLogAnlysConf+0xa0>)
 8002860:	f00c f95e 	bl	800eb20 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_TIMEBASE_PERIPH_CLOCK);
 8002864:	4822      	ldr	r0, [pc, #136]	; (80028f0 <sendLogAnlysConf+0xa4>)
 8002866:	f00c f95b 	bl	800eb20 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_SAMPLING_FREQ);
 800286a:	4822      	ldr	r0, [pc, #136]	; (80028f4 <sendLogAnlysConf+0xa8>)
 800286c:	f00c f958 	bl	800eb20 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_BUFFER_LENGTH);
 8002870:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002874:	f00c f954 	bl	800eb20 <commsSendUint32>
	commsSendUint32(LOG_ANLYS_CHANNELS_NUM);
 8002878:	2008      	movs	r0, #8
 800287a:	f00c f951 	bl	800eb20 <commsSendUint32>
 800287e:	2400      	movs	r4, #0
 8002880:	b2e5      	uxtb	r5, r4
		switch(i){
 8002882:	1e6b      	subs	r3, r5, #1
 8002884:	2b06      	cmp	r3, #6
 8002886:	d805      	bhi.n	8002894 <sendLogAnlysConf+0x48>
 8002888:	e8df f003 	tbb	[pc, r3]
 800288c:	13171b1f 	.word	0x13171b1f
 8002890:	0b0f      	.short	0x0b0f
 8002892:	23          	.byte	0x23
 8002893:	00          	.byte	0x00
			commsSendString(LOG_ANLYS_PIN_CH1);
 8002894:	4818      	ldr	r0, [pc, #96]	; (80028f8 <sendLogAnlysConf+0xac>)
 8002896:	f00c f965 	bl	800eb64 <commsSendString>
	for (i=0;i<LOG_ANLYS_CHANNELS_NUM;i++){
 800289a:	2d07      	cmp	r5, #7
 800289c:	d01e      	beq.n	80028dc <sendLogAnlysConf+0x90>
 800289e:	3401      	adds	r4, #1
 80028a0:	e7ee      	b.n	8002880 <sendLogAnlysConf+0x34>
			commsSendString(LOG_ANLYS_PIN_CH7);
 80028a2:	4640      	mov	r0, r8
 80028a4:	f00c f95e 	bl	800eb64 <commsSendString>
			break;
 80028a8:	e7f9      	b.n	800289e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH6);
 80028aa:	4638      	mov	r0, r7
 80028ac:	f00c f95a 	bl	800eb64 <commsSendString>
			break;
 80028b0:	e7f5      	b.n	800289e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH5);
 80028b2:	4630      	mov	r0, r6
 80028b4:	f00c f956 	bl	800eb64 <commsSendString>
			break;
 80028b8:	e7f1      	b.n	800289e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH4);
 80028ba:	4810      	ldr	r0, [pc, #64]	; (80028fc <sendLogAnlysConf+0xb0>)
 80028bc:	f00c f952 	bl	800eb64 <commsSendString>
			break;
 80028c0:	e7ed      	b.n	800289e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH3);
 80028c2:	480f      	ldr	r0, [pc, #60]	; (8002900 <sendLogAnlysConf+0xb4>)
 80028c4:	f00c f94e 	bl	800eb64 <commsSendString>
			break;
 80028c8:	e7e9      	b.n	800289e <sendLogAnlysConf+0x52>
			commsSendString(LOG_ANLYS_PIN_CH2);
 80028ca:	480e      	ldr	r0, [pc, #56]	; (8002904 <sendLogAnlysConf+0xb8>)
 80028cc:	f00c f94a 	bl	800eb64 <commsSendString>
			break;
 80028d0:	e7e5      	b.n	800289e <sendLogAnlysConf+0x52>
		case 7:
			commsSendString(LOG_ANLYS_PIN_CH8);
 80028d2:	480d      	ldr	r0, [pc, #52]	; (8002908 <sendLogAnlysConf+0xbc>)
			break;
		}
	}	
}
 80028d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			commsSendString(LOG_ANLYS_PIN_CH8);
 80028d8:	f00c b944 	b.w	800eb64 <commsSendString>
}
 80028dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028e0:	08014d84 	.word	0x08014d84
 80028e4:	08014db4 	.word	0x08014db4
 80028e8:	08014dac 	.word	0x08014dac
 80028ec:	044aa200 	.word	0x044aa200
 80028f0:	08954400 	.word	0x08954400
 80028f4:	02255100 	.word	0x02255100
 80028f8:	08014d8c 	.word	0x08014d8c
 80028fc:	08014da4 	.word	0x08014da4
 8002900:	08014d9c 	.word	0x08014d9c
 8002904:	08014d94 	.word	0x08014d94
 8002908:	08014dc4 	.word	0x08014dc4
 800290c:	08014dbc 	.word	0x08014dbc

08002910 <CommTask>:
void CommTask(void const *argument){
 8002910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002914:	b08d      	sub	sp, #52	; 0x34
	uint16_t message = 0xFFFF;
 8002916:	f64f 73ff 	movw	r3, #65535	; 0xffff
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 800291a:	2200      	movs	r2, #0
 800291c:	2102      	movs	r1, #2
 800291e:	2032      	movs	r0, #50	; 0x32
	uint16_t message = 0xFFFF;
 8002920:	f8ad 301c 	strh.w	r3, [sp, #28]
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 8002924:	f009 fcba 	bl	800c29c <xQueueGenericCreate>
 8002928:	4ead      	ldr	r6, [pc, #692]	; (8002be0 <CommTask+0x2d0>)
	commsMutex = xSemaphoreCreateRecursiveMutex();
 800292a:	4fae      	ldr	r7, [pc, #696]	; (8002be4 <CommTask+0x2d4>)
	messageQueue = xQueueCreate(50, sizeof(message)/sizeof(uint8_t));
 800292c:	6030      	str	r0, [r6, #0]
	commsMutex = xSemaphoreCreateRecursiveMutex();
 800292e:	2004      	movs	r0, #4
 8002930:	f009 feb6 	bl	800c6a0 <xQueueCreateMutex>
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
	commsMutex = xSemaphoreCreateRecursiveMutex();
 8002938:	6038      	str	r0, [r7, #0]
	xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 800293a:	f00a f923 	bl	800cb84 <xQueueTakeMutexRecursive>
	MX_UART_Init();
 800293e:	f00f f9ed 	bl	8011d1c <MX_UART_Init>
	comm.memory = commBuffMem;
 8002942:	4ba9      	ldr	r3, [pc, #676]	; (8002be8 <CommTask+0x2d8>)
 8002944:	4aa9      	ldr	r2, [pc, #676]	; (8002bec <CommTask+0x2dc>)
 8002946:	601a      	str	r2, [r3, #0]
	comm.bufferSize = COMM_BUFFER_SIZE;
 8002948:	f240 51dc 	movw	r1, #1500	; 0x5dc
	comm.readPointer = 0;
 800294c:	2200      	movs	r2, #0
	comm.bufferSize = COMM_BUFFER_SIZE;
 800294e:	6059      	str	r1, [r3, #4]
	xSemaphoreGiveRecursive(commsMutex);
 8002950:	6838      	ldr	r0, [r7, #0]
	comm.readPointer = 0;
 8002952:	811a      	strh	r2, [r3, #8]
	comm.state = BUFF_EMPTY;
 8002954:	729a      	strb	r2, [r3, #10]
	xSemaphoreGiveRecursive(commsMutex);
 8002956:	f009 fed7 	bl	800c708 <xQueueGiveMutexRecursive>
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 800295a:	4ba5      	ldr	r3, [pc, #660]	; (8002bf0 <CommTask+0x2e0>)
 800295c:	f8df a31c 	ldr.w	sl, [pc, #796]	; 8002c7c <CommTask+0x36c>
 8002960:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8002c80 <CommTask+0x370>
		commsSendUint32(STR_DELIMITER);
 8002964:	f8df b31c 	ldr.w	fp, [pc, #796]	; 8002c84 <CommTask+0x374>
	uint8_t header[16]="OSC_yyyyxxxxCH0x";
 8002968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296a:	ac08      	add	r4, sp, #32
 800296c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002970:	2300      	movs	r3, #0
 8002972:	f04f 32ff 	mov.w	r2, #4294967295
 8002976:	a907      	add	r1, sp, #28
 8002978:	6830      	ldr	r0, [r6, #0]
 800297a:	f009 ff7b 	bl	800c874 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(commsMutex, portMAX_DELAY);
 800297e:	f04f 31ff 	mov.w	r1, #4294967295
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f00a f8fe 	bl	800cb84 <xQueueTakeMutexRecursive>
		switch(message){
 8002988:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800298c:	2b35      	cmp	r3, #53	; 0x35
 800298e:	f200 82f9 	bhi.w	8002f84 <CommTask+0x674>
 8002992:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002996:	02f0      	.short	0x02f0
 8002998:	02b602b9 	.word	0x02b602b9
 800299c:	02f702a1 	.word	0x02f702a1
 80029a0:	02f70282 	.word	0x02f70282
 80029a4:	02f702f7 	.word	0x02f702f7
 80029a8:	02f702f7 	.word	0x02f702f7
 80029ac:	02f702f7 	.word	0x02f702f7
 80029b0:	025802f7 	.word	0x025802f7
 80029b4:	024c0252 	.word	0x024c0252
 80029b8:	02f702f7 	.word	0x02f702f7
 80029bc:	02f702f7 	.word	0x02f702f7
 80029c0:	011e0179 	.word	0x011e0179
 80029c4:	01110117 	.word	0x01110117
 80029c8:	02f702f7 	.word	0x02f702f7
 80029cc:	02f702f7 	.word	0x02f702f7
 80029d0:	00e802f7 	.word	0x00e802f7
 80029d4:	00a900bf 	.word	0x00a900bf
 80029d8:	02f702f7 	.word	0x02f702f7
 80029dc:	0091009d 	.word	0x0091009d
 80029e0:	02f702f7 	.word	0x02f702f7
 80029e4:	008502f7 	.word	0x008502f7
 80029e8:	00720079 	.word	0x00720079
 80029ec:	004f006b 	.word	0x004f006b
 80029f0:	02f702f7 	.word	0x02f702f7
 80029f4:	02f702f7 	.word	0x02f702f7
 80029f8:	02f70043 	.word	0x02f70043
 80029fc:	02f702f7 	.word	0x02f702f7
 8002a00:	0036      	.short	0x0036
			commsSendString(STR_SYSTEM);
 8002a02:	487c      	ldr	r0, [pc, #496]	; (8002bf4 <CommTask+0x2e4>)
 8002a04:	f00c f8ae 	bl	800eb64 <commsSendString>
			commsSendString(STR_ACK);
 8002a08:	487b      	ldr	r0, [pc, #492]	; (8002bf8 <CommTask+0x2e8>)
 8002a0a:	f00c f8ab 	bl	800eb64 <commsSendString>
		commsSendUint32(STR_DELIMITER);
 8002a0e:	4658      	mov	r0, fp
 8002a10:	f00c f886 	bl	800eb20 <commsSendUint32>
		xSemaphoreGiveRecursive(commsMutex);
 8002a14:	6838      	ldr	r0, [r7, #0]
 8002a16:	f009 fe77 	bl	800c708 <xQueueGiveMutexRecursive>
		xQueueReceive (messageQueue, &message, portMAX_DELAY);
 8002a1a:	e7a9      	b.n	8002970 <CommTask+0x60>
			commsSendString(STR_SYNC_PWM);
 8002a1c:	4877      	ldr	r0, [pc, #476]	; (8002bfc <CommTask+0x2ec>)
 8002a1e:	f00c f8a1 	bl	800eb64 <commsSendString>
			commsSendString(STR_SYNC_PWM_REAL_FREQ);
 8002a22:	4877      	ldr	r0, [pc, #476]	; (8002c00 <CommTask+0x2f0>)
 8002a24:	f00c f89e 	bl	800eb64 <commsSendString>
			commsSendDouble(syncPwm.realPwmFreq);
 8002a28:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <CommTask+0x2f4>)
 8002a2a:	ed93 0b06 	vldr	d0, [r3, #24]
 8002a2e:	f00c f8b3 	bl	800eb98 <commsSendDouble>
			break;
 8002a32:	e7ec      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SYNC_PWM);
 8002a34:	4871      	ldr	r0, [pc, #452]	; (8002bfc <CommTask+0x2ec>)
 8002a36:	f00c f895 	bl	800eb64 <commsSendString>
	commsSendString("SYNP");		
 8002a3a:	4873      	ldr	r0, [pc, #460]	; (8002c08 <CommTask+0x2f8>)
 8002a3c:	f00c f892 	bl	800eb64 <commsSendString>
	commsSendUint32(SYNC_PWM_TIM_PERIPH_CLOCK);
 8002a40:	4872      	ldr	r0, [pc, #456]	; (8002c0c <CommTask+0x2fc>)
 8002a42:	f00c f86d 	bl	800eb20 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_FREQ);
 8002a46:	4872      	ldr	r0, [pc, #456]	; (8002c10 <CommTask+0x300>)
 8002a48:	f00c f86a 	bl	800eb20 <commsSendUint32>
	commsSendUint32(MAX_SYNC_PWM_CHANNELS);
 8002a4c:	2004      	movs	r0, #4
 8002a4e:	f00c f867 	bl	800eb20 <commsSendUint32>
			commsSendString(SYNC_PWM_CH1_PIN);
 8002a52:	4870      	ldr	r0, [pc, #448]	; (8002c14 <CommTask+0x304>)
 8002a54:	f00c f886 	bl	800eb64 <commsSendString>
			commsSendString(SYNC_PWM_CH2_PIN);
 8002a58:	486f      	ldr	r0, [pc, #444]	; (8002c18 <CommTask+0x308>)
 8002a5a:	f00c f883 	bl	800eb64 <commsSendString>
			commsSendString(SYNC_PWM_CH3_PIN);
 8002a5e:	486f      	ldr	r0, [pc, #444]	; (8002c1c <CommTask+0x30c>)
 8002a60:	f00c f880 	bl	800eb64 <commsSendString>
			commsSendString(SYNC_PWM_CH4_PIN);
 8002a64:	486e      	ldr	r0, [pc, #440]	; (8002c20 <CommTask+0x310>)
 8002a66:	f00c f87d 	bl	800eb64 <commsSendString>
 8002a6a:	e7d0      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_GENERATOR);
 8002a6c:	486d      	ldr	r0, [pc, #436]	; (8002c24 <CommTask+0x314>)
 8002a6e:	f00c f879 	bl	800eb64 <commsSendString>
			commsSendString(STR_GEN_OK);
 8002a72:	486d      	ldr	r0, [pc, #436]	; (8002c28 <CommTask+0x318>)
 8002a74:	f00c f876 	bl	800eb64 <commsSendString>
			break;
 8002a78:	e7c9      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_GENERATOR);
 8002a7a:	486a      	ldr	r0, [pc, #424]	; (8002c24 <CommTask+0x314>)
 8002a7c:	f00c f872 	bl	800eb64 <commsSendString>
			commsSendString(STR_GEN_NEXT);
 8002a80:	486a      	ldr	r0, [pc, #424]	; (8002c2c <CommTask+0x31c>)
 8002a82:	f00c f86f 	bl	800eb64 <commsSendString>
			break;
 8002a86:	e7c2      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_GENERATOR);
 8002a88:	4866      	ldr	r0, [pc, #408]	; (8002c24 <CommTask+0x314>)
 8002a8a:	f00c f86b 	bl	800eb64 <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2);
 8002a8e:	4868      	ldr	r0, [pc, #416]	; (8002c30 <CommTask+0x320>)
 8002a90:	f00c f868 	bl	800eb64 <commsSendString>
			commsSendUint32(genGetRealSmplFreq(2));
 8002a94:	2002      	movs	r0, #2
 8002a96:	f001 fa55 	bl	8003f44 <genGetRealSmplFreq>
 8002a9a:	f00c f841 	bl	800eb20 <commsSendUint32>
			break;
 8002a9e:	e7b6      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_GENERATOR);
 8002aa0:	4860      	ldr	r0, [pc, #384]	; (8002c24 <CommTask+0x314>)
 8002aa2:	f00c f85f 	bl	800eb64 <commsSendString>
			commsSendString(STR_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1);
 8002aa6:	4863      	ldr	r0, [pc, #396]	; (8002c34 <CommTask+0x324>)
 8002aa8:	f00c f85c 	bl	800eb64 <commsSendString>
			commsSendUint32(genGetRealSmplFreq(1));
 8002aac:	2001      	movs	r0, #1
 8002aae:	f001 fa49 	bl	8003f44 <genGetRealSmplFreq>
 8002ab2:	f00c f835 	bl	800eb20 <commsSendUint32>
			break;
 8002ab6:	e7aa      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_GENERATOR);
 8002ab8:	485a      	ldr	r0, [pc, #360]	; (8002c24 <CommTask+0x314>)
 8002aba:	f00c f853 	bl	800eb64 <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH2);
 8002abe:	485e      	ldr	r0, [pc, #376]	; (8002c38 <CommTask+0x328>)
 8002ac0:	f00c f850 	bl	800eb64 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh2);
 8002ac4:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <CommTask+0x32c>)
 8002ac6:	ed93 0b08 	vldr	d0, [r3, #32]
 8002aca:	f00c f865 	bl	800eb98 <commsSendDouble>
			break;
 8002ace:	e79e      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_GENERATOR);
 8002ad0:	4854      	ldr	r0, [pc, #336]	; (8002c24 <CommTask+0x314>)
 8002ad2:	f00c f847 	bl	800eb64 <commsSendString>
			commsSendString(STR_GEN_PWM_REAL_FREQ_CH1);
 8002ad6:	485a      	ldr	r0, [pc, #360]	; (8002c40 <CommTask+0x330>)
 8002ad8:	f00c f844 	bl	800eb64 <commsSendString>
			commsSendDouble(generator.realPwmFreqCh1);
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <CommTask+0x32c>)
 8002ade:	ed93 0b06 	vldr	d0, [r3, #24]
 8002ae2:	f00c f859 	bl	800eb98 <commsSendDouble>
			break;
 8002ae6:	e792      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_GENERATOR);
 8002ae8:	484e      	ldr	r0, [pc, #312]	; (8002c24 <CommTask+0x314>)
 8002aea:	f00c f83b 	bl	800eb64 <commsSendString>
	commsSendString("GENP");		
 8002aee:	4855      	ldr	r0, [pc, #340]	; (8002c44 <CommTask+0x334>)
 8002af0:	f00c f838 	bl	800eb64 <commsSendString>
	commsSendUint32(MAX_GEN_PWM_CHANNELS);
 8002af4:	2002      	movs	r0, #2
 8002af6:	f00c f813 	bl	800eb20 <commsSendUint32>
	commsSendUint32(GEN_PWM_CH1_TIM_PERIPH_CLOCK);
 8002afa:	4853      	ldr	r0, [pc, #332]	; (8002c48 <CommTask+0x338>)
 8002afc:	f00c f810 	bl	800eb20 <commsSendUint32>
	commsSendUint32(GEN_PWM_CH2_TIM_PERIPH_CLOCK);
 8002b00:	4842      	ldr	r0, [pc, #264]	; (8002c0c <CommTask+0x2fc>)
 8002b02:	f00c f80d 	bl	800eb20 <commsSendUint32>
			commsSendString(GEN_PWM_CH1_PIN);
 8002b06:	4851      	ldr	r0, [pc, #324]	; (8002c4c <CommTask+0x33c>)
 8002b08:	f00c f82c 	bl	800eb64 <commsSendString>
			commsSendString(GEN_PWM_CH2_PIN);
 8002b0c:	4850      	ldr	r0, [pc, #320]	; (8002c50 <CommTask+0x340>)
 8002b0e:	f00c f829 	bl	800eb64 <commsSendString>
 8002b12:	e77c      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_GENERATOR);
 8002b14:	4843      	ldr	r0, [pc, #268]	; (8002c24 <CommTask+0x314>)
 8002b16:	f00c f825 	bl	800eb64 <commsSendString>
	commsSendString("GEN_");
 8002b1a:	4842      	ldr	r0, [pc, #264]	; (8002c24 <CommTask+0x314>)
 8002b1c:	f00c f822 	bl	800eb64 <commsSendString>
	commsSendUint32(MAX_GENERATING_FREQ);
 8002b20:	484c      	ldr	r0, [pc, #304]	; (8002c54 <CommTask+0x344>)
 8002b22:	f00b fffd 	bl	800eb20 <commsSendUint32>
	commsSendUint32(MAX_GENERATOR_BUFF_SIZE);
 8002b26:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002b2a:	f00b fff9 	bl	800eb20 <commsSendUint32>
	commsSendUint32(DAC_DATA_DEPTH);
 8002b2e:	200c      	movs	r0, #12
 8002b30:	f00b fff6 	bl	800eb20 <commsSendUint32>
	commsSendUint32(MAX_DAC_CHANNELS);
 8002b34:	2002      	movs	r0, #2
 8002b36:	f00b fff3 	bl	800eb20 <commsSendUint32>
			commsSendString(GEN_CH1_PIN_STR);
 8002b3a:	4847      	ldr	r0, [pc, #284]	; (8002c58 <CommTask+0x348>)
 8002b3c:	f00c f812 	bl	800eb64 <commsSendString>
			commsSendString(GEN_CH2_PIN_STR);
 8002b40:	4846      	ldr	r0, [pc, #280]	; (8002c5c <CommTask+0x34c>)
 8002b42:	f00c f80f 	bl	800eb64 <commsSendString>
	commsSendUint32(0);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f00b ffea 	bl	800eb20 <commsSendUint32>
	commsSendUint32(GEN_VREF);
 8002b4c:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002b50:	f00b ffe6 	bl	800eb20 <commsSendUint32>
	commsSendUint32(GEN_VDDA);
 8002b54:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002b58:	f00b ffe2 	bl	800eb20 <commsSendUint32>
	commsSendUint32(GEN_VREF_INT);
 8002b5c:	f240 40ba 	movw	r0, #1210	; 0x4ba
 8002b60:	f00b ffde 	bl	800eb20 <commsSendUint32>
 8002b64:	e753      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_LOGIC_ANLYS);
 8002b66:	483e      	ldr	r0, [pc, #248]	; (8002c60 <CommTask+0x350>)
 8002b68:	f00b fffc 	bl	800eb64 <commsSendString>
			logAnlys.state = LOGA_DATA_SENDING;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f888 3012 	strb.w	r3, [r8, #18]
			if(logAnlys.trigOccur == TRIG_OCCURRED){
 8002b72:	f898 3017 	ldrb.w	r3, [r8, #23]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 820c 	beq.w	8002f94 <CommTask+0x684>
			commsSendString(STR_LOG_ANLYS_DATA_LENGTH);				
 8002b7c:	4839      	ldr	r0, [pc, #228]	; (8002c64 <CommTask+0x354>)
 8002b7e:	f00b fff1 	bl	800eb64 <commsSendString>
			commsSendUint32(logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2);				
 8002b82:	f8b8 0010 	ldrh.w	r0, [r8, #16]
 8002b86:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8002b8a:	0040      	lsls	r0, r0, #1
 8002b8c:	f00b ffc8 	bl	800eb20 <commsSendUint32>
			commsSendString(STR_LOG_ANLYS_DATA);
 8002b90:	4835      	ldr	r0, [pc, #212]	; (8002c68 <CommTask+0x358>)
 8002b92:	f00b ffe7 	bl	800eb64 <commsSendString>
			HAL_UART_Transmit(&huart2, (uint8_t *)logAnlys.bufferMemory, logAnlys.samplesNumber * 2 + SCOPE_BUFFER_MARGIN * MAX_ADC_CHANNELS * 2, 10000);			
 8002b96:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8002b9a:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 8002b9e:	4833      	ldr	r0, [pc, #204]	; (8002c6c <CommTask+0x35c>)
 8002ba0:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8002ba4:	0052      	lsls	r2, r2, #1
 8002ba6:	f242 7310 	movw	r3, #10000	; 0x2710
 8002baa:	b292      	uxth	r2, r2
 8002bac:	f008 ff92 	bl	800bad4 <HAL_UART_Transmit>
			logAnlys.state = LOGA_DATA_SENT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	f888 3012 	strb.w	r3, [r8, #18]
			break;
 8002bb6:	e72a      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_LOGIC_ANLYS);
 8002bb8:	4829      	ldr	r0, [pc, #164]	; (8002c60 <CommTask+0x350>)
 8002bba:	f00b ffd3 	bl	800eb64 <commsSendString>
			sendLogAnlysConf();
 8002bbe:	f7ff fe45 	bl	800284c <sendLogAnlysConf>
			break;
 8002bc2:	e724      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SCOPE);
 8002bc4:	482a      	ldr	r0, [pc, #168]	; (8002c70 <CommTask+0x360>)
 8002bc6:	f00b ffcd 	bl	800eb64 <commsSendString>
			commsSendString(STR_SCOPE_SMPL);
 8002bca:	482a      	ldr	r0, [pc, #168]	; (8002c74 <CommTask+0x364>)
 8002bcc:	f00b ffca 	bl	800eb64 <commsSendString>
			break;
 8002bd0:	e71d      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SCOPE);
 8002bd2:	4827      	ldr	r0, [pc, #156]	; (8002c70 <CommTask+0x360>)
 8002bd4:	f00b ffc6 	bl	800eb64 <commsSendString>
			commsSendString(STR_SCOPE_TRIG);
 8002bd8:	4827      	ldr	r0, [pc, #156]	; (8002c78 <CommTask+0x368>)
 8002bda:	f00b ffc3 	bl	800eb64 <commsSendString>
			break;
 8002bde:	e716      	b.n	8002a0e <CommTask+0xfe>
 8002be0:	20004cb4 	.word	0x20004cb4
 8002be4:	200007f4 	.word	0x200007f4
 8002be8:	2000020c 	.word	0x2000020c
 8002bec:	20000218 	.word	0x20000218
 8002bf0:	08014b00 	.word	0x08014b00
 8002bf4:	08014e24 	.word	0x08014e24
 8002bf8:	08014d18 	.word	0x08014d18
 8002bfc:	08014cd8 	.word	0x08014cd8
 8002c00:	08014ce0 	.word	0x08014ce0
 8002c04:	2000e710 	.word	0x2000e710
 8002c08:	08014dfc 	.word	0x08014dfc
 8002c0c:	044aa200 	.word	0x044aa200
 8002c10:	000186a0 	.word	0x000186a0
 8002c14:	08014e04 	.word	0x08014e04
 8002c18:	08014e0c 	.word	0x08014e0c
 8002c1c:	08014e14 	.word	0x08014e14
 8002c20:	08014e1c 	.word	0x08014e1c
 8002c24:	08014d54 	.word	0x08014d54
 8002c28:	08014d10 	.word	0x08014d10
 8002c2c:	08014d08 	.word	0x08014d08
 8002c30:	08014c70 	.word	0x08014c70
 8002c34:	08014c68 	.word	0x08014c68
 8002c38:	08014c80 	.word	0x08014c80
 8002c3c:	200050a0 	.word	0x200050a0
 8002c40:	08014c78 	.word	0x08014c78
 8002c44:	08014d6c 	.word	0x08014d6c
 8002c48:	08954400 	.word	0x08954400
 8002c4c:	08014d74 	.word	0x08014d74
 8002c50:	08014d7c 	.word	0x08014d7c
 8002c54:	001e8480 	.word	0x001e8480
 8002c58:	08014d5c 	.word	0x08014d5c
 8002c5c:	08014d64 	.word	0x08014d64
 8002c60:	08014ce8 	.word	0x08014ce8
 8002c64:	08014cf8 	.word	0x08014cf8
 8002c68:	08014d00 	.word	0x08014d00
 8002c6c:	2000efb4 	.word	0x2000efb4
 8002c70:	08014c58 	.word	0x08014c58
 8002c74:	08014d28 	.word	0x08014d28
 8002c78:	08014d20 	.word	0x08014d20
 8002c7c:	20004cc8 	.word	0x20004cc8
 8002c80:	20007028 	.word	0x20007028
 8002c84:	cafefade 	.word	0xcafefade
			if(getScopeState() == SCOPE_DATA_SENDING){
 8002c88:	f002 f84a 	bl	8004d20 <getScopeState>
 8002c8c:	2804      	cmp	r0, #4
 8002c8e:	f47f aebe 	bne.w	8002a0e <CommTask+0xfe>
				commsSendString(STR_SCOPE);
 8002c92:	48cc      	ldr	r0, [pc, #816]	; (8002fc4 <CommTask+0x6b4>)
 8002c94:	f00b ff66 	bl	800eb64 <commsSendString>
				oneChanMemSize=getOneChanMemSize();
 8002c98:	f002 f824 	bl	8004ce4 <getOneChanMemSize>
 8002c9c:	4605      	mov	r5, r0
				dataLength = getSamples();
 8002c9e:	f002 f82d 	bl	8004cfc <getSamples>
 8002ca2:	9001      	str	r0, [sp, #4]
				adcRes = getADCRes();
 8002ca4:	f002 f830 	bl	8004d08 <getADCRes>
 8002ca8:	4604      	mov	r4, r0
				channels=GetNumOfChannels();
 8002caa:	f002 f80d 	bl	8004cc8 <GetNumOfChannels>
 8002cae:	9003      	str	r0, [sp, #12]
				j=scopeGetRealSmplFreq();
 8002cb0:	f002 fa30 	bl	8005114 <scopeGetRealSmplFreq>
				if(adcRes>8){
 8002cb4:	2c08      	cmp	r4, #8
				header[4]=(uint8_t)(j>>24);
 8002cb6:	ea4f 6210 	mov.w	r2, r0, lsr #24
				header[5]=(uint8_t)(j>>16);
 8002cba:	ea4f 4310 	mov.w	r3, r0, lsr #16
				header[7]=(uint8_t)(j);
 8002cbe:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
				header[6]=(uint8_t)(j>>8);
 8002cc2:	ea4f 2010 	mov.w	r0, r0, lsr #8
				header[4]=(uint8_t)(j>>24);
 8002cc6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
				header[5]=(uint8_t)(j>>16);
 8002cca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
				header[6]=(uint8_t)(j>>8);
 8002cce:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
				if(adcRes>8){
 8002cd2:	f240 81f1 	bls.w	80030b8 <CommTask+0x7a8>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002cd6:	f002 f80b 	bl	8004cf0 <getTriggerIndex>
 8002cda:	4681      	mov	r9, r0
 8002cdc:	f002 f80e 	bl	8004cfc <getSamples>
 8002ce0:	9000      	str	r0, [sp, #0]
 8002ce2:	f002 f817 	bl	8004d14 <getPretrigger>
 8002ce6:	9b00      	ldr	r3, [sp, #0]
					dataLength*=2;
 8002ce8:	9a01      	ldr	r2, [sp, #4]
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002cea:	fb03 f300 	mul.w	r3, r3, r0
 8002cee:	eba9 4313 	sub.w	r3, r9, r3, lsr #16
 8002cf2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
					dataLength*=2;
 8002cf6:	0052      	lsls	r2, r2, #1
 8002cf8:	9201      	str	r2, [sp, #4]
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))*2+oneChanMemSize)%oneChanMemSize;
 8002cfa:	fbb3 f2f5 	udiv	r2, r3, r5
 8002cfe:	fb05 3312 	mls	r3, r5, r2, r3
 8002d02:	9300      	str	r3, [sp, #0]
				header[9]=(uint8_t)(dataLength >> 24);
 8002d04:	9901      	ldr	r1, [sp, #4]
				header[15]=channels;
 8002d06:	9803      	ldr	r0, [sp, #12]
 8002d08:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
				if(j+dataLength>oneChanMemSize){
 8002d0c:	9800      	ldr	r0, [sp, #0]
				header[8]=(uint8_t)adcRes;	
 8002d0e:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
				header[10]=(uint8_t)(dataLength >> 16);
 8002d12:	0c0b      	lsrs	r3, r1, #16
				header[9]=(uint8_t)(dataLength >> 24);
 8002d14:	0e0a      	lsrs	r2, r1, #24
				header[10]=(uint8_t)(dataLength >> 16);
 8002d16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				if(j+dataLength>oneChanMemSize){
 8002d1a:	180b      	adds	r3, r1, r0
				header[9]=(uint8_t)(dataLength >> 24);
 8002d1c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
				if(j+dataLength>oneChanMemSize){
 8002d20:	42ab      	cmp	r3, r5
				header[11]=(uint8_t)(dataLength >> 8);
 8002d22:	ea4f 2211 	mov.w	r2, r1, lsr #8
				header[12]=(uint8_t)dataLength;
 8002d26:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
				header[11]=(uint8_t)(dataLength >> 8);
 8002d2a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
				if(j+dataLength>oneChanMemSize){
 8002d2e:	f240 81c0 	bls.w	80030b2 <CommTask+0x7a2>
					dataLenFirst=oneChanMemSize-j;
 8002d32:	1a2d      	subs	r5, r5, r0
					dataLenSecond=dataLength-dataLenFirst;
 8002d34:	1b4b      	subs	r3, r1, r5
					dataLenFirst=oneChanMemSize-j;
 8002d36:	e9cd 5301 	strd	r5, r3, [sp, #4]
				for(i=0;i<channels;i++){
 8002d3a:	9b03      	ldr	r3, [sp, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d066      	beq.n	8002e0e <CommTask+0x4fe>
						commsSendBuff(pointer + j, dataLenFirst);
 8002d40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002d44:	9305      	str	r3, [sp, #20]
				for(i=0;i<channels;i++){
 8002d46:	2400      	movs	r4, #0
 8002d48:	e00b      	b.n	8002d62 <CommTask+0x452>
					}else if(dataLenFirst>0){
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 8198 	bne.w	8003080 <CommTask+0x770>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002d50:	9b02      	ldr	r3, [sp, #8]
 8002d52:	2bc8      	cmp	r3, #200	; 0xc8
 8002d54:	d839      	bhi.n	8002dca <CommTask+0x4ba>
					}else if(dataLenSecond>0){
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 818c 	bne.w	8003074 <CommTask+0x764>
				for(i=0;i<channels;i++){
 8002d5c:	9b03      	ldr	r3, [sp, #12]
 8002d5e:	42a3      	cmp	r3, r4
 8002d60:	d055      	beq.n	8002e0e <CommTask+0x4fe>
					pointer = (uint8_t*)getDataPointer(i);
 8002d62:	4620      	mov	r0, r4
 8002d64:	f001 ffb6 	bl	8004cd4 <getDataPointer>
					header[14]=(i+1);
 8002d68:	3401      	adds	r4, #1
					pointer = (uint8_t*)getDataPointer(i);
 8002d6a:	4605      	mov	r5, r0
					header[14]=(i+1);
 8002d6c:	b2e4      	uxtb	r4, r4
					commsSendBuff(header,16);
 8002d6e:	2110      	movs	r1, #16
 8002d70:	a808      	add	r0, sp, #32
					header[14]=(i+1);
 8002d72:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
					commsSendBuff(header,16);
 8002d76:	f00b feeb 	bl	800eb50 <commsSendBuff>
					if(dataLenFirst>COMMS_BULK_SIZE ){
 8002d7a:	9b01      	ldr	r3, [sp, #4]
 8002d7c:	2bc8      	cmp	r3, #200	; 0xc8
 8002d7e:	d9e4      	bls.n	8002d4a <CommTask+0x43a>
 8002d80:	4699      	mov	r9, r3
						k=0;
 8002d82:	2300      	movs	r3, #0
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d84:	9404      	str	r4, [sp, #16]
 8002d86:	464c      	mov	r4, r9
 8002d88:	4699      	mov	r9, r3
 8002d8a:	23c8      	movs	r3, #200	; 0xc8
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	9b00      	ldr	r3, [sp, #0]
 8002d90:	fb12 3009 	smlabb	r0, r2, r9, r3
 8002d94:	21c8      	movs	r1, #200	; 0xc8
 8002d96:	4428      	add	r0, r5
							tmpToSend-=COMMS_BULK_SIZE;
 8002d98:	3cc8      	subs	r4, #200	; 0xc8
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002d9a:	f00b fed9 	bl	800eb50 <commsSendBuff>
							k++;
 8002d9e:	f109 0301 	add.w	r3, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002da2:	2cc8      	cmp	r4, #200	; 0xc8
							k++;
 8002da4:	fa5f f983 	uxtb.w	r9, r3
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002da8:	f04f 01c8 	mov.w	r1, #200	; 0xc8
						while(tmpToSend>COMMS_BULK_SIZE){
 8002dac:	d8ed      	bhi.n	8002d8a <CommTask+0x47a>
							commsSendBuff(pointer + j+k*COMMS_BULK_SIZE, tmpToSend);
 8002dae:	9a00      	ldr	r2, [sp, #0]
 8002db0:	464b      	mov	r3, r9
 8002db2:	fb11 2303 	smlabb	r3, r1, r3, r2
 8002db6:	46a1      	mov	r9, r4
 8002db8:	18e8      	adds	r0, r5, r3
 8002dba:	fa1f f189 	uxth.w	r1, r9
 8002dbe:	9c04      	ldr	r4, [sp, #16]
 8002dc0:	f00b fec6 	bl	800eb50 <commsSendBuff>
					if(dataLenSecond>COMMS_BULK_SIZE ){
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	2bc8      	cmp	r3, #200	; 0xc8
 8002dc8:	d9c5      	bls.n	8002d56 <CommTask+0x446>
						k=0;
 8002dca:	9404      	str	r4, [sp, #16]
 8002dcc:	f04f 0900 	mov.w	r9, #0
 8002dd0:	461c      	mov	r4, r3
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002dd2:	eb09 0089 	add.w	r0, r9, r9, lsl #2
 8002dd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dda:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002dde:	21c8      	movs	r1, #200	; 0xc8
							tmpToSend-=COMMS_BULK_SIZE;
 8002de0:	3cc8      	subs	r4, #200	; 0xc8
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, COMMS_BULK_SIZE);
 8002de2:	f00b feb5 	bl	800eb50 <commsSendBuff>
							k++;
 8002de6:	f109 0901 	add.w	r9, r9, #1
						while(tmpToSend>COMMS_BULK_SIZE){
 8002dea:	2cc8      	cmp	r4, #200	; 0xc8
							k++;
 8002dec:	fa5f f989 	uxtb.w	r9, r9
						while(tmpToSend>COMMS_BULK_SIZE){
 8002df0:	d8ef      	bhi.n	8002dd2 <CommTask+0x4c2>
							commsSendBuff(pointer+k*COMMS_BULK_SIZE, tmpToSend);
 8002df2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002df6:	4623      	mov	r3, r4
 8002df8:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002dfc:	b299      	uxth	r1, r3
 8002dfe:	eb05 00c9 	add.w	r0, r5, r9, lsl #3
 8002e02:	9c04      	ldr	r4, [sp, #16]
 8002e04:	f00b fea4 	bl	800eb50 <commsSendBuff>
				for(i=0;i<channels;i++){
 8002e08:	9b03      	ldr	r3, [sp, #12]
 8002e0a:	42a3      	cmp	r3, r4
 8002e0c:	d1a9      	bne.n	8002d62 <CommTask+0x452>
				commsSendString(STR_SCOPE_OK);
 8002e0e:	486e      	ldr	r0, [pc, #440]	; (8002fc8 <CommTask+0x6b8>)
 8002e10:	f00b fea8 	bl	800eb64 <commsSendString>
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002e14:	486d      	ldr	r0, [pc, #436]	; (8002fcc <CommTask+0x6bc>)
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002e16:	2414      	movs	r4, #20
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1e:	f10d 011e 	add.w	r1, sp, #30
 8002e22:	6800      	ldr	r0, [r0, #0]
				uint16_t passMsg = MSG_SCOPE_DATA_SENT;
 8002e24:	f8ad 401e 	strh.w	r4, [sp, #30]
				xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8002e28:	f009 fa7c 	bl	800c324 <xQueueGenericSend>
 8002e2c:	e5ef      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SCOPE);
 8002e2e:	4865      	ldr	r0, [pc, #404]	; (8002fc4 <CommTask+0x6b4>)
 8002e30:	f00b fe98 	bl	800eb64 <commsSendString>
			sendScopeInputs();
 8002e34:	f7ff fc9e 	bl	8002774 <sendScopeInputs>
			break;
 8002e38:	e5e9      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SCOPE);
 8002e3a:	4862      	ldr	r0, [pc, #392]	; (8002fc4 <CommTask+0x6b4>)
 8002e3c:	f00b fe92 	bl	800eb64 <commsSendString>
			sendScopeConf();
 8002e40:	f7ff fc46 	bl	80026d0 <sendScopeConf>
			break;
 8002e44:	e5e3      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_COUNTER);
 8002e46:	4862      	ldr	r0, [pc, #392]	; (8002fd0 <CommTask+0x6c0>)
 8002e48:	f00b fe8c 	bl	800eb64 <commsSendString>
			if(counter.state==COUNTER_ETR){
 8002e4c:	f89a 33b8 	ldrb.w	r3, [sl, #952]	; 0x3b8
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f000 80e7 	beq.w	8003024 <CommTask+0x714>
			}else if(counter.state==COUNTER_REF){
 8002e56:	f89a 33b8 	ldrb.w	r3, [sl, #952]	; 0x3b8
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	f000 80a5 	beq.w	8002faa <CommTask+0x69a>
			}else if(counter.state==COUNTER_IC){
 8002e60:	f89a 33b8 	ldrb.w	r3, [sl, #952]	; 0x3b8
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	f000 80e5 	beq.w	8003034 <CommTask+0x724>
			}else if(counter.state==COUNTER_TI){						
 8002e6a:	f89a 33b8 	ldrb.w	r3, [sl, #952]	; 0x3b8
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	f47f adcd 	bne.w	8002a0e <CommTask+0xfe>
				switch(counter.tiState){
 8002e74:	f89a 33c9 	ldrb.w	r3, [sl, #969]	; 0x3c9
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	f000 8131 	beq.w	80030e2 <CommTask+0x7d2>
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d106      	bne.n	8002e92 <CommTask+0x582>
					commsSendString(STR_CNT_TI_DATA);
 8002e84:	4853      	ldr	r0, [pc, #332]	; (8002fd4 <CommTask+0x6c4>)
 8002e86:	f00b fe6d 	bl	800eb64 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 8002e8a:	ed9a 0be0 	vldr	d0, [sl, #896]	; 0x380
 8002e8e:	f00b fe83 	bl	800eb98 <commsSendDouble>
				counter.tiState = CLEAR;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f88a 33c9 	strb.w	r3, [sl, #969]	; 0x3c9
 8002e98:	e5b9      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_COUNTER);
 8002e9a:	484d      	ldr	r0, [pc, #308]	; (8002fd0 <CommTask+0x6c0>)
 8002e9c:	f00b fe62 	bl	800eb64 <commsSendString>
	commsSendString(STR_CONFIG);
 8002ea0:	484d      	ldr	r0, [pc, #308]	; (8002fd8 <CommTask+0x6c8>)
 8002ea2:	f00b fe5f 	bl	800eb64 <commsSendString>
	commsSendString(COUNTER_MODES);
 8002ea6:	484d      	ldr	r0, [pc, #308]	; (8002fdc <CommTask+0x6cc>)
 8002ea8:	f00b fe5c 	bl	800eb64 <commsSendString>
	commsSendString(CNT_ETR_PIN);
 8002eac:	484c      	ldr	r0, [pc, #304]	; (8002fe0 <CommTask+0x6d0>)
 8002eae:	f00b fe59 	bl	800eb64 <commsSendString>
	commsSendString(CNT_IC_CH1_PIN);
 8002eb2:	484b      	ldr	r0, [pc, #300]	; (8002fe0 <CommTask+0x6d0>)
 8002eb4:	f00b fe56 	bl	800eb64 <commsSendString>
	commsSendString(CNT_IC_CH2_PIN);
 8002eb8:	484a      	ldr	r0, [pc, #296]	; (8002fe4 <CommTask+0x6d4>)
 8002eba:	f00b fe53 	bl	800eb64 <commsSendString>
	commsSendString(CNT_REF1_PIN);
 8002ebe:	484a      	ldr	r0, [pc, #296]	; (8002fe8 <CommTask+0x6d8>)
 8002ec0:	f00b fe50 	bl	800eb64 <commsSendString>
	commsSendString(CNT_REF2_PIN);
 8002ec4:	4846      	ldr	r0, [pc, #280]	; (8002fe0 <CommTask+0x6d0>)
 8002ec6:	f00b fe4d 	bl	800eb64 <commsSendString>
	commsSendString(CNT_TI_CH1_PIN);
 8002eca:	4845      	ldr	r0, [pc, #276]	; (8002fe0 <CommTask+0x6d0>)
 8002ecc:	f00b fe4a 	bl	800eb64 <commsSendString>
	commsSendString(CNT_TI_CH2_PIN);
 8002ed0:	4844      	ldr	r0, [pc, #272]	; (8002fe4 <CommTask+0x6d4>)
 8002ed2:	f00b fe47 	bl	800eb64 <commsSendString>
 8002ed6:	e59a      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SYSTEM);
 8002ed8:	4844      	ldr	r0, [pc, #272]	; (8002fec <CommTask+0x6dc>)
 8002eda:	f00b fe43 	bl	800eb64 <commsSendString>
	commsSendString("COMM");
 8002ede:	4844      	ldr	r0, [pc, #272]	; (8002ff0 <CommTask+0x6e0>)
 8002ee0:	f00b fe40 	bl	800eb64 <commsSendString>
	commsSendUint32(COMM_BUFFER_SIZE);
 8002ee4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ee8:	f00b fe1a 	bl	800eb20 <commsSendUint32>
	commsSendUint32(UART_SPEED);
 8002eec:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8002ef0:	f00b fe16 	bl	800eb20 <commsSendUint32>
	commsSendString(USART_TX_PIN_STR);
 8002ef4:	483f      	ldr	r0, [pc, #252]	; (8002ff4 <CommTask+0x6e4>)
 8002ef6:	f00b fe35 	bl	800eb64 <commsSendString>
	commsSendString(USART_RX_PIN_STR);
 8002efa:	483f      	ldr	r0, [pc, #252]	; (8002ff8 <CommTask+0x6e8>)
 8002efc:	f00b fe32 	bl	800eb64 <commsSendString>
 8002f00:	e585      	b.n	8002a0e <CommTask+0xfe>
			sendSystConf();
 8002f02:	f7ff fb49 	bl	8002598 <sendSystConf>
			break;
 8002f06:	e582      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SYSTEM);
 8002f08:	4838      	ldr	r0, [pc, #224]	; (8002fec <CommTask+0x6dc>)
 8002f0a:	f00b fe2b 	bl	800eb64 <commsSendString>
	commsSendString("VER_");
 8002f0e:	483b      	ldr	r0, [pc, #236]	; (8002ffc <CommTask+0x6ec>)
 8002f10:	f00b fe28 	bl	800eb64 <commsSendString>
	commsSendString("LEO FW"); 	//12
 8002f14:	483a      	ldr	r0, [pc, #232]	; (8003000 <CommTask+0x6f0>)
 8002f16:	f00b fe25 	bl	800eb64 <commsSendString>
	commsSendString(FW_VERSION); 			//4
 8002f1a:	483a      	ldr	r0, [pc, #232]	; (8003004 <CommTask+0x6f4>)
 8002f1c:	f00b fe22 	bl	800eb64 <commsSendString>
	commsSendString(BUILD);						//4
 8002f20:	4839      	ldr	r0, [pc, #228]	; (8003008 <CommTask+0x6f8>)
 8002f22:	f00b fe1f 	bl	800eb64 <commsSendString>
	commsSendString("FreeRTOS");			//8	
 8002f26:	4839      	ldr	r0, [pc, #228]	; (800300c <CommTask+0x6fc>)
 8002f28:	f00b fe1c 	bl	800eb64 <commsSendString>
	commsSendString(tskKERNEL_VERSION_NUMBER);//6
 8002f2c:	4838      	ldr	r0, [pc, #224]	; (8003010 <CommTask+0x700>)
 8002f2e:	f00b fe19 	bl	800eb64 <commsSendString>
	commsSendString("ST HAL");				//6
 8002f32:	4838      	ldr	r0, [pc, #224]	; (8003014 <CommTask+0x704>)
 8002f34:	f00b fe16 	bl	800eb64 <commsSendString>
	commsSend('V');
 8002f38:	2056      	movs	r0, #86	; 0x56
 8002f3a:	f00b fdef 	bl	800eb1c <commsSend>
	commsSend((HAL_GetHalVersion()>>24)+48);
 8002f3e:	f002 faf9 	bl	8005534 <HAL_GetHalVersion>
 8002f42:	0e00      	lsrs	r0, r0, #24
 8002f44:	3030      	adds	r0, #48	; 0x30
 8002f46:	b2c0      	uxtb	r0, r0
 8002f48:	f00b fde8 	bl	800eb1c <commsSend>
	commsSend('.');
 8002f4c:	202e      	movs	r0, #46	; 0x2e
 8002f4e:	f00b fde5 	bl	800eb1c <commsSend>
	commsSend((HAL_GetHalVersion()>>16)+48);
 8002f52:	f002 faef 	bl	8005534 <HAL_GetHalVersion>
 8002f56:	0c00      	lsrs	r0, r0, #16
 8002f58:	3030      	adds	r0, #48	; 0x30
 8002f5a:	b2c0      	uxtb	r0, r0
 8002f5c:	f00b fdde 	bl	800eb1c <commsSend>
	commsSend('.');
 8002f60:	202e      	movs	r0, #46	; 0x2e
 8002f62:	f00b fddb 	bl	800eb1c <commsSend>
	commsSend((HAL_GetHalVersion()>>8)+48); //6
 8002f66:	f002 fae5 	bl	8005534 <HAL_GetHalVersion>
 8002f6a:	0a00      	lsrs	r0, r0, #8
 8002f6c:	3030      	adds	r0, #48	; 0x30
 8002f6e:	b2c0      	uxtb	r0, r0
 8002f70:	f00b fdd4 	bl	800eb1c <commsSend>
 8002f74:	e54b      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SYSTEM);
 8002f76:	481d      	ldr	r0, [pc, #116]	; (8002fec <CommTask+0x6dc>)
 8002f78:	f00b fdf4 	bl	800eb64 <commsSendString>
			commsSendString(IDN_STRING);
 8002f7c:	4826      	ldr	r0, [pc, #152]	; (8003018 <CommTask+0x708>)
 8002f7e:	f00b fdf1 	bl	800eb64 <commsSendString>
			break;
 8002f82:	e544      	b.n	8002a0e <CommTask+0xfe>
			commsSendString(STR_SYSTEM);
 8002f84:	4819      	ldr	r0, [pc, #100]	; (8002fec <CommTask+0x6dc>)
 8002f86:	f00b fded 	bl	800eb64 <commsSendString>
			commsSendUint32(message);
 8002f8a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8002f8e:	f00b fdc7 	bl	800eb20 <commsSendUint32>
 8002f92:	e53c      	b.n	8002a0e <CommTask+0xfe>
				commsSendString(STR_LOG_ANLYS_TRIGGER_POINTER);	
 8002f94:	4821      	ldr	r0, [pc, #132]	; (800301c <CommTask+0x70c>)
 8002f96:	f00b fde5 	bl	800eb64 <commsSendString>
				commsSendUint32(logAnlys.triggerPointer);
 8002f9a:	f8d8 0000 	ldr.w	r0, [r8]
 8002f9e:	f00b fdbf 	bl	800eb20 <commsSendUint32>
				logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f888 3017 	strb.w	r3, [r8, #23]
 8002fa8:	e5e8      	b.n	8002b7c <CommTask+0x26c>
				if(counter.refWarning == COUNTER_REF_SEND_DATA){
 8002faa:	f89a 33c5 	ldrb.w	r3, [sl, #965]	; 0x3c5
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d16c      	bne.n	800308c <CommTask+0x77c>
					commsSendString(STR_CNT_REF_DATA);
 8002fb2:	481b      	ldr	r0, [pc, #108]	; (8003020 <CommTask+0x710>)
 8002fb4:	f00b fdd6 	bl	800eb64 <commsSendString>
					commsSendDouble(counter.counterEtr.freq);
 8002fb8:	ed9a 0bec 	vldr	d0, [sl, #944]	; 0x3b0
 8002fbc:	f00b fdec 	bl	800eb98 <commsSendDouble>
 8002fc0:	e525      	b.n	8002a0e <CommTask+0xfe>
 8002fc2:	bf00      	nop
 8002fc4:	08014c58 	.word	0x08014c58
 8002fc8:	08014c60 	.word	0x08014c60
 8002fcc:	20007048 	.word	0x20007048
 8002fd0:	08014c88 	.word	0x08014c88
 8002fd4:	08014cd0 	.word	0x08014cd0
 8002fd8:	08014e2c 	.word	0x08014e2c
 8002fdc:	08014d3c 	.word	0x08014d3c
 8002fe0:	08014d48 	.word	0x08014d48
 8002fe4:	08014d4c 	.word	0x08014d4c
 8002fe8:	08014d50 	.word	0x08014d50
 8002fec:	08014e24 	.word	0x08014e24
 8002ff0:	08014d34 	.word	0x08014d34
 8002ff4:	08014e8c 	.word	0x08014e8c
 8002ff8:	08014e94 	.word	0x08014e94
 8002ffc:	08014e9c 	.word	0x08014e9c
 8003000:	08014ea4 	.word	0x08014ea4
 8003004:	08014e60 	.word	0x08014e60
 8003008:	08014eac 	.word	0x08014eac
 800300c:	08014eb4 	.word	0x08014eb4
 8003010:	08014e74 	.word	0x08014e74
 8003014:	08014ec0 	.word	0x08014ec0
 8003018:	08014e34 	.word	0x08014e34
 800301c:	08014cf0 	.word	0x08014cf0
 8003020:	08014c98 	.word	0x08014c98
				commsSendString(STR_CNT_ETR_DATA);
 8003024:	4831      	ldr	r0, [pc, #196]	; (80030ec <CommTask+0x7dc>)
 8003026:	f00b fd9d 	bl	800eb64 <commsSendString>
				commsSendDouble(counter.counterEtr.freq);
 800302a:	ed9a 0bec 	vldr	d0, [sl, #944]	; 0x3b0
 800302e:	f00b fdb3 	bl	800eb98 <commsSendDouble>
 8003032:	e4ec      	b.n	8002a0e <CommTask+0xfe>
				if(counter.icDutyCycle==DUTY_CYCLE_DISABLED){
 8003034:	f89a 33c8 	ldrb.w	r3, [sl, #968]	; 0x3c8
 8003038:	bb63      	cbnz	r3, 8003094 <CommTask+0x784>
					if(counter.icChannel1==COUNTER_IRQ_IC){												
 800303a:	f89a 33c6 	ldrb.w	r3, [sl, #966]	; 0x3c6
 800303e:	b94b      	cbnz	r3, 8003054 <CommTask+0x744>
						commsSendString(STR_CNT_IC1_DATA);
 8003040:	482b      	ldr	r0, [pc, #172]	; (80030f0 <CommTask+0x7e0>)
 8003042:	f00b fd8f 	bl	800eb64 <commsSendString>
						commsSendDouble(counter.counterIc.ic1freq);
 8003046:	ed9a 0be0 	vldr	d0, [sl, #896]	; 0x380
 800304a:	f00b fda5 	bl	800eb98 <commsSendDouble>
						counter.icChannel1=COUNTER_IRQ_IC_PASS;
 800304e:	2301      	movs	r3, #1
 8003050:	f88a 33c6 	strb.w	r3, [sl, #966]	; 0x3c6
					if(counter.icChannel2==COUNTER_IRQ_IC){							
 8003054:	f89a 33c7 	ldrb.w	r3, [sl, #967]	; 0x3c7
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f acd8 	bne.w	8002a0e <CommTask+0xfe>
						commsSendString(STR_CNT_IC2_DATA);	
 800305e:	4825      	ldr	r0, [pc, #148]	; (80030f4 <CommTask+0x7e4>)
 8003060:	f00b fd80 	bl	800eb64 <commsSendString>
						commsSendDouble(counter.counterIc.ic2freq);
 8003064:	ed9a 0be2 	vldr	d0, [sl, #904]	; 0x388
 8003068:	f00b fd96 	bl	800eb98 <commsSendDouble>
						counter.icChannel2=COUNTER_IRQ_IC_PASS;
 800306c:	2301      	movs	r3, #1
 800306e:	f88a 33c7 	strb.w	r3, [sl, #967]	; 0x3c7
 8003072:	e4cc      	b.n	8002a0e <CommTask+0xfe>
						commsSendBuff(pointer, dataLenSecond);
 8003074:	4628      	mov	r0, r5
 8003076:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800307a:	f00b fd69 	bl	800eb50 <commsSendBuff>
 800307e:	e66d      	b.n	8002d5c <CommTask+0x44c>
						commsSendBuff(pointer + j, dataLenFirst);
 8003080:	9b00      	ldr	r3, [sp, #0]
 8003082:	9905      	ldr	r1, [sp, #20]
 8003084:	18e8      	adds	r0, r5, r3
 8003086:	f00b fd63 	bl	800eb50 <commsSendBuff>
 800308a:	e661      	b.n	8002d50 <CommTask+0x440>
					commsSendString(STR_CNT_REF_WARN);
 800308c:	481a      	ldr	r0, [pc, #104]	; (80030f8 <CommTask+0x7e8>)
 800308e:	f00b fd69 	bl	800eb64 <commsSendString>
 8003092:	e4bc      	b.n	8002a0e <CommTask+0xfe>
					commsSendString(STR_CNT_DUTY_CYCLE);
 8003094:	4819      	ldr	r0, [pc, #100]	; (80030fc <CommTask+0x7ec>)
 8003096:	f00b fd65 	bl	800eb64 <commsSendString>
					commsSendDouble(counter.counterIc.ic1freq);
 800309a:	ed9a 0be0 	vldr	d0, [sl, #896]	; 0x380
 800309e:	f00b fd7b 	bl	800eb98 <commsSendDouble>
					commsSendString(STR_CNT_PULSE_WIDTH);
 80030a2:	4817      	ldr	r0, [pc, #92]	; (8003100 <CommTask+0x7f0>)
 80030a4:	f00b fd5e 	bl	800eb64 <commsSendString>
					commsSendDouble(counter.counterIc.ic2freq);
 80030a8:	ed9a 0be2 	vldr	d0, [sl, #904]	; 0x388
 80030ac:	f00b fd74 	bl	800eb98 <commsSendDouble>
 80030b0:	e4ad      	b.n	8002a0e <CommTask+0xfe>
					dataLenSecond=0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	e640      	b.n	8002d3a <CommTask+0x42a>
					j = ((getTriggerIndex() - ((getSamples() * getPretrigger()) >> 16 ))+oneChanMemSize)%oneChanMemSize;
 80030b8:	f001 fe1a 	bl	8004cf0 <getTriggerIndex>
 80030bc:	4681      	mov	r9, r0
 80030be:	f001 fe1d 	bl	8004cfc <getSamples>
 80030c2:	9000      	str	r0, [sp, #0]
 80030c4:	f001 fe26 	bl	8004d14 <getPretrigger>
 80030c8:	9a00      	ldr	r2, [sp, #0]
 80030ca:	eb09 0305 	add.w	r3, r9, r5
 80030ce:	fb02 f200 	mul.w	r2, r2, r0
 80030d2:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 80030d6:	fbb3 f2f5 	udiv	r2, r3, r5
 80030da:	fb05 3312 	mls	r3, r5, r2, r3
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	e610      	b.n	8002d04 <CommTask+0x3f4>
					commsSendString(STR_CNT_TI_TIMEOUT);
 80030e2:	4808      	ldr	r0, [pc, #32]	; (8003104 <CommTask+0x7f4>)
 80030e4:	f00b fd3e 	bl	800eb64 <commsSendString>
					break;
 80030e8:	e6d3      	b.n	8002e92 <CommTask+0x582>
 80030ea:	bf00      	nop
 80030ec:	08014c90 	.word	0x08014c90
 80030f0:	08014ca8 	.word	0x08014ca8
 80030f4:	08014cb0 	.word	0x08014cb0
 80030f8:	08014ca0 	.word	0x08014ca0
 80030fc:	08014cb8 	.word	0x08014cb8
 8003100:	08014cc0 	.word	0x08014cc0
 8003104:	08014cc8 	.word	0x08014cc8

08003108 <CounterTask>:
 * 				Task is getting messages from other tasks and takes care about counter functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void CounterTask(void const *argument)
{
 8003108:	b500      	push	{lr}
 800310a:	b083      	sub	sp, #12
	uint16_t message = 0xFFFF;
 800310c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003110:	2200      	movs	r2, #0
 8003112:	2102      	movs	r1, #2
 8003114:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 8003116:	f8ad 3006 	strh.w	r3, [sp, #6]
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 800311a:	f009 f8bf 	bl	800c29c <xQueueGenericCreate>
 800311e:	4e92      	ldr	r6, [pc, #584]	; (8003368 <CounterTask+0x260>)
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8003120:	4c92      	ldr	r4, [pc, #584]	; (800336c <CounterTask+0x264>)
	counterMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003122:	6030      	str	r0, [r6, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 8003124:	2004      	movs	r0, #4
 8003126:	f009 fabb 	bl	800c6a0 <xQueueCreateMutex>

	if(counterMessageQueue == 0){
 800312a:	6833      	ldr	r3, [r6, #0]
	counterMutex = xSemaphoreCreateRecursiveMutex();
 800312c:	6020      	str	r0, [r4, #0]
	if(counterMessageQueue == 0){
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8103 	beq.w	800333a <CounterTask+0x232>
		break;
	case 500: 													/* ----	gate time 00.50 second */
		TIM_ARR_PSC_Config(0.5);
		break;
	case 1000: 													/* ----	gate time 01.00 second */
		TIM_ARR_PSC_Config(1);
 8003134:	ed9f cb82 	vldr	d12, [pc, #520]	; 8003340 <CounterTask+0x238>
		break;
	case 5000: 													/* ----	gate time 05.00 second */
		TIM_ARR_PSC_Config(5);
 8003138:	ed9f bb83 	vldr	d11, [pc, #524]	; 8003348 <CounterTask+0x240>
		break;
	case 10000: 												/* max. gate time 10.00 second */
		TIM_ARR_PSC_Config(10);
 800313c:	ed9f ab84 	vldr	d10, [pc, #528]	; 8003350 <CounterTask+0x248>
		TIM_ARR_PSC_Config(0.1);
 8003140:	ed9f 9b85 	vldr	d9, [pc, #532]	; 8003358 <CounterTask+0x250>
		TIM_ARR_PSC_Config(0.5);
 8003144:	ed9f 8b86 	vldr	d8, [pc, #536]	; 8003360 <CounterTask+0x258>
 8003148:	4d89      	ldr	r5, [pc, #548]	; (8003370 <CounterTask+0x268>)
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 800314a:	4618      	mov	r0, r3
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	2300      	movs	r3, #0
 8003152:	f10d 0106 	add.w	r1, sp, #6
 8003156:	f009 fb8d 	bl	800c874 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 800315a:	f04f 31ff 	mov.w	r1, #4294967295
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	f009 fd10 	bl	800cb84 <xQueueTakeMutexRecursive>
		switch(message){
 8003164:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003168:	3b06      	subs	r3, #6
 800316a:	2b07      	cmp	r3, #7
 800316c:	d81a      	bhi.n	80031a4 <CounterTask+0x9c>
 800316e:	e8df f003 	tbb	[pc, r3]
 8003172:	394b      	.short	0x394b
 8003174:	27304254 	.word	0x27304254
 8003178:	041e      	.short	0x041e
			counterGateConfig(counter.counterEtr.gateTime);
 800317a:	f8b5 33ac 	ldrh.w	r3, [r5, #940]	; 0x3ac
 800317e:	b29b      	uxth	r3, r3
	switch(gateTime){
 8003180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003184:	f000 80c4 	beq.w	8003310 <CounterTask+0x208>
 8003188:	f200 80b2 	bhi.w	80032f0 <CounterTask+0x1e8>
 800318c:	2b64      	cmp	r3, #100	; 0x64
 800318e:	f000 80cd 	beq.w	800332c <CounterTask+0x224>
 8003192:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003196:	d105      	bne.n	80031a4 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(0.5);
 8003198:	eeb0 0a48 	vmov.f32	s0, s16
 800319c:	eef0 0a68 	vmov.f32	s1, s17
 80031a0:	f00d fb3e 	bl	8010820 <TIM_ARR_PSC_Config>
		xSemaphoreGiveRecursive(counterMutex);
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	f009 faaf 	bl	800c708 <xQueueGiveMutexRecursive>
 80031aa:	6833      	ldr	r3, [r6, #0]
		xQueueReceive(counterMessageQueue, &message, portMAX_DELAY);
 80031ac:	e7cd      	b.n	800314a <CounterTask+0x42>
	switch(counter.state){
 80031ae:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80031b2:	3b01      	subs	r3, #1
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d8f5      	bhi.n	80031a4 <CounterTask+0x9c>
 80031b8:	e8df f003 	tbb	[pc, r3]
 80031bc:	857c7f82 	.word	0x857c7f82
	switch(counter.state){
 80031c0:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80031c4:	3b01      	subs	r3, #1
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d8ec      	bhi.n	80031a4 <CounterTask+0x9c>
 80031ca:	e8df f003 	tbb	[pc, r3]
 80031ce:	3532      	.short	0x3532
 80031d0:	3238      	.short	0x3238
	switch(counter.state){
 80031d2:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80031d6:	3b01      	subs	r3, #1
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d8e3      	bhi.n	80031a4 <CounterTask+0x9c>
 80031dc:	e8df f003 	tbb	[pc, r3]
 80031e0:	26564b26 	.word	0x26564b26
	switch(counter.state){
 80031e4:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80031e8:	3b01      	subs	r3, #1
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d82c      	bhi.n	8003248 <CounterTask+0x140>
 80031ee:	e8df f003 	tbb	[pc, r3]
 80031f2:	6d73      	.short	0x6d73
 80031f4:	7029      	.short	0x7029
 80031f6:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80031fa:	3b01      	subs	r3, #1
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d83f      	bhi.n	8003280 <CounterTask+0x178>
 8003200:	e8df f003 	tbb	[pc, r3]
 8003204:	703c6d73 	.word	0x703c6d73
 8003208:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 800320c:	3b01      	subs	r3, #1
 800320e:	2b03      	cmp	r3, #3
 8003210:	d822      	bhi.n	8003258 <CounterTask+0x150>
 8003212:	e8df f003 	tbb	[pc, r3]
 8003216:	272d      	.short	0x272d
 8003218:	2a1f      	.short	0x2a1f
 800321a:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 800321e:	3b01      	subs	r3, #1
 8003220:	2b03      	cmp	r3, #3
 8003222:	d838      	bhi.n	8003296 <CounterTask+0x18e>
 8003224:	e8df f003 	tbb	[pc, r3]
 8003228:	40353d43 	.word	0x40353d43
		TIM_ETR_Start();
 800322c:	f00c fefa 	bl	8010024 <TIM_ETR_Start>
 8003230:	e7b8      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ETR_Stop();
 8003232:	f00c ff23 	bl	801007c <TIM_ETR_Stop>
 8003236:	e7b5      	b.n	80031a4 <CounterTask+0x9c>
		TIM_IC_Stop();
 8003238:	f00c ff6a 	bl	8010110 <TIM_IC_Stop>
 800323c:	e7b2      	b.n	80031a4 <CounterTask+0x9c>
		TIM_TI_Stop();
 800323e:	f00d f851 	bl	80102e4 <TIM_TI_Stop>
 8003242:	e7af      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ti_deinit();
 8003244:	f00c fec6 	bl	800ffd4 <TIM_ti_deinit>
	counter.state = COUNTER_IC;
 8003248:	2302      	movs	r3, #2
 800324a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ic_init();
 800324e:	f00c fd57 	bl	800fd00 <TIM_counter_ic_init>
 8003252:	e7a7      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ti_deinit();
 8003254:	f00c febe 	bl	800ffd4 <TIM_ti_deinit>
	counter.state = COUNTER_ETR;
 8003258:	2301      	movs	r3, #1
 800325a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_etr_init();
 800325e:	f00c fc8d 	bl	800fb7c <TIM_counter_etr_init>
 8003262:	e79f      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ic_deinit();
 8003264:	f00c fea8 	bl	800ffb8 <TIM_ic_deinit>
 8003268:	e7f6      	b.n	8003258 <CounterTask+0x150>
		TIM_ref_deinit();
 800326a:	f00c fe97 	bl	800ff9c <TIM_ref_deinit>
 800326e:	e7f3      	b.n	8003258 <CounterTask+0x150>
		TIM_etr_deinit();
 8003270:	f00c fe86 	bl	800ff80 <TIM_etr_deinit>
 8003274:	e7f0      	b.n	8003258 <CounterTask+0x150>
		TIM_IC_Start();
 8003276:	f00c ff19 	bl	80100ac <TIM_IC_Start>
 800327a:	e793      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ti_deinit();
 800327c:	f00c feaa 	bl	800ffd4 <TIM_ti_deinit>
	counter.state = COUNTER_TI;
 8003280:	2303      	movs	r3, #3
 8003282:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ti_init();
 8003286:	f00c fd9d 	bl	800fdc4 <TIM_counter_ti_init>
 800328a:	e78b      	b.n	80031a4 <CounterTask+0x9c>
		TIM_TI_Start();
 800328c:	f00c ff66 	bl	801015c <TIM_TI_Start>
 8003290:	e788      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ti_deinit();
 8003292:	f00c fe9f 	bl	800ffd4 <TIM_ti_deinit>
	counter.state = COUNTER_REF;
 8003296:	2304      	movs	r3, #4
 8003298:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
	TIM_counter_ref_init();
 800329c:	f00c fcda 	bl	800fc54 <TIM_counter_ref_init>
 80032a0:	e780      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ic_deinit();
 80032a2:	f00c fe89 	bl	800ffb8 <TIM_ic_deinit>
 80032a6:	e7f6      	b.n	8003296 <CounterTask+0x18e>
		TIM_ref_deinit();
 80032a8:	f00c fe78 	bl	800ff9c <TIM_ref_deinit>
 80032ac:	e7f3      	b.n	8003296 <CounterTask+0x18e>
		TIM_etr_deinit();
 80032ae:	f00c fe67 	bl	800ff80 <TIM_etr_deinit>
 80032b2:	e7f0      	b.n	8003296 <CounterTask+0x18e>
		TIM_ti_deinit();
 80032b4:	f00c fe8e 	bl	800ffd4 <TIM_ti_deinit>
 80032b8:	e774      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ic_deinit();
 80032ba:	f00c fe7d 	bl	800ffb8 <TIM_ic_deinit>
 80032be:	e771      	b.n	80031a4 <CounterTask+0x9c>
		TIM_etr_deinit();
 80032c0:	f00c fe5e 	bl	800ff80 <TIM_etr_deinit>
 80032c4:	e76e      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ref_deinit();
 80032c6:	f00c fe69 	bl	800ff9c <TIM_ref_deinit>
 80032ca:	e76b      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ic_deinit();
 80032cc:	f00c fe74 	bl	800ffb8 <TIM_ic_deinit>
 80032d0:	e7ba      	b.n	8003248 <CounterTask+0x140>
		TIM_ref_deinit();
 80032d2:	f00c fe63 	bl	800ff9c <TIM_ref_deinit>
 80032d6:	e7b7      	b.n	8003248 <CounterTask+0x140>
		TIM_etr_deinit();
 80032d8:	f00c fe52 	bl	800ff80 <TIM_etr_deinit>
 80032dc:	e7b4      	b.n	8003248 <CounterTask+0x140>
		TIM_ic_deinit();
 80032de:	f00c fe6b 	bl	800ffb8 <TIM_ic_deinit>
 80032e2:	e7cd      	b.n	8003280 <CounterTask+0x178>
		TIM_ref_deinit();
 80032e4:	f00c fe5a 	bl	800ff9c <TIM_ref_deinit>
 80032e8:	e7ca      	b.n	8003280 <CounterTask+0x178>
		TIM_etr_deinit();
 80032ea:	f00c fe49 	bl	800ff80 <TIM_etr_deinit>
 80032ee:	e7c7      	b.n	8003280 <CounterTask+0x178>
	switch(gateTime){
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d012      	beq.n	800331e <CounterTask+0x216>
 80032f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80032fc:	4293      	cmp	r3, r2
 80032fe:	f47f af51 	bne.w	80031a4 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(10);
 8003302:	eeb0 0a4a 	vmov.f32	s0, s20
 8003306:	eef0 0a6a 	vmov.f32	s1, s21
 800330a:	f00d fa89 	bl	8010820 <TIM_ARR_PSC_Config>
 800330e:	e749      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(1);
 8003310:	eeb0 0a4c 	vmov.f32	s0, s24
 8003314:	eef0 0a6c 	vmov.f32	s1, s25
 8003318:	f00d fa82 	bl	8010820 <TIM_ARR_PSC_Config>
 800331c:	e742      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(5);
 800331e:	eeb0 0a4b 	vmov.f32	s0, s22
 8003322:	eef0 0a6b 	vmov.f32	s1, s23
 8003326:	f00d fa7b 	bl	8010820 <TIM_ARR_PSC_Config>
 800332a:	e73b      	b.n	80031a4 <CounterTask+0x9c>
		TIM_ARR_PSC_Config(0.1);
 800332c:	eeb0 0a49 	vmov.f32	s0, s18
 8003330:	eef0 0a69 	vmov.f32	s1, s19
 8003334:	f00d fa74 	bl	8010820 <TIM_ARR_PSC_Config>
 8003338:	e734      	b.n	80031a4 <CounterTask+0x9c>
 800333a:	e7fe      	b.n	800333a <CounterTask+0x232>
 800333c:	f3af 8000 	nop.w
 8003340:	00000000 	.word	0x00000000
 8003344:	3ff00000 	.word	0x3ff00000
 8003348:	00000000 	.word	0x00000000
 800334c:	40140000 	.word	0x40140000
 8003350:	00000000 	.word	0x00000000
 8003354:	40240000 	.word	0x40240000
 8003358:	9999999a 	.word	0x9999999a
 800335c:	3fb99999 	.word	0x3fb99999
 8003360:	00000000 	.word	0x00000000
 8003364:	3fe00000 	.word	0x3fe00000
 8003368:	20004cc4 	.word	0x20004cc4
 800336c:	20005098 	.word	0x20005098
 8003370:	20004cc8 	.word	0x20004cc8

08003374 <counterSetMode>:
void counterSetMode(uint8_t mode){
 8003374:	b500      	push	{lr}
 8003376:	b083      	sub	sp, #12
	switch(mode){
 8003378:	2803      	cmp	r0, #3
 800337a:	d80e      	bhi.n	800339a <counterSetMode+0x26>
 800337c:	e8df f000 	tbb	[pc, r0]
 8003380:	02101316 	.word	0x02101316
		passMsg = MSG_CNT_SET_REFERENCE_MODE;
 8003384:	a902      	add	r1, sp, #8
 8003386:	2308      	movs	r3, #8
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 8003388:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <counterSetMode+0x40>)
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	2300      	movs	r3, #0
 8003396:	f008 ffc5 	bl	800c324 <xQueueGenericSend>
}
 800339a:	b003      	add	sp, #12
 800339c:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_CNT_SET_INTERVAL_MODE;
 80033a0:	a902      	add	r1, sp, #8
 80033a2:	2309      	movs	r3, #9
 80033a4:	e7f0      	b.n	8003388 <counterSetMode+0x14>
		passMsg = MSG_CNT_SET_RECIPROCAL_MODE;
 80033a6:	a902      	add	r1, sp, #8
 80033a8:	2307      	movs	r3, #7
 80033aa:	e7ed      	b.n	8003388 <counterSetMode+0x14>
		passMsg = MSG_CNT_SET_DIRECT_MODE;
 80033ac:	a902      	add	r1, sp, #8
 80033ae:	2306      	movs	r3, #6
 80033b0:	e7ea      	b.n	8003388 <counterSetMode+0x14>
 80033b2:	bf00      	nop
 80033b4:	20004cc4 	.word	0x20004cc4

080033b8 <counterSendStart>:
void counterSendStart(void){	
 80033b8:	b530      	push	{r4, r5, lr}
 80033ba:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_START;
 80033bc:	a902      	add	r1, sp, #8
 80033be:	230a      	movs	r3, #10
 80033c0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <counterSendStart+0x28>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80033c6:	4d07      	ldr	r5, [pc, #28]	; (80033e4 <counterSendStart+0x2c>)
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033c8:	6818      	ldr	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80033ca:	2400      	movs	r4, #0
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033cc:	4623      	mov	r3, r4
 80033ce:	f04f 32ff 	mov.w	r2, #4294967295
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80033d2:	f885 43c4 	strb.w	r4, [r5, #964]	; 0x3c4
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033d6:	f008 ffa5 	bl	800c324 <xQueueGenericSend>
}
 80033da:	b003      	add	sp, #12
 80033dc:	bd30      	pop	{r4, r5, pc}
 80033de:	bf00      	nop
 80033e0:	20004cc4 	.word	0x20004cc4
 80033e4:	20004cc8 	.word	0x20004cc8

080033e8 <counterSendStop>:
void counterSendStop(void){	
 80033e8:	b500      	push	{lr}
 80033ea:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_STOP;
 80033ec:	a902      	add	r1, sp, #8
 80033ee:	230b      	movs	r3, #11
 80033f0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <counterSendStop+0x20>)
 80033f6:	f04f 32ff 	mov.w	r2, #4294967295
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	f008 ff91 	bl	800c324 <xQueueGenericSend>
}
 8003402:	b003      	add	sp, #12
 8003404:	f85d fb04 	ldr.w	pc, [sp], #4
 8003408:	20004cc4 	.word	0x20004cc4

0800340c <counterDeinit>:
void counterDeinit(void){
 800340c:	b500      	push	{lr}
 800340e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_CNT_DEINIT;
 8003410:	a902      	add	r1, sp, #8
 8003412:	230c      	movs	r3, #12
 8003414:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <counterDeinit+0x20>)
 800341a:	f04f 32ff 	mov.w	r2, #4294967295
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	2300      	movs	r3, #0
 8003422:	f008 ff7f 	bl	800c324 <xQueueGenericSend>
}
 8003426:	b003      	add	sp, #12
 8003428:	f85d fb04 	ldr.w	pc, [sp], #4
 800342c:	20004cc4 	.word	0x20004cc4

08003430 <counterSetEtrGate>:
void counterSetEtrGate(uint16_t gateTime){
 8003430:	b510      	push	{r4, lr}
 8003432:	b082      	sub	sp, #8
	uint16_t passMsg = MSG_CNT_SET_GATE_TIME;
 8003434:	a902      	add	r1, sp, #8
 8003436:	230d      	movs	r3, #13
 8003438:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 800343c:	4c06      	ldr	r4, [pc, #24]	; (8003458 <counterSetEtrGate+0x28>)
	counter.counterEtr.gateTime = gateTime;
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <counterSetEtrGate+0x2c>)
void counterSetEtrGate(uint16_t gateTime){
 8003440:	4602      	mov	r2, r0
	counter.counterEtr.gateTime = gateTime;
 8003442:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
	xQueueSendToBack(counterMessageQueue, &passMsg, portMAX_DELAY);
 8003446:	6820      	ldr	r0, [r4, #0]
 8003448:	2300      	movs	r3, #0
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
 800344e:	f008 ff69 	bl	800c324 <xQueueGenericSend>
}
 8003452:	b002      	add	sp, #8
 8003454:	bd10      	pop	{r4, pc}
 8003456:	bf00      	nop
 8003458:	20004cc4 	.word	0x20004cc4
 800345c:	20004cc8 	.word	0x20004cc8

08003460 <counterSetRefSampleCount>:
void counterSetRefSampleCount(uint32_t sampleCount){
 8003460:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003462:	4d09      	ldr	r5, [pc, #36]	; (8003488 <counterSetRefSampleCount+0x28>)
void counterSetRefSampleCount(uint32_t sampleCount){
 8003464:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003466:	f04f 31ff 	mov.w	r1, #4294967295
 800346a:	6828      	ldr	r0, [r5, #0]
 800346c:	f009 fb8a 	bl	800cb84 <xQueueTakeMutexRecursive>
	counter.counterEtr.refBuffer = sampleCount;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <counterSetRefSampleCount+0x2c>)
	xSemaphoreGiveRecursive(counterMutex);
 8003472:	6828      	ldr	r0, [r5, #0]
	counter.counterEtr.refBuffer = sampleCount;
 8003474:	f8c3 43a8 	str.w	r4, [r3, #936]	; 0x3a8
	xSemaphoreGiveRecursive(counterMutex);
 8003478:	f009 f946 	bl	800c708 <xQueueGiveMutexRecursive>
	TIM_REF_Reconfig_cnt(sampleCount);
 800347c:	4620      	mov	r0, r4
}
 800347e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TIM_REF_Reconfig_cnt(sampleCount);
 8003482:	f00d ba1f 	b.w	80108c4 <TIM_REF_Reconfig_cnt>
 8003486:	bf00      	nop
 8003488:	20005098 	.word	0x20005098
 800348c:	20004cc8 	.word	0x20004cc8

08003490 <counterSetIc1SampleCount>:
void counterSetIc1SampleCount(uint16_t buffer){
 8003490:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003492:	4d0b      	ldr	r5, [pc, #44]	; (80034c0 <counterSetIc1SampleCount+0x30>)
void counterSetIc1SampleCount(uint16_t buffer){
 8003494:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 8003496:	f04f 31ff 	mov.w	r1, #4294967295
 800349a:	6828      	ldr	r0, [r5, #0]
 800349c:	f009 fb72 	bl	800cb84 <xQueueTakeMutexRecursive>
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 80034a0:	3401      	adds	r4, #1
 80034a2:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <counterSetIc1SampleCount+0x34>)
	DMA_Restart(&hdma_tim2_ch1);	
 80034a4:	4808      	ldr	r0, [pc, #32]	; (80034c8 <counterSetIc1SampleCount+0x38>)
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 80034a6:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034a8:	2200      	movs	r2, #0
	counter.counterIc.ic1BufferSize = buffer + 1;						 // PC app sends number of samples but IC needs the number of edges, therefore "buffer + 1";
 80034aa:	80dc      	strh	r4, [r3, #6]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034ac:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch1);	
 80034b0:	f00d fa74 	bl	801099c <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 80034b4:	6828      	ldr	r0, [r5, #0]
}
 80034b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 80034ba:	f009 b925 	b.w	800c708 <xQueueGiveMutexRecursive>
 80034be:	bf00      	nop
 80034c0:	20005098 	.word	0x20005098
 80034c4:	20004cc8 	.word	0x20004cc8
 80034c8:	2000ea40 	.word	0x2000ea40

080034cc <counterSetIc2SampleCount>:
void counterSetIc2SampleCount(uint16_t buffer){
 80034cc:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 80034ce:	4d0b      	ldr	r5, [pc, #44]	; (80034fc <counterSetIc2SampleCount+0x30>)
void counterSetIc2SampleCount(uint16_t buffer){
 80034d0:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(counterMutex, portMAX_DELAY);
 80034d2:	f04f 31ff 	mov.w	r1, #4294967295
 80034d6:	6828      	ldr	r0, [r5, #0]
 80034d8:	f009 fb54 	bl	800cb84 <xQueueTakeMutexRecursive>
	counter.counterIc.ic2BufferSize = buffer + 1;	
 80034dc:	3401      	adds	r4, #1
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <counterSetIc2SampleCount+0x34>)
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80034e0:	4808      	ldr	r0, [pc, #32]	; (8003504 <counterSetIc2SampleCount+0x38>)
	counter.counterIc.ic2BufferSize = buffer + 1;	
 80034e2:	b2a4      	uxth	r4, r4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034e4:	2200      	movs	r2, #0
	counter.counterIc.ic2BufferSize = buffer + 1;	
 80034e6:	811c      	strh	r4, [r3, #8]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80034e8:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80034ec:	f00d fa56 	bl	801099c <DMA_Restart>
	xSemaphoreGiveRecursive(counterMutex);
 80034f0:	6828      	ldr	r0, [r5, #0]
}
 80034f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(counterMutex);
 80034f6:	f009 b907 	b.w	800c708 <xQueueGiveMutexRecursive>
 80034fa:	bf00      	nop
 80034fc:	20005098 	.word	0x20005098
 8003500:	20004cc8 	.word	0x20004cc8
 8003504:	2000eb08 	.word	0x2000eb08

08003508 <counterSetIc1Prescaler>:
void counterSetIc1Prescaler(uint16_t presc){
 8003508:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <counterSetIc1Prescaler+0x1c>)
	TIM_IC1_PSC_Config(presc);
 800350c:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800350e:	2200      	movs	r2, #0
 8003510:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC1_PSC_Config(presc);
 8003514:	f00d f8c4 	bl	80106a0 <TIM_IC1_PSC_Config>
	DMA_Restart(&hdma_tim2_ch1);
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <counterSetIc1Prescaler+0x20>)
}
 800351a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 800351e:	f00d ba3d 	b.w	801099c <DMA_Restart>
 8003522:	bf00      	nop
 8003524:	20004cc8 	.word	0x20004cc8
 8003528:	2000ea40 	.word	0x2000ea40

0800352c <counterSetIc2Prescaler>:
void counterSetIc2Prescaler(uint16_t presc){		
 800352c:	b508      	push	{r3, lr}
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <counterSetIc2Prescaler+0x1c>)
	TIM_IC2_PSC_Config(presc);	
 8003530:	b2c0      	uxtb	r0, r0
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8003532:	2200      	movs	r2, #0
 8003534:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
	TIM_IC2_PSC_Config(presc);	
 8003538:	f00d f8d2 	bl	80106e0 <TIM_IC2_PSC_Config>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 800353c:	4803      	ldr	r0, [pc, #12]	; (800354c <counterSetIc2Prescaler+0x20>)
}
 800353e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 8003542:	f00d ba2b 	b.w	801099c <DMA_Restart>
 8003546:	bf00      	nop
 8003548:	20004cc8 	.word	0x20004cc8
 800354c:	2000eb08 	.word	0x2000eb08

08003550 <counterIc1DutyCycleInit>:
	counter.icDutyCycle = DUTY_CYCLE_CH1_ENABLED;
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <counterIc1DutyCycleInit+0xc>)
 8003552:	2201      	movs	r2, #1
 8003554:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 8003558:	f00c bf12 	b.w	8010380 <TIM_IC_DutyCycle_Init>
 800355c:	20004cc8 	.word	0x20004cc8

08003560 <counterIc1DutyCycleDeinit>:
void counterIc1DutyCycleDeinit(void){	
 8003560:	b508      	push	{r3, lr}
	TIM_IC_DutyCycle_Deinit();		
 8003562:	f00c ff81 	bl	8010468 <TIM_IC_DutyCycle_Deinit>
	counter.icDutyCycle = DUTY_CYCLE_DISABLED;
 8003566:	4b02      	ldr	r3, [pc, #8]	; (8003570 <counterIc1DutyCycleDeinit+0x10>)
 8003568:	2200      	movs	r2, #0
 800356a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
}
 800356e:	bd08      	pop	{r3, pc}
 8003570:	20004cc8 	.word	0x20004cc8

08003574 <counterIc2DutyCycleInit>:
	counter.icDutyCycle = DUTY_CYCLE_CH2_ENABLED;
 8003574:	4b02      	ldr	r3, [pc, #8]	; (8003580 <counterIc2DutyCycleInit+0xc>)
 8003576:	2202      	movs	r2, #2
 8003578:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	TIM_IC_DutyCycle_Init();	
 800357c:	f00c bf00 	b.w	8010380 <TIM_IC_DutyCycle_Init>
 8003580:	20004cc8 	.word	0x20004cc8

08003584 <counterIc2DutyCycleDeinit>:
 8003584:	b508      	push	{r3, lr}
 8003586:	f00c ff6f 	bl	8010468 <TIM_IC_DutyCycle_Deinit>
 800358a:	4b02      	ldr	r3, [pc, #8]	; (8003594 <counterIc2DutyCycleDeinit+0x10>)
 800358c:	2200      	movs	r2, #0
 800358e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8003592:	bd08      	pop	{r3, pc}
 8003594:	20004cc8 	.word	0x20004cc8

08003598 <counterIcDutyCycleEnable>:
	TIM_IC_DutyCycle_Start();
 8003598:	f00c bfbc 	b.w	8010514 <TIM_IC_DutyCycle_Start>

0800359c <counterIcDutyCycleDisable>:
	TIM_IC_DutyCycle_Stop();
 800359c:	f00c bff2 	b.w	8010584 <TIM_IC_DutyCycle_Stop>

080035a0 <counterSetIcTi1_RisingFalling>:
void counterSetIcTi1_RisingFalling(void){	
 80035a0:	b508      	push	{r3, lr}
	TIM_IC1_RisingFalling();	
 80035a2:	f00d f8bd 	bl	8010720 <TIM_IC1_RisingFalling>
	DMA_Restart(&hdma_tim2_ch1);
 80035a6:	4802      	ldr	r0, [pc, #8]	; (80035b0 <counterSetIcTi1_RisingFalling+0x10>)
}	
 80035a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch1);
 80035ac:	f00d b9f6 	b.w	801099c <DMA_Restart>
 80035b0:	2000ea40 	.word	0x2000ea40

080035b4 <counterSetIcTi1_Rising>:
	counter.eventChan1 = EVENT_RISING;
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <counterSetIcTi1_Rising+0xc>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_RisingOnly();	
 80035bc:	f00d b8ba 	b.w	8010734 <TIM_IC1_RisingOnly>
 80035c0:	20004cc8 	.word	0x20004cc8

080035c4 <counterSetIcTi1_Falling>:
	counter.eventChan1 = EVENT_FALLING;
 80035c4:	4b02      	ldr	r3, [pc, #8]	; (80035d0 <counterSetIcTi1_Falling+0xc>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
	TIM_IC1_FallingOnly();	
 80035cc:	f00d b8bc 	b.w	8010748 <TIM_IC1_FallingOnly>
 80035d0:	20004cc8 	.word	0x20004cc8

080035d4 <counterSetIcTi2_RisingFalling>:
void counterSetIcTi2_RisingFalling(void){
 80035d4:	b508      	push	{r3, lr}
	TIM_IC2_RisingFalling();
 80035d6:	f00d f8c5 	bl	8010764 <TIM_IC2_RisingFalling>
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80035da:	4802      	ldr	r0, [pc, #8]	; (80035e4 <counterSetIcTi2_RisingFalling+0x10>)
}	
 80035dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_Restart(&hdma_tim2_ch2_ch4);	
 80035e0:	f00d b9dc 	b.w	801099c <DMA_Restart>
 80035e4:	2000eb08 	.word	0x2000eb08

080035e8 <counterSetIcTi2_Rising>:
	counter.eventChan2 = EVENT_RISING;
 80035e8:	4b02      	ldr	r3, [pc, #8]	; (80035f4 <counterSetIcTi2_Rising+0xc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_RisingOnly();	
 80035f0:	f00d b8c2 	b.w	8010778 <TIM_IC2_RisingOnly>
 80035f4:	20004cc8 	.word	0x20004cc8

080035f8 <counterSetIcTi2_Falling>:
	counter.eventChan2 = EVENT_FALLING;
 80035f8:	4b02      	ldr	r3, [pc, #8]	; (8003604 <counterSetIcTi2_Falling+0xc>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
	TIM_IC2_FallingOnly();	
 8003600:	f00d b8c4 	b.w	801078c <TIM_IC2_FallingOnly>
 8003604:	20004cc8 	.word	0x20004cc8

08003608 <counterSetTiSequence_AB>:
	TIM_TI_Sequence_AB();
 8003608:	f00d b8ce 	b.w	80107a8 <TIM_TI_Sequence_AB>

0800360c <counterSetTiSequence_BA>:
	TIM_TI_Sequence_BA();
 800360c:	f00d b8ea 	b.w	80107e4 <TIM_TI_Sequence_BA>

08003610 <counterSetTiMode_Independent>:
	counter.tiMode = TI_MODE_EVENT_SEQUENCE_INDEP;
 8003610:	4b02      	ldr	r3, [pc, #8]	; (800361c <counterSetTiMode_Independent+0xc>)
 8003612:	2200      	movs	r2, #0
 8003614:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20004cc8 	.word	0x20004cc8

08003620 <counterSetTiMode_Dependent>:
	counter.tiMode = TI_MODE_FAST_EVENT_SEQUENCE_DEP;
 8003620:	4b02      	ldr	r3, [pc, #8]	; (800362c <counterSetTiMode_Dependent+0xc>)
 8003622:	2201      	movs	r2, #1
 8003624:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
} 
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20004cc8 	.word	0x20004cc8

08003630 <counterSetTiTimeout>:
	counter.counterIc.tiTimeout = timeout;				
 8003630:	4b01      	ldr	r3, [pc, #4]	; (8003638 <counterSetTiTimeout+0x8>)
 8003632:	f8c3 0394 	str.w	r0, [r3, #916]	; 0x394
}
 8003636:	4770      	bx	lr
 8003638:	20004cc8 	.word	0x20004cc8

0800363c <COUNTER_ETR_DMA_CpltCallback>:
{			
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(counter.state == COUNTER_ETR){
 8003640:	4c54      	ldr	r4, [pc, #336]	; (8003794 <COUNTER_ETR_DMA_CpltCallback+0x158>)
 8003642:	f894 53b8 	ldrb.w	r5, [r4, #952]	; 0x3b8
{			
 8003646:	b083      	sub	sp, #12
	if(counter.state == COUNTER_ETR){
 8003648:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 800364a:	230e      	movs	r3, #14
	if(counter.state == COUNTER_ETR){
 800364c:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 800364e:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.state == COUNTER_ETR){
 8003652:	d017      	beq.n	8003684 <COUNTER_ETR_DMA_CpltCallback+0x48>
	}else if(counter.state == COUNTER_REF){		
 8003654:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8003658:	2b04      	cmp	r3, #4
 800365a:	d002      	beq.n	8003662 <COUNTER_ETR_DMA_CpltCallback+0x26>
}
 800365c:	b003      	add	sp, #12
 800365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 8003662:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d160      	bne.n	800372c <COUNTER_ETR_DMA_CpltCallback+0xf0>
		}else if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED && counter.counterEtr.buffer!=0){
 800366a:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 800366e:	b11b      	cbz	r3, 8003678 <COUNTER_ETR_DMA_CpltCallback+0x3c>
 8003670:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d16e      	bne.n	8003756 <COUNTER_ETR_DMA_CpltCallback+0x11a>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8003678:	2301      	movs	r3, #1
 800367a:	f884 33c4 	strb.w	r3, [r4, #964]	; 0x3c4
}
 800367e:	b003      	add	sp, #12
 8003680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		counter.counterEtr.etrp = TIM_ETPS_GetPrescaler();
 8003684:	f00d f944 	bl	8010910 <TIM_ETPS_GetPrescaler>
 8003688:	f884 03a0 	strb.w	r0, [r4, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 800368c:	f8d4 03bc 	ldr.w	r0, [r4, #956]	; 0x3bc
 8003690:	f8b4 b398 	ldrh.w	fp, [r4, #920]	; 0x398
 8003694:	f8b4 a39a 	ldrh.w	sl, [r4, #922]	; 0x39a
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 8003698:	f8d4 73a4 	ldr.w	r7, [r4, #932]	; 0x3a4
 800369c:	f894 63a0 	ldrb.w	r6, [r4, #928]	; 0x3a0
		float gateFreq = ((double)counter.tim4PrphClk / (double)((counter.counterEtr.arr + 1) * (counter.counterEtr.psc + 1)));			/* TIM4 gating frequency */
 80036a0:	f7fc fee8 	bl	8000474 <__aeabi_ui2d>
 80036a4:	fa1f fa8a 	uxth.w	sl, sl
 80036a8:	4680      	mov	r8, r0
 80036aa:	fa1f fb8b 	uxth.w	fp, fp
 80036ae:	f10a 0001 	add.w	r0, sl, #1
 80036b2:	fb0b 0000 	mla	r0, fp, r0, r0
 80036b6:	4689      	mov	r9, r1
 80036b8:	f7fc feec 	bl	8000494 <__aeabi_i2d>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4640      	mov	r0, r8
 80036c2:	4649      	mov	r1, r9
 80036c4:	f7fd f87a 	bl	80007bc <__aeabi_ddiv>
 80036c8:	f7fd fa46 	bl	8000b58 <__aeabi_d2f>
		counter.counterEtr.freq = ((double)counter.counterEtr.buffer * gateFreq * counter.counterEtr.etrp);								/* Sampled frequency */
 80036cc:	f7fc fef4 	bl	80004b8 <__aeabi_f2d>
 80036d0:	4680      	mov	r8, r0
 80036d2:	4638      	mov	r0, r7
 80036d4:	4689      	mov	r9, r1
 80036d6:	f7fc fecd 	bl	8000474 <__aeabi_ui2d>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4640      	mov	r0, r8
 80036e0:	4649      	mov	r1, r9
 80036e2:	f7fc ff41 	bl	8000568 <__aeabi_dmul>
 80036e6:	b2f6      	uxtb	r6, r6
 80036e8:	4680      	mov	r8, r0
 80036ea:	4630      	mov	r0, r6
 80036ec:	4689      	mov	r9, r1
 80036ee:	f7fc fed1 	bl	8000494 <__aeabi_i2d>
 80036f2:	460b      	mov	r3, r1
 80036f4:	4602      	mov	r2, r0
 80036f6:	4649      	mov	r1, r9
 80036f8:	4640      	mov	r0, r8
 80036fa:	f7fc ff35 	bl	8000568 <__aeabi_dmul>
 80036fe:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
		TIM_ETRP_Config(counter.counterEtr.freq);	
 8003702:	ed94 0bec 	vldr	d0, [r4, #944]	; 0x3b0
 8003706:	f00c ff5d 	bl	80105c4 <TIM_ETRP_Config>
		if(counter.sampleCntChange != SAMPLE_COUNT_CHANGED){
 800370a:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 800370e:	b923      	cbnz	r3, 800371a <COUNTER_ETR_DMA_CpltCallback+0xde>
			counter.sampleCntChange = SAMPLE_COUNT_NOT_CHANGED;
 8003710:	f884 53c4 	strb.w	r5, [r4, #964]	; 0x3c4
}
 8003714:	b003      	add	sp, #12
 8003716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
 800371c:	2300      	movs	r3, #0
 800371e:	6810      	ldr	r0, [r2, #0]
 8003720:	f10d 0102 	add.w	r1, sp, #2
 8003724:	aa01      	add	r2, sp, #4
 8003726:	f009 f80f 	bl	800c748 <xQueueGenericSendFromISR>
 800372a:	e797      	b.n	800365c <COUNTER_ETR_DMA_CpltCallback+0x20>
		if((counter.sampleCntChange != SAMPLE_COUNT_CHANGED) && (xTaskGetTickCount() - xStartTime) < 100){
 800372c:	f009 fce8 	bl	800d100 <xTaskGetTickCount>
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <COUNTER_ETR_DMA_CpltCallback+0x160>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	1ac0      	subs	r0, r0, r3
 8003736:	2863      	cmp	r0, #99	; 0x63
 8003738:	d897      	bhi.n	800366a <COUNTER_ETR_DMA_CpltCallback+0x2e>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
 800373c:	2300      	movs	r3, #0
 800373e:	6810      	ldr	r0, [r2, #0]
 8003740:	f10d 0102 	add.w	r1, sp, #2
 8003744:	aa01      	add	r2, sp, #4
 8003746:	f008 ffff 	bl	800c748 <xQueueGenericSendFromISR>
			TIM_REF_SecondInputDisable();
 800374a:	f00d f8a7 	bl	801089c <TIM_REF_SecondInputDisable>
			counter.refWarning = COUNTER_WARNING_FIRED;
 800374e:	2301      	movs	r3, #1
 8003750:	f884 33c5 	strb.w	r3, [r4, #965]	; 0x3c5
 8003754:	e782      	b.n	800365c <COUNTER_ETR_DMA_CpltCallback+0x20>
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 8003756:	f8d4 03a8 	ldr.w	r0, [r4, #936]	; 0x3a8
 800375a:	f8d4 53a4 	ldr.w	r5, [r4, #932]	; 0x3a4
 800375e:	f7fc fe89 	bl	8000474 <__aeabi_ui2d>
 8003762:	4606      	mov	r6, r0
 8003764:	4628      	mov	r0, r5
 8003766:	460f      	mov	r7, r1
 8003768:	f7fc fe84 	bl	8000474 <__aeabi_ui2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4630      	mov	r0, r6
 8003772:	4639      	mov	r1, r7
 8003774:	f7fd f822 	bl	80007bc <__aeabi_ddiv>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003778:	4a07      	ldr	r2, [pc, #28]	; (8003798 <COUNTER_ETR_DMA_CpltCallback+0x15c>)
			counter.counterEtr.freq = counter.counterEtr.refBuffer / (double)counter.counterEtr.buffer;
 800377a:	e9c4 01ec 	strd	r0, r1, [r4, #944]	; 0x3b0
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800377e:	2300      	movs	r3, #0
 8003780:	6810      	ldr	r0, [r2, #0]
 8003782:	f10d 0102 	add.w	r1, sp, #2
 8003786:	aa01      	add	r2, sp, #4
 8003788:	f008 ffde 	bl	800c748 <xQueueGenericSendFromISR>
			counter.refWarning = COUNTER_REF_SEND_DATA;
 800378c:	2300      	movs	r3, #0
 800378e:	f884 33c5 	strb.w	r3, [r4, #965]	; 0x3c5
 8003792:	e763      	b.n	800365c <COUNTER_ETR_DMA_CpltCallback+0x20>
 8003794:	20004cc8 	.word	0x20004cc8
 8003798:	20004cb4 	.word	0x20004cb4
 800379c:	20004cc0 	.word	0x20004cc0

080037a0 <counterIcProcess>:
{	
 80037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(counter.bin != BIN0){
 80037a4:	4c4f      	ldr	r4, [pc, #316]	; (80038e4 <counterIcProcess+0x144>)
{	
 80037a6:	b085      	sub	sp, #20
	if(counter.bin != BIN0){
 80037a8:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 80037ac:	220e      	movs	r2, #14
 80037ae:	f8ad 200a 	strh.w	r2, [sp, #10]
	if(counter.bin != BIN0){
 80037b2:	b983      	cbnz	r3, 80037d6 <counterIcProcess+0x36>
 80037b4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	}else if(counter.bin != BIN1){
 80037b8:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d007      	beq.n	80037d0 <counterIcProcess+0x30>
		counter.bin = BIN1;
 80037c0:	2301      	movs	r3, #1
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 80037c2:	4849      	ldr	r0, [pc, #292]	; (80038e8 <counterIcProcess+0x148>)
		counter.bin = BIN1;
 80037c4:	f884 33cd 	strb.w	r3, [r4, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){
 80037c8:	f00d f8de 	bl	8010988 <DMA_TransferComplete>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d145      	bne.n	800385c <counterIcProcess+0xbc>
}
 80037d0:	b005      	add	sp, #20
 80037d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		counter.bin = BIN0;
 80037d6:	2500      	movs	r5, #0
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 80037d8:	4844      	ldr	r0, [pc, #272]	; (80038ec <counterIcProcess+0x14c>)
		counter.bin = BIN0;
 80037da:	f884 53cd 	strb.w	r5, [r4, #973]	; 0x3cd
		if(DMA_TransferComplete(&hdma_tim2_ch1)){				
 80037de:	f00d f8d3 	bl	8010988 <DMA_TransferComplete>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d0f4      	beq.n	80037d0 <counterIcProcess+0x30>
			counter.counterIc.ic1psc = TIM_IC1PSC_GetPrescaler();			
 80037e6:	f00d f8a7 	bl	8010938 <TIM_IC1PSC_GetPrescaler>
 80037ea:	f884 0390 	strb.w	r0, [r4, #912]	; 0x390
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 80037ee:	88e3      	ldrh	r3, [r4, #6]
 80037f0:	3303      	adds	r3, #3
 80037f2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80037f6:	f8d4 b010 	ldr.w	fp, [r4, #16]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 80037fa:	f8d4 63c0 	ldr.w	r6, [r4, #960]	; 0x3c0
 80037fe:	88a7      	ldrh	r7, [r4, #4]
 8003800:	f894 a390 	ldrb.w	sl, [r4, #912]	; 0x390
 8003804:	88e0      	ldrh	r0, [r4, #6]
			uint32_t capture1 = counter.counterIc.ic1buffer[counter.counterIc.ic1BufferSize-1] - counter.counterIc.ic1buffer[0];
 8003806:	9301      	str	r3, [sp, #4]
			counter.counterIc.ic1freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic1psc)*((double)(counter.counterIc.ic1BufferSize-1)/(double)capture1);
 8003808:	3801      	subs	r0, #1
 800380a:	f7fc fe43 	bl	8000494 <__aeabi_i2d>
 800380e:	9b01      	ldr	r3, [sp, #4]
 8003810:	4680      	mov	r8, r0
 8003812:	eba3 000b 	sub.w	r0, r3, fp
 8003816:	4689      	mov	r9, r1
 8003818:	f7fc fe2c 	bl	8000474 <__aeabi_ui2d>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fc ffca 	bl	80007bc <__aeabi_ddiv>
 8003828:	fa5f fa8a 	uxtb.w	sl, sl
 800382c:	4680      	mov	r8, r0
 800382e:	b2bf      	uxth	r7, r7
 8003830:	fb06 f00a 	mul.w	r0, r6, sl
 8003834:	fb07 0000 	mla	r0, r7, r0, r0
 8003838:	4689      	mov	r9, r1
 800383a:	f7fc fe1b 	bl	8000474 <__aeabi_ui2d>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4640      	mov	r0, r8
 8003844:	4649      	mov	r1, r9
 8003846:	f7fc fe8f 	bl	8000568 <__aeabi_dmul>
 800384a:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			DMA_Restart(&hdma_tim2_ch1);
 800384e:	4827      	ldr	r0, [pc, #156]	; (80038ec <counterIcProcess+0x14c>)
 8003850:	f00d f8a4 	bl	801099c <DMA_Restart>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003854:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <counterIcProcess+0x150>)
			counter.icChannel1 = COUNTER_IRQ_IC;
 8003856:	f884 53c6 	strb.w	r5, [r4, #966]	; 0x3c6
 800385a:	e039      	b.n	80038d0 <counterIcProcess+0x130>
			counter.counterIc.ic2psc = TIM_IC2PSC_GetPrescaler();				
 800385c:	f00d f880 	bl	8010960 <TIM_IC2PSC_GetPrescaler>
 8003860:	f884 0391 	strb.w	r0, [r4, #913]	; 0x391
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 8003864:	8923      	ldrh	r3, [r4, #8]
 8003866:	3371      	adds	r3, #113	; 0x71
 8003868:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800386c:	f8d4 b1c8 	ldr.w	fp, [r4, #456]	; 0x1c8
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 8003870:	f8d4 63c0 	ldr.w	r6, [r4, #960]	; 0x3c0
 8003874:	88a7      	ldrh	r7, [r4, #4]
 8003876:	f894 a391 	ldrb.w	sl, [r4, #913]	; 0x391
 800387a:	8920      	ldrh	r0, [r4, #8]
			uint32_t capture2 = counter.counterIc.ic2buffer[counter.counterIc.ic2BufferSize-1] - counter.counterIc.ic2buffer[0];
 800387c:	9301      	str	r3, [sp, #4]
			counter.counterIc.ic2freq = (double)(counter.tim2PrphClk*(counter.counterIc.psc+1)*counter.counterIc.ic2psc)*((double)(counter.counterIc.ic2BufferSize-1)/(double)capture2);
 800387e:	3801      	subs	r0, #1
 8003880:	f7fc fe08 	bl	8000494 <__aeabi_i2d>
 8003884:	9b01      	ldr	r3, [sp, #4]
 8003886:	4680      	mov	r8, r0
 8003888:	eba3 000b 	sub.w	r0, r3, fp
 800388c:	4689      	mov	r9, r1
 800388e:	f7fc fdf1 	bl	8000474 <__aeabi_ui2d>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4640      	mov	r0, r8
 8003898:	4649      	mov	r1, r9
 800389a:	f7fc ff8f 	bl	80007bc <__aeabi_ddiv>
 800389e:	fa5f fa8a 	uxtb.w	sl, sl
 80038a2:	4680      	mov	r8, r0
 80038a4:	b2bf      	uxth	r7, r7
 80038a6:	fb06 f00a 	mul.w	r0, r6, sl
 80038aa:	fb07 0000 	mla	r0, r7, r0, r0
 80038ae:	4689      	mov	r9, r1
 80038b0:	f7fc fde0 	bl	8000474 <__aeabi_ui2d>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4640      	mov	r0, r8
 80038ba:	4649      	mov	r1, r9
 80038bc:	f7fc fe54 	bl	8000568 <__aeabi_dmul>
 80038c0:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			DMA_Restart(&hdma_tim2_ch2_ch4);		
 80038c4:	4808      	ldr	r0, [pc, #32]	; (80038e8 <counterIcProcess+0x148>)
 80038c6:	f00d f869 	bl	801099c <DMA_Restart>
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <counterIcProcess+0x150>)
			counter.icChannel2 = COUNTER_IRQ_IC;
 80038cc:	f884 53c7 	strb.w	r5, [r4, #967]	; 0x3c7
			xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80038d0:	462b      	mov	r3, r5
 80038d2:	6810      	ldr	r0, [r2, #0]
 80038d4:	f10d 010a 	add.w	r1, sp, #10
 80038d8:	aa03      	add	r2, sp, #12
 80038da:	f008 ff35 	bl	800c748 <xQueueGenericSendFromISR>
}
 80038de:	b005      	add	sp, #20
 80038e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e4:	20004cc8 	.word	0x20004cc8
 80038e8:	2000eb08 	.word	0x2000eb08
 80038ec:	2000ea40 	.word	0x2000ea40
 80038f0:	20004cb4 	.word	0x20004cb4

080038f4 <counterPeriodElapsedCallback>:
{
 80038f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 80038f8:	4c7b      	ldr	r4, [pc, #492]	; (8003ae8 <counterPeriodElapsedCallback+0x1f4>)
 80038fa:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
{
 80038fe:	b083      	sub	sp, #12
	if(counter.icDutyCycle == DUTY_CYCLE_DISABLED){
 8003900:	2b00      	cmp	r3, #0
 8003902:	d142      	bne.n	800398a <counterPeriodElapsedCallback+0x96>
 8003904:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		if(counter.state == COUNTER_IC){
 8003908:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 800390c:	2b02      	cmp	r3, #2
 800390e:	d037      	beq.n	8003980 <counterPeriodElapsedCallback+0x8c>
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003910:	230e      	movs	r3, #14
 8003912:	f8ad 3002 	strh.w	r3, [sp, #2]
	if((xTaskGetTickCountFromISR() - xStartTime) <= counter.counterIc.tiTimeout){
 8003916:	f009 fbf9 	bl	800d10c <xTaskGetTickCountFromISR>
 800391a:	4b74      	ldr	r3, [pc, #464]	; (8003aec <counterPeriodElapsedCallback+0x1f8>)
 800391c:	f8d4 2394 	ldr.w	r2, [r4, #916]	; 0x394
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1ac0      	subs	r0, r0, r3
 8003924:	4290      	cmp	r0, r2
 8003926:	f200 808f 	bhi.w	8003a48 <counterPeriodElapsedCallback+0x154>
		if(counter.abba == BIN0){			
 800392a:	f894 33ce 	ldrb.w	r3, [r4, #974]	; 0x3ce
 800392e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003932:	2b00      	cmp	r3, #0
 8003934:	d16c      	bne.n	8003a10 <counterPeriodElapsedCallback+0x11c>
			if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){					
 8003936:	486e      	ldr	r0, [pc, #440]	; (8003af0 <counterPeriodElapsedCallback+0x1fc>)
 8003938:	f00d f826 	bl	8010988 <DMA_TransferComplete>
 800393c:	b310      	cbz	r0, 8003984 <counterPeriodElapsedCallback+0x90>
				counter.counterIc.ic1freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 800393e:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8003942:	f8d4 53c0 	ldr.w	r5, [r4, #960]	; 0x3c0
 8003946:	f7fc fd95 	bl	8000474 <__aeabi_ui2d>
 800394a:	4680      	mov	r8, r0
 800394c:	4628      	mov	r0, r5
 800394e:	4689      	mov	r9, r1
 8003950:	f7fc fd90 	bl	8000474 <__aeabi_ui2d>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4640      	mov	r0, r8
 800395a:	4649      	mov	r1, r9
 800395c:	f7fc ff2e 	bl	80007bc <__aeabi_ddiv>
 8003960:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();		
 8003964:	f00c fcbe 	bl	80102e4 <TIM_TI_Stop>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003968:	4a62      	ldr	r2, [pc, #392]	; (8003af4 <counterPeriodElapsedCallback+0x200>)
 800396a:	4633      	mov	r3, r6
				counter.tiState = SEND_TI_DATA;						
 800396c:	2502      	movs	r5, #2
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 800396e:	6810      	ldr	r0, [r2, #0]
				counter.tiState = SEND_TI_DATA;						
 8003970:	f884 53c9 	strb.w	r5, [r4, #969]	; 0x3c9
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003974:	aa01      	add	r2, sp, #4
 8003976:	eb0d 0105 	add.w	r1, sp, r5
 800397a:	f008 fee5 	bl	800c748 <xQueueGenericSendFromISR>
 800397e:	e001      	b.n	8003984 <counterPeriodElapsedCallback+0x90>
			counterIcProcess();
 8003980:	f7ff ff0e 	bl	80037a0 <counterIcProcess>
}
 8003984:	b003      	add	sp, #12
 8003986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 800398a:	f894 53c8 	ldrb.w	r5, [r4, #968]	; 0x3c8
 800398e:	b2ed      	uxtb	r5, r5
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003990:	230e      	movs	r3, #14
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8003992:	2d01      	cmp	r5, #1
	uint16_t passMsg = MSG_CNT_SEND_DATA;
 8003994:	f8ad 3002 	strh.w	r3, [sp, #2]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){	
 8003998:	d066      	beq.n	8003a68 <counterPeriodElapsedCallback+0x174>
	}else if(counter.icDutyCycle == DUTY_CYCLE_CH2_ENABLED){
 800399a:	f894 33c8 	ldrb.w	r3, [r4, #968]	; 0x3c8
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d1f0      	bne.n	8003984 <counterPeriodElapsedCallback+0x90>
		if(DMA_TransferComplete(&hdma_tim2_ch2_ch4)){			
 80039a2:	4853      	ldr	r0, [pc, #332]	; (8003af0 <counterPeriodElapsedCallback+0x1fc>)
 80039a4:	f00c fff0 	bl	8010988 <DMA_TransferComplete>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d0eb      	beq.n	8003984 <counterPeriodElapsedCallback+0x90>
			counter.counterIc.ic1freq = (counter.counterIc.ic1buffer[0] / (double)counter.counterIc.ic2buffer[0]) * 100;
 80039ac:	6920      	ldr	r0, [r4, #16]
 80039ae:	f8d4 51c8 	ldr.w	r5, [r4, #456]	; 0x1c8
 80039b2:	f7fc fd5f 	bl	8000474 <__aeabi_ui2d>
 80039b6:	4606      	mov	r6, r0
 80039b8:	4628      	mov	r0, r5
 80039ba:	460f      	mov	r7, r1
 80039bc:	f7fc fd5a 	bl	8000474 <__aeabi_ui2d>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4630      	mov	r0, r6
 80039c6:	4639      	mov	r1, r7
 80039c8:	f7fc fef8 	bl	80007bc <__aeabi_ddiv>
 80039cc:	2200      	movs	r2, #0
 80039ce:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <counterPeriodElapsedCallback+0x204>)
 80039d0:	f7fc fdca 	bl	8000568 <__aeabi_dmul>
 80039d4:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 80039d8:	6920      	ldr	r0, [r4, #16]
 80039da:	f8d4 53c0 	ldr.w	r5, [r4, #960]	; 0x3c0
 80039de:	f7fc fd49 	bl	8000474 <__aeabi_ui2d>
 80039e2:	4606      	mov	r6, r0
 80039e4:	4628      	mov	r0, r5
 80039e6:	460f      	mov	r7, r1
 80039e8:	f7fc fd44 	bl	8000474 <__aeabi_ui2d>
 80039ec:	460b      	mov	r3, r1
 80039ee:	4602      	mov	r2, r0
 80039f0:	4639      	mov	r1, r7
 80039f2:	4630      	mov	r0, r6
 80039f4:	f7fc fee2 	bl	80007bc <__aeabi_ddiv>
 80039f8:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();			
 80039fc:	f00c fc9a 	bl	8010334 <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 8003a00:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d166      	bne.n	8003ad6 <counterPeriodElapsedCallback+0x1e2>
				counter.bin = BIN1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f884 33cd 	strb.w	r3, [r4, #973]	; 0x3cd
 8003a0e:	e7b9      	b.n	8003984 <counterPeriodElapsedCallback+0x90>
			if(DMA_TransferComplete(&hdma_tim2_ch1)){					
 8003a10:	483a      	ldr	r0, [pc, #232]	; (8003afc <counterPeriodElapsedCallback+0x208>)
 8003a12:	f00c ffb9 	bl	8010988 <DMA_TransferComplete>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d0b4      	beq.n	8003984 <counterPeriodElapsedCallback+0x90>
				counter.counterIc.ic1freq = counter.counterIc.ic1buffer[0] / (double)counter.tim2PrphClk;
 8003a1a:	6920      	ldr	r0, [r4, #16]
 8003a1c:	f8d4 83c0 	ldr.w	r8, [r4, #960]	; 0x3c0
 8003a20:	f7fc fd28 	bl	8000474 <__aeabi_ui2d>
 8003a24:	4606      	mov	r6, r0
 8003a26:	4640      	mov	r0, r8
 8003a28:	460f      	mov	r7, r1
 8003a2a:	f7fc fd23 	bl	8000474 <__aeabi_ui2d>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4630      	mov	r0, r6
 8003a34:	4639      	mov	r1, r7
 8003a36:	f7fc fec1 	bl	80007bc <__aeabi_ddiv>
 8003a3a:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
				TIM_TI_Stop();					
 8003a3e:	f00c fc51 	bl	80102e4 <TIM_TI_Stop>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003a42:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <counterPeriodElapsedCallback+0x200>)
 8003a44:	462b      	mov	r3, r5
 8003a46:	e791      	b.n	800396c <counterPeriodElapsedCallback+0x78>
		TIM_TI_Stop();					
 8003a48:	f00c fc4c 	bl	80102e4 <TIM_TI_Stop>
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003a4c:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <counterPeriodElapsedCallback+0x200>)
 8003a4e:	462b      	mov	r3, r5
 8003a50:	6810      	ldr	r0, [r2, #0]
		counter.tiState = TIMEOUT;	
 8003a52:	2501      	movs	r5, #1
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003a54:	aa01      	add	r2, sp, #4
 8003a56:	f10d 0102 	add.w	r1, sp, #2
		counter.tiState = TIMEOUT;	
 8003a5a:	f884 53c9 	strb.w	r5, [r4, #969]	; 0x3c9
		xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003a5e:	f008 fe73 	bl	800c748 <xQueueGenericSendFromISR>
}
 8003a62:	b003      	add	sp, #12
 8003a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(DMA_TransferComplete(&hdma_tim2_ch1)){
 8003a68:	4824      	ldr	r0, [pc, #144]	; (8003afc <counterPeriodElapsedCallback+0x208>)
 8003a6a:	f00c ff8d 	bl	8010988 <DMA_TransferComplete>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d088      	beq.n	8003984 <counterPeriodElapsedCallback+0x90>
			counter.counterIc.ic1freq = (counter.counterIc.ic2buffer[0] / (double)counter.counterIc.ic1buffer[0]) * 100;
 8003a72:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8003a76:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8003a7a:	f7fc fcfb 	bl	8000474 <__aeabi_ui2d>
 8003a7e:	4606      	mov	r6, r0
 8003a80:	4640      	mov	r0, r8
 8003a82:	460f      	mov	r7, r1
 8003a84:	f7fc fcf6 	bl	8000474 <__aeabi_ui2d>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	4639      	mov	r1, r7
 8003a90:	f7fc fe94 	bl	80007bc <__aeabi_ddiv>
 8003a94:	2200      	movs	r2, #0
 8003a96:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <counterPeriodElapsedCallback+0x204>)
 8003a98:	f7fc fd66 	bl	8000568 <__aeabi_dmul>
 8003a9c:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
			counter.counterIc.ic2freq = counter.counterIc.ic2buffer[0] / (double)counter.tim2PrphClk;
 8003aa0:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8003aa4:	f8d4 83c0 	ldr.w	r8, [r4, #960]	; 0x3c0
 8003aa8:	f7fc fce4 	bl	8000474 <__aeabi_ui2d>
 8003aac:	4606      	mov	r6, r0
 8003aae:	4640      	mov	r0, r8
 8003ab0:	460f      	mov	r7, r1
 8003ab2:	f7fc fcdf 	bl	8000474 <__aeabi_ui2d>
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4639      	mov	r1, r7
 8003abc:	4630      	mov	r0, r6
 8003abe:	f7fc fe7d 	bl	80007bc <__aeabi_ddiv>
 8003ac2:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
			TIM_IC_DutyCycleDmaRestart();		
 8003ac6:	f00c fc35 	bl	8010334 <TIM_IC_DutyCycleDmaRestart>
			if(counter.bin == BIN0){
 8003aca:	f894 33cd 	ldrb.w	r3, [r4, #973]	; 0x3cd
 8003ace:	b913      	cbnz	r3, 8003ad6 <counterPeriodElapsedCallback+0x1e2>
				counter.bin = BIN1;
 8003ad0:	f884 53cd 	strb.w	r5, [r4, #973]	; 0x3cd
 8003ad4:	e756      	b.n	8003984 <counterPeriodElapsedCallback+0x90>
				xQueueSendToBackFromISR(messageQueue, &passMsg, &xHigherPriorityTaskWoken);
 8003ad6:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <counterPeriodElapsedCallback+0x200>)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6810      	ldr	r0, [r2, #0]
 8003adc:	f10d 0102 	add.w	r1, sp, #2
 8003ae0:	aa01      	add	r2, sp, #4
 8003ae2:	f008 fe31 	bl	800c748 <xQueueGenericSendFromISR>
}
 8003ae6:	e74d      	b.n	8003984 <counterPeriodElapsedCallback+0x90>
 8003ae8:	20004cc8 	.word	0x20004cc8
 8003aec:	20004cc0 	.word	0x20004cc0
 8003af0:	2000eb08 	.word	0x2000eb08
 8003af4:	20004cb4 	.word	0x20004cb4
 8003af8:	40590000 	.word	0x40590000
 8003afc:	2000ea40 	.word	0x2000ea40

08003b00 <counterEtrRefSetDefault>:
 * @retval None
 * @state 	USED
 */
void counterEtrRefSetDefault(void)
{
	if(counter.state==COUNTER_ETR){
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <counterEtrRefSetDefault+0x54>)
 8003b02:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 8003b06:	2a01      	cmp	r2, #1
 8003b08:	d017      	beq.n	8003b3a <counterEtrRefSetDefault+0x3a>
		counter.counterEtr.psc = TIM4_PSC;	
		counter.counterEtr.arr = TIM4_ARR;
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
	}else{
		counter.counterEtr.psc = 59999;	
 8003b0a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003b0e:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
		counter.counterEtr.arr = 59999;
 8003b12:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		counter.counterEtr.refBuffer = (counter.counterEtr.psc+1) * (counter.counterEtr.arr+1);
 8003b16:	f8b3 139a 	ldrh.w	r1, [r3, #922]	; 0x39a
 8003b1a:	f8b3 2398 	ldrh.w	r2, [r3, #920]	; 0x398
 8003b1e:	3201      	adds	r2, #1
 8003b20:	fb02 2201 	mla	r2, r2, r1, r2
 8003b24:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	}
	counter.counterEtr.etrp = 1;
	counter.counterEtr.buffer = 0;
 8003b28:	2200      	movs	r2, #0
	counter.counterEtr.etrp = 1;
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f883 13a0 	strb.w	r1, [r3, #928]	; 0x3a0
	counter.counterEtr.buffer = 0;
 8003b30:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;			
 8003b34:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
}
 8003b38:	4770      	bx	lr
		counter.counterEtr.psc = TIM4_PSC;	
 8003b3a:	f641 401f 	movw	r0, #7199	; 0x1c1f
		counter.counterEtr.arr = TIM4_ARR;
 8003b3e:	f240 31e7 	movw	r1, #999	; 0x3e7
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 8003b42:	2264      	movs	r2, #100	; 0x64
		counter.counterEtr.psc = TIM4_PSC;	
 8003b44:	f8a3 039a 	strh.w	r0, [r3, #922]	; 0x39a
		counter.counterEtr.arr = TIM4_ARR;
 8003b48:	f8a3 1398 	strh.w	r1, [r3, #920]	; 0x398
		counter.counterEtr.gateTime = 100;				/* 100 ms */												
 8003b4c:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
 8003b50:	e7ea      	b.n	8003b28 <counterEtrRefSetDefault+0x28>
 8003b52:	bf00      	nop
 8003b54:	20004cc8 	.word	0x20004cc8

08003b58 <counterIcTiSetDefault>:

void counterIcTiSetDefault(void)
{
 8003b58:	b538      	push	{r3, r4, r5, lr}
	if(counter.state == COUNTER_IC){
 8003b5a:	4c15      	ldr	r4, [pc, #84]	; (8003bb0 <counterIcTiSetDefault+0x58>)
 8003b5c:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b02      	cmp	r3, #2
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
		counter.counterIc.ic2BufferSize = 2;
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 8003b64:	f04f 0201 	mov.w	r2, #1
	if(counter.state == COUNTER_IC){
 8003b68:	d01b      	beq.n	8003ba2 <counterIcTiSetDefault+0x4a>
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
	}else{
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
		counter.counterIc.ic2BufferSize = 1;
		counter.counterIc.tiTimeout = 10000;
		counter.eventChan1 = EVENT_RISING;
 8003b6a:	2300      	movs	r3, #0
		counter.counterIc.tiTimeout = 10000;
 8003b6c:	f242 7110 	movw	r1, #10000	; 0x2710
		counter.counterIc.ic1BufferSize = 1;			/* only 1 sample for one event that occurs on one single channel */
 8003b70:	80e2      	strh	r2, [r4, #6]
		counter.counterIc.ic2BufferSize = 1;
 8003b72:	8122      	strh	r2, [r4, #8]
		counter.counterIc.tiTimeout = 10000;
 8003b74:	f8c4 1394 	str.w	r1, [r4, #916]	; 0x394
		counter.eventChan1 = EVENT_RISING;
 8003b78:	f884 33cb 	strb.w	r3, [r4, #971]	; 0x3cb
		counter.eventChan2 = EVENT_RISING;
 8003b7c:	f884 33cc 	strb.w	r3, [r4, #972]	; 0x3cc
	}
	counter.counterIc.ic1psc = 1;
 8003b80:	2501      	movs	r5, #1
	counter.counterIc.ic2psc = 1;
	TIM_IC1_PSC_Config(1);
 8003b82:	4628      	mov	r0, r5
	counter.counterIc.ic1psc = 1;
 8003b84:	f884 5390 	strb.w	r5, [r4, #912]	; 0x390
	counter.counterIc.ic2psc = 1;
 8003b88:	f884 5391 	strb.w	r5, [r4, #913]	; 0x391
	TIM_IC1_PSC_Config(1);
 8003b8c:	f00c fd88 	bl	80106a0 <TIM_IC1_PSC_Config>
	TIM_IC2_PSC_Config(1);	
 8003b90:	4628      	mov	r0, r5
 8003b92:	f00c fda5 	bl	80106e0 <TIM_IC2_PSC_Config>
	counter.counterIc.psc = 0;		
 8003b96:	2200      	movs	r2, #0
	counter.counterIc.arr = 0xFFFFFFFF;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
	counter.counterIc.psc = 0;		
 8003b9c:	80a2      	strh	r2, [r4, #4]
	counter.counterIc.arr = 0xFFFFFFFF;
 8003b9e:	6023      	str	r3, [r4, #0]
}
 8003ba0:	bd38      	pop	{r3, r4, r5, pc}
		counter.counterIc.ic1BufferSize = 2;			/* the lowest value of icxBufferSize is 2! - 1 sample for IC frequency measuring */
 8003ba2:	80e3      	strh	r3, [r4, #6]
		counter.counterIc.ic2BufferSize = 2;
 8003ba4:	8123      	strh	r3, [r4, #8]
		counter.icChannel1 = COUNTER_IRQ_IC_PASS;
 8003ba6:	f884 23c6 	strb.w	r2, [r4, #966]	; 0x3c6
		counter.icChannel2 = COUNTER_IRQ_IC_PASS;				
 8003baa:	f884 23c7 	strb.w	r2, [r4, #967]	; 0x3c7
 8003bae:	e7e7      	b.n	8003b80 <counterIcTiSetDefault+0x28>
 8003bb0:	20004cc8 	.word	0x20004cc8

08003bb4 <GeneratorTask>:
 * task is getting messages from other tasks and takes care about generator functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTask, pvParameters){	
void GeneratorTask(void const *argument){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8

	//Build error on lines below? Lenght of Pin strings must be 4 chars long!!!
	CASSERT(sizeof(GEN_CH1_PIN_STR)==5);
	CASSERT(sizeof(GEN_CH2_PIN_STR)==5);

	uint16_t message = 0xFFFF;
 8003bb8:	ae02      	add	r6, sp, #8
 * @param  None
 * @retval None
 */
void generatorSetDefault(void)
{
	generator.bufferMemory=generatorBuffer;
 8003bba:	4c5f      	ldr	r4, [pc, #380]	; (8003d38 <GeneratorTask+0x184>)
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003bbc:	4d5f      	ldr	r5, [pc, #380]	; (8003d3c <GeneratorTask+0x188>)
	uint16_t message = 0xFFFF;
 8003bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 8003bc8:	f826 3d02 	strh.w	r3, [r6, #-2]!
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003bcc:	f008 fb66 	bl	800c29c <xQueueGenericCreate>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	generator.bufferMemory=generatorBuffer;
 8003bd4:	4a5a      	ldr	r2, [pc, #360]	; (8003d40 <GeneratorTask+0x18c>)
 8003bd6:	6022      	str	r2, [r4, #0]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
	}

	generator.numOfChannles=1;
 8003bd8:	2701      	movs	r7, #1
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003bda:	6063      	str	r3, [r4, #4]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003bdc:	60e3      	str	r3, [r4, #12]
		generator.generatingFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003bde:	60a3      	str	r3, [r4, #8]
		generator.realGenFrequency[i]=DEFAULT_GENERATING_FREQ;
 8003be0:	6123      	str	r3, [r4, #16]
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8003be2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
	generator.numOfChannles=1;
 8003be6:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
	generator.pChanMem[0]=generatorBuffer;
	generator.state=GENERATOR_IDLE;
 8003bea:	f04f 0800 	mov.w	r8, #0
	generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2;
 8003bee:	63a3      	str	r3, [r4, #56]	; 0x38
	generator.oneChanSamples[0]=MAX_GENERATOR_BUFF_SIZE/2;
 8003bf0:	86a3      	strh	r3, [r4, #52]	; 0x34
	generator.DAC_res=DAC_DATA_DEPTH;
 8003bf2:	230c      	movs	r3, #12
	generator.pChanMem[0]=generatorBuffer;
 8003bf4:	62e2      	str	r2, [r4, #44]	; 0x2c
	generatorMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8003bf6:	6028      	str	r0, [r5, #0]
	generator.state=GENERATOR_IDLE;
 8003bf8:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
	generator.DAC_res=DAC_DATA_DEPTH;
 8003bfc:	87a3      	strh	r3, [r4, #60]	; 0x3c
		xQueueReceive(generatorMessageQueue, &message, portMAX_DELAY);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	4631      	mov	r1, r6
 8003c06:	f008 fe35 	bl	800c874 <xQueueGenericReceive>
		switch(message){
 8003c0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003c0e:	3b21      	subs	r3, #33	; 0x21
 8003c10:	2b13      	cmp	r3, #19
 8003c12:	d80d      	bhi.n	8003c30 <GeneratorTask+0x7c>
 8003c14:	e8df f003 	tbb	[pc, r3]
 8003c18:	0c0c3f3a 	.word	0x0c0c3f3a
 8003c1c:	0c0e1928 	.word	0x0c0e1928
 8003c20:	0c0c0c0c 	.word	0x0c0c0c0c
 8003c24:	0c0c0c0c 	.word	0x0c0c0c0c
 8003c28:	0a0c0c0c 	.word	0x0a0c0c0c
			if(generator.state==GENERATOR_IDLE){}
 8003c2c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003c30:	6828      	ldr	r0, [r5, #0]
 8003c32:	e7e4      	b.n	8003bfe <GeneratorTask+0x4a>
			if(generator.modeState==GENERATOR_DAC){				
 8003c34:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d058      	beq.n	8003cee <GeneratorTask+0x13a>
			}else if(generator.modeState==GENERATOR_PWM){
 8003c3c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d1f5      	bne.n	8003c30 <GeneratorTask+0x7c>
				TIMGenPwmDeinit();
 8003c44:	f00d fa86 	bl	8011154 <TIMGenPwmDeinit>
 8003c48:	e7f2      	b.n	8003c30 <GeneratorTask+0x7c>
			if(generator.state==GENERATOR_RUN){
 8003c4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d1ee      	bne.n	8003c30 <GeneratorTask+0x7c>
				if(generator.modeState==GENERATOR_DAC){
 8003c52:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d04c      	beq.n	8003cf4 <GeneratorTask+0x140>
				}else if(generator.modeState==GENERATOR_PWM){
 8003c5a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d05f      	beq.n	8003d22 <GeneratorTask+0x16e>
				generator.state=GENERATOR_IDLE;
 8003c62:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
 8003c66:	e7e3      	b.n	8003c30 <GeneratorTask+0x7c>
			if(generator.state==GENERATOR_IDLE){
 8003c68:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003c6c:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1dd      	bne.n	8003c30 <GeneratorTask+0x7c>
				if(generator.modeState==GENERATOR_DAC){
 8003c74:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c78:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 8003c7c:	b193      	cbz	r3, 8003ca4 <GeneratorTask+0xf0>
				}else if(generator.modeState==GENERATOR_PWM){
 8003c7e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d039      	beq.n	8003cfa <GeneratorTask+0x146>
				generator.state=GENERATOR_RUN;
 8003c86:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
 8003c8a:	e7d1      	b.n	8003c30 <GeneratorTask+0x7c>
	generator.modeState = GENERATOR_DAC;
 8003c8c:	f884 8029 	strb.w	r8, [r4, #41]	; 0x29
			TIMGenInit();
 8003c90:	f00d f85e 	bl	8010d50 <TIMGenInit>
			break;
 8003c94:	e7cc      	b.n	8003c30 <GeneratorTask+0x7c>
	generator.modeState = GENERATOR_PWM;
 8003c96:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
			TIMGenPwmInit();
 8003c9a:	f00d f945 	bl	8010f28 <TIMGenPwmInit>
			break;
 8003c9e:	e7c7      	b.n	8003c30 <GeneratorTask+0x7c>
 * @param  None
 * @retval None
 */
void genInit(void)
{	
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003ca0:	f04f 0901 	mov.w	r9, #1
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003ca4:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 8003ca8:	fa5f fa89 	uxtb.w	sl, r9
 8003cac:	6858      	ldr	r0, [r3, #4]
 8003cae:	4651      	mov	r1, sl
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f00c ffd5 	bl	8010c60 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003cb6:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8003cba:	f109 020a 	add.w	r2, r9, #10
 8003cbe:	f109 0318 	add.w	r3, r9, #24
 8003cc2:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8003cc6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if(generator.numOfChannles>i){
 8003cca:	458a      	cmp	sl, r1
		}else{
			DAC_DMA_Reconfig(i,NULL,0);
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	4611      	mov	r1, r2
			DAC_DMA_Reconfig(i,(uint32_t *)generator.pChanMem[i], generator.oneChanSamples[i]);
 8003cd2:	4650      	mov	r0, sl
 8003cd4:	bf3a      	itte	cc
 8003cd6:	f8dc 1004 	ldrcc.w	r1, [ip, #4]
 8003cda:	889a      	ldrhcc	r2, [r3, #4]
			DAC_DMA_Reconfig(i,NULL,0);
 8003cdc:	4650      	movcs	r0, sl
 8003cde:	f00b f827 	bl	800ed30 <DAC_DMA_Reconfig>
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
 8003ce2:	f1b9 0f00 	cmp.w	r9, #0
 8003ce6:	d0db      	beq.n	8003ca0 <GeneratorTask+0xec>
					GeneratingEnable();
 8003ce8:	f00b f848 	bl	800ed7c <GeneratingEnable>
 8003cec:	e7cb      	b.n	8003c86 <GeneratorTask+0xd2>
				TIMGenDacDeinit();
 8003cee:	f00d f865 	bl	8010dbc <TIMGenDacDeinit>
 8003cf2:	e79d      	b.n	8003c30 <GeneratorTask+0x7c>
					GeneratingDisable();
 8003cf4:	f00b f870 	bl	800edd8 <GeneratingDisable>
 8003cf8:	e7b3      	b.n	8003c62 <GeneratorTask+0xae>
 * @retval None
 */
void genPwmInit(void)
{	
	for(uint8_t i = 0;i<MAX_DAC_CHANNELS;i++){
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003cfa:	6860      	ldr	r0, [r4, #4]
 8003cfc:	4652      	mov	r2, sl
 8003cfe:	4651      	mov	r1, sl
 8003d00:	f00c ffae 	bl	8010c60 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003d04:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003d08:	b993      	cbnz	r3, 8003d30 <GeneratorTask+0x17c>
		TIM_Reconfig_gen(generator.generatingFrequency[i],i,0);
 8003d0a:	68a0      	ldr	r0, [r4, #8]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2101      	movs	r1, #1
 8003d10:	f00c ffa6 	bl	8010c60 <TIM_Reconfig_gen>
		if(generator.numOfChannles>i){
 8003d14:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d805      	bhi.n	8003d28 <GeneratorTask+0x174>
					PWMGeneratingEnable();
 8003d1c:	f00d f896 	bl	8010e4c <PWMGeneratingEnable>
 8003d20:	e7b1      	b.n	8003c86 <GeneratorTask+0xd2>
					PWMGeneratingDisable();
 8003d22:	f00d f8d3 	bl	8010ecc <PWMGeneratingDisable>
 8003d26:	e79c      	b.n	8003c62 <GeneratorTask+0xae>
			TIM_DMA_Reconfig(i);			
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f00d f863 	bl	8010df4 <TIM_DMA_Reconfig>
 8003d2e:	e7f5      	b.n	8003d1c <GeneratorTask+0x168>
 8003d30:	4650      	mov	r0, sl
 8003d32:	f00d f85f 	bl	8010df4 <TIM_DMA_Reconfig>
 8003d36:	e7e8      	b.n	8003d0a <GeneratorTask+0x156>
 8003d38:	200050a0 	.word	0x200050a0
 8003d3c:	200050e0 	.word	0x200050e0
 8003d40:	200050e4 	.word	0x200050e4

08003d44 <genSetMode>:
{
 8003d44:	b500      	push	{lr}
 8003d46:	b083      	sub	sp, #12
	switch(mode){
 8003d48:	b178      	cbz	r0, 8003d6a <genSetMode+0x26>
 8003d4a:	2801      	cmp	r0, #1
 8003d4c:	d10a      	bne.n	8003d64 <genSetMode+0x20>
		passMsg = MSG_GEN_PWM_MODE;
 8003d4e:	a902      	add	r1, sp, #8
 8003d50:	2322      	movs	r3, #34	; 0x22
 8003d52:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <genSetMode+0x44>)
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f008 fae0 	bl	800c324 <xQueueGenericSend>
}
 8003d64:	b003      	add	sp, #12
 8003d66:	f85d fb04 	ldr.w	pc, [sp], #4
		passMsg = MSG_GEN_DAC_MODE;
 8003d6a:	a902      	add	r1, sp, #8
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d6c:	4a06      	ldr	r2, [pc, #24]	; (8003d88 <genSetMode+0x44>)
		passMsg = MSG_GEN_DAC_MODE;
 8003d6e:	2321      	movs	r3, #33	; 0x21
 8003d70:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003d74:	4603      	mov	r3, r0
 8003d76:	6810      	ldr	r0, [r2, #0]
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	f008 fad2 	bl	800c324 <xQueueGenericSend>
}
 8003d80:	b003      	add	sp, #12
 8003d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d86:	bf00      	nop
 8003d88:	200050e0 	.word	0x200050e0

08003d8c <generator_deinit>:
	switch(generator.modeState){
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <generator_deinit+0x1c>)
 8003d8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d96:	b123      	cbz	r3, 8003da2 <generator_deinit+0x16>
 8003d98:	2a01      	cmp	r2, #1
 8003d9a:	d101      	bne.n	8003da0 <generator_deinit+0x14>
		TIMGenPwmDeinit();
 8003d9c:	f00d b9da 	b.w	8011154 <TIMGenPwmDeinit>
}
 8003da0:	4770      	bx	lr
		TIMGenDacDeinit();
 8003da2:	f00d b80b 	b.w	8010dbc <TIMGenDacDeinit>
 8003da6:	bf00      	nop
 8003da8:	200050a0 	.word	0x200050a0

08003dac <genPwmSetFrequency>:
		}
	}
}

void genPwmSetFrequency(double freq, uint8_t channel){
 8003dac:	b510      	push	{r4, lr}
 8003dae:	4604      	mov	r4, r0
 8003db0:	b082      	sub	sp, #8
	double realPwmFrq;
	realPwmFrq = TIM_Reconfig_GenPwm(freq, channel);
 8003db2:	f00c ff79 	bl	8010ca8 <TIM_Reconfig_GenPwm>

	uint16_t passMsg;
	if(channel == 0){
 8003db6:	b19c      	cbz	r4, 8003de0 <genPwmSetFrequency+0x34>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
		generator.realPwmFreqCh1 = realPwmFrq;
	}else if(channel == 1){
 8003db8:	2c01      	cmp	r4, #1
 8003dba:	d00a      	beq.n	8003dd2 <genPwmSetFrequency+0x26>
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
		generator.realPwmFreqCh2 = realPwmFrq;
	}
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <genPwmSetFrequency+0x44>)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6810      	ldr	r0, [r2, #0]
 8003dc2:	f10d 0106 	add.w	r1, sp, #6
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dca:	f008 faab 	bl	800c324 <xQueueGenericSend>
}
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd10      	pop	{r4, pc}
		generator.realPwmFreqCh2 = realPwmFrq;
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <genPwmSetFrequency+0x48>)
 8003dd4:	ed83 0b08 	vstr	d0, [r3, #32]
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH2;
 8003dd8:	2324      	movs	r3, #36	; 0x24
 8003dda:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003dde:	e7ed      	b.n	8003dbc <genPwmSetFrequency+0x10>
		generator.realPwmFreqCh1 = realPwmFrq;
 8003de0:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <genPwmSetFrequency+0x48>)
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8003de2:	2323      	movs	r3, #35	; 0x23
		generator.realPwmFreqCh1 = realPwmFrq;
 8003de4:	ed82 0b06 	vstr	d0, [r2, #24]
		passMsg = MSG_GEN_PWM_REAL_FREQ_CH1;
 8003de8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8003dec:	e7e6      	b.n	8003dbc <genPwmSetFrequency+0x10>
 8003dee:	bf00      	nop
 8003df0:	20004cb4 	.word	0x20004cb4
 8003df4:	200050a0 	.word	0x200050a0

08003df8 <genSetData>:
/**
 * @brief  Common Generator set data length function.
 * @param
 * @retval None
 */
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8003df8:	b530      	push	{r4, r5, lr}
	uint8_t result = GEN_INVALID_STATE;
	if(generator.state==GENERATOR_IDLE ){
 8003dfa:	4c21      	ldr	r4, [pc, #132]	; (8003e80 <genSetData+0x88>)
uint8_t genSetData(uint16_t index,uint8_t length,uint8_t chan){
 8003dfc:	b083      	sub	sp, #12
	if(generator.state==GENERATOR_IDLE ){
 8003dfe:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
	uint8_t result = GEN_INVALID_STATE;
 8003e02:	2365      	movs	r3, #101	; 0x65
 8003e04:	f88d 3005 	strb.w	r3, [sp, #5]
	if(generator.state==GENERATOR_IDLE ){
 8003e08:	b9e5      	cbnz	r5, 8003e44 <genSetData+0x4c>
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8003e0a:	f102 0317 	add.w	r3, r2, #23
 8003e0e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003e12:	0040      	lsls	r0, r0, #1
 8003e14:	889b      	ldrh	r3, [r3, #4]
 8003e16:	180d      	adds	r5, r1, r0
 8003e18:	ebb3 0f55 	cmp.w	r3, r5, lsr #1
 8003e1c:	da02      	bge.n	8003e24 <genSetData+0x2c>
 8003e1e:	2066      	movs	r0, #102	; 0x66
		}else{
			result = GEN_OUT_OF_MEMORY;
		}
	}
	return result;
}
 8003e20:	b003      	add	sp, #12
 8003e22:	bd30      	pop	{r4, r5, pc}
		if ((index*2+length)/2<=generator.oneChanSamples[chan-1] && generator.numOfChannles>=chan){
 8003e24:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d3f8      	bcc.n	8003e1e <genSetData+0x26>
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003e2c:	3209      	adds	r2, #9
 8003e2e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8003e32:	460d      	mov	r5, r1
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	4418      	add	r0, r3
 8003e38:	f7fe fa4e 	bl	80022d8 <commBufferReadNBytes>
 8003e3c:	42a8      	cmp	r0, r5
 8003e3e:	d004      	beq.n	8003e4a <genSetData+0x52>
 8003e40:	206d      	movs	r0, #109	; 0x6d
 8003e42:	e7ed      	b.n	8003e20 <genSetData+0x28>
 8003e44:	4618      	mov	r0, r3
}
 8003e46:	b003      	add	sp, #12
 8003e48:	bd30      	pop	{r4, r5, pc}
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003e4a:	f10d 0005 	add.w	r0, sp, #5
 8003e4e:	f7fe fa17 	bl	8002280 <commBufferReadByte>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d1f4      	bne.n	8003e40 <genSetData+0x48>
 8003e56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e5a:	2b3b      	cmp	r3, #59	; 0x3b
 8003e5c:	d1f0      	bne.n	8003e40 <genSetData+0x48>
				uint16_t passMsg = MSG_INVALIDATE;
 8003e5e:	a902      	add	r1, sp, #8
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003e60:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <genSetData+0x8c>)
				result = 0;
 8003e62:	f88d 0005 	strb.w	r0, [sp, #5]
				uint16_t passMsg = MSG_INVALIDATE;
 8003e66:	2334      	movs	r3, #52	; 0x34
 8003e68:	f821 3d02 	strh.w	r3, [r1, #-2]!
				xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	6810      	ldr	r0, [r2, #0]
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	f008 fa56 	bl	800c324 <xQueueGenericSend>
 8003e78:	f89d 0005 	ldrb.w	r0, [sp, #5]
			if(commBufferReadNBytes((uint8_t *)generator.pChanMem[chan-1]+index*2,length)==length && commBufferReadByte(&result)==0 && result==';'){
 8003e7c:	e7d0      	b.n	8003e20 <genSetData+0x28>
 8003e7e:	bf00      	nop
 8003e80:	200050a0 	.word	0x200050a0
 8003e84:	200050e0 	.word	0x200050e0

08003e88 <genSetFrequency>:
 * @retval None
 */
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
	uint8_t result = GEN_TO_HIGH_FREQ;
	uint32_t realFreq;
	if(freq<=MAX_GENERATING_FREQ){
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <genSetFrequency+0x34>)
 8003e8a:	4298      	cmp	r0, r3
 8003e8c:	d813      	bhi.n	8003eb6 <genSetFrequency+0x2e>
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003e8e:	b530      	push	{r4, r5, lr}
		generator.generatingFrequency[chan-1] = freq;
 8003e90:	4d0b      	ldr	r5, [pc, #44]	; (8003ec0 <genSetFrequency+0x38>)
 8003e92:	460c      	mov	r4, r1
 8003e94:	3901      	subs	r1, #1
 8003e96:	eb05 0381 	add.w	r3, r5, r1, lsl #2
uint8_t genSetFrequency(uint32_t freq,uint8_t chan){
 8003e9a:	b083      	sub	sp, #12
		generator.generatingFrequency[chan-1] = freq;
 8003e9c:	6058      	str	r0, [r3, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 8003e9e:	b2c9      	uxtb	r1, r1
 8003ea0:	6858      	ldr	r0, [r3, #4]
 8003ea2:	aa01      	add	r2, sp, #4
 8003ea4:	f00c fedc 	bl	8010c60 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 8003ea8:	3401      	adds	r4, #1
 8003eaa:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003eae:	9b01      	ldr	r3, [sp, #4]
 8003eb0:	6063      	str	r3, [r4, #4]
	}
	return result;
}
 8003eb2:	b003      	add	sp, #12
 8003eb4:	bd30      	pop	{r4, r5, pc}
	uint8_t result = GEN_TO_HIGH_FREQ;
 8003eb6:	2069      	movs	r0, #105	; 0x69
}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	001e8480 	.word	0x001e8480
 8003ec0:	200050a0 	.word	0x200050a0

08003ec4 <genSendRealSamplingFreq>:
/**
 * @brief  Common function for sending real sampling frequency.
 * @param  None
 * @retval None
 */
void genSendRealSamplingFreq(void){
 8003ec4:	b530      	push	{r4, r5, lr}
 8003ec6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH1;
 8003ec8:	ac02      	add	r4, sp, #8
 8003eca:	2328      	movs	r3, #40	; 0x28
 8003ecc:	f824 3d02 	strh.w	r3, [r4, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003ed0:	4d09      	ldr	r5, [pc, #36]	; (8003ef8 <genSendRealSamplingFreq+0x34>)
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	6828      	ldr	r0, [r5, #0]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	f008 fa22 	bl	800c324 <xQueueGenericSend>
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	6828      	ldr	r0, [r5, #0]
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
 8003ee4:	2429      	movs	r4, #41	; 0x29
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295
	passMsg = MSG_GEN_SIGNAL_REAL_SAMPLING_FREQ_CH2;
 8003eec:	f8ad 4006 	strh.w	r4, [sp, #6]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003ef0:	f008 fa18 	bl	800c324 <xQueueGenericSend>
}
 8003ef4:	b003      	add	sp, #12
 8003ef6:	bd30      	pop	{r4, r5, pc}
 8003ef8:	20004cb4 	.word	0x20004cb4

08003efc <genDataOKSendNext>:

void genDataOKSendNext(void){
 8003efc:	b500      	push	{lr}
 8003efe:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_NEXT;
 8003f00:	a902      	add	r1, sp, #8
 8003f02:	232a      	movs	r3, #42	; 0x2a
 8003f04:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <genDataOKSendNext+0x20>)
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	2300      	movs	r3, #0
 8003f12:	f008 fa07 	bl	800c324 <xQueueGenericSend>
}
 8003f16:	b003      	add	sp, #12
 8003f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f1c:	20004cb4 	.word	0x20004cb4

08003f20 <genStatusOK>:

void genStatusOK(void){
 8003f20:	b500      	push	{lr}
 8003f22:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_OK;
 8003f24:	a902      	add	r1, sp, #8
 8003f26:	232b      	movs	r3, #43	; 0x2b
 8003f28:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <genStatusOK+0x20>)
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	f008 f9f5 	bl	800c324 <xQueueGenericSend>
}
 8003f3a:	b003      	add	sp, #12
 8003f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f40:	20004cb4 	.word	0x20004cb4

08003f44 <genGetRealSmplFreq>:

uint32_t genGetRealSmplFreq(uint8_t chan){
	return generator.realGenFrequency[chan-1];
 8003f44:	4b02      	ldr	r3, [pc, #8]	; (8003f50 <genGetRealSmplFreq+0xc>)
 8003f46:	3001      	adds	r0, #1
 8003f48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003f4c:	6858      	ldr	r0, [r3, #4]
}
 8003f4e:	4770      	bx	lr
 8003f50:	200050a0 	.word	0x200050a0

08003f54 <genSetLength>:

uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003f54:	b530      	push	{r4, r5, lr}
	uint8_t result=GEN_INVALID_STATE;
	if(generator.state==GENERATOR_IDLE){
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <genSetLength+0x5c>)
 8003f58:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
uint8_t genSetLength(uint32_t length,uint8_t chan){
 8003f5c:	b083      	sub	sp, #12
	if(generator.state==GENERATOR_IDLE){
 8003f5e:	bb12      	cbnz	r2, 8003fa6 <genSetLength+0x52>
 8003f60:	f002 05ff 	and.w	r5, r2, #255	; 0xff
		uint32_t smpTmp=generator.maxOneChanSamples;
 8003f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 8003f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f68:	4290      	cmp	r0, r2
 8003f6a:	d90e      	bls.n	8003f8a <genSetLength+0x36>
			generator.oneChanSamples[chan-1]=length;
			clearGenBuffer();
			result=0;
		}else{
			result = GEN_BUFFER_SIZE_ERR;
 8003f6c:	2467      	movs	r4, #103	; 0x67
		}
		uint16_t passMsg = MSG_INVALIDATE;
 8003f6e:	a902      	add	r1, sp, #8
 8003f70:	2334      	movs	r3, #52	; 0x34
 8003f72:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <genSetLength+0x60>)
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f008 f9d0 	bl	800c324 <xQueueGenericSend>
	}
	return result;
}
 8003f84:	4620      	mov	r0, r4
 8003f86:	b003      	add	sp, #12
 8003f88:	bd30      	pop	{r4, r5, pc}
			generator.oneChanSamples[chan-1]=length;
 8003f8a:	f101 0217 	add.w	r2, r1, #23
 8003f8e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003f92:	b284      	uxth	r4, r0
 8003f94:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4807      	ldr	r0, [pc, #28]	; (8003fb8 <genSetLength+0x64>)
 8003f9c:	809c      	strh	r4, [r3, #4]
			result=0;
 8003f9e:	462c      	mov	r4, r5
 8003fa0:	f00d ff6f 	bl	8011e82 <memset>
 8003fa4:	e7e3      	b.n	8003f6e <genSetLength+0x1a>
	uint8_t result=GEN_INVALID_STATE;
 8003fa6:	2465      	movs	r4, #101	; 0x65
}
 8003fa8:	4620      	mov	r0, r4
 8003faa:	b003      	add	sp, #12
 8003fac:	bd30      	pop	{r4, r5, pc}
 8003fae:	bf00      	nop
 8003fb0:	200050a0 	.word	0x200050a0
 8003fb4:	200050e0 	.word	0x200050e0
 8003fb8:	200050e4 	.word	0x200050e4

08003fbc <genSetNumOfChannels>:



uint8_t genSetNumOfChannels(uint8_t chan){
	uint8_t result=GEN_INVALID_STATE;
	uint8_t chanTmp=generator.numOfChannles;
 8003fbc:	491e      	ldr	r1, [pc, #120]	; (8004038 <genSetNumOfChannels+0x7c>)
 8003fbe:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8003fc2:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8003fc6:	b9ca      	cbnz	r2, 8003ffc <genSetNumOfChannels+0x40>
		if(chan<=MAX_DAC_CHANNELS){
 8003fc8:	2802      	cmp	r0, #2
 8003fca:	d817      	bhi.n	8003ffc <genSetNumOfChannels+0x40>
uint8_t genSetNumOfChannels(uint8_t chan){
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f44f 647a 	mov.w	r4, #4000	; 0xfa0
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	fb94 f4f0 	sdiv	r4, r4, r0
			while(chanTmp>0){
 8003fda:	b18b      	cbz	r3, 8004000 <genSetNumOfChannels+0x44>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e002      	b.n	8003fe8 <genSetNumOfChannels+0x2c>
 8003fe2:	1e5a      	subs	r2, r3, #1
			while(chanTmp>0){
 8003fe4:	b163      	cbz	r3, 8004000 <genSetNumOfChannels+0x44>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8003fe6:	b2d3      	uxtb	r3, r2
 8003fe8:	f103 0218 	add.w	r2, r3, #24
 8003fec:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003ff0:	8892      	ldrh	r2, [r2, #4]
 8003ff2:	4294      	cmp	r4, r2
 8003ff4:	daf5      	bge.n	8003fe2 <genSetNumOfChannels+0x26>
					return GEN_BUFFER_SIZE_ERR;
 8003ff6:	2067      	movs	r0, #103	; 0x67
			uint16_t passMsg = MSG_INVALIDATE;
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
		}
	}
	return result;
}
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd10      	pop	{r4, pc}
	uint8_t result=GEN_INVALID_STATE;
 8003ffc:	2065      	movs	r0, #101	; 0x65
}
 8003ffe:	4770      	bx	lr
			generator.numOfChannles=chan;
 8004000:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8004004:	638c      	str	r4, [r1, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 8004006:	b140      	cbz	r0, 800401a <genSetNumOfChannels+0x5e>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <genSetNumOfChannels+0x80>)
 800400a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 800400c:	62cb      	str	r3, [r1, #44]	; 0x2c
			for(uint8_t i=0;i<chan;i++){
 800400e:	2802      	cmp	r0, #2
 8004010:	d103      	bne.n	800401a <genSetNumOfChannels+0x5e>
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8004012:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8004014:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004018:	630b      	str	r3, [r1, #48]	; 0x30
			uint16_t passMsg = MSG_INVALIDATE;
 800401a:	a902      	add	r1, sp, #8
 800401c:	2334      	movs	r3, #52	; 0x34
 800401e:	f821 3d02 	strh.w	r3, [r1, #-2]!
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <genSetNumOfChannels+0x84>)
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	2300      	movs	r3, #0
 800402c:	f008 f97a 	bl	800c324 <xQueueGenericSend>
 8004030:	2000      	movs	r0, #0
}
 8004032:	b002      	add	sp, #8
 8004034:	bd10      	pop	{r4, pc}
 8004036:	bf00      	nop
 8004038:	200050a0 	.word	0x200050a0
 800403c:	200050e4 	.word	0x200050e4
 8004040:	200050e0 	.word	0x200050e0

08004044 <genSetOutputBuffer>:
		generatorBuffer[i]=0;
	}
}

void genSetOutputBuffer(void){
	DACSetOutputBuffer();
 8004044:	f00a be8e 	b.w	800ed64 <DACSetOutputBuffer>

08004048 <genUnsetOutputBuffer>:
}

void genUnsetOutputBuffer(void){
	DACUnsetOutputBuffer();
 8004048:	f00a be92 	b.w	800ed70 <DACUnsetOutputBuffer>

0800404c <genSetDAC>:
}

uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 800404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t result=0;
	if(generator.state==GENERATOR_IDLE){
 8004050:	4c5f      	ldr	r4, [pc, #380]	; (80041d0 <genSetDAC+0x184>)
 8004052:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
uint8_t genSetDAC(uint16_t chann1,uint16_t chann2){
 8004056:	b082      	sub	sp, #8
 8004058:	4681      	mov	r9, r0
 800405a:	4688      	mov	r8, r1
	if(generator.state==GENERATOR_IDLE){
 800405c:	bb5b      	cbnz	r3, 80040b6 <genSetDAC+0x6a>
	if(generator.state==GENERATOR_IDLE){
 800405e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004062:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004066:	2b00      	cmp	r3, #0
 8004068:	d055      	beq.n	8004116 <genSetDAC+0xca>
 800406a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800406e:	4f59      	ldr	r7, [pc, #356]	; (80041d4 <genSetDAC+0x188>)
 8004070:	2565      	movs	r5, #101	; 0x65
 8004072:	ae01      	add	r6, sp, #4
 8004074:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004078:	2b00      	cmp	r3, #0
 800407a:	d063      	beq.n	8004144 <genSetDAC+0xf8>
	uint8_t chanTmp=generator.numOfChannles;
 800407c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8004080:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004084:	3565      	adds	r5, #101	; 0x65
 8004086:	b2ed      	uxtb	r5, r5
	uint8_t chanTmp=generator.numOfChannles;
 8004088:	b2db      	uxtb	r3, r3
	if(generator.state==GENERATOR_IDLE){
 800408a:	2a00      	cmp	r2, #0
 800408c:	d177      	bne.n	800417e <genSetDAC+0x132>
			while(chanTmp>0){
 800408e:	2b00      	cmp	r3, #0
 8004090:	d078      	beq.n	8004184 <genSetDAC+0x138>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 8004092:	3b01      	subs	r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e003      	b.n	80040a0 <genSetDAC+0x54>
 8004098:	1e5a      	subs	r2, r3, #1
			while(chanTmp>0){
 800409a:	2b00      	cmp	r3, #0
 800409c:	d072      	beq.n	8004184 <genSetDAC+0x138>
				if(generator.oneChanSamples[--chanTmp]>MAX_GENERATOR_BUFF_SIZE/2/chan){
 800409e:	b2d3      	uxtb	r3, r2
 80040a0:	f103 0218 	add.w	r2, r3, #24
 80040a4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80040a8:	8892      	ldrh	r2, [r2, #4]
 80040aa:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80040ae:	d9f3      	bls.n	8004098 <genSetDAC+0x4c>
 80040b0:	3567      	adds	r5, #103	; 0x67
 80040b2:	b2ed      	uxtb	r5, r5
 80040b4:	e002      	b.n	80040bc <genSetDAC+0x70>
 80040b6:	4f47      	ldr	r7, [pc, #284]	; (80041d4 <genSetDAC+0x188>)
	uint8_t result=0;
 80040b8:	2500      	movs	r5, #0
 80040ba:	ae01      	add	r6, sp, #4
			result+=genSetLength(1,i+1);
		}
		result+=genSetNumOfChannels(MAX_DAC_CHANNELS);
	}
	if(MAX_DAC_CHANNELS>0){
		*generator.pChanMem[0]=chann1;
 80040bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		generator.generatingFrequency[chan-1] = freq;
 80040be:	f04f 0a64 	mov.w	sl, #100	; 0x64
		*generator.pChanMem[0]=chann1;
 80040c2:	f8a3 9000 	strh.w	r9, [r3]
		generator.generatingFrequency[chan-1] = freq;
 80040c6:	f8c4 a004 	str.w	sl, [r4, #4]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 80040ca:	4632      	mov	r2, r6
 80040cc:	6860      	ldr	r0, [r4, #4]
 80040ce:	2100      	movs	r1, #0
 80040d0:	f00c fdc6 	bl	8010c60 <TIM_Reconfig_gen>
		generator.realGenFrequency[chan-1] = realFreq;
 80040d4:	9b01      	ldr	r3, [sp, #4]
 80040d6:	60e3      	str	r3, [r4, #12]
		result+=genSetFrequency(100,1);
	}
	if(MAX_DAC_CHANNELS>1){
		*generator.pChanMem[1]=chann2;
 80040d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040da:	f8a3 8000 	strh.w	r8, [r3]
		generator.generatingFrequency[chan-1] = freq;
 80040de:	f8c4 a008 	str.w	sl, [r4, #8]
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 80040e2:	68a3      	ldr	r3, [r4, #8]
 80040e4:	4632      	mov	r2, r6
		result+=genSetFrequency(100,1);
 80040e6:	4405      	add	r5, r0
		result = TIM_Reconfig_gen(generator.generatingFrequency[chan-1],chan-1,&realFreq);
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f00c fdb8 	bl	8010c60 <TIM_Reconfig_gen>
		result+=genSetFrequency(100,1);
 80040f0:	b2ed      	uxtb	r5, r5
		generator.realGenFrequency[chan-1] = realFreq;
 80040f2:	9b01      	ldr	r3, [sp, #4]
 80040f4:	6123      	str	r3, [r4, #16]
		result+=genSetFrequency(100,2);
 80040f6:	4405      	add	r5, r0
 * @param  None
 * @retval None
 */
void genStart(void){
	uint16_t passMsg = MSG_GEN_START;
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80040f8:	4631      	mov	r1, r6
 80040fa:	6838      	ldr	r0, [r7, #0]
	uint16_t passMsg = MSG_GEN_START;
 80040fc:	2425      	movs	r4, #37	; 0x25
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80040fe:	2300      	movs	r3, #0
 8004100:	f04f 32ff 	mov.w	r2, #4294967295
	uint16_t passMsg = MSG_GEN_START;
 8004104:	f8ad 4004 	strh.w	r4, [sp, #4]
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004108:	f008 f90c 	bl	800c324 <xQueueGenericSend>
		result+=genSetFrequency(100,2);
 800410c:	b2ed      	uxtb	r5, r5
}
 800410e:	4628      	mov	r0, r5
 8004110:	b002      	add	sp, #8
 8004112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t smpTmp=generator.maxOneChanSamples;
 8004116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 8004118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800411a:	2b00      	cmp	r3, #0
 800411c:	d14b      	bne.n	80041b6 <genSetDAC+0x16a>
 800411e:	2567      	movs	r5, #103	; 0x67
		uint16_t passMsg = MSG_INVALIDATE;
 8004120:	ae02      	add	r6, sp, #8
 8004122:	2334      	movs	r3, #52	; 0x34
 8004124:	f826 3d04 	strh.w	r3, [r6, #-4]!
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004128:	4f2a      	ldr	r7, [pc, #168]	; (80041d4 <genSetDAC+0x188>)
 800412a:	4631      	mov	r1, r6
 800412c:	2300      	movs	r3, #0
 800412e:	6838      	ldr	r0, [r7, #0]
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	f008 f8f6 	bl	800c324 <xQueueGenericSend>
	if(generator.state==GENERATOR_IDLE){
 8004138:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800413c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004140:	2b00      	cmp	r3, #0
 8004142:	d19b      	bne.n	800407c <genSetDAC+0x30>
		uint32_t smpTmp=generator.maxOneChanSamples;
 8004144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if(length<=generator.maxOneChanSamples){
 8004146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d03d      	beq.n	80041c8 <genSetDAC+0x17c>
			generator.oneChanSamples[chan-1]=length;
 800414c:	2301      	movs	r3, #1
 800414e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004152:	4821      	ldr	r0, [pc, #132]	; (80041d8 <genSetDAC+0x18c>)
 8004154:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004156:	f00d fe94 	bl	8011e82 <memset>
		uint16_t passMsg = MSG_INVALIDATE;
 800415a:	f04f 0c34 	mov.w	ip, #52	; 0x34
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800415e:	2300      	movs	r3, #0
 8004160:	f04f 32ff 	mov.w	r2, #4294967295
 8004164:	4631      	mov	r1, r6
 8004166:	6838      	ldr	r0, [r7, #0]
		uint16_t passMsg = MSG_INVALIDATE;
 8004168:	f8ad c004 	strh.w	ip, [sp, #4]
		xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800416c:	f008 f8da 	bl	800c324 <xQueueGenericSend>
	uint8_t chanTmp=generator.numOfChannles;
 8004170:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
	if(generator.state==GENERATOR_IDLE){
 8004174:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	uint8_t chanTmp=generator.numOfChannles;
 8004178:	b2db      	uxtb	r3, r3
	if(generator.state==GENERATOR_IDLE){
 800417a:	2a00      	cmp	r2, #0
 800417c:	d087      	beq.n	800408e <genSetDAC+0x42>
 800417e:	3565      	adds	r5, #101	; 0x65
 8004180:	b2ed      	uxtb	r5, r5
 8004182:	e79b      	b.n	80040bc <genSetDAC+0x70>
			generator.numOfChannles=chan;
 8004184:	2302      	movs	r3, #2
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 8004186:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
			generator.numOfChannles=chan;
 800418a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			generator.maxOneChanSamples=MAX_GENERATOR_BUFF_SIZE/2/chan;
 800418e:	63a2      	str	r2, [r4, #56]	; 0x38
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <genSetDAC+0x18c>)
 8004192:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004194:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004196:	6ba1      	ldr	r1, [r4, #56]	; 0x38
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004198:	6838      	ldr	r0, [r7, #0]
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 800419a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
			uint16_t passMsg = MSG_INVALIDATE;
 800419e:	f04f 0c34 	mov.w	ip, #52	; 0x34
				generator.pChanMem[i]=(uint16_t *)&generatorBuffer[i*generator.maxOneChanSamples];
 80041a2:	6321      	str	r1, [r4, #48]	; 0x30
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80041a4:	2300      	movs	r3, #0
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295
 80041aa:	4631      	mov	r1, r6
			uint16_t passMsg = MSG_INVALIDATE;
 80041ac:	f8ad c004 	strh.w	ip, [sp, #4]
			xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80041b0:	f008 f8b8 	bl	800c324 <xQueueGenericSend>
 80041b4:	e782      	b.n	80040bc <genSetDAC+0x70>
			generator.oneChanSamples[chan-1]=length;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80041bc:	4806      	ldr	r0, [pc, #24]	; (80041d8 <genSetDAC+0x18c>)
 80041be:	86a3      	strh	r3, [r4, #52]	; 0x34
	uint8_t result=0;
 80041c0:	460d      	mov	r5, r1
 80041c2:	f00d fe5e 	bl	8011e82 <memset>
 80041c6:	e7ab      	b.n	8004120 <genSetDAC+0xd4>
 80041c8:	3567      	adds	r5, #103	; 0x67
 80041ca:	b2ed      	uxtb	r5, r5
 80041cc:	e7c5      	b.n	800415a <genSetDAC+0x10e>
 80041ce:	bf00      	nop
 80041d0:	200050a0 	.word	0x200050a0
 80041d4:	200050e0 	.word	0x200050e0
 80041d8:	200050e4 	.word	0x200050e4

080041dc <genStart>:
void genStart(void){
 80041dc:	b500      	push	{lr}
 80041de:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_START;
 80041e0:	a902      	add	r1, sp, #8
 80041e2:	2325      	movs	r3, #37	; 0x25
 80041e4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <genStart+0x20>)
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	2300      	movs	r3, #0
 80041f2:	f008 f897 	bl	800c324 <xQueueGenericSend>
}
 80041f6:	b003      	add	sp, #12
 80041f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80041fc:	200050e0 	.word	0x200050e0

08004200 <genStop>:
/**
 * @brief  Stop generator
 * @param  None
 * @retval None
 */
void genStop(void){
 8004200:	b500      	push	{lr}
 8004202:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_STOP;
 8004204:	a902      	add	r1, sp, #8
 8004206:	2326      	movs	r3, #38	; 0x26
 8004208:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <genStop+0x20>)
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	f008 f885 	bl	800c324 <xQueueGenericSend>
}
 800421a:	b003      	add	sp, #12
 800421c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004220:	200050e0 	.word	0x200050e0

08004224 <genReset>:
/**
 * @brief  Disable peripheral by reseting it.
 * @param  None
 * @retval None
 */
void genReset(void){
 8004224:	b500      	push	{lr}
 8004226:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_GEN_DEINIT;
 8004228:	a902      	add	r1, sp, #8
 800422a:	2327      	movs	r3, #39	; 0x27
 800422c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(generatorMessageQueue, &passMsg, portMAX_DELAY);
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <genReset+0x20>)
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	2300      	movs	r3, #0
 800423a:	f008 f873 	bl	800c324 <xQueueGenericSend>
}
 800423e:	b003      	add	sp, #12
 8004240:	f85d fb04 	ldr.w	pc, [sp], #4
 8004244:	200050e0 	.word	0x200050e0

08004248 <LogAnlysTask>:
 *					to communication (comms) and takes care of logic analyzer functions.
 * @param  Task handler, parameters pointer
 * @retval None
 */
void LogAnlysTask(void const *argument)
{	
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 800424c:	ae02      	add	r6, sp, #8
 800424e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8004252:	2200      	movs	r2, #0
 8004254:	2104      	movs	r1, #4
 8004256:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 8004258:	f826 3d04 	strh.w	r3, [r6, #-4]!
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 800425c:	f008 f81e 	bl	800c29c <xQueueGenericCreate>
 8004260:	4f33      	ldr	r7, [pc, #204]	; (8004330 <LogAnlysTask+0xe8>)
 */
void logAnlysSetDefault(void){
	/* By default: dataLength = 1 Ksamples, samplingFreq = 10 Ksmpls / s, trigger = 50 %
	 Therefore, 100 ms * 50 % = 50 ms. It applies that postTrigger is set with period 
	 50 ms as well as in One Pulse mode. */
	logAnlys.preTriggerTime = 50;
 8004262:	4d34      	ldr	r5, [pc, #208]	; (8004334 <LogAnlysTask+0xec>)
	logAnlysMessageQueue = xQueueCreate(5, sizeof(message/sizeof(uint8_t)));
 8004264:	6038      	str	r0, [r7, #0]
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8004266:	2004      	movs	r0, #4
 8004268:	f008 fa1a 	bl	800c6a0 <xQueueCreateMutex>
 800426c:	4c32      	ldr	r4, [pc, #200]	; (8004338 <LogAnlysTask+0xf0>)
	logAnlys.samplesNumber = 1000;
	logAnlys.trigConfig = TRIG_CHAN1;
	logAnlys.trigEdge = TRIG_EDGE_RISING;
	logAnlys.triggerMode = LOGA_MODE_AUTO;
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 800426e:	4b33      	ldr	r3, [pc, #204]	; (800433c <LogAnlysTask+0xf4>)
 8004270:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8004340 <LogAnlysTask+0xf8>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 8004274:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004344 <LogAnlysTask+0xfc>
	logAnlysMutex = xSemaphoreCreateRecursiveMutex();	
 8004278:	6020      	str	r0, [r4, #0]
	logAnlys.samplesNumber = 1000;
 800427a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	logAnlys.preTriggerTime = 50;
 800427e:	2132      	movs	r1, #50	; 0x32
 8004280:	8129      	strh	r1, [r5, #8]
	logAnlys.trigConfig = TRIG_CHAN1;
 8004282:	f04f 0800 	mov.w	r8, #0
	logAnlys.samplesNumber = 1000;
 8004286:	822a      	strh	r2, [r5, #16]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8004288:	2201      	movs	r2, #1
	logAnlys.trigConfig = TRIG_CHAN1;
 800428a:	f885 8015 	strb.w	r8, [r5, #21]
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 800428e:	f885 8016 	strb.w	r8, [r5, #22]
	logAnlys.triggerMode = LOGA_MODE_AUTO;
 8004292:	f885 8014 	strb.w	r8, [r5, #20]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 8004296:	75ea      	strb	r2, [r5, #23]
	logAnlys.bufferMemory = (uint16_t *)scopeBuffer;
 8004298:	60eb      	str	r3, [r5, #12]
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 800429a:	2300      	movs	r3, #0
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	4631      	mov	r1, r6
 80042a2:	6838      	ldr	r0, [r7, #0]
 80042a4:	f008 fae6 	bl	800c874 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 80042a8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	f008 fc69 	bl	800cb84 <xQueueTakeMutexRecursive>
		switch(message){
 80042b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80042b6:	3b19      	subs	r3, #25
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d811      	bhi.n	80042e0 <LogAnlysTask+0x98>
 80042bc:	e8df f003 	tbb	[pc, r3]
 80042c0:	1419322d 	.word	0x1419322d
 80042c4:	03          	.byte	0x03
 80042c5:	00          	.byte	0x00
			passMsg = MSG_LOGAN_SEND_DATA;
 80042c6:	f04f 0c1e 	mov.w	ip, #30
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80042ca:	2300      	movs	r3, #0
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	f10d 0106 	add.w	r1, sp, #6
 80042d4:	f8da 0000 	ldr.w	r0, [sl]
			passMsg = MSG_LOGAN_SEND_DATA;
 80042d8:	f8ad c006 	strh.w	ip, [sp, #6]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80042dc:	f008 f822 	bl	800c324 <xQueueGenericSend>
		xSemaphoreGiveRecursive(logAnlysMutex);
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	f008 fa11 	bl	800c708 <xQueueGiveMutexRecursive>
		xQueueReceive(logAnlysMessageQueue, &message, portMAX_DELAY);
 80042e6:	e7d8      	b.n	800429a <LogAnlysTask+0x52>
	TIM_LogAnlys_Stop();
 80042e8:	f00d f8d0 	bl	801148c <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 80042ec:	2304      	movs	r3, #4
 80042ee:	74ab      	strb	r3, [r5, #18]
 80042f0:	e7f6      	b.n	80042e0 <LogAnlysTask+0x98>
	TIM_LogAnlys_Start();		
 80042f2:	f00d f8b3 	bl	801145c <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 80042f6:	2301      	movs	r3, #1
 80042f8:	74ab      	strb	r3, [r5, #18]
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 80042fa:	8928      	ldrh	r0, [r5, #8]
 80042fc:	f009 f844 	bl	800d388 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 8004300:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8004304:	f8c9 3014 	str.w	r3, [r9, #20]
	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 8004308:	7d2b      	ldrb	r3, [r5, #20]
 800430a:	b91b      	cbnz	r3, 8004314 <LogAnlysTask+0xcc>
		LOG_ANLYS_TriggerEventOccured();		
 800430c:	f00d f808 	bl	8011320 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 8004310:	f00d f920 	bl	8011554 <TIM_PostTrigger_SoftwareStart>
	GPIO_EnableTrigger();	
 8004314:	f00d f92a 	bl	801156c <GPIO_EnableTrigger>
 8004318:	e7e2      	b.n	80042e0 <LogAnlysTask+0x98>
	logAnlys.enable = LOGA_ENABLED;
 800431a:	2301      	movs	r3, #1
 800431c:	74eb      	strb	r3, [r5, #19]
	TIM_LogAnlys_Init();
 800431e:	f00d f80b 	bl	8011338 <TIM_LogAnlys_Init>
 8004322:	e7dd      	b.n	80042e0 <LogAnlysTask+0x98>
	TIM_LogAnlys_Deinit();
 8004324:	f00d f874 	bl	8011410 <TIM_LogAnlys_Deinit>
	logAnlys.enable = LOGA_DISABLED;
 8004328:	f885 8013 	strb.w	r8, [r5, #19]
 800432c:	e7d8      	b.n	80042e0 <LogAnlysTask+0x98>
 800432e:	bf00      	nop
 8004330:	20007024 	.word	0x20007024
 8004334:	20007028 	.word	0x20007028
 8004338:	20007040 	.word	0x20007040
 800433c:	2000704c 	.word	0x2000704c
 8004340:	20004cb4 	.word	0x20004cb4
 8004344:	40010400 	.word	0x40010400

08004348 <logAnlysSendInit>:
void logAnlysSendInit(void){
 8004348:	b500      	push	{lr}
 800434a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_INIT;
 800434c:	a902      	add	r1, sp, #8
 800434e:	2319      	movs	r3, #25
 8004350:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg , portMAX_DELAY);
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <logAnlysSendInit+0x20>)
 8004356:	f04f 32ff 	mov.w	r2, #4294967295
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	2300      	movs	r3, #0
 800435e:	f007 ffe1 	bl	800c324 <xQueueGenericSend>
}
 8004362:	b003      	add	sp, #12
 8004364:	f85d fb04 	ldr.w	pc, [sp], #4
 8004368:	20007024 	.word	0x20007024

0800436c <logAnlysSendDeinit>:
void logAnlysSendDeinit(void){
 800436c:	b500      	push	{lr}
 800436e:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_DEINIT;
 8004370:	a902      	add	r1, sp, #8
 8004372:	231a      	movs	r3, #26
 8004374:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <logAnlysSendDeinit+0x20>)
 800437a:	f04f 32ff 	mov.w	r2, #4294967295
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	2300      	movs	r3, #0
 8004382:	f007 ffcf 	bl	800c324 <xQueueGenericSend>
}
 8004386:	b003      	add	sp, #12
 8004388:	f85d fb04 	ldr.w	pc, [sp], #4
 800438c:	20007024 	.word	0x20007024

08004390 <logAnlysSendStart>:
void logAnlysSendStart(void){
 8004390:	b500      	push	{lr}
 8004392:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_START;
 8004394:	a902      	add	r1, sp, #8
 8004396:	231b      	movs	r3, #27
 8004398:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <logAnlysSendStart+0x20>)
 800439e:	f04f 32ff 	mov.w	r2, #4294967295
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	f007 ffbd 	bl	800c324 <xQueueGenericSend>
}
 80043aa:	b003      	add	sp, #12
 80043ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80043b0:	20007024 	.word	0x20007024

080043b4 <logAnlysSendStop>:
void logAnlysSendStop(void){
 80043b4:	b500      	push	{lr}
 80043b6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_STOP;
 80043b8:	a902      	add	r1, sp, #8
 80043ba:	231c      	movs	r3, #28
 80043bc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(logAnlysMessageQueue, &passMsg, portMAX_DELAY);
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <logAnlysSendStop+0x20>)
 80043c2:	f04f 32ff 	mov.w	r2, #4294967295
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	f007 ffab 	bl	800c324 <xQueueGenericSend>
}
 80043ce:	b003      	add	sp, #12
 80043d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80043d4:	20007024 	.word	0x20007024

080043d8 <logAnlysPeriodElapsedCallback>:
void logAnlysPeriodElapsedCallback(void){
 80043d8:	b500      	push	{lr}
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80043da:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <logAnlysPeriodElapsedCallback+0x20>)
void logAnlysPeriodElapsedCallback(void){
 80043dc:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_LOGAN_SAMPLING_END;
 80043de:	231d      	movs	r3, #29
 80043e0:	f8ad 3002 	strh.w	r3, [sp, #2]
	xQueueSendToBackFromISR(logAnlysMessageQueue, &passMsg, &xHigherPriorityTaskWoken);
 80043e4:	6810      	ldr	r0, [r2, #0]
 80043e6:	2300      	movs	r3, #0
 80043e8:	aa01      	add	r2, sp, #4
 80043ea:	f10d 0102 	add.w	r1, sp, #2
 80043ee:	f008 f9ab 	bl	800c748 <xQueueGenericSendFromISR>
}
 80043f2:	b003      	add	sp, #12
 80043f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80043f8:	20007024 	.word	0x20007024

080043fc <logAnlysStart>:
void logAnlysStart(void){
 80043fc:	b510      	push	{r4, lr}
	logAnlys.state = LOGA_SAMPLING;			
 80043fe:	4c0b      	ldr	r4, [pc, #44]	; (800442c <logAnlysStart+0x30>)
	TIM_LogAnlys_Start();		
 8004400:	f00d f82c 	bl	801145c <TIM_LogAnlys_Start>
	logAnlys.state = LOGA_SAMPLING;			
 8004404:	2301      	movs	r3, #1
 8004406:	74a3      	strb	r3, [r4, #18]
	vTaskDelay(logAnlys.preTriggerTime/portTICK_RATE_MS);	
 8004408:	8920      	ldrh	r0, [r4, #8]
 800440a:	f008 ffbd 	bl	800d388 <vTaskDelay>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);  // mask for sampled loganlys PB pins
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <logAnlysStart+0x34>)
 8004410:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 8004414:	615a      	str	r2, [r3, #20]
	if(logAnlys.triggerMode == LOGA_MODE_AUTO){
 8004416:	7d23      	ldrb	r3, [r4, #20]
 8004418:	b91b      	cbnz	r3, 8004422 <logAnlysStart+0x26>
		LOG_ANLYS_TriggerEventOccured();		
 800441a:	f00c ff81 	bl	8011320 <LOG_ANLYS_TriggerEventOccured>
		TIM_PostTrigger_SoftwareStart();	
 800441e:	f00d f899 	bl	8011554 <TIM_PostTrigger_SoftwareStart>
}	
 8004422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_EnableTrigger();	
 8004426:	f00d b8a1 	b.w	801156c <GPIO_EnableTrigger>
 800442a:	bf00      	nop
 800442c:	20007028 	.word	0x20007028
 8004430:	40010400 	.word	0x40010400

08004434 <logAnlysStop>:
void logAnlysStop(void){
 8004434:	b508      	push	{r3, lr}
	TIM_LogAnlys_Stop();
 8004436:	f00d f829 	bl	801148c <TIM_LogAnlys_Stop>
	logAnlys.state = LOGA_WAIT_FOR_RESTART;
 800443a:	4b02      	ldr	r3, [pc, #8]	; (8004444 <logAnlysStop+0x10>)
 800443c:	2204      	movs	r2, #4
 800443e:	749a      	strb	r2, [r3, #18]
}
 8004440:	bd08      	pop	{r3, pc}
 8004442:	bf00      	nop
 8004444:	20007028 	.word	0x20007028

08004448 <logAnlysSetSamplingFreq>:
	TIM_LogAnlys_SamplingFreq_Reconfig(samplingFrequency);
 8004448:	f00d b868 	b.w	801151c <TIM_LogAnlys_SamplingFreq_Reconfig>

0800444c <logAnlysSetSamplesNum>:
void logAnlysSetSamplesNum(uint16_t samplesNum){
 800444c:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 800444e:	4c07      	ldr	r4, [pc, #28]	; (800446c <logAnlysSetSamplesNum+0x20>)
void logAnlysSetSamplesNum(uint16_t samplesNum){
 8004450:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8004452:	f04f 31ff 	mov.w	r1, #4294967295
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	f008 fb94 	bl	800cb84 <xQueueTakeMutexRecursive>
	logAnlys.samplesNumber = samplesNum;
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <logAnlysSetSamplesNum+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 800445e:	6820      	ldr	r0, [r4, #0]
	logAnlys.samplesNumber = samplesNum;
 8004460:	821d      	strh	r5, [r3, #16]
}
 8004462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 8004466:	f008 b94f 	b.w	800c708 <xQueueGiveMutexRecursive>
 800446a:	bf00      	nop
 800446c:	20007040 	.word	0x20007040
 8004470:	20007028 	.word	0x20007028

08004474 <logAnlysSetPretrigger>:
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 8004474:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 8004476:	4d07      	ldr	r5, [pc, #28]	; (8004494 <logAnlysSetPretrigger+0x20>)
void logAnlysSetPretrigger(uint32_t pretrigMillisec){
 8004478:	4604      	mov	r4, r0
	xSemaphoreTakeRecursive(logAnlysMutex, portMAX_DELAY);
 800447a:	f04f 31ff 	mov.w	r1, #4294967295
 800447e:	6828      	ldr	r0, [r5, #0]
 8004480:	f008 fb80 	bl	800cb84 <xQueueTakeMutexRecursive>
	logAnlys.preTriggerTime = pretrigMillisec;
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <logAnlysSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(logAnlysMutex);
 8004486:	6828      	ldr	r0, [r5, #0]
	logAnlys.preTriggerTime = pretrigMillisec;
 8004488:	b2a4      	uxth	r4, r4
 800448a:	811c      	strh	r4, [r3, #8]
}
 800448c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(logAnlysMutex);
 8004490:	f008 b93a 	b.w	800c708 <xQueueGiveMutexRecursive>
 8004494:	20007040 	.word	0x20007040
 8004498:	20007028 	.word	0x20007028

0800449c <logAnlysSetPosttrigger>:
	TIM_LogAnlys_PostTrigger_Reconfig(posttrigInSec);
 800449c:	f00d b81c 	b.w	80114d8 <TIM_LogAnlys_PostTrigger_Reconfig>

080044a0 <logAnlysSetTriggerRising>:
	logAnlys.trigEdge = TRIG_EDGE_RISING;
 80044a0:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <logAnlysSetTriggerRising+0x8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	759a      	strb	r2, [r3, #22]
}
 80044a6:	4770      	bx	lr
 80044a8:	20007028 	.word	0x20007028

080044ac <logAnlysSetTriggerFalling>:
	logAnlys.trigEdge = TRIG_EDGE_FALLING;
 80044ac:	4b01      	ldr	r3, [pc, #4]	; (80044b4 <logAnlysSetTriggerFalling+0x8>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	759a      	strb	r2, [r3, #22]
}
 80044b2:	4770      	bx	lr
 80044b4:	20007028 	.word	0x20007028

080044b8 <logAnlysSetTriggerChannel>:
	switch(chan){
 80044b8:	3801      	subs	r0, #1
 80044ba:	2807      	cmp	r0, #7
 80044bc:	d808      	bhi.n	80044d0 <logAnlysSetTriggerChannel+0x18>
 80044be:	e8df f000 	tbb	[pc, r0]
 80044c2:	0c08      	.short	0x0c08
 80044c4:	1c181410 	.word	0x1c181410
 80044c8:	0420      	.short	0x0420
		logAnlys.trigConfig = TRIG_CHAN8;
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <logAnlysSetTriggerChannel+0x54>)
 80044cc:	2207      	movs	r2, #7
 80044ce:	755a      	strb	r2, [r3, #21]
}
 80044d0:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN1;
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <logAnlysSetTriggerChannel+0x54>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	755a      	strb	r2, [r3, #21]
		break;
 80044d8:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN2;
 80044da:	4b0c      	ldr	r3, [pc, #48]	; (800450c <logAnlysSetTriggerChannel+0x54>)
 80044dc:	2201      	movs	r2, #1
 80044de:	755a      	strb	r2, [r3, #21]
		break;
 80044e0:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN3;
 80044e2:	4b0a      	ldr	r3, [pc, #40]	; (800450c <logAnlysSetTriggerChannel+0x54>)
 80044e4:	2202      	movs	r2, #2
 80044e6:	755a      	strb	r2, [r3, #21]
		break;
 80044e8:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN4;
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <logAnlysSetTriggerChannel+0x54>)
 80044ec:	2203      	movs	r2, #3
 80044ee:	755a      	strb	r2, [r3, #21]
		break;
 80044f0:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN5;
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <logAnlysSetTriggerChannel+0x54>)
 80044f4:	2204      	movs	r2, #4
 80044f6:	755a      	strb	r2, [r3, #21]
		break;
 80044f8:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN6;
 80044fa:	4b04      	ldr	r3, [pc, #16]	; (800450c <logAnlysSetTriggerChannel+0x54>)
 80044fc:	2205      	movs	r2, #5
 80044fe:	755a      	strb	r2, [r3, #21]
		break;
 8004500:	4770      	bx	lr
		logAnlys.trigConfig = TRIG_CHAN7;
 8004502:	4b02      	ldr	r3, [pc, #8]	; (800450c <logAnlysSetTriggerChannel+0x54>)
 8004504:	2206      	movs	r2, #6
 8004506:	755a      	strb	r2, [r3, #21]
		break;
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20007028 	.word	0x20007028

08004510 <ScopeTriggerTask>:
 * 				Task is finding trigger edge when oscilloscope is sampling.
 * @param  Task handler, parameters pointer
 * @retval None
 */
//portTASK_FUNCTION(vScopeTriggerTask, pvParameters) {
void ScopeTriggerTask(void const *argument) {
 8004510:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004514:	4cc2      	ldr	r4, [pc, #776]	; (8004820 <ScopeTriggerTask+0x310>)
 8004516:	4ec3      	ldr	r6, [pc, #780]	; (8004824 <ScopeTriggerTask+0x314>)
 8004518:	4dc3      	ldr	r5, [pc, #780]	; (8004828 <ScopeTriggerTask+0x318>)
 800451a:	f8df 9334 	ldr.w	r9, [pc, #820]	; 8004850 <ScopeTriggerTask+0x340>
 800451e:	f8df b334 	ldr.w	fp, [pc, #820]	; 8004854 <ScopeTriggerTask+0x344>
 8004522:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8004858 <ScopeTriggerTask+0x348>
 8004526:	b083      	sub	sp, #12

	while(1){
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8004528:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800452c:	2b01      	cmp	r3, #1
 800452e:	d013      	beq.n	8004558 <ScopeTriggerTask+0x48>
 8004530:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004534:	2b02      	cmp	r3, #2
 8004536:	d00f      	beq.n	8004558 <ScopeTriggerTask+0x48>
 8004538:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800453c:	2b03      	cmp	r3, #3
 800453e:	d00b      	beq.n	8004558 <ScopeTriggerTask+0x48>
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
				}
			}
			xSemaphoreGiveRecursive(scopeMutex);
		}else{
			taskYIELD();
 8004540:	4aba      	ldr	r2, [pc, #744]	; (800482c <ScopeTriggerTask+0x31c>)
 8004542:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 8004550:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004554:	2b01      	cmp	r3, #1
 8004556:	d1eb      	bne.n	8004530 <ScopeTriggerTask+0x20>
			xSemaphoreTakeRecursive ( scopeMutex , portMAX_DELAY );
 8004558:	f04f 31ff 	mov.w	r1, #4294967295
 800455c:	6830      	ldr	r0, [r6, #0]
 800455e:	f008 fb11 	bl	800cb84 <xQueueTakeMutexRecursive>
			lastWritingIndex = writingIndex;
 8004562:	4ab3      	ldr	r2, [pc, #716]	; (8004830 <ScopeTriggerTask+0x320>)
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8004564:	f8d4 a044 	ldr.w	sl, [r4, #68]	; 0x44
			lastWritingIndex = writingIndex;
 8004568:	682b      	ldr	r3, [r5, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 800456a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
			lastWritingIndex = writingIndex;
 800456e:	6013      	str	r3, [r2, #0]
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 8004570:	f00a f808 	bl	800e584 <DMA_GetCurrDataCounter>
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004574:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004576:	6c62      	ldr	r2, [r4, #68]	; 0x44
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8004578:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 800457c:	ebaa 0000 	sub.w	r0, sl, r0
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004580:	3b01      	subs	r3, #1
 8004582:	4403      	add	r3, r0
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8004584:	2901      	cmp	r1, #1
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004586:	fbb3 fcf2 	udiv	ip, r3, r2
 800458a:	fb02 321c 	mls	r2, r2, ip, r3
			writingIndex = scope.oneChanSamples - DMA_GetCurrDataCounter(scope.triggerChannel);
 800458e:	6028      	str	r0, [r5, #0]
			actualIndex = (scope.oneChanSamples + writingIndex - 1) % scope.oneChanSamples;
 8004590:	f8c9 2000 	str.w	r2, [r9]
			if(scope.state == SCOPE_SAMPLING_WAITING){ 
 8004594:	d00c      	beq.n	80045b0 <ScopeTriggerTask+0xa0>
			}else if(scope.state == SCOPE_SAMPLING_TRIGGER_WAIT){
 8004596:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800459a:	2b02      	cmp	r3, #2
 800459c:	d068      	beq.n	8004670 <ScopeTriggerTask+0x160>
			}else if(scope.state == SCOPE_SAMPLING){
 800459e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	f000 80e6 	beq.w	8004774 <ScopeTriggerTask+0x264>
			xSemaphoreGiveRecursive(scopeMutex);
 80045a8:	6830      	ldr	r0, [r6, #0]
 80045aa:	f008 f8ad 	bl	800c708 <xQueueGiveMutexRecursive>
		if(scope.state==SCOPE_SAMPLING_WAITING || scope.state==SCOPE_SAMPLING_TRIGGER_WAIT || scope.state==SCOPE_SAMPLING){
 80045ae:	e7bb      	b.n	8004528 <ScopeTriggerTask+0x18>
				if(scope.settings.adcRes<=8){
 80045b0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80045b2:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80045b4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80045b8:	f103 0309 	add.w	r3, r3, #9
 80045bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
				if(scope.settings.adcRes<=8){
 80045c0:	f200 80a8 	bhi.w	8004714 <ScopeTriggerTask+0x204>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	685b      	ldr	r3, [r3, #4]
					data = data & 0x00ff;
 80045ca:	f813 c002 	ldrb.w	ip, [r3, r2]
 *					Ccan be changed on the fly
 * @param  None
 * @retval None
 */
void updateTrigger(void){
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80045ce:	8b61      	ldrh	r1, [r4, #26]
 80045d0:	f8b4 a024 	ldrh.w	sl, [r4, #36]	; 0x24
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80045d4:	6962      	ldr	r2, [r4, #20]
 80045d6:	8ba3      	ldrh	r3, [r4, #28]
 80045d8:	4f96      	ldr	r7, [pc, #600]	; (8004834 <ScopeTriggerTask+0x324>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80045da:	f8d4 e014 	ldr.w	lr, [r4, #20]
 80045de:	f8a7 c000 	strh.w	ip, [r7]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80045e2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80045e6:	33ff      	adds	r3, #255	; 0xff
 80045e8:	fb02 f303 	mul.w	r3, r2, r3
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80045ec:	4f90      	ldr	r7, [pc, #576]	; (8004830 <ScopeTriggerTask+0x320>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80045ee:	8ba2      	ldrh	r2, [r4, #28]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80045f0:	fb0a f101 	mul.w	r1, sl, r1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80045f4:	fb0e f202 	mul.w	r2, lr, r2
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 80045f8:	f8b7 a000 	ldrh.w	sl, [r7]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80045fc:	4f8e      	ldr	r7, [pc, #568]	; (8004838 <ScopeTriggerTask+0x328>)
 80045fe:	0c12      	lsrs	r2, r2, #16
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004600:	0c1b      	lsrs	r3, r3, #16
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004602:	b280      	uxth	r0, r0
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 8004604:	3301      	adds	r3, #1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 8004606:	603a      	str	r2, [r7, #0]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004608:	4f8c      	ldr	r7, [pc, #560]	; (800483c <ScopeTriggerTask+0x32c>)
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 800460a:	f8cb 3000 	str.w	r3, [fp]
	if(index < lastIndex){
 800460e:	4550      	cmp	r0, sl
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 8004610:	ea4f 4321 	mov.w	r3, r1, asr #16
 8004614:	803b      	strh	r3, [r7, #0]
		result = index + scope.oneChanSamples - lastIndex;
 8004616:	bf3d      	ittte	cc
 8004618:	6c63      	ldrcc	r3, [r4, #68]	; 0x44
 800461a:	eba3 030a 	subcc.w	r3, r3, sl
 800461e:	18c0      	addcc	r0, r0, r3
		result = index - lastIndex;
 8004620:	eba0 000a 	subcs.w	r0, r0, sl
 8004624:	b283      	uxth	r3, r0
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004626:	f8d8 0000 	ldr.w	r0, [r8]
 800462a:	4403      	add	r3, r0
				if (samplesTaken > samplesToStart){
 800462c:	4293      	cmp	r3, r2
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 800462e:	f8c8 3000 	str.w	r3, [r8]
				if (samplesTaken > samplesToStart){
 8004632:	d9b9      	bls.n	80045a8 <ScopeTriggerTask+0x98>
					if((scope.settings.triggerEdge == EDGE_RISING && data + NOISE_REDUCTION < triggerLevel) 
 8004634:	7e22      	ldrb	r2, [r4, #24]
 8004636:	2a00      	cmp	r2, #0
 8004638:	f040 80d5 	bne.w	80047e6 <ScopeTriggerTask+0x2d6>
 800463c:	f10c 0210 	add.w	r2, ip, #16
 8004640:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 8004644:	f280 80cf 	bge.w	80047e6 <ScopeTriggerTask+0x2d6>
						autoTrigged=0;
 8004648:	4f7d      	ldr	r7, [pc, #500]	; (8004840 <ScopeTriggerTask+0x330>)
 800464a:	2100      	movs	r1, #0
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800464c:	460b      	mov	r3, r1
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 800464e:	2002      	movs	r0, #2
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8004650:	f04f 0c17 	mov.w	ip, #23
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
						autoTrigged=0;
 8004658:	7039      	strb	r1, [r7, #0]
					scope.state = SCOPE_SAMPLING;
 800465a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800465e:	4879      	ldr	r0, [pc, #484]	; (8004844 <ScopeTriggerTask+0x334>)
					passMsg = MSG_SCOPE_TRIGGER;
 8004660:	f8ad c006 	strh.w	ip, [sp, #6]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004664:	f10d 0106 	add.w	r1, sp, #6
 8004668:	6800      	ldr	r0, [r0, #0]
 800466a:	f007 fe5b 	bl	800c324 <xQueueGenericSend>
 800466e:	e79b      	b.n	80045a8 <ScopeTriggerTask+0x98>
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004670:	4b6f      	ldr	r3, [pc, #444]	; (8004830 <ScopeTriggerTask+0x320>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b280      	uxth	r0, r0
	if(index < lastIndex){
 8004676:	4298      	cmp	r0, r3
		result = index + scope.oneChanSamples - lastIndex;
 8004678:	bf3d      	ittte	cc
 800467a:	6c61      	ldrcc	r1, [r4, #68]	; 0x44
 800467c:	1acb      	subcc	r3, r1, r3
 800467e:	18c0      	addcc	r0, r0, r3
		result = index - lastIndex;
 8004680:	1ac0      	subcs	r0, r0, r3
				if(scope.settings.adcRes<=8){
 8004682:	8c63      	ldrh	r3, [r4, #34]	; 0x22
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004684:	f8d8 1000 	ldr.w	r1, [r8]
				if(scope.settings.adcRes<=8){
 8004688:	2b08      	cmp	r3, #8
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 800468a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
		result = index - lastIndex;
 800468e:	b280      	uxth	r0, r0
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004690:	eb00 0a01 	add.w	sl, r0, r1
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 8004694:	f103 0309 	add.w	r3, r3, #9
				samplesTaken += samplesPassed(writingIndex,lastWritingIndex);	
 8004698:	f8c8 a000 	str.w	sl, [r8]
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 800469c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
				if(scope.settings.adcRes<=8){
 80046a0:	f200 80b9 	bhi.w	8004816 <ScopeTriggerTask+0x306>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex/2);
 80046a4:	f022 0101 	bic.w	r1, r2, #1
 80046a8:	6858      	ldr	r0, [r3, #4]
					data = data & 0x00ff;
 80046aa:	f810 c001 	ldrb.w	ip, [r0, r1]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80046ae:	8b61      	ldrh	r1, [r4, #26]
 80046b0:	f8b4 e024 	ldrh.w	lr, [r4, #36]	; 0x24
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80046b4:	6960      	ldr	r0, [r4, #20]
 80046b6:	8ba3      	ldrh	r3, [r4, #28]
 80046b8:	4f5e      	ldr	r7, [pc, #376]	; (8004834 <ScopeTriggerTask+0x324>)
 80046ba:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80046be:	33ff      	adds	r3, #255	; 0xff
 80046c0:	fb00 f303 	mul.w	r3, r0, r3
 80046c4:	f8a7 c000 	strh.w	ip, [r7]
 80046c8:	0c1b      	lsrs	r3, r3, #16
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80046ca:	6967      	ldr	r7, [r4, #20]
 80046cc:	8ba0      	ldrh	r0, [r4, #28]
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80046ce:	3301      	adds	r3, #1
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80046d0:	fb0e f101 	mul.w	r1, lr, r1
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80046d4:	fb07 f000 	mul.w	r0, r7, r0
	samplesToStop = ((scope.settings.samplesToSend * (UINT16_MAX - scope.settings.pretrigger)) >> 16)+1;
 80046d8:	f8cb 3000 	str.w	r3, [fp]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80046dc:	4f57      	ldr	r7, [pc, #348]	; (800483c <ScopeTriggerTask+0x32c>)
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80046de:	4b56      	ldr	r3, [pc, #344]	; (8004838 <ScopeTriggerTask+0x328>)
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 80046e0:	f894 e018 	ldrb.w	lr, [r4, #24]
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80046e4:	0c09      	lsrs	r1, r1, #16
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80046e6:	0c00      	lsrs	r0, r0, #16
	triggerLevel = (scope.settings.triggerLevel * scope.settings.adcLevels) >> 16;
 80046e8:	8039      	strh	r1, [r7, #0]
	samplesToStart = (scope.settings.samplesToSend * (scope.settings.pretrigger)) >> 16;
 80046ea:	6018      	str	r0, [r3, #0]
				if((scope.settings.triggerEdge == EDGE_RISING && data > triggerLevel) 
 80046ec:	f1be 0f00 	cmp.w	lr, #0
 80046f0:	d114      	bne.n	800471c <ScopeTriggerTask+0x20c>
 80046f2:	4561      	cmp	r1, ip
 80046f4:	d212      	bcs.n	800471c <ScopeTriggerTask+0x20c>
					totalSmpTaken = samplesTaken;
 80046f6:	4f54      	ldr	r7, [pc, #336]	; (8004848 <ScopeTriggerTask+0x338>)
 80046f8:	f8c7 a000 	str.w	sl, [r7]
					triggerIndex = actualIndex;
 80046fc:	4f53      	ldr	r7, [pc, #332]	; (800484c <ScopeTriggerTask+0x33c>)
					samplesTaken = 0;
 80046fe:	2100      	movs	r1, #0
					triggerIndex = actualIndex;
 8004700:	603a      	str	r2, [r7, #0]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004702:	460b      	mov	r3, r1
					scope.state = SCOPE_SAMPLING;
 8004704:	2003      	movs	r0, #3
					passMsg = MSG_SCOPE_TRIGGER;
 8004706:	f04f 0c16 	mov.w	ip, #22
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
					samplesTaken = 0;
 800470e:	f8c8 1000 	str.w	r1, [r8]
 8004712:	e7a2      	b.n	800465a <ScopeTriggerTask+0x14a>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 800471a:	e758      	b.n	80045ce <ScopeTriggerTask+0xbe>
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 800471c:	7e23      	ldrb	r3, [r4, #24]
 800471e:	2b01      	cmp	r3, #1
 8004720:	f000 809c 	beq.w	800485c <ScopeTriggerTask+0x34c>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8004724:	7e63      	ldrb	r3, [r4, #25]
 8004726:	2b01      	cmp	r3, #1
 8004728:	f000 809f 	beq.w	800486a <ScopeTriggerTask+0x35a>
						|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST)) ){
 800472c:	7e63      	ldrb	r3, [r4, #25]
 800472e:	2b02      	cmp	r3, #2
 8004730:	f47f af3a 	bne.w	80045a8 <ScopeTriggerTask+0x98>
 8004734:	6963      	ldr	r3, [r4, #20]
 8004736:	459a      	cmp	sl, r3
 8004738:	f67f af36 	bls.w	80045a8 <ScopeTriggerTask+0x98>
					totalSmpTaken = samplesTaken;
 800473c:	4f42      	ldr	r7, [pc, #264]	; (8004848 <ScopeTriggerTask+0x338>)
					scope.state = SCOPE_SAMPLING;
 800473e:	2003      	movs	r0, #3
					totalSmpTaken = samplesTaken;
 8004740:	f8c7 a000 	str.w	sl, [r7]
					scope.state = SCOPE_SAMPLING;
 8004744:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
					triggerIndex = actualIndex;
 8004748:	4f40      	ldr	r7, [pc, #256]	; (800484c <ScopeTriggerTask+0x33c>)
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800474a:	483e      	ldr	r0, [pc, #248]	; (8004844 <ScopeTriggerTask+0x334>)
					triggerIndex = actualIndex;
 800474c:	603a      	str	r2, [r7, #0]
					samplesTaken = 0;
 800474e:	2100      	movs	r1, #0
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004750:	460b      	mov	r3, r1
					passMsg = MSG_SCOPE_TRIGGER;
 8004752:	f04f 0c16 	mov.w	ip, #22
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
					samplesTaken = 0;
 800475a:	f8c8 1000 	str.w	r1, [r8]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800475e:	6800      	ldr	r0, [r0, #0]
					passMsg = MSG_SCOPE_TRIGGER;
 8004760:	f8ad c006 	strh.w	ip, [sp, #6]
					xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004764:	f10d 0106 	add.w	r1, sp, #6
 8004768:	f007 fddc 	bl	800c324 <xQueueGenericSend>
					autoTrigged=1;
 800476c:	4a34      	ldr	r2, [pc, #208]	; (8004840 <ScopeTriggerTask+0x330>)
 800476e:	2301      	movs	r3, #1
 8004770:	7013      	strb	r3, [r2, #0]
 8004772:	e719      	b.n	80045a8 <ScopeTriggerTask+0x98>
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004774:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <ScopeTriggerTask+0x320>)
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b280      	uxth	r0, r0
	if(index < lastIndex){
 800477a:	4298      	cmp	r0, r3
		result = index + scope.oneChanSamples - lastIndex;
 800477c:	bf3d      	ittte	cc
 800477e:	6c62      	ldrcc	r2, [r4, #68]	; 0x44
 8004780:	1ad3      	subcc	r3, r2, r3
 8004782:	18c0      	addcc	r0, r0, r3
		result = index - lastIndex;
 8004784:	1ac0      	subcs	r0, r0, r3
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004786:	f8d8 2000 	ldr.w	r2, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 800478a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		result = index - lastIndex;
 800478e:	b280      	uxth	r0, r0
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004790:	4410      	add	r0, r2
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8004792:	2b03      	cmp	r3, #3
				samplesTaken += samplesPassed(writingIndex, lastWritingIndex);	
 8004794:	f8c8 0000 	str.w	r0, [r8]
				if(scope.state == SCOPE_SAMPLING && samplesTaken >= samplesToStop){
 8004798:	f47f af06 	bne.w	80045a8 <ScopeTriggerTask+0x98>
 800479c:	f8db 3000 	ldr.w	r3, [fp]
 80047a0:	4298      	cmp	r0, r3
 80047a2:	f4ff af01 	bcc.w	80045a8 <ScopeTriggerTask+0x98>
					samplingDisable();
 80047a6:	f009 ff73 	bl	800e690 <samplingDisable>
					if (autoTrigged==0){//scope.settings.triggerMode != TRIG_AUTO && scope.settings.triggerMode != TRIG_AUTO_FAST){
 80047aa:	4b25      	ldr	r3, [pc, #148]	; (8004840 <ScopeTriggerTask+0x330>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d06f      	beq.n	8004892 <ScopeTriggerTask+0x382>
 80047b2:	4b26      	ldr	r3, [pc, #152]	; (800484c <ScopeTriggerTask+0x33c>)
 80047b4:	6819      	ldr	r1, [r3, #0]
					scope.triggerIndex = triggerIndex;
 80047b6:	6061      	str	r1, [r4, #4]
					scope.state = SCOPE_DATA_SENDING;
 80047b8:	f04f 0704 	mov.w	r7, #4
 80047bc:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
					totalSmpTaken = 0;
 80047c0:	4f21      	ldr	r7, [pc, #132]	; (8004848 <ScopeTriggerTask+0x338>)
					samplesTaken = 0;
 80047c2:	2000      	movs	r0, #0
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 80047c4:	4603      	mov	r3, r0
					samplesTaken = 0;
 80047c6:	f8c8 0000 	str.w	r0, [r8]
					totalSmpTaken = 0;
 80047ca:	6038      	str	r0, [r7, #0]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 80047cc:	481d      	ldr	r0, [pc, #116]	; (8004844 <ScopeTriggerTask+0x334>)
					passMsg = MSG_SCOPE_DATA_READY;
 80047ce:	f04f 0c15 	mov.w	ip, #21
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 80047d2:	f04f 32ff 	mov.w	r2, #4294967295
 80047d6:	f10d 0106 	add.w	r1, sp, #6
 80047da:	6800      	ldr	r0, [r0, #0]
					passMsg = MSG_SCOPE_DATA_READY;
 80047dc:	f8ad c006 	strh.w	ip, [sp, #6]
					xQueueSendToBack (messageQueue, &passMsg, portMAX_DELAY);
 80047e0:	f007 fda0 	bl	800c324 <xQueueGenericSend>
 80047e4:	e6e0      	b.n	80045a8 <ScopeTriggerTask+0x98>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 80047e6:	7e22      	ldrb	r2, [r4, #24]
 80047e8:	2a01      	cmp	r2, #1
 80047ea:	d044      	beq.n	8004876 <ScopeTriggerTask+0x366>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 80047ec:	7e62      	ldrb	r2, [r4, #25]
 80047ee:	2a01      	cmp	r2, #1
 80047f0:	d04a      	beq.n	8004888 <ScopeTriggerTask+0x378>
							|| (scope.settings.triggerMode == TRIG_AUTO_FAST && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_FAST))  ){ //skip waiting for trigger in case of TRIG_AUTO
 80047f2:	7e62      	ldrb	r2, [r4, #25]
 80047f4:	2a02      	cmp	r2, #2
 80047f6:	f47f aed7 	bne.w	80045a8 <ScopeTriggerTask+0x98>
 80047fa:	6962      	ldr	r2, [r4, #20]
 80047fc:	4293      	cmp	r3, r2
 80047fe:	f67f aed3 	bls.w	80045a8 <ScopeTriggerTask+0x98>
						autoTrigged=1;
 8004802:	4f0f      	ldr	r7, [pc, #60]	; (8004840 <ScopeTriggerTask+0x330>)
 8004804:	2101      	movs	r1, #1
						scope.state = SCOPE_SAMPLING_TRIGGER_WAIT;
 8004806:	2002      	movs	r0, #2
						passMsg = MSG_SCOPE_SMPL_STARTED;
 8004808:	f04f 0c17 	mov.w	ip, #23
						xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 800480c:	2300      	movs	r3, #0
 800480e:	f04f 32ff 	mov.w	r2, #4294967295
						autoTrigged=1;
 8004812:	7039      	strb	r1, [r7, #0]
 8004814:	e721      	b.n	800465a <ScopeTriggerTask+0x14a>
					data=*(scope.pChanMem[scope.triggerChannel-1]+actualIndex);
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 800481c:	e747      	b.n	80046ae <ScopeTriggerTask+0x19e>
 800481e:	bf00      	nop
 8004820:	20000810 	.word	0x20000810
 8004824:	2000085c 	.word	0x2000085c
 8004828:	2000086c 	.word	0x2000086c
 800482c:	e000ed04 	.word	0xe000ed04
 8004830:	20000800 	.word	0x20000800
 8004834:	200007fe 	.word	0x200007fe
 8004838:	20000808 	.word	0x20000808
 800483c:	20000868 	.word	0x20000868
 8004840:	200007fc 	.word	0x200007fc
 8004844:	20004cb4 	.word	0x20004cb4
 8004848:	20000860 	.word	0x20000860
 800484c:	20000864 	.word	0x20000864
 8004850:	200007f8 	.word	0x200007f8
 8004854:	2000080c 	.word	0x2000080c
 8004858:	20000804 	.word	0x20000804
						|| (scope.settings.triggerEdge == EDGE_FALLING && data < triggerLevel) ){
 800485c:	4561      	cmp	r1, ip
 800485e:	f63f af4a 	bhi.w	80046f6 <ScopeTriggerTask+0x1e6>
				}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8004862:	7e63      	ldrb	r3, [r4, #25]
 8004864:	2b01      	cmp	r3, #1
 8004866:	f47f af61 	bne.w	800472c <ScopeTriggerTask+0x21c>
 800486a:	6963      	ldr	r3, [r4, #20]
 800486c:	ebba 0f83 	cmp.w	sl, r3, lsl #2
 8004870:	f63f af64 	bhi.w	800473c <ScopeTriggerTask+0x22c>
 8004874:	e75a      	b.n	800472c <ScopeTriggerTask+0x21c>
							|| (scope.settings.triggerEdge == EDGE_FALLING && data - NOISE_REDUCTION > triggerLevel) ){ //skip waiting for trigger in case of TRIG_AUTO
 8004876:	f1ac 0c10 	sub.w	ip, ip, #16
 800487a:	ebbc 4f11 	cmp.w	ip, r1, lsr #16
 800487e:	f73f aee3 	bgt.w	8004648 <ScopeTriggerTask+0x138>
					}else if((scope.settings.triggerMode == TRIG_AUTO && samplesTaken > (scope.settings.samplesToSend * AUTO_TRIG_WAIT_NORMAL))
 8004882:	7e62      	ldrb	r2, [r4, #25]
 8004884:	2a01      	cmp	r2, #1
 8004886:	d1b4      	bne.n	80047f2 <ScopeTriggerTask+0x2e2>
 8004888:	6962      	ldr	r2, [r4, #20]
 800488a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800488e:	d8b8      	bhi.n	8004802 <ScopeTriggerTask+0x2f2>
 8004890:	e7af      	b.n	80047f2 <ScopeTriggerTask+0x2e2>
						if(scope.settings.adcRes>8){
 8004892:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004894:	4b3d      	ldr	r3, [pc, #244]	; (800498c <ScopeTriggerTask+0x47c>)
 8004896:	493e      	ldr	r1, [pc, #248]	; (8004990 <ScopeTriggerTask+0x480>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	8809      	ldrh	r1, [r1, #0]
 800489c:	2a08      	cmp	r2, #8
 800489e:	d924      	bls.n	80048ea <ScopeTriggerTask+0x3da>
							if(scope.settings.triggerEdge == EDGE_RISING){
 80048a0:	7e20      	ldrb	r0, [r4, #24]
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 80048a2:	f894 c048 	ldrb.w	ip, [r4, #72]	; 0x48
 80048a6:	f10c 0c09 	add.w	ip, ip, #9
 80048aa:	005a      	lsls	r2, r3, #1
 80048ac:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
							if(scope.settings.triggerEdge == EDGE_RISING){
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d036      	beq.n	8004922 <ScopeTriggerTask+0x412>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 80048b4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80048b8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80048bc:	4288      	cmp	r0, r1
 80048be:	d210      	bcs.n	80048e2 <ScopeTriggerTask+0x3d2>
 80048c0:	3b01      	subs	r3, #1
 80048c2:	3a02      	subs	r2, #2
 80048c4:	e000      	b.n	80048c8 <ScopeTriggerTask+0x3b8>
 80048c6:	4663      	mov	r3, ip
 80048c8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80048cc:	3009      	adds	r0, #9
 80048ce:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80048d2:	f103 3cff 	add.w	ip, r3, #4294967295
 80048d6:	6840      	ldr	r0, [r0, #4]
 80048d8:	5a80      	ldrh	r0, [r0, r2]
 80048da:	4288      	cmp	r0, r1
 80048dc:	f1a2 0202 	sub.w	r2, r2, #2
 80048e0:	d3f1      	bcc.n	80048c6 <ScopeTriggerTask+0x3b6>
						triggerIndex++;
 80048e2:	1c59      	adds	r1, r3, #1
 80048e4:	4b29      	ldr	r3, [pc, #164]	; (800498c <ScopeTriggerTask+0x47c>)
 80048e6:	6019      	str	r1, [r3, #0]
 80048e8:	e765      	b.n	80047b6 <ScopeTriggerTask+0x2a6>
							if(scope.settings.triggerEdge == EDGE_RISING){
 80048ea:	7e22      	ldrb	r2, [r4, #24]
 80048ec:	b3a2      	cbz	r2, 8004958 <ScopeTriggerTask+0x448>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) < triggerLevel){
 80048ee:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80048f2:	3209      	adds	r2, #9
 80048f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80048f8:	6852      	ldr	r2, [r2, #4]
 80048fa:	5cd2      	ldrb	r2, [r2, r3]
 80048fc:	428a      	cmp	r2, r1
 80048fe:	d2f0      	bcs.n	80048e2 <ScopeTriggerTask+0x3d2>
 8004900:	3b01      	subs	r3, #1
 8004902:	e000      	b.n	8004906 <ScopeTriggerTask+0x3f6>
 8004904:	4603      	mov	r3, r0
 8004906:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800490a:	3209      	adds	r2, #9
 800490c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004910:	1e58      	subs	r0, r3, #1
 8004912:	6852      	ldr	r2, [r2, #4]
 8004914:	5cd2      	ldrb	r2, [r2, r3]
 8004916:	428a      	cmp	r2, r1
 8004918:	d3f4      	bcc.n	8004904 <ScopeTriggerTask+0x3f4>
						triggerIndex++;
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <ScopeTriggerTask+0x47c>)
 800491e:	6019      	str	r1, [r3, #0]
 8004920:	e749      	b.n	80047b6 <ScopeTriggerTask+0x2a6>
								while(*(scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8004922:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004926:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 800492a:	4288      	cmp	r0, r1
 800492c:	d9d9      	bls.n	80048e2 <ScopeTriggerTask+0x3d2>
 800492e:	3b01      	subs	r3, #1
 8004930:	1e90      	subs	r0, r2, #2
 8004932:	e000      	b.n	8004936 <ScopeTriggerTask+0x426>
 8004934:	4663      	mov	r3, ip
 8004936:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800493a:	3209      	adds	r2, #9
 800493c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004940:	f103 3cff 	add.w	ip, r3, #4294967295
 8004944:	6852      	ldr	r2, [r2, #4]
 8004946:	5a12      	ldrh	r2, [r2, r0]
 8004948:	428a      	cmp	r2, r1
 800494a:	f1a0 0002 	sub.w	r0, r0, #2
 800494e:	d8f1      	bhi.n	8004934 <ScopeTriggerTask+0x424>
						triggerIndex++;
 8004950:	1c59      	adds	r1, r3, #1
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <ScopeTriggerTask+0x47c>)
 8004954:	6019      	str	r1, [r3, #0]
 8004956:	e72e      	b.n	80047b6 <ScopeTriggerTask+0x2a6>
								while(*((uint8_t *)scope.pChanMem[scope.triggerChannel-1]+triggerIndex) > triggerLevel){
 8004958:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800495c:	3209      	adds	r2, #9
 800495e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004962:	6852      	ldr	r2, [r2, #4]
 8004964:	5cd2      	ldrb	r2, [r2, r3]
 8004966:	428a      	cmp	r2, r1
 8004968:	d9bb      	bls.n	80048e2 <ScopeTriggerTask+0x3d2>
 800496a:	3b01      	subs	r3, #1
 800496c:	e000      	b.n	8004970 <ScopeTriggerTask+0x460>
 800496e:	4603      	mov	r3, r0
 8004970:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8004974:	3209      	adds	r2, #9
 8004976:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	6852      	ldr	r2, [r2, #4]
 800497e:	5cd2      	ldrb	r2, [r2, r3]
 8004980:	428a      	cmp	r2, r1
 8004982:	d8f4      	bhi.n	800496e <ScopeTriggerTask+0x45e>
						triggerIndex++;
 8004984:	1c59      	adds	r1, r3, #1
 8004986:	4b01      	ldr	r3, [pc, #4]	; (800498c <ScopeTriggerTask+0x47c>)
 8004988:	6019      	str	r1, [r3, #0]
 800498a:	e714      	b.n	80047b6 <ScopeTriggerTask+0x2a6>
 800498c:	20000864 	.word	0x20000864
 8004990:	20000868 	.word	0x20000868

08004994 <scopeInit>:
void scopeInit(void){
 8004994:	b530      	push	{r4, r5, lr}
	writingIndex = 0;
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <scopeInit+0x130>)
	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 8004998:	4c4b      	ldr	r4, [pc, #300]	; (8004ac8 <scopeInit+0x134>)
void scopeInit(void){
 800499a:	b083      	sub	sp, #12
	writingIndex = 0;
 800499c:	2500      	movs	r5, #0
 800499e:	601d      	str	r5, [r3, #0]
	uint32_t realfreq=0;
 80049a0:	9501      	str	r5, [sp, #4]
	ADC_DMA_Stop();
 80049a2:	f009 fdd7 	bl	800e554 <ADC_DMA_Stop>
	if(scope.settings.AdvMode == SCOPE_INTERLEAVE_MODE){
 80049a6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d02c      	beq.n	8004a08 <scopeInit+0x74>
	}else if(scope.settings.AdvMode == SCOPE_MULTI_MODE){
 80049ae:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d024      	beq.n	8004a02 <scopeInit+0x6e>
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 80049b8:	f884 5020 	strb.w	r5, [r4, #32]
		TIM_Reconfig_scope(scope.settings.samplingFrequency,&realfreq);
 80049bc:	a901      	add	r1, sp, #4
 80049be:	68a0      	ldr	r0, [r4, #8]
 80049c0:	f00c fe7e 	bl	80116c0 <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 80049c4:	9801      	ldr	r0, [sp, #4]
 80049c6:	f009 fe13 	bl	800e5f0 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 80049ca:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049ce:	b2db      	uxtb	r3, r3
	return result;
}


uint8_t scopeInitADCMode(scopeMode mode){
	switch (mode){
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d069      	beq.n	8004aa8 <scopeInit+0x114>
 80049d4:	d365      	bcc.n	8004aa2 <scopeInit+0x10e>
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d039      	beq.n	8004a4e <scopeInit+0xba>
			if(scope.numOfChannles>i){
 80049da:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d13b      	bne.n	8004a5a <scopeInit+0xc6>
 80049e2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d840      	bhi.n	8004a6c <scopeInit+0xd8>
 80049ea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d845      	bhi.n	8004a7e <scopeInit+0xea>
 80049f2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d84a      	bhi.n	8004a90 <scopeInit+0xfc>
		scope.settings.ADCSamplingFreq=realfreq;
 80049fa:	9b01      	ldr	r3, [sp, #4]
 80049fc:	60e3      	str	r3, [r4, #12]
}
 80049fe:	b003      	add	sp, #12
 8004a00:	bd30      	pop	{r4, r5, pc}
		scope.settings.ADCmux=2;
 8004a02:	77e3      	strb	r3, [r4, #31]
}
 8004a04:	b003      	add	sp, #12
 8004a06:	bd30      	pop	{r4, r5, pc}
		scope.settings.interleaved=2;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	77a3      	strb	r3, [r4, #30]
		TIM_Reconfig_scope(scope.settings.samplingFrequency/2,&realfreq);
 8004a0c:	68a0      	ldr	r0, [r4, #8]
 8004a0e:	a901      	add	r1, sp, #4
 8004a10:	0840      	lsrs	r0, r0, #1
 8004a12:	f00c fe55 	bl	80116c0 <TIM_Reconfig_scope>
		ADC_set_sampling_time(realfreq);
 8004a16:	9801      	ldr	r0, [sp, #4]
 8004a18:	f009 fdea 	bl	800e5f0 <ADC_set_sampling_time>
		scopeInitADCMode(scope.settings.AdvMode);
 8004a1c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004a20:	b2db      	uxtb	r3, r3
	switch (mode){
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d03a      	beq.n	8004a9c <scopeInit+0x108>
 8004a26:	d349      	bcc.n	8004abc <scopeInit+0x128>
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d101      	bne.n	8004a30 <scopeInit+0x9c>
		break;
	case SCOPE_INTERLEAVE_MODE:
		ADCInitInterleavedMode();
		break;
	case SCOPE_MULTI_MODE:
		ADCInitMultiMode();
 8004a2c:	f00a f822 	bl	800ea74 <ADCInitMultiMode>
			if(scope.numOfChannles>i){
 8004a30:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d13a      	bne.n	8004aae <scopeInit+0x11a>
 8004a38:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d9dc      	bls.n	80049fa <scopeInit+0x66>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 8004a40:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a44:	2001      	movs	r0, #1
 8004a46:	0852      	lsrs	r2, r2, #1
 8004a48:	f009 fd4e 	bl	800e4e8 <ADC_DMA_Reconfig_Interleave>
 8004a4c:	e7d5      	b.n	80049fa <scopeInit+0x66>
		ADCInitMultiMode();
 8004a4e:	f00a f811 	bl	800ea74 <ADCInitMultiMode>
			if(scope.numOfChannles>i){
 8004a52:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0c3      	beq.n	80049e2 <scopeInit+0x4e>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004a5a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f009 fd0e 	bl	800e480 <ADC_DMA_Reconfig>
			if(scope.numOfChannles>i){
 8004a64:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d9be      	bls.n	80049ea <scopeInit+0x56>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004a6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004a6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a70:	2001      	movs	r0, #1
 8004a72:	f009 fd05 	bl	800e480 <ADC_DMA_Reconfig>
			if(scope.numOfChannles>i){
 8004a76:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d9b9      	bls.n	80049f2 <scopeInit+0x5e>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a80:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a82:	2002      	movs	r0, #2
 8004a84:	f009 fcfc 	bl	800e480 <ADC_DMA_Reconfig>
			if(scope.numOfChannles>i){
 8004a88:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d9b4      	bls.n	80049fa <scopeInit+0x66>
				ADC_DMA_Reconfig(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples);
 8004a90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a92:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a94:	2003      	movs	r0, #3
 8004a96:	f009 fcf3 	bl	800e480 <ADC_DMA_Reconfig>
 8004a9a:	e7ae      	b.n	80049fa <scopeInit+0x66>
		ADCInitInterleavedMode();
 8004a9c:	f009 ffca 	bl	800ea34 <ADCInitInterleavedMode>
 8004aa0:	e7c6      	b.n	8004a30 <scopeInit+0x9c>
		ADCInitNormalMode();
 8004aa2:	f009 feb3 	bl	800e80c <ADCInitNormalMode>
 8004aa6:	e798      	b.n	80049da <scopeInit+0x46>
		ADCInitInterleavedMode();
 8004aa8:	f009 ffc4 	bl	800ea34 <ADCInitInterleavedMode>
 8004aac:	e795      	b.n	80049da <scopeInit+0x46>
				ADC_DMA_Reconfig_Interleave(i,(uint32_t *)scope.pChanMem[i], scope.oneChanSamples/2);
 8004aae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ab0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	0852      	lsrs	r2, r2, #1
 8004ab6:	f009 fd17 	bl	800e4e8 <ADC_DMA_Reconfig_Interleave>
 8004aba:	e7bd      	b.n	8004a38 <scopeInit+0xa4>
		ADCInitNormalMode();
 8004abc:	f009 fea6 	bl	800e80c <ADCInitNormalMode>
 8004ac0:	e7b6      	b.n	8004a30 <scopeInit+0x9c>
 8004ac2:	bf00      	nop
 8004ac4:	2000086c 	.word	0x2000086c
 8004ac8:	20000810 	.word	0x20000810

08004acc <scopeSetDefault>:
void scopeSetDefault(void){
 8004acc:	b5f0      	push	{r4, r5, r6, r7, lr}
	scope.bufferMemory = scopeBuffer;
 8004ace:	4c2c      	ldr	r4, [pc, #176]	; (8004b80 <scopeSetDefault+0xb4>)
 8004ad0:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <scopeSetDefault+0xb8>)
 8004ad2:	6023      	str	r3, [r4, #0]
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8004ad4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8004ad8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8004adc:	2000      	movs	r0, #0
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8004ade:	2101      	movs	r1, #1
	scope.settings.samplingFrequency = SCOPE_DEFAULT_SAMPLING_FREQ;
 8004ae0:	60a5      	str	r5, [r4, #8]
	scope.settings.triggerEdge = SCOPE_DEFAULT_TRIG_EDGE;
 8004ae2:	7620      	strb	r0, [r4, #24]
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8004ae4:	250c      	movs	r5, #12
	scope.settings.triggerMode = SCOPE_DEFAULT_TRIGGER;
 8004ae6:	7661      	strb	r1, [r4, #25]
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8004ae8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	scope.settings.triggerLevel = SCOPE_DEFAULT_TRIGGER_LEVEL;
 8004aec:	8362      	strh	r2, [r4, #26]
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 8004aee:	2164      	movs	r1, #100	; 0x64
	scope.settings.pretrigger = SCOPE_DEFAULT_PRETRIGGER;
 8004af0:	83a2      	strh	r2, [r4, #28]
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8004af2:	f247 5294 	movw	r2, #30100	; 0x7594
	scope.settings.adcRes = SCOPE_DEFAULT_ADC_RES;
 8004af6:	8465      	strh	r5, [r4, #34]	; 0x22
	scope.settings.adcLevels=pow(2,SCOPE_DEFAULT_ADC_RES);
 8004af8:	84a0      	strh	r0, [r4, #36]	; 0x24
	scope.settings.samplesToSend = SCOPE_DEFAULT_DATA_LEN;
 8004afa:	6161      	str	r1, [r4, #20]
	scope.pChanMem[0] = (uint16_t*)scopeBuffer;
 8004afc:	62e3      	str	r3, [r4, #44]	; 0x2c
	scope.oneChanMemSize = MAX_SCOPE_BUFF_SIZE+SCOPE_BUFFER_MARGIN;
 8004afe:	6422      	str	r2, [r4, #64]	; 0x40
	if(scope.settings.adcRes>8){
 8004b00:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004b02:	4f21      	ldr	r7, [pc, #132]	; (8004b88 <scopeSetDefault+0xbc>)
 8004b04:	4e21      	ldr	r6, [pc, #132]	; (8004b8c <scopeSetDefault+0xc0>)
 8004b06:	6838      	ldr	r0, [r7, #0]
	if(scope.settings.adcRes>8){
 8004b08:	2b08      	cmp	r3, #8
		scope.oneChanSamples = scope.oneChanMemSize/2;
 8004b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b0c:	bf88      	it	hi
 8004b0e:	085b      	lsrhi	r3, r3, #1
		scope.oneChanSamples = scope.oneChanMemSize;
 8004b10:	6463      	str	r3, [r4, #68]	; 0x44
void scopeSetDefault(void){
 8004b12:	b083      	sub	sp, #12
	scope.numOfChannles = 1;
 8004b14:	2301      	movs	r3, #1
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004b16:	f04f 31ff 	mov.w	r1, #4294967295
	scope.numOfChannles = 1;
 8004b1a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	scope.triggerChannel = 1;
 8004b1e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004b22:	f008 f82f 	bl	800cb84 <xQueueTakeMutexRecursive>
 8004b26:	2500      	movs	r5, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004b28:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004b2c:	1963      	adds	r3, r4, r5
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004b2e:	4611      	mov	r1, r2
 8004b30:	b2e8      	uxtb	r0, r5
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 8004b36:	f009 fdad 	bl	800e694 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8004b3a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004b3e:	b2db      	uxtb	r3, r3
	switch (mode){
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d01a      	beq.n	8004b7a <scopeSetDefault+0xae>
 8004b44:	d316      	bcc.n	8004b74 <scopeSetDefault+0xa8>
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d101      	bne.n	8004b4e <scopeSetDefault+0x82>
		ADCInitMultiMode();
 8004b4a:	f009 ff93 	bl	800ea74 <ADCInitMultiMode>
 8004b4e:	3501      	adds	r5, #1
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8004b50:	2d04      	cmp	r5, #4
 8004b52:	d1e9      	bne.n	8004b28 <scopeSetDefault+0x5c>
	xSemaphoreGiveRecursive(scopeMutex);
 8004b54:	6838      	ldr	r0, [r7, #0]
 8004b56:	f007 fdd7 	bl	800c708 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004b5a:	a902      	add	r1, sp, #8
 8004b5c:	2334      	movs	r3, #52	; 0x34
 8004b5e:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <scopeSetDefault+0xc4>)
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f007 fbda 	bl	800c324 <xQueueGenericSend>
}
 8004b70:	b003      	add	sp, #12
 8004b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCInitNormalMode();
 8004b74:	f009 fe4a 	bl	800e80c <ADCInitNormalMode>
 8004b78:	e7e9      	b.n	8004b4e <scopeSetDefault+0x82>
		ADCInitInterleavedMode();
 8004b7a:	f009 ff5b 	bl	800ea34 <ADCInitInterleavedMode>
 8004b7e:	e7e6      	b.n	8004b4e <scopeSetDefault+0x82>
 8004b80:	20000810 	.word	0x20000810
 8004b84:	2000704c 	.word	0x2000704c
 8004b88:	2000085c 	.word	0x2000085c
 8004b8c:	08014f14 	.word	0x08014f14
 8004b90:	20007048 	.word	0x20007048

08004b94 <ScopeTask>:
void ScopeTask(void const *argument){
 8004b94:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004b98:	b083      	sub	sp, #12
	uint16_t message = 0xFFFF;
 8004b9a:	ae02      	add	r6, sp, #8
 8004b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	201e      	movs	r0, #30
	uint16_t message = 0xFFFF;
 8004ba6:	f826 3d04 	strh.w	r3, [r6, #-4]!
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004baa:	f007 fb77 	bl	800c29c <xQueueGenericCreate>
 8004bae:	4f41      	ldr	r7, [pc, #260]	; (8004cb4 <ScopeTask+0x120>)
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8004bb0:	4c41      	ldr	r4, [pc, #260]	; (8004cb8 <ScopeTask+0x124>)
	scopeMessageQueue = xQueueCreate(30, sizeof(message)/sizeof(uint8_t));
 8004bb2:	6038      	str	r0, [r7, #0]
	scopeMutex = xSemaphoreCreateRecursiveMutex();
 8004bb4:	2004      	movs	r0, #4
 8004bb6:	f007 fd73 	bl	800c6a0 <xQueueCreateMutex>
 8004bba:	4d40      	ldr	r5, [pc, #256]	; (8004cbc <ScopeTask+0x128>)
 8004bbc:	6020      	str	r0, [r4, #0]
 8004bbe:	f8df b100 	ldr.w	fp, [pc, #256]	; 8004cc0 <ScopeTask+0x12c>
 8004bc2:	f8df a100 	ldr.w	sl, [pc, #256]	; 8004cc4 <ScopeTask+0x130>
	scopeSetDefault();
 8004bc6:	f7ff ff81 	bl	8004acc <scopeSetDefault>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004bca:	f04f 0800 	mov.w	r8, #0
			scope.state=SCOPE_SAMPLING_WAITING;
 8004bce:	f04f 0901 	mov.w	r9, #1
 8004bd2:	e029      	b.n	8004c28 <ScopeTask+0x94>
		}else if(message == MSG_INVALIDATE){  //Settings has been changed
 8004bd4:	2b34      	cmp	r3, #52	; 0x34
 8004bd6:	d03f      	beq.n	8004c58 <ScopeTask+0xc4>
		}else if (message == MSG_SCOPE_START && scope.state != SCOPE_SAMPLING_WAITING && scope.state != SCOPE_SAMPLING_TRIGGER_WAIT && scope.state != SCOPE_SAMPLING && scope.state != SCOPE_DATA_SENDING){ //Enable sampling
 8004bd8:	2b12      	cmp	r3, #18
 8004bda:	d158      	bne.n	8004c8e <ScopeTask+0xfa>
 8004bdc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d01e      	beq.n	8004c22 <ScopeTask+0x8e>
 8004be4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d01a      	beq.n	8004c22 <ScopeTask+0x8e>
 8004bec:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d016      	beq.n	8004c22 <ScopeTask+0x8e>
 8004bf4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d012      	beq.n	8004c22 <ScopeTask+0x8e>
			scopeInit();
 8004bfc:	f7ff feca 	bl	8004994 <scopeInit>
			scope.state=SCOPE_SAMPLING_WAITING;
 8004c00:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
			samplingEnable();
 8004c04:	f009 fd42 	bl	800e68c <samplingEnable>
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8004c08:	f04f 0c17 	mov.w	ip, #23
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c12:	f10d 0106 	add.w	r1, sp, #6
 8004c16:	f8da 0000 	ldr.w	r0, [sl]
			uint16_t passMsg = MSG_SCOPE_SMPL_STARTED;
 8004c1a:	f8ad c006 	strh.w	ip, [sp, #6]
			xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8004c1e:	f007 fb81 	bl	800c324 <xQueueGenericSend>
		xSemaphoreGiveRecursive(scopeMutex);
 8004c22:	6820      	ldr	r0, [r4, #0]
 8004c24:	f007 fd70 	bl	800c708 <xQueueGiveMutexRecursive>
		xQueueReceive(scopeMessageQueue, &message, portMAX_DELAY);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2e:	4631      	mov	r1, r6
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f007 fe1f 	bl	800c874 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004c36:	f04f 31ff 	mov.w	r1, #4294967295
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	f007 ffa2 	bl	800cb84 <xQueueTakeMutexRecursive>
		if(message == MSG_SCOPE_DATA_SENT && scope.state != SCOPE_IDLE){ //Data was sent. Actualisation of scope sxtate and/or rerun
 8004c40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c44:	2b14      	cmp	r3, #20
 8004c46:	d1c5      	bne.n	8004bd4 <ScopeTask+0x40>
 8004c48:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0e8      	beq.n	8004c22 <ScopeTask+0x8e>
			scope.state = SCOPE_WAIT_FOR_RESTART;
 8004c50:	2306      	movs	r3, #6
 8004c52:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8004c56:	e7e4      	b.n	8004c22 <ScopeTask+0x8e>
			if(scope.state == SCOPE_DONE || scope.state == SCOPE_IDLE){
 8004c58:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d0e0      	beq.n	8004c22 <ScopeTask+0x8e>
 8004c60:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0dc      	beq.n	8004c22 <ScopeTask+0x8e>
				samplingDisable();
 8004c68:	f009 fd12 	bl	800e690 <samplingDisable>
				scopeInit();
 8004c6c:	f7ff fe92 	bl	8004994 <scopeInit>
				if(scope.state!=SCOPE_WAIT_FOR_RESTART && scope.state!=SCOPE_DATA_SENDING){
 8004c70:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d0d4      	beq.n	8004c22 <ScopeTask+0x8e>
 8004c78:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d0d0      	beq.n	8004c22 <ScopeTask+0x8e>
					scope.state=SCOPE_SAMPLING_WAITING;
 8004c80:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
					samplesTaken=0;
 8004c84:	f8cb 8000 	str.w	r8, [fp]
					samplingEnable();
 8004c88:	f009 fd00 	bl	800e68c <samplingEnable>
 8004c8c:	e7c9      	b.n	8004c22 <ScopeTask+0x8e>
		}else if (message == MSG_SCOPE_STOP){//Disable sampling
 8004c8e:	2b13      	cmp	r3, #19
 8004c90:	d104      	bne.n	8004c9c <ScopeTask+0x108>
			samplingDisable();
 8004c92:	f009 fcfd 	bl	800e690 <samplingDisable>
			scope.state = SCOPE_IDLE;
 8004c96:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
 8004c9a:	e7c2      	b.n	8004c22 <ScopeTask+0x8e>
		}else if (message == MSG_SCOPE_RESTART && scope.state==SCOPE_WAIT_FOR_RESTART ){ //Rerun sampling
 8004c9c:	2b11      	cmp	r3, #17
 8004c9e:	d1c0      	bne.n	8004c22 <ScopeTask+0x8e>
 8004ca0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d1bc      	bne.n	8004c22 <ScopeTask+0x8e>
			samplingEnable();
 8004ca8:	f009 fcf0 	bl	800e68c <samplingEnable>
			scope.state=SCOPE_SAMPLING_WAITING;
 8004cac:	f885 9028 	strb.w	r9, [r5, #40]	; 0x28
 8004cb0:	e7b7      	b.n	8004c22 <ScopeTask+0x8e>
 8004cb2:	bf00      	nop
 8004cb4:	20007048 	.word	0x20007048
 8004cb8:	2000085c 	.word	0x2000085c
 8004cbc:	20000810 	.word	0x20000810
 8004cc0:	20000804 	.word	0x20000804
 8004cc4:	20004cb4 	.word	0x20004cb4

08004cc8 <GetNumOfChannels>:
	return scope.numOfChannles;
 8004cc8:	4b01      	ldr	r3, [pc, #4]	; (8004cd0 <GetNumOfChannels+0x8>)
 8004cca:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
}
 8004cce:	4770      	bx	lr
 8004cd0:	20000810 	.word	0x20000810

08004cd4 <getDataPointer>:
	return scope.pChanMem[chan];
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <getDataPointer+0xc>)
 8004cd6:	300a      	adds	r0, #10
 8004cd8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004cdc:	6858      	ldr	r0, [r3, #4]
}
 8004cde:	4770      	bx	lr
 8004ce0:	20000810 	.word	0x20000810

08004ce4 <getOneChanMemSize>:
	return scope.oneChanMemSize;
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <getOneChanMemSize+0x8>)
 8004ce6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000810 	.word	0x20000810

08004cf0 <getTriggerIndex>:
	return triggerIndex;
 8004cf0:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <getTriggerIndex+0x8>)
}
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000864 	.word	0x20000864

08004cfc <getSamples>:
	return scope.settings.samplesToSend;
 8004cfc:	4b01      	ldr	r3, [pc, #4]	; (8004d04 <getSamples+0x8>)
 8004cfe:	6958      	ldr	r0, [r3, #20]
}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000810 	.word	0x20000810

08004d08 <getADCRes>:
	return scope.settings.adcRes;
 8004d08:	4b01      	ldr	r3, [pc, #4]	; (8004d10 <getADCRes+0x8>)
 8004d0a:	8c58      	ldrh	r0, [r3, #34]	; 0x22
}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000810 	.word	0x20000810

08004d14 <getPretrigger>:
	return scope.settings.pretrigger;
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <getPretrigger+0x8>)
 8004d16:	8b98      	ldrh	r0, [r3, #28]
}
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000810 	.word	0x20000810

08004d20 <getScopeState>:
	return scope.state;
 8004d20:	4b01      	ldr	r3, [pc, #4]	; (8004d28 <getScopeState+0x8>)
 8004d22:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
 8004d26:	4770      	bx	lr
 8004d28:	20000810 	.word	0x20000810

08004d2c <scopeSetTriggerMode>:
void scopeSetTriggerMode(scopeTriggerMode mode){
 8004d2c:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d2e:	4c07      	ldr	r4, [pc, #28]	; (8004d4c <scopeSetTriggerMode+0x20>)
void scopeSetTriggerMode(scopeTriggerMode mode){
 8004d30:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d32:	f04f 31ff 	mov.w	r1, #4294967295
 8004d36:	6820      	ldr	r0, [r4, #0]
 8004d38:	f007 ff24 	bl	800cb84 <xQueueTakeMutexRecursive>
	scope.settings.triggerMode = mode;
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <scopeSetTriggerMode+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004d3e:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerMode = mode;
 8004d40:	765d      	strb	r5, [r3, #25]
}
 8004d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004d46:	f007 bcdf 	b.w	800c708 <xQueueGiveMutexRecursive>
 8004d4a:	bf00      	nop
 8004d4c:	2000085c 	.word	0x2000085c
 8004d50:	20000810 	.word	0x20000810

08004d54 <scopeSetTriggerEdge>:
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8004d54:	b530      	push	{r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d56:	4c0d      	ldr	r4, [pc, #52]	; (8004d8c <scopeSetTriggerEdge+0x38>)
void scopeSetTriggerEdge(scopeTriggerEdge edge){
 8004d58:	b083      	sub	sp, #12
 8004d5a:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	f007 ff0f 	bl	800cb84 <xQueueTakeMutexRecursive>
	scope.settings.triggerEdge = edge;
 8004d66:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <scopeSetTriggerEdge+0x3c>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004d68:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerEdge = edge;
 8004d6a:	761d      	strb	r5, [r3, #24]
	xSemaphoreGiveRecursive(scopeMutex);
 8004d6c:	f007 fccc 	bl	800c708 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004d70:	a902      	add	r1, sp, #8
 8004d72:	2334      	movs	r3, #52	; 0x34
 8004d74:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY); //cannot change this property on the on the fly (scope must re-init)
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <scopeSetTriggerEdge+0x40>)
 8004d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	2300      	movs	r3, #0
 8004d82:	f007 facf 	bl	800c324 <xQueueGenericSend>
}
 8004d86:	b003      	add	sp, #12
 8004d88:	bd30      	pop	{r4, r5, pc}
 8004d8a:	bf00      	nop
 8004d8c:	2000085c 	.word	0x2000085c
 8004d90:	20000810 	.word	0x20000810
 8004d94:	20007048 	.word	0x20007048

08004d98 <scopeSetDataDepth>:
uint8_t scopeSetDataDepth(uint16_t res){
 8004d98:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004d9a:	4e2f      	ldr	r6, [pc, #188]	; (8004e58 <scopeSetDataDepth+0xc0>)
	scope.settings.adcRes = res;
 8004d9c:	4c2f      	ldr	r4, [pc, #188]	; (8004e5c <scopeSetDataDepth+0xc4>)
uint8_t scopeSetDataDepth(uint16_t res){
 8004d9e:	4605      	mov	r5, r0
 8004da0:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004da2:	f04f 31ff 	mov.w	r1, #4294967295
 8004da6:	6830      	ldr	r0, [r6, #0]
 8004da8:	f007 feec 	bl	800cb84 <xQueueTakeMutexRecursive>
	scope.settings.adcRes = res;
 8004dac:	8465      	strh	r5, [r4, #34]	; 0x22
	uint32_t data_len=scope.settings.samplesToSend;
 8004dae:	6963      	ldr	r3, [r4, #20]
	if(scope.settings.adcRes>8){
 8004db0:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004db2:	2a08      	cmp	r2, #8
	data_len=data_len*scope.numOfChannles;
 8004db4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		data_len=data_len*2;
 8004db8:	bf88      	it	hi
 8004dba:	005b      	lslhi	r3, r3, #1
	data_len=data_len*scope.numOfChannles;
 8004dbc:	fb03 f302 	mul.w	r3, r3, r2
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8004dc0:	f247 5230 	movw	r2, #30000	; 0x7530
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d823      	bhi.n	8004e10 <scopeSetDataDepth+0x78>
		scope.settings.adcLevels=pow(2,scope.settings.adcRes);
 8004dc8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8004dca:	f7fb fb53 	bl	8000474 <__aeabi_ui2d>
 8004dce:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8004e50 <scopeSetDataDepth+0xb8>
 8004dd2:	ec41 0b11 	vmov	d1, r0, r1
 8004dd6:	f00e fe2f 	bl	8013a38 <pow>
 8004dda:	ec51 0b10 	vmov	r0, r1, d0
 8004dde:	f7fb fe9b 	bl	8000b18 <__aeabi_d2uiz>
 8004de2:	b280      	uxth	r0, r0
 8004de4:	84a0      	strh	r0, [r4, #36]	; 0x24
		if(scope.settings.adcRes>8){
 8004de6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004de8:	2b08      	cmp	r3, #8
			scope.oneChanSamples=scope.oneChanMemSize/2;
 8004dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dec:	bf88      	it	hi
 8004dee:	085b      	lsrhi	r3, r3, #1
			scope.oneChanSamples=scope.oneChanMemSize;
 8004df0:	6463      	str	r3, [r4, #68]	; 0x44
		adcSetResolution(res);
 8004df2:	b2e8      	uxtb	r0, r5
 8004df4:	f009 fc98 	bl	800e728 <adcSetResolution>
		scopeInitADCMode(scope.settings.AdvMode);
 8004df8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004dfc:	b2db      	uxtb	r3, r3
	switch (mode){
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d01c      	beq.n	8004e3c <scopeSetDataDepth+0xa4>
 8004e02:	d31f      	bcc.n	8004e44 <scopeSetDataDepth+0xac>
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d117      	bne.n	8004e38 <scopeSetDataDepth+0xa0>
		ADCInitMultiMode();
 8004e08:	f009 fe34 	bl	800ea74 <ADCInitMultiMode>
		result=0;
 8004e0c:	2400      	movs	r4, #0
 8004e0e:	e002      	b.n	8004e16 <scopeSetDataDepth+0x7e>
 8004e10:	b2ed      	uxtb	r5, r5
		scope.settings.adcRes = resTmp;
 8004e12:	8465      	strh	r5, [r4, #34]	; 0x22
	uint8_t result=BUFFER_SIZE_ERR;
 8004e14:	243a      	movs	r4, #58	; 0x3a
	xSemaphoreGiveRecursive(scopeMutex);
 8004e16:	6830      	ldr	r0, [r6, #0]
 8004e18:	f007 fc76 	bl	800c708 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004e1c:	a902      	add	r1, sp, #8
 8004e1e:	2334      	movs	r3, #52	; 0x34
 8004e20:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004e24:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <scopeSetDataDepth+0xc8>)
 8004e26:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f007 fa79 	bl	800c324 <xQueueGenericSend>
}
 8004e32:	4620      	mov	r0, r4
 8004e34:	b002      	add	sp, #8
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
		result=0;
 8004e38:	2400      	movs	r4, #0
 8004e3a:	e7ec      	b.n	8004e16 <scopeSetDataDepth+0x7e>
		ADCInitInterleavedMode();
 8004e3c:	f009 fdfa 	bl	800ea34 <ADCInitInterleavedMode>
		result=0;
 8004e40:	2400      	movs	r4, #0
 8004e42:	e7e8      	b.n	8004e16 <scopeSetDataDepth+0x7e>
		ADCInitNormalMode();
 8004e44:	f009 fce2 	bl	800e80c <ADCInitNormalMode>
		result=0;
 8004e48:	2400      	movs	r4, #0
 8004e4a:	e7e4      	b.n	8004e16 <scopeSetDataDepth+0x7e>
 8004e4c:	f3af 8000 	nop.w
 8004e50:	00000000 	.word	0x00000000
 8004e54:	40000000 	.word	0x40000000
 8004e58:	2000085c 	.word	0x2000085c
 8004e5c:	20000810 	.word	0x20000810
 8004e60:	20007048 	.word	0x20007048

08004e64 <scopeSetSamplingFreq>:
uint8_t scopeSetSamplingFreq(uint32_t freq){
 8004e64:	b5f0      	push	{r4, r5, r6, r7, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e66:	4d1d      	ldr	r5, [pc, #116]	; (8004edc <scopeSetSamplingFreq+0x78>)
	if (freq <= getMaxScopeSamplingFreq(scope.settings.adcRes)){
 8004e68:	4c1d      	ldr	r4, [pc, #116]	; (8004ee0 <scopeSetSamplingFreq+0x7c>)
uint8_t scopeSetSamplingFreq(uint32_t freq){
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	4606      	mov	r6, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e72:	6828      	ldr	r0, [r5, #0]
 8004e74:	f007 fe86 	bl	800cb84 <xQueueTakeMutexRecursive>
	if (freq <= getMaxScopeSamplingFreq(scope.settings.adcRes)){
 8004e78:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8004e7a:	b2c0      	uxtb	r0, r0
 8004e7c:	f00c fc34 	bl	80116e8 <getMaxScopeSamplingFreq>
 8004e80:	42b0      	cmp	r0, r6
 8004e82:	d21e      	bcs.n	8004ec2 <scopeSetSamplingFreq+0x5e>
		if(scope.numOfChannles==1){
 8004e84:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 8004e88:	8c60      	ldrh	r0, [r4, #34]	; 0x22
		if(scope.numOfChannles==1){
 8004e8a:	b2f6      	uxtb	r6, r6
 8004e8c:	2e01      	cmp	r6, #1
 8004e8e:	d01e      	beq.n	8004ece <scopeSetSamplingFreq+0x6a>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8004e90:	b2c0      	uxtb	r0, r0
 8004e92:	f00c fc29 	bl	80116e8 <getMaxScopeSamplingFreq>
			scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8004e96:	2300      	movs	r3, #0
			scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8004e98:	60a0      	str	r0, [r4, #8]
	uint8_t result=SCOPE_INVALID_SAMPLING_FREQ;
 8004e9a:	2739      	movs	r7, #57	; 0x39
			scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8004e9c:	f884 3020 	strb.w	r3, [r4, #32]
	xSemaphoreGiveRecursive(scopeMutex);
 8004ea0:	6828      	ldr	r0, [r5, #0]
 8004ea2:	f007 fc31 	bl	800c708 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004ea6:	a902      	add	r1, sp, #8
 8004ea8:	2334      	movs	r3, #52	; 0x34
 8004eaa:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <scopeSetSamplingFreq+0x80>)
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f007 fa34 	bl	800c324 <xQueueGenericSend>
}
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	b003      	add	sp, #12
 8004ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8004ec2:	2300      	movs	r3, #0
		scope.settings.samplingFrequency = freq;
 8004ec4:	60a6      	str	r6, [r4, #8]
		result=0;
 8004ec6:	461f      	mov	r7, r3
		scope.settings.AdvMode = SCOPE_NORMAL_MODE;
 8004ec8:	f884 3020 	strb.w	r3, [r4, #32]
 8004ecc:	e7e8      	b.n	8004ea0 <scopeSetSamplingFreq+0x3c>
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 8004ece:	f00c fc1f 	bl	8011710 <getMaxScopeSamplingFreqInterleaved>
	uint8_t result=SCOPE_INVALID_SAMPLING_FREQ;
 8004ed2:	2739      	movs	r7, #57	; 0x39
			scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 8004ed4:	60a0      	str	r0, [r4, #8]
			scope.settings.AdvMode = SCOPE_INTERLEAVE_MODE;
 8004ed6:	f884 6020 	strb.w	r6, [r4, #32]
 8004eda:	e7e1      	b.n	8004ea0 <scopeSetSamplingFreq+0x3c>
 8004edc:	2000085c 	.word	0x2000085c
 8004ee0:	20000810 	.word	0x20000810
 8004ee4:	20007048 	.word	0x20007048

08004ee8 <scopeSetTrigLevel>:
void scopeSetTrigLevel(uint16_t level){
 8004ee8:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004eea:	4c07      	ldr	r4, [pc, #28]	; (8004f08 <scopeSetTrigLevel+0x20>)
void scopeSetTrigLevel(uint16_t level){
 8004eec:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004eee:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef2:	6820      	ldr	r0, [r4, #0]
 8004ef4:	f007 fe46 	bl	800cb84 <xQueueTakeMutexRecursive>
	scope.settings.triggerLevel = level;
 8004ef8:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <scopeSetTrigLevel+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004efa:	6820      	ldr	r0, [r4, #0]
	scope.settings.triggerLevel = level;
 8004efc:	835d      	strh	r5, [r3, #26]
}
 8004efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004f02:	f007 bc01 	b.w	800c708 <xQueueGiveMutexRecursive>
 8004f06:	bf00      	nop
 8004f08:	2000085c 	.word	0x2000085c
 8004f0c:	20000810 	.word	0x20000810

08004f10 <scopeSetPretrigger>:
void scopeSetPretrigger(uint16_t pretrig){
 8004f10:	b538      	push	{r3, r4, r5, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f12:	4c07      	ldr	r4, [pc, #28]	; (8004f30 <scopeSetPretrigger+0x20>)
void scopeSetPretrigger(uint16_t pretrig){
 8004f14:	4605      	mov	r5, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f16:	f04f 31ff 	mov.w	r1, #4294967295
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	f007 fe32 	bl	800cb84 <xQueueTakeMutexRecursive>
	scope.settings.pretrigger = pretrig;
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <scopeSetPretrigger+0x24>)
	xSemaphoreGiveRecursive(scopeMutex);
 8004f22:	6820      	ldr	r0, [r4, #0]
	scope.settings.pretrigger = pretrig;
 8004f24:	839d      	strh	r5, [r3, #28]
}
 8004f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	xSemaphoreGiveRecursive(scopeMutex);
 8004f2a:	f007 bbed 	b.w	800c708 <xQueueGiveMutexRecursive>
 8004f2e:	bf00      	nop
 8004f30:	2000085c 	.word	0x2000085c
 8004f34:	20000810 	.word	0x20000810

08004f38 <scopeSetNumOfSamples>:
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004f38:	b570      	push	{r4, r5, r6, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f3a:	4d10      	ldr	r5, [pc, #64]	; (8004f7c <scopeSetNumOfSamples+0x44>)
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004f3c:	4c10      	ldr	r4, [pc, #64]	; (8004f80 <scopeSetNumOfSamples+0x48>)
uint8_t scopeSetNumOfSamples(uint32_t smp){
 8004f3e:	b082      	sub	sp, #8
 8004f40:	4606      	mov	r6, r0
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f42:	f04f 31ff 	mov.w	r1, #4294967295
 8004f46:	6828      	ldr	r0, [r5, #0]
	uint32_t smpTmp=scope.settings.samplesToSend;
 8004f48:	6963      	ldr	r3, [r4, #20]
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f4a:	f007 fe1b 	bl	800cb84 <xQueueTakeMutexRecursive>
	if(smp<scope.oneChanSamples){
 8004f4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
	xSemaphoreGiveRecursive(scopeMutex);
 8004f50:	6828      	ldr	r0, [r5, #0]
	if(smp<scope.oneChanSamples){
 8004f52:	42b3      	cmp	r3, r6
		scope.settings.samplesToSend = smp;
 8004f54:	bf8a      	itet	hi
 8004f56:	6166      	strhi	r6, [r4, #20]
	uint8_t result=BUFFER_SIZE_ERR;
 8004f58:	243a      	movls	r4, #58	; 0x3a
		result=0;
 8004f5a:	2400      	movhi	r4, #0
	xSemaphoreGiveRecursive(scopeMutex);
 8004f5c:	f007 fbd4 	bl	800c708 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8004f60:	a902      	add	r1, sp, #8
 8004f62:	2334      	movs	r3, #52	; 0x34
 8004f64:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <scopeSetNumOfSamples+0x4c>)
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	2300      	movs	r3, #0
 8004f72:	f007 f9d7 	bl	800c324 <xQueueGenericSend>
}
 8004f76:	4620      	mov	r0, r4
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	2000085c 	.word	0x2000085c
 8004f80:	20000810 	.word	0x20000810
 8004f84:	20007048 	.word	0x20007048

08004f88 <scopeSetNumOfChannels>:
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t chanTmp=scope.numOfChannles;
 8004f8c:	4c49      	ldr	r4, [pc, #292]	; (80050b4 <scopeSetNumOfChannels+0x12c>)
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f8e:	4e4a      	ldr	r6, [pc, #296]	; (80050b8 <scopeSetNumOfChannels+0x130>)
	uint8_t chanTmp=scope.numOfChannles;
 8004f90:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
uint8_t scopeSetNumOfChannels(uint8_t chan){
 8004f94:	4605      	mov	r5, r0
 8004f96:	b082      	sub	sp, #8
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004f98:	f04f 31ff 	mov.w	r1, #4294967295
 8004f9c:	6830      	ldr	r0, [r6, #0]
	uint8_t chanTmp=scope.numOfChannles;
 8004f9e:	b2df      	uxtb	r7, r3
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8004fa0:	f007 fdf0 	bl	800cb84 <xQueueTakeMutexRecursive>
	if(chan>1 && scope.settings.AdvMode!=SCOPE_NORMAL_MODE){
 8004fa4:	2d01      	cmp	r5, #1
 8004fa6:	d974      	bls.n	8005092 <scopeSetNumOfChannels+0x10a>
 8004fa8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d163      	bne.n	8005078 <scopeSetNumOfChannels+0xf0>
	if(chan<=MAX_ADC_CHANNELS){
 8004fb0:	2d04      	cmp	r5, #4
 8004fb2:	d85c      	bhi.n	800506e <scopeSetNumOfChannels+0xe6>
		scope.numOfChannles=chan;
 8004fb4:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
	uint32_t data_len=scope.settings.samplesToSend;
 8004fb8:	6963      	ldr	r3, [r4, #20]
	if(scope.settings.adcRes>8){
 8004fba:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004fbc:	2a08      	cmp	r2, #8
	data_len=data_len*scope.numOfChannles;
 8004fbe:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		data_len=data_len*2;
 8004fc2:	bf88      	it	hi
 8004fc4:	005b      	lslhi	r3, r3, #1
	data_len=data_len*scope.numOfChannles;
 8004fc6:	fb03 f202 	mul.w	r2, r3, r2
	if(data_len<=MAX_SCOPE_BUFF_SIZE){
 8004fca:	f247 5330 	movw	r3, #30000	; 0x7530
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d838      	bhi.n	8005044 <scopeSetNumOfChannels+0xbc>
			scope.oneChanMemSize=MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN-(MAX_SCOPE_BUFF_SIZE/chan+SCOPE_BUFFER_MARGIN)%2;
 8004fd2:	fb93 f3f5 	sdiv	r3, r3, r5
 8004fd6:	3364      	adds	r3, #100	; 0x64
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6423      	str	r3, [r4, #64]	; 0x40
			if(scope.settings.adcRes>8){
 8004fde:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8004fe0:	2b08      	cmp	r3, #8
				scope.oneChanSamples=scope.oneChanMemSize/2;
 8004fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fe4:	bf88      	it	hi
 8004fe6:	085b      	lsrhi	r3, r3, #1
 8004fe8:	6463      	str	r3, [r4, #68]	; 0x44
			for(uint8_t i=0;i<chan;i++){
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	d04f      	beq.n	800508e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004fee:	4a33      	ldr	r2, [pc, #204]	; (80050bc <scopeSetNumOfChannels+0x134>)
 8004ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff4:	f002 0301 	and.w	r3, r2, #1
 8004ff8:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8004ffa:	2d01      	cmp	r5, #1
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8004ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
			for(uint8_t i=0;i<chan;i++){
 8004ffe:	d946      	bls.n	800508e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8005000:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005004:	4413      	add	r3, r2
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	440b      	add	r3, r1
 800500c:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 800500e:	2d02      	cmp	r5, #2
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8005010:	6323      	str	r3, [r4, #48]	; 0x30
			for(uint8_t i=0;i<chan;i++){
 8005012:	d03c      	beq.n	800508e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8005014:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005018:	f002 0301 	and.w	r3, r2, #1
 800501c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005020:	4413      	add	r3, r2
			for(uint8_t i=0;i<chan;i++){
 8005022:	2d03      	cmp	r5, #3
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8005024:	6363      	str	r3, [r4, #52]	; 0x34
			for(uint8_t i=0;i<chan;i++){
 8005026:	d032      	beq.n	800508e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8005028:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800502a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800502c:	4413      	add	r3, r2
 800502e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	440b      	add	r3, r1
 8005038:	441a      	add	r2, r3
			for(uint8_t i=0;i<chan;i++){
 800503a:	2d04      	cmp	r5, #4
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 800503c:	63a2      	str	r2, [r4, #56]	; 0x38
			for(uint8_t i=0;i<chan;i++){
 800503e:	d026      	beq.n	800508e <scopeSetNumOfChannels+0x106>
				scope.pChanMem[i]=(uint16_t *)(&scopeBuffer[i*scope.oneChanMemSize]+(uint32_t)(&scopeBuffer[i*scope.oneChanMemSize])%2);
 8005040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005042:	6c23      	ldr	r3, [r4, #64]	; 0x40
			scope.numOfChannles = chanTmp;
 8005044:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
	uint8_t result=BUFFER_SIZE_ERR;
 8005048:	243a      	movs	r4, #58	; 0x3a
		xSemaphoreGiveRecursive(scopeMutex);
 800504a:	6830      	ldr	r0, [r6, #0]
 800504c:	f007 fb5c 	bl	800c708 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 8005050:	a902      	add	r1, sp, #8
 8005052:	2334      	movs	r3, #52	; 0x34
 8005054:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <scopeSetNumOfChannels+0x138>)
 800505a:	f04f 32ff 	mov.w	r2, #4294967295
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	f007 f95f 	bl	800c324 <xQueueGenericSend>
}
 8005066:	4620      	mov	r0, r4
 8005068:	b002      	add	sp, #8
 800506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t result=BUFFER_SIZE_ERR;
 800506e:	243a      	movs	r4, #58	; 0x3a
}
 8005070:	4620      	mov	r0, r4
 8005072:	b002      	add	sp, #8
 8005074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scope.settings.AdvMode=SCOPE_NORMAL_MODE;
 8005078:	2300      	movs	r3, #0
 800507a:	f884 3020 	strb.w	r3, [r4, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 800507e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8005080:	b2c0      	uxtb	r0, r0
 8005082:	f00c fb31 	bl	80116e8 <getMaxScopeSamplingFreq>
	if(chan<=MAX_ADC_CHANNELS){
 8005086:	2d04      	cmp	r5, #4
		scope.settings.samplingFrequency=getMaxScopeSamplingFreq(scope.settings.adcRes);
 8005088:	60a0      	str	r0, [r4, #8]
	if(chan<=MAX_ADC_CHANNELS){
 800508a:	d993      	bls.n	8004fb4 <scopeSetNumOfChannels+0x2c>
 800508c:	e7ef      	b.n	800506e <scopeSetNumOfChannels+0xe6>
			result=0;
 800508e:	2400      	movs	r4, #0
 8005090:	e7db      	b.n	800504a <scopeSetNumOfChannels+0xc2>
	if(chan==1 && scope.settings.samplingFrequency==getMaxScopeSamplingFreq(scope.settings.adcRes)){
 8005092:	d18f      	bne.n	8004fb4 <scopeSetNumOfChannels+0x2c>
 8005094:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005098:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800509a:	b2c0      	uxtb	r0, r0
 800509c:	f00c fb24 	bl	80116e8 <getMaxScopeSamplingFreq>
 80050a0:	4580      	cmp	r8, r0
 80050a2:	d187      	bne.n	8004fb4 <scopeSetNumOfChannels+0x2c>
		scope.settings.AdvMode=SCOPE_INTERLEAVE_MODE;
 80050a4:	f884 5020 	strb.w	r5, [r4, #32]
		scope.settings.samplingFrequency=getMaxScopeSamplingFreqInterleaved(scope.settings.adcRes);
 80050a8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80050aa:	f00c fb31 	bl	8011710 <getMaxScopeSamplingFreqInterleaved>
 80050ae:	60a0      	str	r0, [r4, #8]
 80050b0:	e780      	b.n	8004fb4 <scopeSetNumOfChannels+0x2c>
 80050b2:	bf00      	nop
 80050b4:	20000810 	.word	0x20000810
 80050b8:	2000085c 	.word	0x2000085c
 80050bc:	2000704c 	.word	0x2000704c
 80050c0:	20007048 	.word	0x20007048

080050c4 <scopeSetTrigChannel>:
	if(chan<=MAX_ADC_CHANNELS){
 80050c4:	2804      	cmp	r0, #4
 80050c6:	d81c      	bhi.n	8005102 <scopeSetTrigChannel+0x3e>
uint8_t scopeSetTrigChannel(uint8_t chan){
 80050c8:	b530      	push	{r4, r5, lr}
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80050ca:	4d0f      	ldr	r5, [pc, #60]	; (8005108 <scopeSetTrigChannel+0x44>)
uint8_t scopeSetTrigChannel(uint8_t chan){
 80050cc:	b083      	sub	sp, #12
 80050ce:	4604      	mov	r4, r0
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80050d0:	f04f 31ff 	mov.w	r1, #4294967295
 80050d4:	6828      	ldr	r0, [r5, #0]
 80050d6:	f007 fd55 	bl	800cb84 <xQueueTakeMutexRecursive>
		scope.triggerChannel=chan;
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <scopeSetTrigChannel+0x48>)
		xSemaphoreGiveRecursive(scopeMutex);
 80050dc:	6828      	ldr	r0, [r5, #0]
		scope.triggerChannel=chan;
 80050de:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
		xSemaphoreGiveRecursive(scopeMutex);
 80050e2:	f007 fb11 	bl	800c708 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 80050e6:	a902      	add	r1, sp, #8
 80050e8:	2334      	movs	r3, #52	; 0x34
 80050ea:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <scopeSetTrigChannel+0x4c>)
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	2300      	movs	r3, #0
 80050f8:	f007 f914 	bl	800c324 <xQueueGenericSend>
		result=0;
 80050fc:	2000      	movs	r0, #0
}
 80050fe:	b003      	add	sp, #12
 8005100:	bd30      	pop	{r4, r5, pc}
	uint8_t result=SCOPE_INVALID_TRIGGER_CHANNEL;
 8005102:	2038      	movs	r0, #56	; 0x38
}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	2000085c 	.word	0x2000085c
 800510c:	20000810 	.word	0x20000810
 8005110:	20007048 	.word	0x20007048

08005114 <scopeGetRealSmplFreq>:
	return scope.settings.samplingFrequency;
 8005114:	4b01      	ldr	r3, [pc, #4]	; (800511c <scopeGetRealSmplFreq+0x8>)
 8005116:	6898      	ldr	r0, [r3, #8]
}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000810 	.word	0x20000810

08005120 <scopeSetADCInputChannel>:
	if(adc < MAX_ADC_CHANNELS && chann < NUM_OF_ANALOG_INPUTS[adc]){
 8005120:	2803      	cmp	r0, #3
 8005122:	d830      	bhi.n	8005186 <scopeSetADCInputChannel+0x66>
 8005124:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <scopeSetADCInputChannel+0x78>)
 8005126:	5c1b      	ldrb	r3, [r3, r0]
 8005128:	428b      	cmp	r3, r1
 800512a:	d92c      	bls.n	8005186 <scopeSetADCInputChannel+0x66>
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 800512c:	b5f0      	push	{r4, r5, r6, r7, lr}
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800512e:	4e1b      	ldr	r6, [pc, #108]	; (800519c <scopeSetADCInputChannel+0x7c>)
		scope.adcChannel[adc] = chann;
 8005130:	4f1b      	ldr	r7, [pc, #108]	; (80051a0 <scopeSetADCInputChannel+0x80>)
 8005132:	460d      	mov	r5, r1
 8005134:	4604      	mov	r4, r0
uint8_t scopeSetADCInputChannel(uint8_t adc, uint8_t chann){
 8005136:	b083      	sub	sp, #12
		xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005138:	f04f 31ff 	mov.w	r1, #4294967295
 800513c:	6830      	ldr	r0, [r6, #0]
 800513e:	f007 fd21 	bl	800cb84 <xQueueTakeMutexRecursive>
		scope.adcChannel[adc] = chann;
 8005142:	193b      	adds	r3, r7, r4
		adcSetInputChannel(adc, chann);
 8005144:	4620      	mov	r0, r4
 8005146:	4629      	mov	r1, r5
		scope.adcChannel[adc] = chann;
 8005148:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
		adcSetInputChannel(adc, chann);
 800514c:	f009 faa2 	bl	800e694 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8005150:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005154:	b2db      	uxtb	r3, r3
	switch (mode){
 8005156:	2b01      	cmp	r3, #1
 8005158:	d01a      	beq.n	8005190 <scopeSetADCInputChannel+0x70>
 800515a:	d316      	bcc.n	800518a <scopeSetADCInputChannel+0x6a>
 800515c:	2b02      	cmp	r3, #2
 800515e:	d101      	bne.n	8005164 <scopeSetADCInputChannel+0x44>
		ADCInitMultiMode();
 8005160:	f009 fc88 	bl	800ea74 <ADCInitMultiMode>
		xSemaphoreGiveRecursive(scopeMutex);
 8005164:	6830      	ldr	r0, [r6, #0]
 8005166:	f007 facf 	bl	800c708 <xQueueGiveMutexRecursive>
		uint16_t passMsg = MSG_INVALIDATE;
 800516a:	a902      	add	r1, sp, #8
 800516c:	2334      	movs	r3, #52	; 0x34
 800516e:	f821 3d02 	strh.w	r3, [r1, #-2]!
		xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <scopeSetADCInputChannel+0x84>)
 8005174:	f04f 32ff 	mov.w	r2, #4294967295
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	f007 f8d2 	bl	800c324 <xQueueGenericSend>
		result = 0;
 8005180:	2000      	movs	r0, #0
}
 8005182:	b003      	add	sp, #12
 8005184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t result = SCOPE_INVALID_ADC_CHANNEL;
 8005186:	203d      	movs	r0, #61	; 0x3d
}
 8005188:	4770      	bx	lr
		ADCInitNormalMode();
 800518a:	f009 fb3f 	bl	800e80c <ADCInitNormalMode>
 800518e:	e7e9      	b.n	8005164 <scopeSetADCInputChannel+0x44>
		ADCInitInterleavedMode();
 8005190:	f009 fc50 	bl	800ea34 <ADCInitInterleavedMode>
 8005194:	e7e6      	b.n	8005164 <scopeSetADCInputChannel+0x44>
 8005196:	bf00      	nop
 8005198:	08014f1c 	.word	0x08014f1c
 800519c:	2000085c 	.word	0x2000085c
 80051a0:	20000810 	.word	0x20000810
 80051a4:	20007048 	.word	0x20007048

080051a8 <scopeSetADCInputChannelDefault>:
uint8_t scopeSetADCInputChannelDefault(){
 80051a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80051aa:	4f1b      	ldr	r7, [pc, #108]	; (8005218 <scopeSetADCInputChannelDefault+0x70>)
 80051ac:	4e1b      	ldr	r6, [pc, #108]	; (800521c <scopeSetADCInputChannelDefault+0x74>)
 80051ae:	6838      	ldr	r0, [r7, #0]
 80051b0:	4d1b      	ldr	r5, [pc, #108]	; (8005220 <scopeSetADCInputChannelDefault+0x78>)
uint8_t scopeSetADCInputChannelDefault(){
 80051b2:	b083      	sub	sp, #12
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 80051b4:	f04f 31ff 	mov.w	r1, #4294967295
 80051b8:	f007 fce4 	bl	800cb84 <xQueueTakeMutexRecursive>
 80051bc:	2400      	movs	r4, #0
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80051be:	f816 2b01 	ldrb.w	r2, [r6], #1
 80051c2:	192b      	adds	r3, r5, r4
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80051c4:	4611      	mov	r1, r2
 80051c6:	b2e0      	uxtb	r0, r4
		scope.adcChannel[i] = ANALOG_DEFAULT_INPUTS[i];
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		adcSetInputChannel(i, ANALOG_DEFAULT_INPUTS[i]);
 80051cc:	f009 fa62 	bl	800e694 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 80051d0:	f895 3020 	ldrb.w	r3, [r5, #32]
 80051d4:	b2db      	uxtb	r3, r3
	switch (mode){
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d01b      	beq.n	8005212 <scopeSetADCInputChannelDefault+0x6a>
 80051da:	d317      	bcc.n	800520c <scopeSetADCInputChannelDefault+0x64>
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d101      	bne.n	80051e4 <scopeSetADCInputChannelDefault+0x3c>
		ADCInitMultiMode();
 80051e0:	f009 fc48 	bl	800ea74 <ADCInitMultiMode>
 80051e4:	3401      	adds	r4, #1
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 80051e6:	2c04      	cmp	r4, #4
 80051e8:	d1e9      	bne.n	80051be <scopeSetADCInputChannelDefault+0x16>
	xSemaphoreGiveRecursive(scopeMutex);
 80051ea:	6838      	ldr	r0, [r7, #0]
 80051ec:	f007 fa8c 	bl	800c708 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 80051f0:	a902      	add	r1, sp, #8
 80051f2:	2334      	movs	r3, #52	; 0x34
 80051f4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <scopeSetADCInputChannelDefault+0x7c>)
 80051fa:	f04f 32ff 	mov.w	r2, #4294967295
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	2300      	movs	r3, #0
 8005202:	f007 f88f 	bl	800c324 <xQueueGenericSend>
}
 8005206:	2000      	movs	r0, #0
 8005208:	b003      	add	sp, #12
 800520a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCInitNormalMode();
 800520c:	f009 fafe 	bl	800e80c <ADCInitNormalMode>
 8005210:	e7e8      	b.n	80051e4 <scopeSetADCInputChannelDefault+0x3c>
		ADCInitInterleavedMode();
 8005212:	f009 fc0f 	bl	800ea34 <ADCInitInterleavedMode>
 8005216:	e7e5      	b.n	80051e4 <scopeSetADCInputChannelDefault+0x3c>
 8005218:	2000085c 	.word	0x2000085c
 800521c:	08014f14 	.word	0x08014f14
 8005220:	20000810 	.word	0x20000810
 8005224:	20007048 	.word	0x20007048

08005228 <scopeSetADCInputChannelVref>:
uint8_t scopeSetADCInputChannelVref(){
 8005228:	b5f0      	push	{r4, r5, r6, r7, lr}
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 800522a:	4f1b      	ldr	r7, [pc, #108]	; (8005298 <scopeSetADCInputChannelVref+0x70>)
 800522c:	4e1b      	ldr	r6, [pc, #108]	; (800529c <scopeSetADCInputChannelVref+0x74>)
 800522e:	6838      	ldr	r0, [r7, #0]
 8005230:	4d1b      	ldr	r5, [pc, #108]	; (80052a0 <scopeSetADCInputChannelVref+0x78>)
uint8_t scopeSetADCInputChannelVref(){
 8005232:	b083      	sub	sp, #12
	xSemaphoreTakeRecursive(scopeMutex, portMAX_DELAY);
 8005234:	f04f 31ff 	mov.w	r1, #4294967295
 8005238:	f007 fca4 	bl	800cb84 <xQueueTakeMutexRecursive>
 800523c:	2400      	movs	r4, #0
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 800523e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8005242:	192b      	adds	r3, r5, r4
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 8005244:	4611      	mov	r1, r2
 8005246:	b2e0      	uxtb	r0, r4
		scope.adcChannel[i] = ANALOG_VREF_INPUTS[i];
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		adcSetInputChannel(i, ANALOG_VREF_INPUTS[i]);
 800524c:	f009 fa22 	bl	800e694 <adcSetInputChannel>
		scopeInitADCMode(scope.settings.AdvMode);
 8005250:	f895 3020 	ldrb.w	r3, [r5, #32]
 8005254:	b2db      	uxtb	r3, r3
	switch (mode){
 8005256:	2b01      	cmp	r3, #1
 8005258:	d01b      	beq.n	8005292 <scopeSetADCInputChannelVref+0x6a>
 800525a:	d317      	bcc.n	800528c <scopeSetADCInputChannelVref+0x64>
 800525c:	2b02      	cmp	r3, #2
 800525e:	d101      	bne.n	8005264 <scopeSetADCInputChannelVref+0x3c>
		ADCInitMultiMode();
 8005260:	f009 fc08 	bl	800ea74 <ADCInitMultiMode>
 8005264:	3401      	adds	r4, #1
	for(uint8_t i = 0;i<MAX_ADC_CHANNELS;i++){
 8005266:	2c04      	cmp	r4, #4
 8005268:	d1e9      	bne.n	800523e <scopeSetADCInputChannelVref+0x16>
	xSemaphoreGiveRecursive(scopeMutex);
 800526a:	6838      	ldr	r0, [r7, #0]
 800526c:	f007 fa4c 	bl	800c708 <xQueueGiveMutexRecursive>
	uint16_t passMsg = MSG_INVALIDATE;
 8005270:	a902      	add	r1, sp, #8
 8005272:	2334      	movs	r3, #52	; 0x34
 8005274:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <scopeSetADCInputChannelVref+0x7c>)
 800527a:	f04f 32ff 	mov.w	r2, #4294967295
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	2300      	movs	r3, #0
 8005282:	f007 f84f 	bl	800c324 <xQueueGenericSend>
}
 8005286:	2000      	movs	r0, #0
 8005288:	b003      	add	sp, #12
 800528a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCInitNormalMode();
 800528c:	f009 fabe 	bl	800e80c <ADCInitNormalMode>
 8005290:	e7e8      	b.n	8005264 <scopeSetADCInputChannelVref+0x3c>
		ADCInitInterleavedMode();
 8005292:	f009 fbcf 	bl	800ea34 <ADCInitInterleavedMode>
 8005296:	e7e5      	b.n	8005264 <scopeSetADCInputChannelVref+0x3c>
 8005298:	2000085c 	.word	0x2000085c
 800529c:	08014f18 	.word	0x08014f18
 80052a0:	20000810 	.word	0x20000810
 80052a4:	20007048 	.word	0x20007048

080052a8 <scopeGetRanges>:
	}else{
		*len=sizeof(RANGES);
		return RANGES;
	}
#else
	*len=sizeof(RANGES);
 80052a8:	2310      	movs	r3, #16
 80052aa:	7003      	strb	r3, [r0, #0]
	return RANGES;	
#endif


}
 80052ac:	4800      	ldr	r0, [pc, #0]	; (80052b0 <scopeGetRanges+0x8>)
 80052ae:	4770      	bx	lr
 80052b0:	08014f20 	.word	0x08014f20

080052b4 <scopeRestart>:
/**
 * @brief  Restart scope sampling
 * @param  None
 * @retval None
 */
void scopeRestart(void){
 80052b4:	b500      	push	{lr}
 80052b6:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_RESTART;
 80052b8:	a902      	add	r1, sp, #8
 80052ba:	2311      	movs	r3, #17
 80052bc:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80052c0:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <scopeRestart+0x20>)
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	f007 f82b 	bl	800c324 <xQueueGenericSend>
}
 80052ce:	b003      	add	sp, #12
 80052d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80052d4:	20007048 	.word	0x20007048

080052d8 <scopeStart>:
/**
 * @brief  Start scope sampling
 * @param  None
 * @retval None
 */
void scopeStart(void){
 80052d8:	b500      	push	{lr}
 80052da:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_START;
 80052dc:	a902      	add	r1, sp, #8
 80052de:	2312      	movs	r3, #18
 80052e0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 80052e4:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <scopeStart+0x20>)
 80052e6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	2300      	movs	r3, #0
 80052ee:	f007 f819 	bl	800c324 <xQueueGenericSend>
}
 80052f2:	b003      	add	sp, #12
 80052f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80052f8:	20007048 	.word	0x20007048

080052fc <scopeStop>:
/**
 * @brief  Stop scope sampling
 * @param  None
 * @retval None
 */
void scopeStop(void){
 80052fc:	b500      	push	{lr}
 80052fe:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SCOPE_STOP;
 8005300:	a902      	add	r1, sp, #8
 8005302:	2313      	movs	r3, #19
 8005304:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(scopeMessageQueue, &passMsg, portMAX_DELAY);
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <scopeStop+0x20>)
 800530a:	f04f 32ff 	mov.w	r2, #4294967295
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	2300      	movs	r3, #0
 8005312:	f007 f807 	bl	800c324 <xQueueGenericSend>
}
 8005316:	b003      	add	sp, #12
 8005318:	f85d fb04 	ldr.w	pc, [sp], #4
 800531c:	20007048 	.word	0x20007048

08005320 <SyncPwmTask>:
 * task is getting messages from other tasks and takes care about counter functions
 * @param  Task handler, parameters pointer
 * @retval None
 */
void SyncPwmTask(void const *argument)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
	uint16_t message = 0xFFFF;
 8005324:	f64f 73ff 	movw	r3, #65535	; 0xffff
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8005328:	2200      	movs	r2, #0
 800532a:	2102      	movs	r1, #2
 800532c:	2005      	movs	r0, #5
	uint16_t message = 0xFFFF;
 800532e:	f8ad 3006 	strh.w	r3, [sp, #6]
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 8005332:	f006 ffb3 	bl	800c29c <xQueueGenericCreate>
 8005336:	4d26      	ldr	r5, [pc, #152]	; (80053d0 <SyncPwmTask+0xb0>)
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8005338:	4c26      	ldr	r4, [pc, #152]	; (80053d4 <SyncPwmTask+0xb4>)
	syncPwmMessageQueue = xQueueCreate(5, sizeof(message)/sizeof(uint8_t));
 800533a:	6028      	str	r0, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 800533c:	2004      	movs	r0, #4
 800533e:	f007 f9af 	bl	800c6a0 <xQueueCreateMutex>

	if(syncPwmMessageQueue == 0){
 8005342:	682b      	ldr	r3, [r5, #0]
	syncPwmMutex = xSemaphoreCreateRecursiveMutex();	
 8005344:	6020      	str	r0, [r4, #0]
	if(syncPwmMessageQueue == 0){
 8005346:	2b00      	cmp	r3, #0
 8005348:	d030      	beq.n	80053ac <SyncPwmTask+0x8c>
}

void syncPwmSetDefault(void)
{
	/* Four channels to generate by default. */
	syncPwm.chan1 = CHAN_ENABLE;
 800534a:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <SyncPwmTask+0xb8>)
 800534c:	2101      	movs	r1, #1
	syncPwm.chan2 = CHAN_ENABLE;
	syncPwm.chan3 = CHAN_ENABLE;
	syncPwm.chan4 = CHAN_ENABLE;

	/* Default 4 channels equidistant 90� and 25% duty cycle settings. */
	syncPwm.dataEdgeChan1[0] = 3600;
 800534e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
	syncPwm.dataEdgeChan1[1] = 0;
	syncPwm.dataEdgeChan2[0] = 7200;
 8005352:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
	syncPwm.dataEdgeChan1[1] = 0;
 8005356:	2700      	movs	r7, #0
	syncPwm.chan1 = CHAN_ENABLE;
 8005358:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
	syncPwm.chan2 = CHAN_ENABLE;
 800535c:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
	syncPwm.chan3 = CHAN_ENABLE;
 8005360:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
	syncPwm.chan4 = CHAN_ENABLE;
 8005364:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
	syncPwm.dataEdgeChan1[0] = 3600;
 8005368:	8016      	strh	r6, [r2, #0]
	syncPwm.dataEdgeChan2[1] = 3600;			
	syncPwm.dataEdgeChan3[0] = 10400;
 800536a:	f642 01a0 	movw	r1, #10400	; 0x28a0
	syncPwm.dataEdgeChan1[1] = 0;
 800536e:	8057      	strh	r7, [r2, #2]
	syncPwm.dataEdgeChan2[0] = 7200;
 8005370:	8090      	strh	r0, [r2, #4]
	syncPwm.dataEdgeChan2[1] = 3600;			
 8005372:	80d6      	strh	r6, [r2, #6]
	syncPwm.dataEdgeChan3[1] = 7200;			
	syncPwm.dataEdgeChan4[0] = 14000;
 8005374:	f243 66b0 	movw	r6, #14000	; 0x36b0
	syncPwm.dataEdgeChan3[0] = 10400;
 8005378:	8111      	strh	r1, [r2, #8]
	syncPwm.dataEdgeChan3[1] = 7200;			
 800537a:	8150      	strh	r0, [r2, #10]
	syncPwm.dataEdgeChan4[0] = 14000;
 800537c:	8196      	strh	r6, [r2, #12]
	syncPwm.dataEdgeChan4[1] = 10400;		
 800537e:	81d1      	strh	r1, [r2, #14]
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 8005380:	4618      	mov	r0, r3
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	2300      	movs	r3, #0
 8005388:	f10d 0106 	add.w	r1, sp, #6
 800538c:	f007 fa72 	bl	800c874 <xQueueGenericReceive>
		xSemaphoreTakeRecursive(syncPwmMutex, portMAX_DELAY);
 8005390:	f04f 31ff 	mov.w	r1, #4294967295
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	f007 fbf5 	bl	800cb84 <xQueueTakeMutexRecursive>
		switch(message){
 800539a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800539e:	3b2d      	subs	r3, #45	; 0x2d
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d806      	bhi.n	80053b2 <SyncPwmTask+0x92>
 80053a4:	e8df f003 	tbb	[pc, r3]
 80053a8:	030a100d 	.word	0x030a100d
 80053ac:	e7fe      	b.n	80053ac <SyncPwmTask+0x8c>
	TIM_SYNC_PWM_Stop();
 80053ae:	f00c fbb5 	bl	8011b1c <TIM_SYNC_PWM_Stop>
		xSemaphoreGiveRecursive(syncPwmMutex);
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	f007 f9a8 	bl	800c708 <xQueueGiveMutexRecursive>
 80053b8:	682b      	ldr	r3, [r5, #0]
		xQueueReceive(syncPwmMessageQueue, &message, portMAX_DELAY);
 80053ba:	e7e1      	b.n	8005380 <SyncPwmTask+0x60>
	TIM_SYNC_PWM_Start();
 80053bc:	f00c fb2a 	bl	8011a14 <TIM_SYNC_PWM_Start>
 80053c0:	e7f7      	b.n	80053b2 <SyncPwmTask+0x92>
	TIM_SYNC_PWM_Init();
 80053c2:	f00c fae5 	bl	8011990 <TIM_SYNC_PWM_Init>
 80053c6:	e7f4      	b.n	80053b2 <SyncPwmTask+0x92>
	TIM_SYNC_PWM_Deinit();
 80053c8:	f00c fae4 	bl	8011994 <TIM_SYNC_PWM_Deinit>
 80053cc:	e7f1      	b.n	80053b2 <SyncPwmTask+0x92>
 80053ce:	bf00      	nop
 80053d0:	2000e738 	.word	0x2000e738
 80053d4:	2000e73c 	.word	0x2000e73c
 80053d8:	2000e710 	.word	0x2000e710

080053dc <syncPwmSendInit>:
void syncPwmSendInit(void){
 80053dc:	b500      	push	{lr}
 80053de:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_INIT;
 80053e0:	a902      	add	r1, sp, #8
 80053e2:	232d      	movs	r3, #45	; 0x2d
 80053e4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <syncPwmSendInit+0x20>)
 80053ea:	f04f 32ff 	mov.w	r2, #4294967295
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	2300      	movs	r3, #0
 80053f2:	f006 ff97 	bl	800c324 <xQueueGenericSend>
}
 80053f6:	b003      	add	sp, #12
 80053f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80053fc:	2000e738 	.word	0x2000e738

08005400 <syncPwmSendDeinit>:
void syncPwmSendDeinit(void){
 8005400:	b500      	push	{lr}
 8005402:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_DEINIT;
 8005404:	a902      	add	r1, sp, #8
 8005406:	232e      	movs	r3, #46	; 0x2e
 8005408:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <syncPwmSendDeinit+0x20>)
 800540e:	f04f 32ff 	mov.w	r2, #4294967295
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	f006 ff85 	bl	800c324 <xQueueGenericSend>
}
 800541a:	b003      	add	sp, #12
 800541c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005420:	2000e738 	.word	0x2000e738

08005424 <syncPwmSendStart>:
void syncPwmSendStart(void){
 8005424:	b500      	push	{lr}
 8005426:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_START;
 8005428:	a902      	add	r1, sp, #8
 800542a:	232f      	movs	r3, #47	; 0x2f
 800542c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <syncPwmSendStart+0x20>)
 8005432:	f04f 32ff 	mov.w	r2, #4294967295
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	2300      	movs	r3, #0
 800543a:	f006 ff73 	bl	800c324 <xQueueGenericSend>
}
 800543e:	b003      	add	sp, #12
 8005440:	f85d fb04 	ldr.w	pc, [sp], #4
 8005444:	2000e738 	.word	0x2000e738

08005448 <syncPwmSendStop>:
void syncPwmSendStop(void){
 8005448:	b500      	push	{lr}
 800544a:	b083      	sub	sp, #12
	uint16_t passMsg = MSG_SYNCPWM_STOP;
 800544c:	a902      	add	r1, sp, #8
 800544e:	2330      	movs	r3, #48	; 0x30
 8005450:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(syncPwmMessageQueue, &passMsg, portMAX_DELAY);
 8005454:	4b04      	ldr	r3, [pc, #16]	; (8005468 <syncPwmSendStop+0x20>)
 8005456:	f04f 32ff 	mov.w	r2, #4294967295
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	2300      	movs	r3, #0
 800545e:	f006 ff61 	bl	800c324 <xQueueGenericSend>
}
 8005462:	b003      	add	sp, #12
 8005464:	f85d fb04 	ldr.w	pc, [sp], #4
 8005468:	2000e738 	.word	0x2000e738

0800546c <syncPwmChannelNumber>:
	syncPwm.channelToConfig = (syncPwmChannelTypeDef)chanNum;
 800546c:	4b01      	ldr	r3, [pc, #4]	; (8005474 <syncPwmChannelNumber+0x8>)
 800546e:	f883 0020 	strb.w	r0, [r3, #32]
}
 8005472:	4770      	bx	lr
 8005474:	2000e710 	.word	0x2000e710

08005478 <syncPwmChannelConfig>:
	TIM_SYNC_PWM_DMA_ChanConfig(ccr1st, ccr2nd);
 8005478:	b280      	uxth	r0, r0
 800547a:	f00c bbfd 	b.w	8011c78 <TIM_SYNC_PWM_DMA_ChanConfig>
 800547e:	bf00      	nop

08005480 <syncPwmSetFreq>:
{
 8005480:	b510      	push	{r4, lr}
 8005482:	b082      	sub	sp, #8
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 8005484:	f00c fc30 	bl	8011ce8 <TIM_Reconfig_SyncPwm>
	uint16_t passMsg = MSG_SYNCPWM_REAL_FREQ;
 8005488:	a902      	add	r1, sp, #8
 800548a:	2331      	movs	r3, #49	; 0x31
 800548c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <syncPwmSetFreq+0x28>)
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 8005492:	4c06      	ldr	r4, [pc, #24]	; (80054ac <syncPwmSetFreq+0x2c>)
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	f04f 32ff 	mov.w	r2, #4294967295
 800549a:	2300      	movs	r3, #0
	syncPwm.realPwmFreq =  TIM_Reconfig_SyncPwm(freq);
 800549c:	ed84 0b06 	vstr	d0, [r4, #24]
	xQueueSendToBack(messageQueue, &passMsg, portMAX_DELAY);
 80054a0:	f006 ff40 	bl	800c324 <xQueueGenericSend>
}
 80054a4:	b002      	add	sp, #8
 80054a6:	bd10      	pop	{r4, pc}
 80054a8:	20004cb4 	.word	0x20004cb4
 80054ac:	2000e710 	.word	0x2000e710

080054b0 <syncPwmSetChannelState>:
	TIM_SYNC_PWM_ChannelState(channel, state);
 80054b0:	f00c ba82 	b.w	80119b8 <TIM_SYNC_PWM_ChannelState>

080054b4 <syncPwmSetStepMode>:
	TIM_SYNC_PWM_StepMode_Enable();
 80054b4:	f00c bbf8 	b.w	8011ca8 <TIM_SYNC_PWM_StepMode_Enable>

080054b8 <syncPwmResetStepMode>:
	TIM_SYNC_PWM_StepMode_Disable();
 80054b8:	f00c bc06 	b.w	8011cc8 <TIM_SYNC_PWM_StepMode_Disable>

080054bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054bc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054be:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <HAL_InitTick+0x3c>)
 80054c0:	4b0e      	ldr	r3, [pc, #56]	; (80054fc <HAL_InitTick+0x40>)
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
{
 80054c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054cc:	fbb0 f0f2 	udiv	r0, r0, r2
 80054d0:	fbb3 f0f0 	udiv	r0, r3, r0
 80054d4:	f001 fc4c 	bl	8006d70 <HAL_SYSTICK_Config>
 80054d8:	b908      	cbnz	r0, 80054de <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054da:	2d0f      	cmp	r5, #15
 80054dc:	d901      	bls.n	80054e2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80054de:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
 80054e2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054e4:	4602      	mov	r2, r0
 80054e6:	4629      	mov	r1, r5
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	f001 fbcc 	bl	8006c88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_InitTick+0x44>)
 80054f2:	4620      	mov	r0, r4
 80054f4:	601d      	str	r5, [r3, #0]
}
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	20000000 	.word	0x20000000
 80054fc:	2000000c 	.word	0x2000000c
 8005500:	20000004 	.word	0x20000004

08005504 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005504:	4a07      	ldr	r2, [pc, #28]	; (8005524 <HAL_Init+0x20>)
{
 8005506:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	f043 0310 	orr.w	r3, r3, #16
 800550e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005510:	2003      	movs	r0, #3
 8005512:	f001 fb9d 	bl	8006c50 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005516:	200f      	movs	r0, #15
 8005518:	f7ff ffd0 	bl	80054bc <HAL_InitTick>
  HAL_MspInit();
 800551c:	f009 fd94 	bl	800f048 <HAL_MspInit>
}
 8005520:	2000      	movs	r0, #0
 8005522:	bd08      	pop	{r3, pc}
 8005524:	40022000 	.word	0x40022000

08005528 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8005528:	4b01      	ldr	r3, [pc, #4]	; (8005530 <HAL_GetTick+0x8>)
 800552a:	6818      	ldr	r0, [r3, #0]
}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	2000e740 	.word	0x2000e740

08005534 <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F3xx_HAL_VERSION;
}
 8005534:	4800      	ldr	r0, [pc, #0]	; (8005538 <HAL_GetHalVersion+0x4>)
 8005536:	4770      	bx	lr
 8005538:	01050200 	.word	0x01050200

0800553c <HAL_ADC_MspDeInit>:
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <HAL_ADC_ConvCpltCallback>:
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop

08005544 <HAL_ADC_ConvHalfCpltCallback>:
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop

08005548 <HAL_ADC_ErrorCallback>:
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop

0800554c <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800554c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800554e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005554:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005556:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005558:	f043 0304 	orr.w	r3, r3, #4
 800555c:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800555e:	f7ff bff3 	b.w	8005548 <HAL_ADC_ErrorCallback>
 8005562:	bf00      	nop

08005564 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005564:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005566:	f7ff bfed 	b.w	8005544 <HAL_ADC_ConvHalfCpltCallback>
 800556a:	bf00      	nop

0800556c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800556c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800556e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005570:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005574:	d002      	beq.n	800557c <ADC_DMAConvCplt+0x10>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	4718      	bx	r3
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800557c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800557e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005584:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005586:	68ca      	ldr	r2, [r1, #12]
 8005588:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800558c:	d10c      	bne.n	80055a8 <ADC_DMAConvCplt+0x3c>
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	b952      	cbnz	r2, 80055a8 <ADC_DMAConvCplt+0x3c>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005598:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800559a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559c:	04d2      	lsls	r2, r2, #19
 800559e:	d403      	bmi.n	80055a8 <ADC_DMAConvCplt+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff bfc9 	b.w	8005540 <HAL_ADC_ConvCpltCallback>
 80055ae:	bf00      	nop

080055b0 <HAL_ADC_Init>:
{
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f000 8168 	beq.w	800588e <HAL_ADC_Init+0x2de>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80055be:	6803      	ldr	r3, [r0, #0]
 80055c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c4:	4604      	mov	r4, r0
 80055c6:	d00f      	beq.n	80055e8 <HAL_ADC_Init+0x38>
 80055c8:	4ab7      	ldr	r2, [pc, #732]	; (80058a8 <HAL_ADC_Init+0x2f8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00c      	beq.n	80055e8 <HAL_ADC_Init+0x38>
 80055ce:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d008      	beq.n	80055e8 <HAL_ADC_Init+0x38>
 80055d6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_ADC_Init+0x38>
 80055de:	f240 1109 	movw	r1, #265	; 0x109
 80055e2:	48b2      	ldr	r0, [pc, #712]	; (80058ac <HAL_ADC_Init+0x2fc>)
 80055e4:	f009 fd2e 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80055e8:	6863      	ldr	r3, [r4, #4]
 80055ea:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80055ee:	d004      	beq.n	80055fa <HAL_ADC_Init+0x4a>
 80055f0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80055f4:	48ad      	ldr	r0, [pc, #692]	; (80058ac <HAL_ADC_Init+0x2fc>)
 80055f6:	f009 fd25 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80055fa:	68a3      	ldr	r3, [r4, #8]
 80055fc:	f033 0318 	bics.w	r3, r3, #24
 8005600:	d004      	beq.n	800560c <HAL_ADC_Init+0x5c>
 8005602:	f240 110b 	movw	r1, #267	; 0x10b
 8005606:	48a9      	ldr	r0, [pc, #676]	; (80058ac <HAL_ADC_Init+0x2fc>)
 8005608:	f009 fd1c 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 800560c:	68e3      	ldr	r3, [r4, #12]
 800560e:	f033 0320 	bics.w	r3, r3, #32
 8005612:	d004      	beq.n	800561e <HAL_ADC_Init+0x6e>
 8005614:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8005618:	48a4      	ldr	r0, [pc, #656]	; (80058ac <HAL_ADC_Init+0x2fc>)
 800561a:	f009 fd13 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	2b01      	cmp	r3, #1
 8005622:	f200 810a 	bhi.w	800583a <HAL_ADC_Init+0x28a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005626:	69e3      	ldr	r3, [r4, #28]
 8005628:	2b01      	cmp	r3, #1
 800562a:	f200 80fb 	bhi.w	8005824 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800562e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005630:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8005634:	d004      	beq.n	8005640 <HAL_ADC_Init+0x90>
 8005636:	f240 110f 	movw	r1, #271	; 0x10f
 800563a:	489c      	ldr	r0, [pc, #624]	; (80058ac <HAL_ADC_Init+0x2fc>)
 800563c:	f009 fd02 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8005640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005642:	2b01      	cmp	r3, #1
 8005644:	d926      	bls.n	8005694 <HAL_ADC_Init+0xe4>
 8005646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800564a:	2a40      	cmp	r2, #64	; 0x40
 800564c:	d022      	beq.n	8005694 <HAL_ADC_Init+0xe4>
 800564e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005652:	2a80      	cmp	r2, #128	; 0x80
 8005654:	d01e      	beq.n	8005694 <HAL_ADC_Init+0xe4>
 8005656:	f423 7210 	bic.w	r2, r3, #576	; 0x240
 800565a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800565e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005662:	d017      	beq.n	8005694 <HAL_ADC_Init+0xe4>
 8005664:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005668:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 800566c:	d012      	beq.n	8005694 <HAL_ADC_Init+0xe4>
 800566e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005672:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005676:	d00d      	beq.n	8005694 <HAL_ADC_Init+0xe4>
 8005678:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800567c:	d00a      	beq.n	8005694 <HAL_ADC_Init+0xe4>
 800567e:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8005682:	d007      	beq.n	8005694 <HAL_ADC_Init+0xe4>
 8005684:	f5b1 5f84 	cmp.w	r1, #4224	; 0x1080
 8005688:	d004      	beq.n	8005694 <HAL_ADC_Init+0xe4>
 800568a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800568e:	4887      	ldr	r0, [pc, #540]	; (80058ac <HAL_ADC_Init+0x2fc>)
 8005690:	f009 fcd8 	bl	800f044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8005694:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005696:	2b01      	cmp	r3, #1
 8005698:	f200 80ba 	bhi.w	8005810 <HAL_ADC_Init+0x260>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800569c:	6963      	ldr	r3, [r4, #20]
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d006      	beq.n	80056b0 <HAL_ADC_Init+0x100>
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d004      	beq.n	80056b0 <HAL_ADC_Init+0x100>
 80056a6:	f44f 7189 	mov.w	r1, #274	; 0x112
 80056aa:	4880      	ldr	r0, [pc, #512]	; (80058ac <HAL_ADC_Init+0x2fc>)
 80056ac:	f009 fcca 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80056b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	f200 80d5 	bhi.w	8005862 <HAL_ADC_Init+0x2b2>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80056b8:	69a3      	ldr	r3, [r4, #24]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	f200 80c7 	bhi.w	800584e <HAL_ADC_Init+0x29e>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80056c0:	6923      	ldr	r3, [r4, #16]
 80056c2:	b193      	cbz	r3, 80056ea <HAL_ADC_Init+0x13a>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80056c4:	6a23      	ldr	r3, [r4, #32]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	2b0f      	cmp	r3, #15
 80056ca:	f200 80f9 	bhi.w	80058c0 <HAL_ADC_Init+0x310>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80056ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f200 80df 	bhi.w	8005894 <HAL_ADC_Init+0x2e4>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80056d6:	b143      	cbz	r3, 80056ea <HAL_ADC_Init+0x13a>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80056d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056da:	3b01      	subs	r3, #1
 80056dc:	2b07      	cmp	r3, #7
 80056de:	d904      	bls.n	80056ea <HAL_ADC_Init+0x13a>
 80056e0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80056e4:	4871      	ldr	r0, [pc, #452]	; (80058ac <HAL_ADC_Init+0x2fc>)
 80056e6:	f009 fcad 	bl	800f044 <assert_failed>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80056ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056ec:	f013 0310 	ands.w	r3, r3, #16
 80056f0:	d119      	bne.n	8005726 <HAL_ADC_Init+0x176>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80056f2:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	f000 80e9 	beq.w	80058cc <HAL_ADC_Init+0x31c>
 80056fa:	6821      	ldr	r1, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80056fc:	688a      	ldr	r2, [r1, #8]
 80056fe:	00d2      	lsls	r2, r2, #3
 8005700:	f140 80b9 	bpl.w	8005876 <HAL_ADC_Init+0x2c6>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005704:	688a      	ldr	r2, [r1, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005706:	0096      	lsls	r6, r2, #2
 8005708:	f100 80b5 	bmi.w	8005876 <HAL_ADC_Init+0x2c6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800570c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800570e:	06d0      	lsls	r0, r2, #27
 8005710:	f140 80eb 	bpl.w	80058ea <HAL_ADC_Init+0x33a>
    ADC_STATE_CLR_SET(hadc->State,
 8005714:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005716:	f023 0312 	bic.w	r3, r3, #18
 800571a:	f043 0310 	orr.w	r3, r3, #16
 800571e:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8005720:	2001      	movs	r0, #1
}
 8005722:	b002      	add	sp, #8
 8005724:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005726:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005728:	06dd      	lsls	r5, r3, #27
 800572a:	d4f3      	bmi.n	8005714 <HAL_ADC_Init+0x164>
 800572c:	6821      	ldr	r1, [r4, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800572e:	688b      	ldr	r3, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8005730:	f013 0304 	ands.w	r3, r3, #4
 8005734:	d1ee      	bne.n	8005714 <HAL_ADC_Init+0x164>
    ADC_STATE_CLR_SET(hadc->State,
 8005736:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005738:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800573c:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005740:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8005744:	6462      	str	r2, [r4, #68]	; 0x44
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005746:	f000 8139 	beq.w	80059bc <HAL_ADC_Init+0x40c>
 800574a:	4a57      	ldr	r2, [pc, #348]	; (80058a8 <HAL_ADC_Init+0x2f8>)
 800574c:	4291      	cmp	r1, r2
 800574e:	f000 80d0 	beq.w	80058f2 <HAL_ADC_Init+0x342>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005752:	4857      	ldr	r0, [pc, #348]	; (80058b0 <HAL_ADC_Init+0x300>)
 8005754:	4281      	cmp	r1, r0
 8005756:	f000 8134 	beq.w	80059c2 <HAL_ADC_Init+0x412>
 800575a:	4a56      	ldr	r2, [pc, #344]	; (80058b4 <HAL_ADC_Init+0x304>)
 800575c:	4291      	cmp	r1, r2
 800575e:	f000 8131 	beq.w	80059c4 <HAL_ADC_Init+0x414>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005762:	688a      	ldr	r2, [r1, #8]
 8005764:	f002 0203 	and.w	r2, r2, #3
 8005768:	2a01      	cmp	r2, #1
 800576a:	d102      	bne.n	8005772 <HAL_ADC_Init+0x1c2>
 800576c:	680a      	ldr	r2, [r1, #0]
 800576e:	07d2      	lsls	r2, r2, #31
 8005770:	d406      	bmi.n	8005780 <HAL_ADC_Init+0x1d0>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005772:	4d51      	ldr	r5, [pc, #324]	; (80058b8 <HAL_ADC_Init+0x308>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005774:	68aa      	ldr	r2, [r5, #8]
 8005776:	6860      	ldr	r0, [r4, #4]
 8005778:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800577c:	4302      	orrs	r2, r0
 800577e:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8005780:	e9d4 5202 	ldrd	r5, r2, [r4, #8]
 8005784:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005786:	69e0      	ldr	r0, [r4, #28]
 8005788:	432a      	orrs	r2, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800578a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800578c:	2e01      	cmp	r6, #1
 800578e:	bf18      	it	ne
 8005790:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8005794:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005798:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800579a:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800579e:	f000 80f0 	beq.w	8005982 <HAL_ADC_Init+0x3d2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80057a4:	2a01      	cmp	r2, #1
 80057a6:	d00d      	beq.n	80057c4 <HAL_ADC_Init+0x214>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80057a8:	4841      	ldr	r0, [pc, #260]	; (80058b0 <HAL_ADC_Init+0x300>)
 80057aa:	4281      	cmp	r1, r0
 80057ac:	f000 80f1 	beq.w	8005992 <HAL_ADC_Init+0x3e2>
 80057b0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80057b4:	4281      	cmp	r1, r0
 80057b6:	f000 80ec 	beq.w	8005992 <HAL_ADC_Init+0x3e2>
 80057ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80057c0:	4303      	orrs	r3, r0
 80057c2:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80057c4:	688a      	ldr	r2, [r1, #8]
 80057c6:	f012 0f0c 	tst.w	r2, #12
 80057ca:	d10b      	bne.n	80057e4 <HAL_ADC_Init+0x234>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80057cc:	68c8      	ldr	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80057ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80057d0:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80057d2:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80057d6:	0052      	lsls	r2, r2, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80057d8:	f020 0002 	bic.w	r0, r0, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80057dc:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80057e0:	60c8      	str	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80057e2:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80057e4:	68cd      	ldr	r5, [r1, #12]
 80057e6:	4a35      	ldr	r2, [pc, #212]	; (80058bc <HAL_ADC_Init+0x30c>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057e8:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80057ea:	402a      	ands	r2, r5
 80057ec:	4313      	orrs	r3, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057ee:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 80057f0:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057f2:	f000 80be 	beq.w	8005972 <HAL_ADC_Init+0x3c2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80057f6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80057f8:	f023 030f 	bic.w	r3, r3, #15
 80057fc:	630b      	str	r3, [r1, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80057fe:	2000      	movs	r0, #0
 8005800:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8005802:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005804:	f023 0303 	bic.w	r3, r3, #3
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	6463      	str	r3, [r4, #68]	; 0x44
 800580e:	e788      	b.n	8005722 <HAL_ADC_Init+0x172>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8005810:	f240 1111 	movw	r1, #273	; 0x111
 8005814:	4825      	ldr	r0, [pc, #148]	; (80058ac <HAL_ADC_Init+0x2fc>)
 8005816:	f009 fc15 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800581a:	6963      	ldr	r3, [r4, #20]
 800581c:	2b04      	cmp	r3, #4
 800581e:	f47f af40 	bne.w	80056a2 <HAL_ADC_Init+0xf2>
 8005822:	e745      	b.n	80056b0 <HAL_ADC_Init+0x100>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005824:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005828:	4820      	ldr	r0, [pc, #128]	; (80058ac <HAL_ADC_Init+0x2fc>)
 800582a:	f009 fc0b 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800582e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005830:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8005834:	f43f af04 	beq.w	8005640 <HAL_ADC_Init+0x90>
 8005838:	e6fd      	b.n	8005636 <HAL_ADC_Init+0x86>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800583a:	f240 110d 	movw	r1, #269	; 0x10d
 800583e:	481b      	ldr	r0, [pc, #108]	; (80058ac <HAL_ADC_Init+0x2fc>)
 8005840:	f009 fc00 	bl	800f044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005844:	69e3      	ldr	r3, [r4, #28]
 8005846:	2b01      	cmp	r3, #1
 8005848:	f67f aef1 	bls.w	800562e <HAL_ADC_Init+0x7e>
 800584c:	e7ea      	b.n	8005824 <HAL_ADC_Init+0x274>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800584e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005852:	4816      	ldr	r0, [pc, #88]	; (80058ac <HAL_ADC_Init+0x2fc>)
 8005854:	f009 fbf6 	bl	800f044 <assert_failed>
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f43f af45 	beq.w	80056ea <HAL_ADC_Init+0x13a>
 8005860:	e730      	b.n	80056c4 <HAL_ADC_Init+0x114>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8005862:	f240 1113 	movw	r1, #275	; 0x113
 8005866:	4811      	ldr	r0, [pc, #68]	; (80058ac <HAL_ADC_Init+0x2fc>)
 8005868:	f009 fbec 	bl	800f044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800586c:	69a3      	ldr	r3, [r4, #24]
 800586e:	2b01      	cmp	r3, #1
 8005870:	f67f af26 	bls.w	80056c0 <HAL_ADC_Init+0x110>
 8005874:	e7eb      	b.n	800584e <HAL_ADC_Init+0x29e>
      ADC_STATE_CLR_SET(hadc->State,
 8005876:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005878:	f023 0312 	bic.w	r3, r3, #18
 800587c:	f043 0310 	orr.w	r3, r3, #16
 8005880:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005882:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800588a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800588c:	e742      	b.n	8005714 <HAL_ADC_Init+0x164>
    return HAL_ERROR;
 800588e:	2001      	movs	r0, #1
}
 8005890:	b002      	add	sp, #8
 8005892:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8005894:	f240 1119 	movw	r1, #281	; 0x119
 8005898:	4804      	ldr	r0, [pc, #16]	; (80058ac <HAL_ADC_Init+0x2fc>)
 800589a:	f009 fbd3 	bl	800f044 <assert_failed>
 800589e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f43f af22 	beq.w	80056ea <HAL_ADC_Init+0x13a>
 80058a6:	e717      	b.n	80056d8 <HAL_ADC_Init+0x128>
 80058a8:	50000100 	.word	0x50000100
 80058ac:	08014f30 	.word	0x08014f30
 80058b0:	50000400 	.word	0x50000400
 80058b4:	50000500 	.word	0x50000500
 80058b8:	50000700 	.word	0x50000700
 80058bc:	fff0c007 	.word	0xfff0c007
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80058c0:	f44f 718c 	mov.w	r1, #280	; 0x118
 80058c4:	486d      	ldr	r0, [pc, #436]	; (8005a7c <HAL_ADC_Init+0x4cc>)
 80058c6:	f009 fbbd 	bl	800f044 <assert_failed>
 80058ca:	e700      	b.n	80056ce <HAL_ADC_Init+0x11e>
      ADC_CLEAR_ERRORCODE(hadc);
 80058cc:	64a5      	str	r5, [r4, #72]	; 0x48
      hadc->InjectionConfig.ContextQueue = 0U;
 80058ce:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80058d2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80058d6:	4620      	mov	r0, r4
 80058d8:	f008 fc50 	bl	800e17c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80058dc:	6821      	ldr	r1, [r4, #0]
 80058de:	688a      	ldr	r2, [r1, #8]
 80058e0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80058e4:	d018      	beq.n	8005918 <HAL_ADC_Init+0x368>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058e6:	462b      	mov	r3, r5
 80058e8:	e708      	b.n	80056fc <HAL_ADC_Init+0x14c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f47f af12 	bne.w	8005714 <HAL_ADC_Init+0x164>
 80058f0:	e71d      	b.n	800572e <HAL_ADC_Init+0x17e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058f2:	4d63      	ldr	r5, [pc, #396]	; (8005a80 <HAL_ADC_Init+0x4d0>)
 80058f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80058f8:	688a      	ldr	r2, [r1, #8]
 80058fa:	f002 0203 	and.w	r2, r2, #3
 80058fe:	2a01      	cmp	r2, #1
 8005900:	d062      	beq.n	80059c8 <HAL_ADC_Init+0x418>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005902:	6882      	ldr	r2, [r0, #8]
 8005904:	f002 0203 	and.w	r2, r2, #3
 8005908:	2a01      	cmp	r2, #1
 800590a:	f47f af33 	bne.w	8005774 <HAL_ADC_Init+0x1c4>
 800590e:	6802      	ldr	r2, [r0, #0]
 8005910:	07d2      	lsls	r2, r2, #31
 8005912:	f53f af35 	bmi.w	8005780 <HAL_ADC_Init+0x1d0>
 8005916:	e72d      	b.n	8005774 <HAL_ADC_Init+0x1c4>
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005918:	6888      	ldr	r0, [r1, #8]
 800591a:	f000 0003 	and.w	r0, r0, #3
 800591e:	2801      	cmp	r0, #1
 8005920:	d062      	beq.n	80059e8 <HAL_ADC_Init+0x438>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005922:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005924:	06dd      	lsls	r5, r3, #27
 8005926:	d473      	bmi.n	8005a10 <HAL_ADC_Init+0x460>
          ADC_STATE_CLR_SET(hadc->State,
 8005928:	6c62      	ldr	r2, [r4, #68]	; 0x44
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800592a:	4b56      	ldr	r3, [pc, #344]	; (8005a84 <HAL_ADC_Init+0x4d4>)
 800592c:	4856      	ldr	r0, [pc, #344]	; (8005a88 <HAL_ADC_Init+0x4d8>)
 800592e:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8005930:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005934:	f022 0202 	bic.w	r2, r2, #2
 8005938:	f042 0202 	orr.w	r2, r2, #2
 800593c:	6462      	str	r2, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800593e:	688a      	ldr	r2, [r1, #8]
 8005940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005944:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005946:	fba0 2303 	umull	r2, r3, r0, r3
 800594a:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800594c:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800594e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005952:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005954:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005958:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800595a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800595c:	9b01      	ldr	r3, [sp, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f43f aecc 	beq.w	80056fc <HAL_ADC_Init+0x14c>
            wait_loop_index--;
 8005964:	9b01      	ldr	r3, [sp, #4]
 8005966:	3b01      	subs	r3, #1
 8005968:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f9      	bne.n	8005964 <HAL_ADC_Init+0x3b4>
 8005970:	e6c4      	b.n	80056fc <HAL_ADC_Init+0x14c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005972:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005974:	6a23      	ldr	r3, [r4, #32]
 8005976:	f022 020f 	bic.w	r2, r2, #15
 800597a:	3b01      	subs	r3, #1
 800597c:	4313      	orrs	r3, r2
 800597e:	630b      	str	r3, [r1, #48]	; 0x30
 8005980:	e73d      	b.n	80057fe <HAL_ADC_Init+0x24e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005982:	bb30      	cbnz	r0, 80059d2 <HAL_ADC_Init+0x422>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005984:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005986:	3a01      	subs	r2, #1
 8005988:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800598c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005990:	e707      	b.n	80057a2 <HAL_ADC_Init+0x1f2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005992:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8005996:	d03d      	beq.n	8005a14 <HAL_ADC_Init+0x464>
 8005998:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800599c:	d056      	beq.n	8005a4c <HAL_ADC_Init+0x49c>
 800599e:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 80059a2:	d056      	beq.n	8005a52 <HAL_ADC_Init+0x4a2>
 80059a4:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 80059a8:	d056      	beq.n	8005a58 <HAL_ADC_Init+0x4a8>
 80059aa:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 80059ae:	d056      	beq.n	8005a5e <HAL_ADC_Init+0x4ae>
 80059b0:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 80059b4:	bf08      	it	eq
 80059b6:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80059ba:	e700      	b.n	80057be <HAL_ADC_Init+0x20e>
 80059bc:	4833      	ldr	r0, [pc, #204]	; (8005a8c <HAL_ADC_Init+0x4dc>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059be:	4d30      	ldr	r5, [pc, #192]	; (8005a80 <HAL_ADC_Init+0x4d0>)
 80059c0:	e79a      	b.n	80058f8 <HAL_ADC_Init+0x348>
 80059c2:	4833      	ldr	r0, [pc, #204]	; (8005a90 <HAL_ADC_Init+0x4e0>)
 80059c4:	4d33      	ldr	r5, [pc, #204]	; (8005a94 <HAL_ADC_Init+0x4e4>)
 80059c6:	e797      	b.n	80058f8 <HAL_ADC_Init+0x348>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80059c8:	680a      	ldr	r2, [r1, #0]
 80059ca:	07d6      	lsls	r6, r2, #31
 80059cc:	f53f aed8 	bmi.w	8005780 <HAL_ADC_Init+0x1d0>
 80059d0:	e797      	b.n	8005902 <HAL_ADC_Init+0x352>
        ADC_STATE_CLR_SET(hadc->State,
 80059d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80059d4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80059d8:	f042 0220 	orr.w	r2, r2, #32
 80059dc:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80059e0:	f042 0201 	orr.w	r2, r2, #1
 80059e4:	64a2      	str	r2, [r4, #72]	; 0x48
 80059e6:	e6dc      	b.n	80057a2 <HAL_ADC_Init+0x1f2>
  if (ADC_IS_ENABLE(hadc) != RESET )
 80059e8:	680b      	ldr	r3, [r1, #0]
 80059ea:	f013 0301 	ands.w	r3, r3, #1
 80059ee:	d028      	beq.n	8005a42 <HAL_ADC_Init+0x492>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80059f0:	688b      	ldr	r3, [r1, #8]
 80059f2:	f003 030d 	and.w	r3, r3, #13
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d00f      	beq.n	8005a1a <HAL_ADC_Init+0x46a>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059fc:	f043 0310 	orr.w	r3, r3, #16
 8005a00:	6463      	str	r3, [r4, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a0a:	6c62      	ldr	r2, [r4, #68]	; 0x44
      
      return HAL_ERROR;
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	e675      	b.n	80056fc <HAL_ADC_Init+0x14c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005a10:	4613      	mov	r3, r2
 8005a12:	e673      	b.n	80056fc <HAL_ADC_Init+0x14c>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005a14:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005a18:	e6d1      	b.n	80057be <HAL_ADC_Init+0x20e>
      __HAL_ADC_DISABLE(hadc);
 8005a1a:	688b      	ldr	r3, [r1, #8]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	f043 0302 	orr.w	r3, r3, #2
 8005a22:	608b      	str	r3, [r1, #8]
 8005a24:	600a      	str	r2, [r1, #0]
    tickstart = HAL_GetTick();
 8005a26:	f7ff fd7f 	bl	8005528 <HAL_GetTick>
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	e004      	b.n	8005a38 <HAL_ADC_Init+0x488>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a2e:	f7ff fd7b 	bl	8005528 <HAL_GetTick>
 8005a32:	1b40      	subs	r0, r0, r5
 8005a34:	2802      	cmp	r0, #2
 8005a36:	d815      	bhi.n	8005a64 <HAL_ADC_Init+0x4b4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005a38:	6821      	ldr	r1, [r4, #0]
 8005a3a:	688b      	ldr	r3, [r1, #8]
 8005a3c:	f013 0301 	ands.w	r3, r3, #1
 8005a40:	d1f5      	bne.n	8005a2e <HAL_ADC_Init+0x47e>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005a44:	06d0      	lsls	r0, r2, #27
 8005a46:	f53f ae59 	bmi.w	80056fc <HAL_ADC_Init+0x14c>
 8005a4a:	e76d      	b.n	8005928 <HAL_ADC_Init+0x378>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005a4c:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8005a50:	e6b5      	b.n	80057be <HAL_ADC_Init+0x20e>
 8005a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a56:	e6b2      	b.n	80057be <HAL_ADC_Init+0x20e>
 8005a58:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8005a5c:	e6af      	b.n	80057be <HAL_ADC_Init+0x20e>
 8005a5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005a62:	e6ac      	b.n	80057be <HAL_ADC_Init+0x20e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	f043 0310 	orr.w	r3, r3, #16
 8005a6c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	64a3      	str	r3, [r4, #72]	; 0x48
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e63f      	b.n	80056fc <HAL_ADC_Init+0x14c>
 8005a7c:	08014f30 	.word	0x08014f30
 8005a80:	50000300 	.word	0x50000300
 8005a84:	2000000c 	.word	0x2000000c
 8005a88:	431bde83 	.word	0x431bde83
 8005a8c:	50000100 	.word	0x50000100
 8005a90:	50000500 	.word	0x50000500
 8005a94:	50000700 	.word	0x50000700

08005a98 <HAL_ADC_DeInit>:
  if(hadc == NULL)
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	f000 80e8 	beq.w	8005c6e <HAL_ADC_DeInit+0x1d6>
{
 8005a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005aa0:	6803      	ldr	r3, [r0, #0]
 8005aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	f000 80d3 	beq.w	8005c52 <HAL_ADC_DeInit+0x1ba>
 8005aac:	4da7      	ldr	r5, [pc, #668]	; (8005d4c <HAL_ADC_DeInit+0x2b4>)
 8005aae:	42ab      	cmp	r3, r5
 8005ab0:	f000 80cf 	beq.w	8005c52 <HAL_ADC_DeInit+0x1ba>
 8005ab4:	4ea6      	ldr	r6, [pc, #664]	; (8005d50 <HAL_ADC_DeInit+0x2b8>)
 8005ab6:	42b3      	cmp	r3, r6
 8005ab8:	f000 80cb 	beq.w	8005c52 <HAL_ADC_DeInit+0x1ba>
 8005abc:	4fa5      	ldr	r7, [pc, #660]	; (8005d54 <HAL_ADC_DeInit+0x2bc>)
 8005abe:	42bb      	cmp	r3, r7
 8005ac0:	f000 80c7 	beq.w	8005c52 <HAL_ADC_DeInit+0x1ba>
 8005ac4:	f240 3122 	movw	r1, #802	; 0x322
 8005ac8:	48a3      	ldr	r0, [pc, #652]	; (8005d58 <HAL_ADC_DeInit+0x2c0>)
 8005aca:	f009 fabb 	bl	800f044 <assert_failed>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005ace:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	f042 0202 	orr.w	r2, r2, #2
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
  uint32_t tickstart = 0U;
  uint32_t Conversion_Timeout_CPU_cycles = 0U;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005ada:	6462      	str	r2, [r4, #68]	; 0x44
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005adc:	f000 80bd 	beq.w	8005c5a <HAL_ADC_DeInit+0x1c2>
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	f000 80ba 	beq.w	8005c5a <HAL_ADC_DeInit+0x1c2>
 8005ae6:	42b3      	cmp	r3, r6
 8005ae8:	f000 80b7 	beq.w	8005c5a <HAL_ADC_DeInit+0x1c2>
 8005aec:	42bb      	cmp	r3, r7
 8005aee:	f000 80b4 	beq.w	8005c5a <HAL_ADC_DeInit+0x1c2>
 8005af2:	f641 415d 	movw	r1, #7261	; 0x1c5d
 8005af6:	4898      	ldr	r0, [pc, #608]	; (8005d58 <HAL_ADC_DeInit+0x2c0>)
 8005af8:	f009 faa4 	bl	800f044 <assert_failed>
 8005afc:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	f012 0f0c 	tst.w	r2, #12
 8005b04:	d026      	beq.n	8005b54 <HAL_ADC_DeInit+0xbc>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	0191      	lsls	r1, r2, #6
 8005b0a:	d506      	bpl.n	8005b1a <HAL_ADC_DeInit+0x82>
 8005b0c:	69e2      	ldr	r2, [r4, #28]
 8005b0e:	2a01      	cmp	r2, #1
 8005b10:	d103      	bne.n	8005b1a <HAL_ADC_DeInit+0x82>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005b12:	69a2      	ldr	r2, [r4, #24]
 8005b14:	2a01      	cmp	r2, #1
 8005b16:	f000 80fe 	beq.w	8005d16 <HAL_ADC_DeInit+0x27e>
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	0750      	lsls	r0, r2, #29
 8005b1e:	d506      	bpl.n	8005b2e <HAL_ADC_DeInit+0x96>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005b20:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005b22:	0792      	lsls	r2, r2, #30
 8005b24:	d403      	bmi.n	8005b2e <HAL_ADC_DeInit+0x96>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	f042 0210 	orr.w	r2, r2, #16
 8005b2c:	609a      	str	r2, [r3, #8]

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	0715      	lsls	r5, r2, #28
 8005b32:	f100 809e 	bmi.w	8005c72 <HAL_ADC_DeInit+0x1da>

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005b36:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005b38:	f7ff fcf6 	bl	8005528 <HAL_GetTick>
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	e005      	b.n	8005b4c <HAL_ADC_DeInit+0xb4>
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005b40:	f7ff fcf2 	bl	8005528 <HAL_GetTick>
 8005b44:	1b80      	subs	r0, r0, r6
 8005b46:	280b      	cmp	r0, #11
 8005b48:	f200 80ca 	bhi.w	8005ce0 <HAL_ADC_DeInit+0x248>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	422a      	tst	r2, r5
 8005b52:	d1f5      	bne.n	8005b40 <HAL_ADC_DeInit+0xa8>
    SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005b5a:	60da      	str	r2, [r3, #12]
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005b5c:	6898      	ldr	r0, [r3, #8]
 8005b5e:	f000 0003 	and.w	r0, r0, #3
 8005b62:	2801      	cmp	r0, #1
 8005b64:	f000 808e 	beq.w	8005c84 <HAL_ADC_DeInit+0x1ec>
      hadc->State = HAL_ADC_STATE_READY;
 8005b68:	2201      	movs	r2, #1
 8005b6a:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8005b6c:	685a      	ldr	r2, [r3, #4]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 8005b6e:	497b      	ldr	r1, [pc, #492]	; (8005d5c <HAL_ADC_DeInit+0x2c4>)
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 8005b70:	4f7b      	ldr	r7, [pc, #492]	; (8005d60 <HAL_ADC_DeInit+0x2c8>)
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 8005b72:	487c      	ldr	r0, [pc, #496]	; (8005d64 <HAL_ADC_DeInit+0x2cc>)
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005b74:	4e7c      	ldr	r6, [pc, #496]	; (8005d68 <HAL_ADC_DeInit+0x2d0>)
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8005b76:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8005b7a:	f022 0207 	bic.w	r2, r2, #7
 8005b7e:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8005b80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b84:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0 | ADC_CR_ADCALDIF);
 8005b86:	689d      	ldr	r5, [r3, #8]
 8005b88:	f025 45e0 	bic.w	r5, r5, #1879048192	; 0x70000000
 8005b8c:	609d      	str	r5, [r3, #8]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1);
 8005b8e:	689d      	ldr	r5, [r3, #8]
 8005b90:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005b94:	609d      	str	r5, [r3, #8]
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	4011      	ands	r1, r2
 8005b9a:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 8005b9c:	695a      	ldr	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8005b9e:	4973      	ldr	r1, [pc, #460]	; (8005d6c <HAL_ADC_DeInit+0x2d4>)
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 8005ba0:	403a      	ands	r2, r7
 8005ba2:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8005baa:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8005bac:	6a1d      	ldr	r5, [r3, #32]
 8005bae:	f005 25f0 	and.w	r5, r5, #4026593280	; 0xf000f000
 8005bb2:	621d      	str	r5, [r3, #32]
    CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8005bb4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005bb6:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 8005bba:	625d      	str	r5, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8005bbc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005bbe:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 8005bc2:	629d      	str	r5, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 8005bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bc6:	4010      	ands	r0, r2
 8005bc8:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005bca:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8005bcc:	4868      	ldr	r0, [pc, #416]	; (8005d70 <HAL_ADC_DeInit+0x2d8>)
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 8005bce:	4035      	ands	r5, r6
 8005bd0:	635d      	str	r5, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 8005bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd4:	4032      	ands	r2, r6
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8005bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bda:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8005bde:	f022 0207 	bic.w	r2, r2, #7
 8005be2:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8005be4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005be6:	400a      	ands	r2, r1
 8005be8:	661a      	str	r2, [r3, #96]	; 0x60
    CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8005bea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005bec:	400a      	ands	r2, r1
 8005bee:	665a      	str	r2, [r3, #100]	; 0x64
    CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8005bf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005bf2:	400a      	ands	r2, r1
 8005bf4:	669a      	str	r2, [r3, #104]	; 0x68
    CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8005bf6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005bf8:	4011      	ands	r1, r2
 8005bfa:	66d9      	str	r1, [r3, #108]	; 0x6c
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8005bfc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005c00:	4002      	ands	r2, r0
 8005c02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8005c06:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005c0a:	4002      	ands	r2, r0
 8005c0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8005c10:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005c14:	4002      	ands	r2, r0
 8005c16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8005c1a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8005c22:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8005c26:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c2a:	d066      	beq.n	8005cfa <HAL_ADC_DeInit+0x262>
 8005c2c:	4a47      	ldr	r2, [pc, #284]	; (8005d4c <HAL_ADC_DeInit+0x2b4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d03a      	beq.n	8005ca8 <HAL_ADC_DeInit+0x210>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005c32:	4947      	ldr	r1, [pc, #284]	; (8005d50 <HAL_ADC_DeInit+0x2b8>)
 8005c34:	428b      	cmp	r3, r1
 8005c36:	d063      	beq.n	8005d00 <HAL_ADC_DeInit+0x268>
 8005c38:	4a46      	ldr	r2, [pc, #280]	; (8005d54 <HAL_ADC_DeInit+0x2bc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d061      	beq.n	8005d02 <HAL_ADC_DeInit+0x26a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	f002 0203 	and.w	r2, r2, #3
 8005c44:	2a01      	cmp	r2, #1
 8005c46:	d102      	bne.n	8005c4e <HAL_ADC_DeInit+0x1b6>
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	07df      	lsls	r7, r3, #31
 8005c4c:	d43d      	bmi.n	8005cca <HAL_ADC_DeInit+0x232>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c4e:	4849      	ldr	r0, [pc, #292]	; (8005d74 <HAL_ADC_DeInit+0x2dc>)
 8005c50:	e037      	b.n	8005cc2 <HAL_ADC_DeInit+0x22a>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005c52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005c54:	f042 0202 	orr.w	r2, r2, #2
 8005c58:	6462      	str	r2, [r4, #68]	; 0x44
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	f012 0f0c 	tst.w	r2, #12
 8005c60:	f43f af78 	beq.w	8005b54 <HAL_ADC_DeInit+0xbc>
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	0191      	lsls	r1, r2, #6
 8005c68:	f57f af57 	bpl.w	8005b1a <HAL_ADC_DeInit+0x82>
 8005c6c:	e74e      	b.n	8005b0c <HAL_ADC_DeInit+0x74>
     return HAL_ERROR;
 8005c6e:	2001      	movs	r0, #1
}
 8005c70:	4770      	bx	lr
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005c72:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005c74:	0790      	lsls	r0, r2, #30
 8005c76:	f53f af5e 	bmi.w	8005b36 <HAL_ADC_DeInit+0x9e>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	f042 0220 	orr.w	r2, r2, #32
 8005c80:	609a      	str	r2, [r3, #8]
 8005c82:	e758      	b.n	8005b36 <HAL_ADC_DeInit+0x9e>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	07d1      	lsls	r1, r2, #31
 8005c88:	f57f af6e 	bpl.w	8005b68 <HAL_ADC_DeInit+0xd0>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	f002 020d 	and.w	r2, r2, #13
 8005c92:	2a01      	cmp	r2, #1
 8005c94:	d050      	beq.n	8005d38 <HAL_ADC_DeInit+0x2a0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c98:	f043 0310 	orr.w	r3, r3, #16
 8005c9c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	64a3      	str	r3, [r4, #72]	; 0x48
 8005ca6:	e017      	b.n	8005cd8 <HAL_ADC_DeInit+0x240>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ca8:	4833      	ldr	r0, [pc, #204]	; (8005d78 <HAL_ADC_DeInit+0x2e0>)
 8005caa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	f002 0203 	and.w	r2, r2, #3
 8005cb4:	2a01      	cmp	r2, #1
 8005cb6:	d02a      	beq.n	8005d0e <HAL_ADC_DeInit+0x276>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 8005cb8:	688b      	ldr	r3, [r1, #8]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d021      	beq.n	8005d06 <HAL_ADC_DeInit+0x26e>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_CKMODE |
 8005cc2:	6882      	ldr	r2, [r0, #8]
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <HAL_ADC_DeInit+0x2e4>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	6083      	str	r3, [r0, #8]
    HAL_ADC_MspDeInit(hadc);
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f7ff fc36 	bl	800553c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	64a3      	str	r3, [r4, #72]	; 0x48
    hadc->State = HAL_ADC_STATE_RESET;
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ce0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ce2:	f043 0310 	orr.w	r3, r3, #16
 8005ce6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ce8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	64a3      	str	r3, [r4, #72]	; 0x48
  __HAL_UNLOCK(hadc);
 8005cf0:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 8005cf2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005cf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfa:	4914      	ldr	r1, [pc, #80]	; (8005d4c <HAL_ADC_DeInit+0x2b4>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cfc:	481e      	ldr	r0, [pc, #120]	; (8005d78 <HAL_ADC_DeInit+0x2e0>)
 8005cfe:	e7d6      	b.n	8005cae <HAL_ADC_DeInit+0x216>
 8005d00:	4914      	ldr	r1, [pc, #80]	; (8005d54 <HAL_ADC_DeInit+0x2bc>)
 8005d02:	481c      	ldr	r0, [pc, #112]	; (8005d74 <HAL_ADC_DeInit+0x2dc>)
 8005d04:	e7d3      	b.n	8005cae <HAL_ADC_DeInit+0x216>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 8005d06:	680b      	ldr	r3, [r1, #0]
 8005d08:	07dd      	lsls	r5, r3, #31
 8005d0a:	d4de      	bmi.n	8005cca <HAL_ADC_DeInit+0x232>
 8005d0c:	e7d9      	b.n	8005cc2 <HAL_ADC_DeInit+0x22a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	07de      	lsls	r6, r3, #31
 8005d12:	d4da      	bmi.n	8005cca <HAL_ADC_DeInit+0x232>
 8005d14:	e7d0      	b.n	8005cb8 <HAL_ADC_DeInit+0x220>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	0652      	lsls	r2, r2, #25
 8005d1a:	d406      	bmi.n	8005d2a <HAL_ADC_DeInit+0x292>
 8005d1c:	4a18      	ldr	r2, [pc, #96]	; (8005d80 <HAL_ADC_DeInit+0x2e8>)
 8005d1e:	e001      	b.n	8005d24 <HAL_ADC_DeInit+0x28c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005d20:	3a01      	subs	r2, #1
 8005d22:	d0dd      	beq.n	8005ce0 <HAL_ADC_DeInit+0x248>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	064f      	lsls	r7, r1, #25
 8005d28:	d5fa      	bpl.n	8005d20 <HAL_ADC_DeInit+0x288>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	0756      	lsls	r6, r2, #29
 8005d32:	d431      	bmi.n	8005d98 <HAL_ADC_DeInit+0x300>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005d34:	2504      	movs	r5, #4
 8005d36:	e6ff      	b.n	8005b38 <HAL_ADC_DeInit+0xa0>
      __HAL_ADC_DISABLE(hadc);
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	2103      	movs	r1, #3
 8005d3c:	f042 0202 	orr.w	r2, r2, #2
 8005d40:	609a      	str	r2, [r3, #8]
 8005d42:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005d44:	f7ff fbf0 	bl	8005528 <HAL_GetTick>
 8005d48:	4605      	mov	r5, r0
 8005d4a:	e020      	b.n	8005d8e <HAL_ADC_DeInit+0x2f6>
 8005d4c:	50000100 	.word	0x50000100
 8005d50:	50000400 	.word	0x50000400
 8005d54:	50000500 	.word	0x50000500
 8005d58:	08014f30 	.word	0x08014f30
 8005d5c:	80008004 	.word	0x80008004
 8005d60:	c0000007 	.word	0xc0000007
 8005d64:	e0820830 	.word	0xe0820830
 8005d68:	e0820820 	.word	0xe0820820
 8005d6c:	03fff000 	.word	0x03fff000
 8005d70:	fff80000 	.word	0xfff80000
 8005d74:	50000700 	.word	0x50000700
 8005d78:	50000300 	.word	0x50000300
 8005d7c:	fe3c10e0 	.word	0xfe3c10e0
 8005d80:	00099400 	.word	0x00099400
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d84:	f7ff fbd0 	bl	8005528 <HAL_GetTick>
 8005d88:	1b40      	subs	r0, r0, r5
 8005d8a:	2802      	cmp	r0, #2
 8005d8c:	d8a8      	bhi.n	8005ce0 <HAL_ADC_DeInit+0x248>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	07d2      	lsls	r2, r2, #31
 8005d94:	d4f6      	bmi.n	8005d84 <HAL_ADC_DeInit+0x2ec>
 8005d96:	e6e7      	b.n	8005b68 <HAL_ADC_DeInit+0xd0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005d98:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005d9a:	0791      	lsls	r1, r2, #30
 8005d9c:	d4ca      	bmi.n	8005d34 <HAL_ADC_DeInit+0x29c>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	f042 0210 	orr.w	r2, r2, #16
 8005da4:	609a      	str	r2, [r3, #8]
 8005da6:	e7c5      	b.n	8005d34 <HAL_ADC_DeInit+0x29c>

08005da8 <HAL_ADC_Start>:
{
 8005da8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005daa:	6803      	ldr	r3, [r0, #0]
 8005dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005db0:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005db2:	d010      	beq.n	8005dd6 <HAL_ADC_Start+0x2e>
 8005db4:	4a65      	ldr	r2, [pc, #404]	; (8005f4c <HAL_ADC_Start+0x1a4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00d      	beq.n	8005dd6 <HAL_ADC_Start+0x2e>
 8005dba:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_ADC_Start+0x2e>
 8005dc2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d005      	beq.n	8005dd6 <HAL_ADC_Start+0x2e>
 8005dca:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8005dce:	4860      	ldr	r0, [pc, #384]	; (8005f50 <HAL_ADC_Start+0x1a8>)
 8005dd0:	f009 f938 	bl	800f044 <assert_failed>
 8005dd4:	6823      	ldr	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	0750      	lsls	r0, r2, #29
 8005dda:	d41c      	bmi.n	8005e16 <HAL_ADC_Start+0x6e>
    __HAL_LOCK(hadc);
 8005ddc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005de0:	2a01      	cmp	r2, #1
 8005de2:	d018      	beq.n	8005e16 <HAL_ADC_Start+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005de4:	689a      	ldr	r2, [r3, #8]
    __HAL_LOCK(hadc);
 8005de6:	2101      	movs	r1, #1
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005de8:	f002 0203 	and.w	r2, r2, #3
 8005dec:	428a      	cmp	r2, r1
    __HAL_LOCK(hadc);
 8005dee:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005df2:	d012      	beq.n	8005e1a <HAL_ADC_Start+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005df4:	6899      	ldr	r1, [r3, #8]
 8005df6:	4a57      	ldr	r2, [pc, #348]	; (8005f54 <HAL_ADC_Start+0x1ac>)
 8005df8:	4211      	tst	r1, r2
 8005dfa:	d068      	beq.n	8005ece <HAL_ADC_Start+0x126>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005dfe:	f043 0310 	orr.w	r3, r3, #16
 8005e02:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005e12:	2001      	movs	r0, #1
}
 8005e14:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8005e16:	2002      	movs	r0, #2
}
 8005e18:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	07d1      	lsls	r1, r2, #31
 8005e1e:	d5e9      	bpl.n	8005df4 <HAL_ADC_Start+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8005e20:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e22:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8005e32:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005e34:	d012      	beq.n	8005e5c <HAL_ADC_Start+0xb4>
 8005e36:	4a45      	ldr	r2, [pc, #276]	; (8005f4c <HAL_ADC_Start+0x1a4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d075      	beq.n	8005f28 <HAL_ADC_Start+0x180>
 8005e3c:	4a46      	ldr	r2, [pc, #280]	; (8005f58 <HAL_ADC_Start+0x1b0>)
 8005e3e:	6892      	ldr	r2, [r2, #8]
 8005e40:	06d1      	lsls	r1, r2, #27
 8005e42:	d00d      	beq.n	8005e60 <HAL_ADC_Start+0xb8>
 8005e44:	4945      	ldr	r1, [pc, #276]	; (8005f5c <HAL_ADC_Start+0x1b4>)
 8005e46:	428b      	cmp	r3, r1
 8005e48:	d00a      	beq.n	8005e60 <HAL_ADC_Start+0xb8>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e4a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e50:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005e52:	68ca      	ldr	r2, [r1, #12]
 8005e54:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8005e58:	b17a      	cbz	r2, 8005e7a <HAL_ADC_Start+0xd2>
 8005e5a:	e008      	b.n	8005e6e <HAL_ADC_Start+0xc6>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005e5c:	4a40      	ldr	r2, [pc, #256]	; (8005f60 <HAL_ADC_Start+0x1b8>)
 8005e5e:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e60:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e62:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005e66:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	0192      	lsls	r2, r2, #6
 8005e6c:	d505      	bpl.n	8005e7a <HAL_ADC_Start+0xd2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005e6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005e74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e78:	6462      	str	r2, [r4, #68]	; 0x44
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e80:	bf1c      	itt	ne
 8005e82:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 8005e84:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8005e88:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8005e8a:	2000      	movs	r0, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e8c:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 8005e92:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e96:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005e98:	d02b      	beq.n	8005ef2 <HAL_ADC_Start+0x14a>
 8005e9a:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <HAL_ADC_Start+0x1a4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d033      	beq.n	8005f08 <HAL_ADC_Start+0x160>
 8005ea0:	4a2d      	ldr	r2, [pc, #180]	; (8005f58 <HAL_ADC_Start+0x1b0>)
 8005ea2:	6891      	ldr	r1, [r2, #8]
 8005ea4:	06cc      	lsls	r4, r1, #27
 8005ea6:	d00c      	beq.n	8005ec2 <HAL_ADC_Start+0x11a>
 8005ea8:	6891      	ldr	r1, [r2, #8]
 8005eaa:	f001 011f 	and.w	r1, r1, #31
 8005eae:	2905      	cmp	r1, #5
 8005eb0:	d007      	beq.n	8005ec2 <HAL_ADC_Start+0x11a>
 8005eb2:	6892      	ldr	r2, [r2, #8]
 8005eb4:	f002 021f 	and.w	r2, r2, #31
 8005eb8:	2a09      	cmp	r2, #9
 8005eba:	d002      	beq.n	8005ec2 <HAL_ADC_Start+0x11a>
 8005ebc:	4a27      	ldr	r2, [pc, #156]	; (8005f5c <HAL_ADC_Start+0x1b4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d1a8      	bne.n	8005e14 <HAL_ADC_Start+0x6c>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	f042 0204 	orr.w	r2, r2, #4
 8005ec8:	609a      	str	r2, [r3, #8]
    tmp_hal_status = ADC_Enable(hadc);
 8005eca:	2000      	movs	r0, #0
}
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	f042 0201 	orr.w	r2, r2, #1
 8005ed4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005ed6:	f7ff fb27 	bl	8005528 <HAL_GetTick>
 8005eda:	4605      	mov	r5, r0
 8005edc:	e004      	b.n	8005ee8 <HAL_ADC_Start+0x140>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ede:	f7ff fb23 	bl	8005528 <HAL_GetTick>
 8005ee2:	1b40      	subs	r0, r0, r5
 8005ee4:	2802      	cmp	r0, #2
 8005ee6:	d889      	bhi.n	8005dfc <HAL_ADC_Start+0x54>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	07d2      	lsls	r2, r2, #31
 8005eee:	d5f6      	bpl.n	8005ede <HAL_ADC_Start+0x136>
 8005ef0:	e796      	b.n	8005e20 <HAL_ADC_Start+0x78>
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005ef2:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <HAL_ADC_Start+0x1b8>)
 8005ef4:	6891      	ldr	r1, [r2, #8]
 8005ef6:	06c9      	lsls	r1, r1, #27
 8005ef8:	d0e3      	beq.n	8005ec2 <HAL_ADC_Start+0x11a>
 8005efa:	6891      	ldr	r1, [r2, #8]
 8005efc:	f001 011f 	and.w	r1, r1, #31
 8005f00:	2905      	cmp	r1, #5
 8005f02:	d0de      	beq.n	8005ec2 <HAL_ADC_Start+0x11a>
 8005f04:	6892      	ldr	r2, [r2, #8]
 8005f06:	e7dc      	b.n	8005ec2 <HAL_ADC_Start+0x11a>
 8005f08:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005f0c:	6891      	ldr	r1, [r2, #8]
 8005f0e:	06cd      	lsls	r5, r1, #27
 8005f10:	d0d7      	beq.n	8005ec2 <HAL_ADC_Start+0x11a>
 8005f12:	6891      	ldr	r1, [r2, #8]
 8005f14:	f001 011f 	and.w	r1, r1, #31
 8005f18:	2905      	cmp	r1, #5
 8005f1a:	d0d2      	beq.n	8005ec2 <HAL_ADC_Start+0x11a>
 8005f1c:	6892      	ldr	r2, [r2, #8]
 8005f1e:	f002 021f 	and.w	r2, r2, #31
 8005f22:	2a09      	cmp	r2, #9
 8005f24:	d0cd      	beq.n	8005ec2 <HAL_ADC_Start+0x11a>
}
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005f28:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005f2c:	6892      	ldr	r2, [r2, #8]
 8005f2e:	06d0      	lsls	r0, r2, #27
 8005f30:	d096      	beq.n	8005e60 <HAL_ADC_Start+0xb8>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f32:	6c62      	ldr	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005f34:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005f3c:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005f3e:	68ca      	ldr	r2, [r1, #12]
 8005f40:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8005f44:	2a00      	cmp	r2, #0
 8005f46:	d098      	beq.n	8005e7a <HAL_ADC_Start+0xd2>
 8005f48:	e791      	b.n	8005e6e <HAL_ADC_Start+0xc6>
 8005f4a:	bf00      	nop
 8005f4c:	50000100 	.word	0x50000100
 8005f50:	08014f30 	.word	0x08014f30
 8005f54:	8000003f 	.word	0x8000003f
 8005f58:	50000700 	.word	0x50000700
 8005f5c:	50000400 	.word	0x50000400
 8005f60:	50000300 	.word	0x50000300

08005f64 <HAL_ADC_Start_DMA>:
{
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	460e      	mov	r6, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005f68:	6801      	ldr	r1, [r0, #0]
 8005f6a:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
{
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4617      	mov	r7, r2
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005f72:	d010      	beq.n	8005f96 <HAL_ADC_Start_DMA+0x32>
 8005f74:	4b62      	ldr	r3, [pc, #392]	; (8006100 <HAL_ADC_Start_DMA+0x19c>)
 8005f76:	4299      	cmp	r1, r3
 8005f78:	d00d      	beq.n	8005f96 <HAL_ADC_Start_DMA+0x32>
 8005f7a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005f7e:	4299      	cmp	r1, r3
 8005f80:	d009      	beq.n	8005f96 <HAL_ADC_Start_DMA+0x32>
 8005f82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005f86:	4299      	cmp	r1, r3
 8005f88:	d005      	beq.n	8005f96 <HAL_ADC_Start_DMA+0x32>
 8005f8a:	f640 1128 	movw	r1, #2344	; 0x928
 8005f8e:	485d      	ldr	r0, [pc, #372]	; (8006104 <HAL_ADC_Start_DMA+0x1a0>)
 8005f90:	f009 f858 	bl	800f044 <assert_failed>
 8005f94:	6821      	ldr	r1, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f96:	688b      	ldr	r3, [r1, #8]
 8005f98:	0758      	lsls	r0, r3, #29
 8005f9a:	d434      	bmi.n	8006006 <HAL_ADC_Start_DMA+0xa2>
    __HAL_LOCK(hadc);
 8005f9c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d030      	beq.n	8006006 <HAL_ADC_Start_DMA+0xa2>
 8005fa4:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005fa6:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
    __HAL_LOCK(hadc);
 8005faa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005fae:	d00f      	beq.n	8005fd0 <HAL_ADC_Start_DMA+0x6c>
 8005fb0:	4b53      	ldr	r3, [pc, #332]	; (8006100 <HAL_ADC_Start_DMA+0x19c>)
 8005fb2:	4299      	cmp	r1, r3
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_ADC_Start_DMA+0x6c>
 8005fb6:	4b54      	ldr	r3, [pc, #336]	; (8006108 <HAL_ADC_Start_DMA+0x1a4>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f013 0f1f 	tst.w	r3, #31
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b96b      	cbnz	r3, 8005fe2 <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005fcc:	2001      	movs	r0, #1
}
 8005fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8005fd0:	4b4e      	ldr	r3, [pc, #312]	; (800610c <HAL_ADC_Start_DMA+0x1a8>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f013 0f1f 	tst.w	r3, #31
 8005fd8:	bf0c      	ite	eq
 8005fda:	2301      	moveq	r3, #1
 8005fdc:	2300      	movne	r3, #0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f1      	beq.n	8005fc6 <HAL_ADC_Start_DMA+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005fe2:	688b      	ldr	r3, [r1, #8]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d00e      	beq.n	800600a <HAL_ADC_Start_DMA+0xa6>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005fec:	688a      	ldr	r2, [r1, #8]
 8005fee:	4b48      	ldr	r3, [pc, #288]	; (8006110 <HAL_ADC_Start_DMA+0x1ac>)
 8005ff0:	421a      	tst	r2, r3
 8005ff2:	d05a      	beq.n	80060aa <HAL_ADC_Start_DMA+0x146>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ff4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ff6:	f043 0310 	orr.w	r3, r3, #16
 8005ffa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ffc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	64a3      	str	r3, [r4, #72]	; 0x48
 8006004:	e7df      	b.n	8005fc6 <HAL_ADC_Start_DMA+0x62>
    tmp_hal_status = HAL_BUSY;
 8006006:	2002      	movs	r0, #2
}
 8006008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800600a:	680b      	ldr	r3, [r1, #0]
 800600c:	07da      	lsls	r2, r3, #31
 800600e:	d5ed      	bpl.n	8005fec <HAL_ADC_Start_DMA+0x88>
        ADC_STATE_CLR_SET(hadc->State,
 8006010:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006012:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800601e:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8006022:	6463      	str	r3, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006024:	d062      	beq.n	80060ec <HAL_ADC_Start_DMA+0x188>
 8006026:	4b36      	ldr	r3, [pc, #216]	; (8006100 <HAL_ADC_Start_DMA+0x19c>)
 8006028:	4299      	cmp	r1, r3
 800602a:	d050      	beq.n	80060ce <HAL_ADC_Start_DMA+0x16a>
 800602c:	4b36      	ldr	r3, [pc, #216]	; (8006108 <HAL_ADC_Start_DMA+0x1a4>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	06da      	lsls	r2, r3, #27
 8006032:	d05d      	beq.n	80060f0 <HAL_ADC_Start_DMA+0x18c>
 8006034:	4a37      	ldr	r2, [pc, #220]	; (8006114 <HAL_ADC_Start_DMA+0x1b0>)
 8006036:	4291      	cmp	r1, r2
 8006038:	d05a      	beq.n	80060f0 <HAL_ADC_Start_DMA+0x18c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800603a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800603c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006040:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006042:	68d3      	ldr	r3, [r2, #12]
 8006044:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8006048:	b12b      	cbz	r3, 8006056 <HAL_ADC_Start_DMA+0xf2>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800604a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800604c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006054:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006056:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006058:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800605a:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8006120 <HAL_ADC_Start_DMA+0x1bc>
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800605e:	4a2e      	ldr	r2, [pc, #184]	; (8006118 <HAL_ADC_Start_DMA+0x1b4>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006060:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006064:	bf1c      	itt	ne
 8006066:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 8006068:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800606c:	64a3      	str	r3, [r4, #72]	; 0x48
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800606e:	4b2b      	ldr	r3, [pc, #172]	; (800611c <HAL_ADC_Start_DMA+0x1b8>)
        __HAL_UNLOCK(hadc);
 8006070:	2500      	movs	r5, #0
 8006072:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006076:	e9c0 c30a 	strd	ip, r3, [r0, #40]	; 0x28
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800607a:	231c      	movs	r3, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800607c:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800607e:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006080:	684b      	ldr	r3, [r1, #4]
 8006082:	f043 0310 	orr.w	r3, r3, #16
 8006086:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006088:	68cb      	ldr	r3, [r1, #12]
 800608a:	f043 0c01 	orr.w	ip, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800608e:	4632      	mov	r2, r6
 8006090:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006092:	f8c1 c00c 	str.w	ip, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006096:	3140      	adds	r1, #64	; 0x40
 8006098:	f001 fa12 	bl	80074c0 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	6893      	ldr	r3, [r2, #8]
 80060a0:	f043 0304 	orr.w	r3, r3, #4
      tmp_hal_status = ADC_Enable(hadc);
 80060a4:	4628      	mov	r0, r5
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80060a6:	6093      	str	r3, [r2, #8]
}
 80060a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_ADC_ENABLE(hadc);
 80060aa:	688b      	ldr	r3, [r1, #8]
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();  
 80060b2:	f7ff fa39 	bl	8005528 <HAL_GetTick>
 80060b6:	4605      	mov	r5, r0
 80060b8:	e004      	b.n	80060c4 <HAL_ADC_Start_DMA+0x160>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80060ba:	f7ff fa35 	bl	8005528 <HAL_GetTick>
 80060be:	1b40      	subs	r0, r0, r5
 80060c0:	2802      	cmp	r0, #2
 80060c2:	d897      	bhi.n	8005ff4 <HAL_ADC_Start_DMA+0x90>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80060c4:	6821      	ldr	r1, [r4, #0]
 80060c6:	680b      	ldr	r3, [r1, #0]
 80060c8:	07db      	lsls	r3, r3, #31
 80060ca:	d5f6      	bpl.n	80060ba <HAL_ADC_Start_DMA+0x156>
 80060cc:	e7a0      	b.n	8006010 <HAL_ADC_Start_DMA+0xac>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80060ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	06d8      	lsls	r0, r3, #27
 80060d6:	d00b      	beq.n	80060f0 <HAL_ADC_Start_DMA+0x18c>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80060d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80060da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80060de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060e2:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80060e4:	68d3      	ldr	r3, [r2, #12]
 80060e6:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80060ea:	e7ad      	b.n	8006048 <HAL_ADC_Start_DMA+0xe4>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80060ec:	4b07      	ldr	r3, [pc, #28]	; (800610c <HAL_ADC_Start_DMA+0x1a8>)
 80060ee:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80060f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80060f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060f6:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80060f8:	68cb      	ldr	r3, [r1, #12]
 80060fa:	019b      	lsls	r3, r3, #6
 80060fc:	d5ab      	bpl.n	8006056 <HAL_ADC_Start_DMA+0xf2>
 80060fe:	e7a4      	b.n	800604a <HAL_ADC_Start_DMA+0xe6>
 8006100:	50000100 	.word	0x50000100
 8006104:	08014f30 	.word	0x08014f30
 8006108:	50000700 	.word	0x50000700
 800610c:	50000300 	.word	0x50000300
 8006110:	8000003f 	.word	0x8000003f
 8006114:	50000400 	.word	0x50000400
 8006118:	0800554d 	.word	0x0800554d
 800611c:	08005565 	.word	0x08005565
 8006120:	0800556d 	.word	0x0800556d

08006124 <HAL_ADC_Stop_DMA>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006124:	6803      	ldr	r3, [r0, #0]
 8006126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{  
 800612a:	b570      	push	{r4, r5, r6, lr}
 800612c:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800612e:	d00f      	beq.n	8006150 <HAL_ADC_Stop_DMA+0x2c>
 8006130:	4a7c      	ldr	r2, [pc, #496]	; (8006324 <HAL_ADC_Stop_DMA+0x200>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00c      	beq.n	8006150 <HAL_ADC_Stop_DMA+0x2c>
 8006136:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800613a:	4293      	cmp	r3, r2
 800613c:	d008      	beq.n	8006150 <HAL_ADC_Stop_DMA+0x2c>
 800613e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_ADC_Stop_DMA+0x2c>
 8006146:	f640 2137 	movw	r1, #2615	; 0xa37
 800614a:	4877      	ldr	r0, [pc, #476]	; (8006328 <HAL_ADC_Stop_DMA+0x204>)
 800614c:	f008 ff7a 	bl	800f044 <assert_failed>
  __HAL_LOCK(hadc);
 8006150:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006154:	2b01      	cmp	r3, #1
 8006156:	d060      	beq.n	800621a <HAL_ADC_Stop_DMA+0xf6>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006158:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hadc);
 800615a:	2201      	movs	r2, #1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800615c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8006160:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006164:	d010      	beq.n	8006188 <HAL_ADC_Stop_DMA+0x64>
 8006166:	4a6f      	ldr	r2, [pc, #444]	; (8006324 <HAL_ADC_Stop_DMA+0x200>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00d      	beq.n	8006188 <HAL_ADC_Stop_DMA+0x64>
 800616c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006170:	4293      	cmp	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_ADC_Stop_DMA+0x64>
 8006174:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006178:	4293      	cmp	r3, r2
 800617a:	d005      	beq.n	8006188 <HAL_ADC_Stop_DMA+0x64>
 800617c:	f641 415d 	movw	r1, #7261	; 0x1c5d
 8006180:	4869      	ldr	r0, [pc, #420]	; (8006328 <HAL_ADC_Stop_DMA+0x204>)
 8006182:	f008 ff5f 	bl	800f044 <assert_failed>
 8006186:	6823      	ldr	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	f012 0f0c 	tst.w	r2, #12
 800618e:	d024      	beq.n	80061da <HAL_ADC_Stop_DMA+0xb6>
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	0195      	lsls	r5, r2, #6
 8006194:	d506      	bpl.n	80061a4 <HAL_ADC_Stop_DMA+0x80>
 8006196:	69e2      	ldr	r2, [r4, #28]
 8006198:	2a01      	cmp	r2, #1
 800619a:	d103      	bne.n	80061a4 <HAL_ADC_Stop_DMA+0x80>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800619c:	69a2      	ldr	r2, [r4, #24]
 800619e:	2a01      	cmp	r2, #1
 80061a0:	f000 8081 	beq.w	80062a6 <HAL_ADC_Stop_DMA+0x182>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	0750      	lsls	r0, r2, #29
 80061a8:	d506      	bpl.n	80061b8 <HAL_ADC_Stop_DMA+0x94>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80061aa:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80061ac:	0792      	lsls	r2, r2, #30
 80061ae:	d403      	bmi.n	80061b8 <HAL_ADC_Stop_DMA+0x94>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	f042 0210 	orr.w	r2, r2, #16
 80061b6:	609a      	str	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	0716      	lsls	r6, r2, #28
 80061bc:	d430      	bmi.n	8006220 <HAL_ADC_Stop_DMA+0xfc>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80061be:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 80061c0:	f7ff f9b2 	bl	8005528 <HAL_GetTick>
 80061c4:	4606      	mov	r6, r0
 80061c6:	e004      	b.n	80061d2 <HAL_ADC_Stop_DMA+0xae>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80061c8:	f7ff f9ae 	bl	8005528 <HAL_GetTick>
 80061cc:	1b80      	subs	r0, r0, r6
 80061ce:	280b      	cmp	r0, #11
 80061d0:	d85f      	bhi.n	8006292 <HAL_ADC_Stop_DMA+0x16e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	422a      	tst	r2, r5
 80061d8:	d1f6      	bne.n	80061c8 <HAL_ADC_Stop_DMA+0xa4>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80061da:	68da      	ldr	r2, [r3, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80061dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	60da      	str	r2, [r3, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80061e4:	f001 f9c6 	bl	8007574 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 80061e8:	4605      	mov	r5, r0
 80061ea:	bb08      	cbnz	r0, 8006230 <HAL_ADC_Stop_DMA+0x10c>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	f022 0210 	bic.w	r2, r2, #16
 80061f4:	605a      	str	r2, [r3, #4]
  if (ADC_IS_ENABLE(hadc) != RESET )
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	f002 0203 	and.w	r2, r2, #3
 80061fc:	2a01      	cmp	r2, #1
 80061fe:	d063      	beq.n	80062c8 <HAL_ADC_Stop_DMA+0x1a4>
      ADC_STATE_CLR_SET(hadc->State,
 8006200:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8006210:	2300      	movs	r3, #0
 8006212:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006216:	4628      	mov	r0, r5
 8006218:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 800621a:	2502      	movs	r5, #2
}
 800621c:	4628      	mov	r0, r5
 800621e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8006220:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8006222:	0795      	lsls	r5, r2, #30
 8006224:	d4cb      	bmi.n	80061be <HAL_ADC_Stop_DMA+0x9a>
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	f042 0220 	orr.w	r2, r2, #32
 800622c:	609a      	str	r2, [r3, #8]
 800622e:	e7c6      	b.n	80061be <HAL_ADC_Stop_DMA+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8006230:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006232:	6823      	ldr	r3, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8006234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006238:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	f022 0210 	bic.w	r2, r2, #16
 8006240:	605a      	str	r2, [r3, #4]
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	f002 0203 	and.w	r2, r2, #3
 8006248:	2a01      	cmp	r2, #1
 800624a:	d1e1      	bne.n	8006210 <HAL_ADC_Stop_DMA+0xec>
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	07d2      	lsls	r2, r2, #31
 8006250:	d5de      	bpl.n	8006210 <HAL_ADC_Stop_DMA+0xec>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	f002 020d 	and.w	r2, r2, #13
 8006258:	2a01      	cmp	r2, #1
 800625a:	d047      	beq.n	80062ec <HAL_ADC_Stop_DMA+0x1c8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800625c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800625e:	f043 0310 	orr.w	r3, r3, #16
 8006262:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006264:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	64a3      	str	r3, [r4, #72]	; 0x48
 800626c:	e7d0      	b.n	8006210 <HAL_ADC_Stop_DMA+0xec>
      __HAL_ADC_DISABLE(hadc);
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	2103      	movs	r1, #3
 8006272:	f042 0202 	orr.w	r2, r2, #2
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800627a:	f7ff f955 	bl	8005528 <HAL_GetTick>
 800627e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	07d9      	lsls	r1, r3, #31
 8006286:	d5bb      	bpl.n	8006200 <HAL_ADC_Stop_DMA+0xdc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006288:	f7ff f94e 	bl	8005528 <HAL_GetTick>
 800628c:	1b80      	subs	r0, r0, r6
 800628e:	2802      	cmp	r0, #2
 8006290:	d9f6      	bls.n	8006280 <HAL_ADC_Stop_DMA+0x15c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006292:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006294:	f043 0310 	orr.w	r3, r3, #16
 8006298:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800629a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80062a2:	2501      	movs	r5, #1
 80062a4:	e7b4      	b.n	8006210 <HAL_ADC_Stop_DMA+0xec>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	0650      	lsls	r0, r2, #25
 80062aa:	d406      	bmi.n	80062ba <HAL_ADC_Stop_DMA+0x196>
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <HAL_ADC_Stop_DMA+0x208>)
 80062ae:	e001      	b.n	80062b4 <HAL_ADC_Stop_DMA+0x190>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80062b0:	3a01      	subs	r2, #1
 80062b2:	d0ee      	beq.n	8006292 <HAL_ADC_Stop_DMA+0x16e>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	0649      	lsls	r1, r1, #25
 80062b8:	d5fa      	bpl.n	80062b0 <HAL_ADC_Stop_DMA+0x18c>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80062ba:	2240      	movs	r2, #64	; 0x40
 80062bc:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	0752      	lsls	r2, r2, #29
 80062c2:	d427      	bmi.n	8006314 <HAL_ADC_Stop_DMA+0x1f0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80062c4:	2504      	movs	r5, #4
 80062c6:	e77b      	b.n	80061c0 <HAL_ADC_Stop_DMA+0x9c>
  if (ADC_IS_ENABLE(hadc) != RESET )
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	07c8      	lsls	r0, r1, #31
 80062cc:	d598      	bpl.n	8006200 <HAL_ADC_Stop_DMA+0xdc>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80062ce:	6899      	ldr	r1, [r3, #8]
 80062d0:	f001 010d 	and.w	r1, r1, #13
 80062d4:	2901      	cmp	r1, #1
 80062d6:	d0ca      	beq.n	800626e <HAL_ADC_Stop_DMA+0x14a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062da:	f043 0310 	orr.w	r3, r3, #16
 80062de:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80062e2:	f043 0301 	orr.w	r3, r3, #1
      return HAL_ERROR;
 80062e6:	4615      	mov	r5, r2
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80062ea:	e791      	b.n	8006210 <HAL_ADC_Stop_DMA+0xec>
      __HAL_ADC_DISABLE(hadc);
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	2103      	movs	r1, #3
 80062f0:	f042 0202 	orr.w	r2, r2, #2
 80062f4:	609a      	str	r2, [r3, #8]
 80062f6:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80062f8:	f7ff f916 	bl	8005528 <HAL_GetTick>
 80062fc:	4606      	mov	r6, r0
 80062fe:	e004      	b.n	800630a <HAL_ADC_Stop_DMA+0x1e6>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006300:	f7ff f912 	bl	8005528 <HAL_GetTick>
 8006304:	1b80      	subs	r0, r0, r6
 8006306:	2802      	cmp	r0, #2
 8006308:	d8a8      	bhi.n	800625c <HAL_ADC_Stop_DMA+0x138>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	07db      	lsls	r3, r3, #31
 8006310:	d4f6      	bmi.n	8006300 <HAL_ADC_Stop_DMA+0x1dc>
 8006312:	e77d      	b.n	8006210 <HAL_ADC_Stop_DMA+0xec>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8006314:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006316:	0791      	lsls	r1, r2, #30
 8006318:	d4d4      	bmi.n	80062c4 <HAL_ADC_Stop_DMA+0x1a0>
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	f042 0210 	orr.w	r2, r2, #16
 8006320:	609a      	str	r2, [r3, #8]
 8006322:	e7cf      	b.n	80062c4 <HAL_ADC_Stop_DMA+0x1a0>
 8006324:	50000100 	.word	0x50000100
 8006328:	08014f30 	.word	0x08014f30
 800632c:	00099400 	.word	0x00099400

08006330 <HAL_ADCEx_Calibration_Start>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006330:	6803      	ldr	r3, [r0, #0]
 8006332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	4604      	mov	r4, r0
 800633a:	460d      	mov	r5, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800633c:	d00f      	beq.n	800635e <HAL_ADCEx_Calibration_Start+0x2e>
 800633e:	4a44      	ldr	r2, [pc, #272]	; (8006450 <HAL_ADCEx_Calibration_Start+0x120>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00c      	beq.n	800635e <HAL_ADCEx_Calibration_Start+0x2e>
 8006344:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006348:	4293      	cmp	r3, r2
 800634a:	d008      	beq.n	800635e <HAL_ADCEx_Calibration_Start+0x2e>
 800634c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_ADCEx_Calibration_Start+0x2e>
 8006354:	f640 41b3 	movw	r1, #3251	; 0xcb3
 8006358:	483e      	ldr	r0, [pc, #248]	; (8006454 <HAL_ADCEx_Calibration_Start+0x124>)
 800635a:	f008 fe73 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 800635e:	2d01      	cmp	r5, #1
 8006360:	d904      	bls.n	800636c <HAL_ADCEx_Calibration_Start+0x3c>
 8006362:	f640 41b4 	movw	r1, #3252	; 0xcb4
 8006366:	483b      	ldr	r0, [pc, #236]	; (8006454 <HAL_ADCEx_Calibration_Start+0x124>)
 8006368:	f008 fe6c 	bl	800f044 <assert_failed>
  __HAL_LOCK(hadc);
 800636c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006370:	2b01      	cmp	r3, #1
 8006372:	d041      	beq.n	80063f8 <HAL_ADCEx_Calibration_Start+0xc8>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	6898      	ldr	r0, [r3, #8]
  __HAL_LOCK(hadc);
 8006378:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET )
 800637a:	f000 0003 	and.w	r0, r0, #3
 800637e:	4290      	cmp	r0, r2
  __HAL_LOCK(hadc);
 8006380:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006384:	d027      	beq.n	80063d6 <HAL_ADCEx_Calibration_Start+0xa6>
    hadc->State = HAL_ADC_STATE_READY;
 8006386:	2201      	movs	r2, #1
 8006388:	6462      	str	r2, [r4, #68]	; 0x44
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800638a:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800638c:	2d01      	cmp	r5, #1
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800638e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8006392:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006394:	d103      	bne.n	800639e <HAL_ADCEx_Calibration_Start+0x6e>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800639c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80063a4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80063a6:	f7ff f8bf 	bl	8005528 <HAL_GetTick>
 80063aa:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80063ac:	e004      	b.n	80063b8 <HAL_ADCEx_Calibration_Start+0x88>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80063ae:	f7ff f8bb 	bl	8005528 <HAL_GetTick>
 80063b2:	1b40      	subs	r0, r0, r5
 80063b4:	280a      	cmp	r0, #10
 80063b6:	d821      	bhi.n	80063fc <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dbf6      	blt.n	80063ae <HAL_ADCEx_Calibration_Start+0x7e>
    ADC_STATE_CLR_SET(hadc->State,
 80063c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6463      	str	r3, [r4, #68]	; 0x44
 80063cc:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80063ce:	2300      	movs	r3, #0
 80063d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	07d1      	lsls	r1, r2, #31
 80063da:	d5d4      	bpl.n	8006386 <HAL_ADCEx_Calibration_Start+0x56>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	f002 020d 	and.w	r2, r2, #13
 80063e2:	2a01      	cmp	r2, #1
 80063e4:	d015      	beq.n	8006412 <HAL_ADCEx_Calibration_Start+0xe2>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063e8:	f043 0310 	orr.w	r3, r3, #16
 80063ec:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	64a3      	str	r3, [r4, #72]	; 0x48
 80063f6:	e7ea      	b.n	80063ce <HAL_ADCEx_Calibration_Start+0x9e>
  __HAL_LOCK(hadc);
 80063f8:	2002      	movs	r0, #2
}
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
        ADC_STATE_CLR_SET(hadc->State,
 80063fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063fe:	f023 0312 	bic.w	r3, r3, #18
 8006402:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8006406:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8006408:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800640a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 800640e:	2001      	movs	r0, #1
}
 8006410:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_DISABLE(hadc);
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	2103      	movs	r1, #3
 8006416:	f042 0202 	orr.w	r2, r2, #2
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800641e:	f7ff f883 	bl	8005528 <HAL_GetTick>
 8006422:	4606      	mov	r6, r0
 8006424:	e004      	b.n	8006430 <HAL_ADCEx_Calibration_Start+0x100>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006426:	f7ff f87f 	bl	8005528 <HAL_GetTick>
 800642a:	1b80      	subs	r0, r0, r6
 800642c:	2802      	cmp	r0, #2
 800642e:	d804      	bhi.n	800643a <HAL_ADCEx_Calibration_Start+0x10a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	07d2      	lsls	r2, r2, #31
 8006436:	d4f6      	bmi.n	8006426 <HAL_ADCEx_Calibration_Start+0xf6>
 8006438:	e7a5      	b.n	8006386 <HAL_ADCEx_Calibration_Start+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800643a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800643c:	f043 0310 	orr.w	r3, r3, #16
 8006440:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006442:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	64a3      	str	r3, [r4, #72]	; 0x48
 800644a:	2001      	movs	r0, #1
 800644c:	e7bf      	b.n	80063ce <HAL_ADCEx_Calibration_Start+0x9e>
 800644e:	bf00      	nop
 8006450:	50000100 	.word	0x50000100
 8006454:	08014f30 	.word	0x08014f30

08006458 <HAL_ADCEx_MultiModeStart_DMA>:
{
 8006458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 800645c:	6803      	ldr	r3, [r0, #0]
 800645e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006462:	b097      	sub	sp, #92	; 0x5c
 8006464:	4604      	mov	r4, r0
 8006466:	460e      	mov	r6, r1
 8006468:	4617      	mov	r7, r2
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 800646a:	d007      	beq.n	800647c <HAL_ADCEx_MultiModeStart_DMA+0x24>
 800646c:	4a6e      	ldr	r2, [pc, #440]	; (8006628 <HAL_ADCEx_MultiModeStart_DMA+0x1d0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_ADCEx_MultiModeStart_DMA+0x24>
 8006472:	f241 117f 	movw	r1, #4479	; 0x117f
 8006476:	486d      	ldr	r0, [pc, #436]	; (800662c <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 8006478:	f008 fde4 	bl	800f044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800647c:	69e3      	ldr	r3, [r4, #28]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d904      	bls.n	800648c <HAL_ADCEx_MultiModeStart_DMA+0x34>
 8006482:	f44f 518c 	mov.w	r1, #4480	; 0x1180
 8006486:	4869      	ldr	r0, [pc, #420]	; (800662c <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 8006488:	f008 fddc 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800648c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800648e:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8006492:	d004      	beq.n	800649e <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8006494:	f241 1181 	movw	r1, #4481	; 0x1181
 8006498:	4864      	ldr	r0, [pc, #400]	; (800662c <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 800649a:	f008 fdd3 	bl	800f044 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800649e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d904      	bls.n	80064ae <HAL_ADCEx_MultiModeStart_DMA+0x56>
 80064a4:	f241 1182 	movw	r1, #4482	; 0x1182
 80064a8:	4860      	ldr	r0, [pc, #384]	; (800662c <HAL_ADCEx_MultiModeStart_DMA+0x1d4>)
 80064aa:	f008 fdcb 	bl	800f044 <assert_failed>
  __HAL_LOCK(hadc);
 80064ae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d016      	beq.n	80064e4 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80064b6:	6825      	ldr	r5, [r4, #0]
 80064b8:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 80064ba:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80064bc:	f013 0304 	ands.w	r3, r3, #4
  __HAL_LOCK(hadc);
 80064c0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80064c4:	d10e      	bne.n	80064e4 <HAL_ADCEx_MultiModeStart_DMA+0x8c>
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80064c6:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 80064ca:	d00f      	beq.n	80064ec <HAL_ADCEx_MultiModeStart_DMA+0x94>
 80064cc:	4a56      	ldr	r2, [pc, #344]	; (8006628 <HAL_ADCEx_MultiModeStart_DMA+0x1d0>)
 80064ce:	4295      	cmp	r5, r2
 80064d0:	d026      	beq.n	8006520 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80064d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064d8:	f042 0220 	orr.w	r2, r2, #32
 80064dc:	6462      	str	r2, [r4, #68]	; 0x44
}
 80064de:	b017      	add	sp, #92	; 0x5c
 80064e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hadc);
 80064e4:	2002      	movs	r0, #2
}
 80064e6:	b017      	add	sp, #92	; 0x5c
 80064e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80064ec:	68ab      	ldr	r3, [r5, #8]
 80064ee:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8006644 <HAL_ADCEx_MultiModeStart_DMA+0x1ec>
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d019      	beq.n	800652e <HAL_ADCEx_MultiModeStart_DMA+0xd6>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80064fa:	68aa      	ldr	r2, [r5, #8]
 80064fc:	4b4c      	ldr	r3, [pc, #304]	; (8006630 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 80064fe:	421a      	tst	r2, r3
 8006500:	d02c      	beq.n	800655c <HAL_ADCEx_MultiModeStart_DMA+0x104>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006502:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006504:	f043 0310 	orr.w	r3, r3, #16
 8006508:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800650a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8006512:	2300      	movs	r3, #0
 8006514:	2001      	movs	r0, #1
 8006516:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800651a:	b017      	add	sp, #92	; 0x5c
 800651c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006520:	68ab      	ldr	r3, [r5, #8]
 8006522:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8006650 <HAL_ADCEx_MultiModeStart_DMA+0x1f8>
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	2b01      	cmp	r3, #1
 800652c:	d1e5      	bne.n	80064fa <HAL_ADCEx_MultiModeStart_DMA+0xa2>
 800652e:	682b      	ldr	r3, [r5, #0]
 8006530:	07db      	lsls	r3, r3, #31
 8006532:	d5e2      	bpl.n	80064fa <HAL_ADCEx_MultiModeStart_DMA+0xa2>
 8006534:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b01      	cmp	r3, #1
 800653e:	d020      	beq.n	8006582 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006540:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006544:	4b3a      	ldr	r3, [pc, #232]	; (8006630 <HAL_ADCEx_MultiModeStart_DMA+0x1d8>)
 8006546:	421a      	tst	r2, r3
 8006548:	d059      	beq.n	80065fe <HAL_ADCEx_MultiModeStart_DMA+0x1a6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800654a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800654c:	f043 0310 	orr.w	r3, r3, #16
 8006550:	9312      	str	r3, [sp, #72]	; 0x48
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006552:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	9313      	str	r3, [sp, #76]	; 0x4c
 800655a:	e7da      	b.n	8006512 <HAL_ADCEx_MultiModeStart_DMA+0xba>
    __HAL_ADC_ENABLE(hadc);
 800655c:	68ab      	ldr	r3, [r5, #8]
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();  
 8006564:	f7fe ffe0 	bl	8005528 <HAL_GetTick>
 8006568:	4681      	mov	r9, r0
 800656a:	e005      	b.n	8006578 <HAL_ADCEx_MultiModeStart_DMA+0x120>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800656c:	f7fe ffdc 	bl	8005528 <HAL_GetTick>
 8006570:	eba0 0009 	sub.w	r0, r0, r9
 8006574:	2802      	cmp	r0, #2
 8006576:	d8c4      	bhi.n	8006502 <HAL_ADCEx_MultiModeStart_DMA+0xaa>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006578:	6825      	ldr	r5, [r4, #0]
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	07d8      	lsls	r0, r3, #31
 800657e:	d5f5      	bpl.n	800656c <HAL_ADCEx_MultiModeStart_DMA+0x114>
 8006580:	e7d8      	b.n	8006534 <HAL_ADCEx_MultiModeStart_DMA+0xdc>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006582:	f8d8 3000 	ldr.w	r3, [r8]
 8006586:	07d9      	lsls	r1, r3, #31
 8006588:	d5da      	bpl.n	8006540 <HAL_ADCEx_MultiModeStart_DMA+0xe8>
      ADC_STATE_CLR_SET(hadc->State,
 800658a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800658c:	4b29      	ldr	r3, [pc, #164]	; (8006634 <HAL_ADCEx_MultiModeStart_DMA+0x1dc>)
 800658e:	4013      	ands	r3, r2
 8006590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006594:	6463      	str	r3, [r4, #68]	; 0x44
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8006596:	68eb      	ldr	r3, [r5, #12]
 8006598:	019b      	lsls	r3, r3, #6
 800659a:	d505      	bpl.n	80065a8 <HAL_ADCEx_MultiModeStart_DMA+0x150>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800659c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800659e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065a6:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80065a8:	2300      	movs	r3, #0
 80065aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 80065ae:	64a3      	str	r3, [r4, #72]	; 0x48
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80065b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80065b2:	4a21      	ldr	r2, [pc, #132]	; (8006638 <HAL_ADCEx_MultiModeStart_DMA+0x1e0>)
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80065b4:	4b21      	ldr	r3, [pc, #132]	; (800663c <HAL_ADCEx_MultiModeStart_DMA+0x1e4>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80065b6:	4922      	ldr	r1, [pc, #136]	; (8006640 <HAL_ADCEx_MultiModeStart_DMA+0x1e8>)
 80065b8:	6281      	str	r1, [r0, #40]	; 0x28
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065ba:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80065be:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065c2:	d01a      	beq.n	80065fa <HAL_ADCEx_MultiModeStart_DMA+0x1a2>
 80065c4:	4a1f      	ldr	r2, [pc, #124]	; (8006644 <HAL_ADCEx_MultiModeStart_DMA+0x1ec>)
 80065c6:	4920      	ldr	r1, [pc, #128]	; (8006648 <HAL_ADCEx_MultiModeStart_DMA+0x1f0>)
 80065c8:	4b20      	ldr	r3, [pc, #128]	; (800664c <HAL_ADCEx_MultiModeStart_DMA+0x1f4>)
 80065ca:	4295      	cmp	r5, r2
 80065cc:	bf08      	it	eq
 80065ce:	4619      	moveq	r1, r3
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80065d0:	231c      	movs	r3, #28
 80065d2:	602b      	str	r3, [r5, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065d4:	686b      	ldr	r3, [r5, #4]
 80065d6:	f043 0c10 	orr.w	ip, r3, #16
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80065da:	4632      	mov	r2, r6
 80065dc:	463b      	mov	r3, r7
 80065de:	310c      	adds	r1, #12
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065e0:	f8c5 c004 	str.w	ip, [r5, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80065e4:	f000 ff6c 	bl	80074c0 <HAL_DMA_Start_IT>
      SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	6893      	ldr	r3, [r2, #8]
 80065ec:	2000      	movs	r0, #0
 80065ee:	f043 0304 	orr.w	r3, r3, #4
 80065f2:	6093      	str	r3, [r2, #8]
}
 80065f4:	b017      	add	sp, #92	; 0x5c
 80065f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065fa:	4914      	ldr	r1, [pc, #80]	; (800664c <HAL_ADCEx_MultiModeStart_DMA+0x1f4>)
 80065fc:	e7e8      	b.n	80065d0 <HAL_ADCEx_MultiModeStart_DMA+0x178>
    __HAL_ADC_ENABLE(hadc);
 80065fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	f8c8 3008 	str.w	r3, [r8, #8]
    tickstart = HAL_GetTick();  
 800660a:	f7fe ff8d 	bl	8005528 <HAL_GetTick>
 800660e:	4605      	mov	r5, r0
 8006610:	e004      	b.n	800661c <HAL_ADCEx_MultiModeStart_DMA+0x1c4>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006612:	f7fe ff89 	bl	8005528 <HAL_GetTick>
 8006616:	1b40      	subs	r0, r0, r5
 8006618:	2802      	cmp	r0, #2
 800661a:	d896      	bhi.n	800654a <HAL_ADCEx_MultiModeStart_DMA+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800661c:	f8d8 3000 	ldr.w	r3, [r8]
 8006620:	07da      	lsls	r2, r3, #31
 8006622:	d5f6      	bpl.n	8006612 <HAL_ADCEx_MultiModeStart_DMA+0x1ba>
 8006624:	6825      	ldr	r5, [r4, #0]
 8006626:	e7b0      	b.n	800658a <HAL_ADCEx_MultiModeStart_DMA+0x132>
 8006628:	50000400 	.word	0x50000400
 800662c:	08014f30 	.word	0x08014f30
 8006630:	8000003f 	.word	0x8000003f
 8006634:	ffeff0fe 	.word	0xffeff0fe
 8006638:	08005565 	.word	0x08005565
 800663c:	0800554d 	.word	0x0800554d
 8006640:	0800556d 	.word	0x0800556d
 8006644:	50000100 	.word	0x50000100
 8006648:	50000700 	.word	0x50000700
 800664c:	50000300 	.word	0x50000300
 8006650:	50000500 	.word	0x50000500

08006654 <HAL_ADC_ConfigChannel>:
{
 8006654:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006656:	6803      	ldr	r3, [r0, #0]
{
 8006658:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800665a:	2200      	movs	r2, #0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800665c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006660:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8006662:	9201      	str	r2, [sp, #4]
{
 8006664:	460c      	mov	r4, r1
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006666:	d00f      	beq.n	8006688 <HAL_ADC_ConfigChannel+0x34>
 8006668:	4ab9      	ldr	r2, [pc, #740]	; (8006950 <HAL_ADC_ConfigChannel+0x2fc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00c      	beq.n	8006688 <HAL_ADC_ConfigChannel+0x34>
 800666e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006672:	4293      	cmp	r3, r2
 8006674:	d008      	beq.n	8006688 <HAL_ADC_ConfigChannel+0x34>
 8006676:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_ADC_ConfigChannel+0x34>
 800667e:	f241 513a 	movw	r1, #5434	; 0x153a
 8006682:	48b4      	ldr	r0, [pc, #720]	; (8006954 <HAL_ADC_ConfigChannel+0x300>)
 8006684:	f008 fcde 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	3b01      	subs	r3, #1
 800668c:	2b0f      	cmp	r3, #15
 800668e:	f200 8131 	bhi.w	80068f4 <HAL_ADC_ConfigChannel+0x2a0>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8006692:	68a3      	ldr	r3, [r4, #8]
 8006694:	2b07      	cmp	r3, #7
 8006696:	f200 8127 	bhi.w	80068e8 <HAL_ADC_ConfigChannel+0x294>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800669a:	68e3      	ldr	r3, [r4, #12]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d904      	bls.n	80066aa <HAL_ADC_ConfigChannel+0x56>
 80066a0:	f241 513d 	movw	r1, #5437	; 0x153d
 80066a4:	48ab      	ldr	r0, [pc, #684]	; (8006954 <HAL_ADC_ConfigChannel+0x300>)
 80066a6:	f008 fccd 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	f200 8115 	bhi.w	80068dc <HAL_ADC_ConfigChannel+0x288>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	f012 0f18 	tst.w	r2, #24
 80066ba:	d14e      	bne.n	800675a <HAL_ADC_ConfigChannel+0x106>
 80066bc:	6962      	ldr	r2, [r4, #20]
 80066be:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80066c2:	d24a      	bcs.n	800675a <HAL_ADC_ConfigChannel+0x106>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80066c4:	68e2      	ldr	r2, [r4, #12]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	2a01      	cmp	r2, #1
 80066ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80066ce:	d061      	beq.n	8006794 <HAL_ADC_ConfigChannel+0x140>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80066d0:	2b11      	cmp	r3, #17
 80066d2:	f200 8081 	bhi.w	80067d8 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 80066d6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d065      	beq.n	80067aa <HAL_ADC_ConfigChannel+0x156>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80066e2:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80066e4:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 80066e6:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80066ea:	d461      	bmi.n	80067b0 <HAL_ADC_ConfigChannel+0x15c>
 80066ec:	e9d4 1000 	ldrd	r1, r0, [r4]
 80066f0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    if (sConfig->Rank < 5U)
 80066f4:	2804      	cmp	r0, #4
 80066f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80066fa:	f200 8101 	bhi.w	8006900 <HAL_ADC_ConfigChannel+0x2ac>
      MODIFY_REG(hadc->Instance->SQR1,
 80066fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006700:	261f      	movs	r6, #31
 8006702:	4096      	lsls	r6, r2
 8006704:	ea20 0006 	bic.w	r0, r0, r6
 8006708:	fa01 f202 	lsl.w	r2, r1, r2
 800670c:	4302      	orrs	r2, r0
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	f012 0f0c 	tst.w	r2, #12
 8006716:	f040 8093 	bne.w	8006840 <HAL_ADC_ConfigChannel+0x1ec>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800671a:	2909      	cmp	r1, #9
 800671c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8006720:	68a2      	ldr	r2, [r4, #8]
 8006722:	f200 8107 	bhi.w	8006934 <HAL_ADC_ConfigChannel+0x2e0>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006726:	695e      	ldr	r6, [r3, #20]
 8006728:	2707      	movs	r7, #7
 800672a:	4087      	lsls	r7, r0
 800672c:	4082      	lsls	r2, r0
 800672e:	ea26 0007 	bic.w	r0, r6, r7
 8006732:	4302      	orrs	r2, r0
 8006734:	615a      	str	r2, [r3, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8006736:	e9d4 0604 	ldrd	r0, r6, [r4, #16]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006740:	0052      	lsls	r2, r2, #1
    switch (sConfig->OffsetNumber)
 8006742:	3801      	subs	r0, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8006744:	fa06 f202 	lsl.w	r2, r6, r2
 8006748:	068e      	lsls	r6, r1, #26
    switch (sConfig->OffsetNumber)
 800674a:	2803      	cmp	r0, #3
 800674c:	d854      	bhi.n	80067f8 <HAL_ADC_ConfigChannel+0x1a4>
 800674e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006752:	015a      	.short	0x015a
 8006754:	01480151 	.word	0x01480151
 8006758:	013f      	.short	0x013f
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	f002 0218 	and.w	r2, r2, #24
 8006760:	2a08      	cmp	r2, #8
 8006762:	d02e      	beq.n	80067c2 <HAL_ADC_ConfigChannel+0x16e>
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	f002 0218 	and.w	r2, r2, #24
 800676a:	2a10      	cmp	r2, #16
 800676c:	d03a      	beq.n	80067e4 <HAL_ADC_ConfigChannel+0x190>
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0318 	and.w	r3, r3, #24
 8006774:	2b18      	cmp	r3, #24
 8006776:	d102      	bne.n	800677e <HAL_ADC_ConfigChannel+0x12a>
 8006778:	6963      	ldr	r3, [r4, #20]
 800677a:	2b3f      	cmp	r3, #63	; 0x3f
 800677c:	d9a2      	bls.n	80066c4 <HAL_ADC_ConfigChannel+0x70>
 800677e:	f241 513f 	movw	r1, #5439	; 0x153f
 8006782:	4874      	ldr	r0, [pc, #464]	; (8006954 <HAL_ADC_ConfigChannel+0x300>)
 8006784:	f008 fc5e 	bl	800f044 <assert_failed>
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006788:	68e2      	ldr	r2, [r4, #12]
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	2a01      	cmp	r2, #1
 800678e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006792:	d19d      	bne.n	80066d0 <HAL_ADC_ConfigChannel+0x7c>
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 8006794:	2b0d      	cmp	r3, #13
 8006796:	d99e      	bls.n	80066d6 <HAL_ADC_ConfigChannel+0x82>
 8006798:	f241 514b 	movw	r1, #5451	; 0x154b
 800679c:	486d      	ldr	r0, [pc, #436]	; (8006954 <HAL_ADC_ConfigChannel+0x300>)
 800679e:	f008 fc51 	bl	800f044 <assert_failed>
  __HAL_LOCK(hadc);
 80067a2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d199      	bne.n	80066de <HAL_ADC_ConfigChannel+0x8a>
 80067aa:	2002      	movs	r0, #2
}
 80067ac:	b003      	add	sp, #12
 80067ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067b0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80067b2:	f043 0320 	orr.w	r3, r3, #32
 80067b6:	646b      	str	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 80067b8:	2300      	movs	r3, #0
 80067ba:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 80067be:	b003      	add	sp, #12
 80067c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80067c2:	6962      	ldr	r2, [r4, #20]
 80067c4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80067c8:	f4ff af7c 	bcc.w	80066c4 <HAL_ADC_ConfigChannel+0x70>
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	f002 0218 	and.w	r2, r2, #24
 80067d2:	2a10      	cmp	r2, #16
 80067d4:	d1cb      	bne.n	800676e <HAL_ADC_ConfigChannel+0x11a>
 80067d6:	e005      	b.n	80067e4 <HAL_ADC_ConfigChannel+0x190>
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80067d8:	f241 5147 	movw	r1, #5447	; 0x1547
 80067dc:	485d      	ldr	r0, [pc, #372]	; (8006954 <HAL_ADC_ConfigChannel+0x300>)
 80067de:	f008 fc31 	bl	800f044 <assert_failed>
 80067e2:	e778      	b.n	80066d6 <HAL_ADC_ConfigChannel+0x82>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80067e4:	6962      	ldr	r2, [r4, #20]
 80067e6:	2aff      	cmp	r2, #255	; 0xff
 80067e8:	f67f af6c 	bls.w	80066c4 <HAL_ADC_ConfigChannel+0x70>
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0318 	and.w	r3, r3, #24
 80067f2:	2b18      	cmp	r3, #24
 80067f4:	d0c0      	beq.n	8006778 <HAL_ADC_ConfigChannel+0x124>
 80067f6:	e7c2      	b.n	800677e <HAL_ADC_ConfigChannel+0x12a>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80067f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067fa:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80067fe:	42b2      	cmp	r2, r6
 8006800:	d103      	bne.n	800680a <HAL_ADC_ConfigChannel+0x1b6>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8006802:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006804:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006808:	661a      	str	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800680a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800680c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8006810:	42b2      	cmp	r2, r6
 8006812:	d103      	bne.n	800681c <HAL_ADC_ConfigChannel+0x1c8>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8006814:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800681a:	665a      	str	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800681c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800681e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8006822:	42b2      	cmp	r2, r6
 8006824:	d103      	bne.n	800682e <HAL_ADC_ConfigChannel+0x1da>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8006826:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006828:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800682c:	669a      	str	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800682e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006830:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8006834:	42b2      	cmp	r2, r6
 8006836:	d103      	bne.n	8006840 <HAL_ADC_ConfigChannel+0x1ec>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8006838:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800683a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800683e:	66da      	str	r2, [r3, #108]	; 0x6c
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	f002 0203 	and.w	r2, r2, #3
 8006846:	2a01      	cmp	r2, #1
 8006848:	f000 808c 	beq.w	8006964 <HAL_ADC_ConfigChannel+0x310>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800684c:	68e0      	ldr	r0, [r4, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	2801      	cmp	r0, #1
 8006852:	fa02 f201 	lsl.w	r2, r2, r1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006856:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800685a:	f000 8088 	beq.w	800696e <HAL_ADC_ConfigChannel+0x31a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800685e:	ea20 0202 	bic.w	r2, r0, r2
 8006862:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800686a:	f000 8098 	beq.w	800699e <HAL_ADC_ConfigChannel+0x34a>
 800686e:	4c38      	ldr	r4, [pc, #224]	; (8006950 <HAL_ADC_ConfigChannel+0x2fc>)
 8006870:	4a39      	ldr	r2, [pc, #228]	; (8006958 <HAL_ADC_ConfigChannel+0x304>)
 8006872:	483a      	ldr	r0, [pc, #232]	; (800695c <HAL_ADC_ConfigChannel+0x308>)
 8006874:	42a3      	cmp	r3, r4
 8006876:	bf08      	it	eq
 8006878:	4602      	moveq	r2, r0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800687a:	2910      	cmp	r1, #16
 800687c:	f000 808a 	beq.w	8006994 <HAL_ADC_ConfigChannel+0x340>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006880:	2911      	cmp	r1, #17
 8006882:	d061      	beq.n	8006948 <HAL_ADC_ConfigChannel+0x2f4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006884:	2912      	cmp	r1, #18
 8006886:	d127      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x284>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006888:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800688a:	0240      	lsls	r0, r0, #9
 800688c:	d424      	bmi.n	80068d8 <HAL_ADC_ConfigChannel+0x284>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800688e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006892:	f000 80ec 	beq.w	8006a6e <HAL_ADC_ConfigChannel+0x41a>
 8006896:	482e      	ldr	r0, [pc, #184]	; (8006950 <HAL_ADC_ConfigChannel+0x2fc>)
 8006898:	4283      	cmp	r3, r0
 800689a:	f000 80fd 	beq.w	8006a98 <HAL_ADC_ConfigChannel+0x444>
 800689e:	4c30      	ldr	r4, [pc, #192]	; (8006960 <HAL_ADC_ConfigChannel+0x30c>)
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	f000 80b9 	beq.w	8006a18 <HAL_ADC_ConfigChannel+0x3c4>
 80068a6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80068aa:	4283      	cmp	r3, r0
 80068ac:	f000 80b5 	beq.w	8006a1a <HAL_ADC_ConfigChannel+0x3c6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80068b0:	6898      	ldr	r0, [r3, #8]
 80068b2:	f000 0003 	and.w	r0, r0, #3
 80068b6:	2801      	cmp	r0, #1
 80068b8:	d103      	bne.n	80068c2 <HAL_ADC_ConfigChannel+0x26e>
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	07c7      	lsls	r7, r0, #31
 80068be:	f100 80db 	bmi.w	8006a78 <HAL_ADC_ConfigChannel+0x424>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80068c2:	2910      	cmp	r1, #16
 80068c4:	d008      	beq.n	80068d8 <HAL_ADC_ConfigChannel+0x284>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80068c6:	2911      	cmp	r1, #17
 80068c8:	f000 80dc 	beq.w	8006a84 <HAL_ADC_ConfigChannel+0x430>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80068cc:	2912      	cmp	r1, #18
 80068ce:	d103      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x284>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80068d0:	6893      	ldr	r3, [r2, #8]
 80068d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068d6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068d8:	2000      	movs	r0, #0
 80068da:	e76d      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x164>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 80068dc:	f241 513e 	movw	r1, #5438	; 0x153e
 80068e0:	481c      	ldr	r0, [pc, #112]	; (8006954 <HAL_ADC_ConfigChannel+0x300>)
 80068e2:	f008 fbaf 	bl	800f044 <assert_failed>
 80068e6:	e6e4      	b.n	80066b2 <HAL_ADC_ConfigChannel+0x5e>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80068e8:	f241 513c 	movw	r1, #5436	; 0x153c
 80068ec:	4819      	ldr	r0, [pc, #100]	; (8006954 <HAL_ADC_ConfigChannel+0x300>)
 80068ee:	f008 fba9 	bl	800f044 <assert_failed>
 80068f2:	e6d2      	b.n	800669a <HAL_ADC_ConfigChannel+0x46>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80068f4:	f241 513b 	movw	r1, #5435	; 0x153b
 80068f8:	4816      	ldr	r0, [pc, #88]	; (8006954 <HAL_ADC_ConfigChannel+0x300>)
 80068fa:	f008 fba3 	bl	800f044 <assert_failed>
 80068fe:	e6c8      	b.n	8006692 <HAL_ADC_ConfigChannel+0x3e>
    else if (sConfig->Rank < 10U)
 8006900:	2809      	cmp	r0, #9
 8006902:	d90c      	bls.n	800691e <HAL_ADC_ConfigChannel+0x2ca>
    else if (sConfig->Rank < 15U)
 8006904:	280e      	cmp	r0, #14
 8006906:	d858      	bhi.n	80069ba <HAL_ADC_ConfigChannel+0x366>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8006908:	3a3c      	subs	r2, #60	; 0x3c
 800690a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800690c:	261f      	movs	r6, #31
 800690e:	4096      	lsls	r6, r2
 8006910:	ea20 0006 	bic.w	r0, r0, r6
 8006914:	fa01 f202 	lsl.w	r2, r1, r2
 8006918:	4302      	orrs	r2, r0
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
 800691c:	e6f8      	b.n	8006710 <HAL_ADC_ConfigChannel+0xbc>
      MODIFY_REG(hadc->Instance->SQR2,
 800691e:	3a1e      	subs	r2, #30
 8006920:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006922:	261f      	movs	r6, #31
 8006924:	4096      	lsls	r6, r2
 8006926:	ea20 0006 	bic.w	r0, r0, r6
 800692a:	fa01 f202 	lsl.w	r2, r1, r2
 800692e:	4302      	orrs	r2, r0
 8006930:	635a      	str	r2, [r3, #52]	; 0x34
 8006932:	e6ed      	b.n	8006710 <HAL_ADC_ConfigChannel+0xbc>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006934:	381e      	subs	r0, #30
 8006936:	699e      	ldr	r6, [r3, #24]
 8006938:	2707      	movs	r7, #7
 800693a:	4087      	lsls	r7, r0
 800693c:	4082      	lsls	r2, r0
 800693e:	ea26 0007 	bic.w	r0, r6, r7
 8006942:	4302      	orrs	r2, r0
 8006944:	619a      	str	r2, [r3, #24]
 8006946:	e6f6      	b.n	8006736 <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006948:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800694a:	01c4      	lsls	r4, r0, #7
 800694c:	d59f      	bpl.n	800688e <HAL_ADC_ConfigChannel+0x23a>
 800694e:	e7c3      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x284>
 8006950:	50000100 	.word	0x50000100
 8006954:	08014f30 	.word	0x08014f30
 8006958:	50000700 	.word	0x50000700
 800695c:	50000300 	.word	0x50000300
 8006960:	50000400 	.word	0x50000400
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	07d7      	lsls	r7, r2, #31
 8006968:	f57f af70 	bpl.w	800684c <HAL_ADC_ConfigChannel+0x1f8>
 800696c:	e7b4      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x284>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800696e:	4302      	orrs	r2, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8006970:	2909      	cmp	r1, #9
 8006972:	68a4      	ldr	r4, [r4, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006974:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8006978:	d913      	bls.n	80069a2 <HAL_ADC_ConfigChannel+0x34e>
        MODIFY_REG(hadc->Instance->SMPR2,
 800697a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800697e:	3a1b      	subs	r2, #27
 8006980:	6998      	ldr	r0, [r3, #24]
 8006982:	2607      	movs	r6, #7
 8006984:	4096      	lsls	r6, r2
 8006986:	ea20 0006 	bic.w	r0, r0, r6
 800698a:	fa04 f202 	lsl.w	r2, r4, r2
 800698e:	4302      	orrs	r2, r0
 8006990:	619a      	str	r2, [r3, #24]
 8006992:	e768      	b.n	8006866 <HAL_ADC_ConfigChannel+0x212>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006994:	6890      	ldr	r0, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006996:	0206      	lsls	r6, r0, #8
 8006998:	f57f af79 	bpl.w	800688e <HAL_ADC_ConfigChannel+0x23a>
 800699c:	e79c      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x284>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800699e:	4a42      	ldr	r2, [pc, #264]	; (8006aa8 <HAL_ADC_ConfigChannel+0x454>)
 80069a0:	e76b      	b.n	800687a <HAL_ADC_ConfigChannel+0x226>
        MODIFY_REG(hadc->Instance->SMPR1,
 80069a2:	1c48      	adds	r0, r1, #1
 80069a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	2607      	movs	r6, #7
 80069ac:	4086      	lsls	r6, r0
 80069ae:	4084      	lsls	r4, r0
 80069b0:	ea22 0206 	bic.w	r2, r2, r6
 80069b4:	4322      	orrs	r2, r4
 80069b6:	615a      	str	r2, [r3, #20]
 80069b8:	e755      	b.n	8006866 <HAL_ADC_ConfigChannel+0x212>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80069ba:	3a5a      	subs	r2, #90	; 0x5a
 80069bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80069be:	261f      	movs	r6, #31
 80069c0:	4096      	lsls	r6, r2
 80069c2:	ea20 0006 	bic.w	r0, r0, r6
 80069c6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ca:	4302      	orrs	r2, r0
 80069cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80069ce:	e69f      	b.n	8006710 <HAL_ADC_ConfigChannel+0xbc>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80069d0:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 80069d2:	4836      	ldr	r0, [pc, #216]	; (8006aac <HAL_ADC_ConfigChannel+0x458>)
 80069d4:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80069d8:	4038      	ands	r0, r7
 80069da:	4330      	orrs	r0, r6
 80069dc:	4302      	orrs	r2, r0
 80069de:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80069e0:	e72e      	b.n	8006840 <HAL_ADC_ConfigChannel+0x1ec>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80069e2:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80069e4:	4831      	ldr	r0, [pc, #196]	; (8006aac <HAL_ADC_ConfigChannel+0x458>)
 80069e6:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80069ea:	4038      	ands	r0, r7
 80069ec:	4330      	orrs	r0, r6
 80069ee:	4302      	orrs	r2, r0
 80069f0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80069f2:	e725      	b.n	8006840 <HAL_ADC_ConfigChannel+0x1ec>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80069f4:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80069f6:	482d      	ldr	r0, [pc, #180]	; (8006aac <HAL_ADC_ConfigChannel+0x458>)
 80069f8:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80069fc:	4038      	ands	r0, r7
 80069fe:	4330      	orrs	r0, r6
 8006a00:	4302      	orrs	r2, r0
 8006a02:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8006a04:	e71c      	b.n	8006840 <HAL_ADC_ConfigChannel+0x1ec>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8006a06:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8006a08:	4828      	ldr	r0, [pc, #160]	; (8006aac <HAL_ADC_ConfigChannel+0x458>)
 8006a0a:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8006a0e:	4038      	ands	r0, r7
 8006a10:	4330      	orrs	r0, r6
 8006a12:	4302      	orrs	r2, r0
 8006a14:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8006a16:	e713      	b.n	8006840 <HAL_ADC_ConfigChannel+0x1ec>
 8006a18:	4c25      	ldr	r4, [pc, #148]	; (8006ab0 <HAL_ADC_ConfigChannel+0x45c>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006a1a:	6898      	ldr	r0, [r3, #8]
 8006a1c:	f000 0003 	and.w	r0, r0, #3
 8006a20:	2801      	cmp	r0, #1
 8006a22:	d026      	beq.n	8006a72 <HAL_ADC_ConfigChannel+0x41e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006a24:	68a0      	ldr	r0, [r4, #8]
 8006a26:	f000 0003 	and.w	r0, r0, #3
 8006a2a:	2801      	cmp	r0, #1
 8006a2c:	d037      	beq.n	8006a9e <HAL_ADC_ConfigChannel+0x44a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006a2e:	2910      	cmp	r1, #16
 8006a30:	f47f af49 	bne.w	80068c6 <HAL_ADC_ConfigChannel+0x272>
 8006a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a38:	f47f af4e 	bne.w	80068d8 <HAL_ADC_ConfigChannel+0x284>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <HAL_ADC_ConfigChannel+0x460>)
 8006a3e:	481e      	ldr	r0, [pc, #120]	; (8006ab8 <HAL_ADC_ConfigChannel+0x464>)
 8006a40:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006a42:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a44:	fba0 0303 	umull	r0, r3, r0, r3
 8006a48:	0c9b      	lsrs	r3, r3, #18
 8006a4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a4e:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006a50:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006a54:	6091      	str	r1, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a56:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f43f af3c 	beq.w	80068d8 <HAL_ADC_ConfigChannel+0x284>
            wait_loop_index--;
 8006a60:	9b01      	ldr	r3, [sp, #4]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f9      	bne.n	8006a60 <HAL_ADC_ConfigChannel+0x40c>
 8006a6c:	e734      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x284>
 8006a6e:	4c13      	ldr	r4, [pc, #76]	; (8006abc <HAL_ADC_ConfigChannel+0x468>)
 8006a70:	e7d3      	b.n	8006a1a <HAL_ADC_ConfigChannel+0x3c6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	07c6      	lsls	r6, r0, #31
 8006a76:	d5d5      	bpl.n	8006a24 <HAL_ADC_ConfigChannel+0x3d0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a78:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006a7a:	f043 0320 	orr.w	r3, r3, #32
 8006a7e:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8006a80:	2001      	movs	r0, #1
 8006a82:	e699      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x164>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a88:	f47f af26 	bne.w	80068d8 <HAL_ADC_ConfigChannel+0x284>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006a8c:	6893      	ldr	r3, [r2, #8]
 8006a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a92:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a94:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006a96:	e68f      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x164>
 8006a98:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8006a9c:	e7bd      	b.n	8006a1a <HAL_ADC_ConfigChannel+0x3c6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	07c0      	lsls	r0, r0, #31
 8006aa2:	d4e9      	bmi.n	8006a78 <HAL_ADC_ConfigChannel+0x424>
 8006aa4:	e7c3      	b.n	8006a2e <HAL_ADC_ConfigChannel+0x3da>
 8006aa6:	bf00      	nop
 8006aa8:	50000300 	.word	0x50000300
 8006aac:	83fff000 	.word	0x83fff000
 8006ab0:	50000500 	.word	0x50000500
 8006ab4:	2000000c 	.word	0x2000000c
 8006ab8:	431bde83 	.word	0x431bde83
 8006abc:	50000100 	.word	0x50000100

08006ac0 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8006ac2:	6803      	ldr	r3, [r0, #0]
 8006ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8006ac8:	4604      	mov	r4, r0
 8006aca:	460d      	mov	r5, r1
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8006acc:	d007      	beq.n	8006ade <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006ace:	4a5a      	ldr	r2, [pc, #360]	; (8006c38 <HAL_ADCEx_MultiModeConfigChannel+0x178>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d004      	beq.n	8006ade <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006ad4:	f641 3117 	movw	r1, #6935	; 0x1b17
 8006ad8:	4858      	ldr	r0, [pc, #352]	; (8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8006ada:	f008 fab3 	bl	800f044 <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d90a      	bls.n	8006afa <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8006ae4:	1f5a      	subs	r2, r3, #5
 8006ae6:	2a02      	cmp	r2, #2
 8006ae8:	d918      	bls.n	8006b1c <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d016      	beq.n	8006b1c <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006aee:	f641 3118 	movw	r1, #6936	; 0x1b18
 8006af2:	4852      	ldr	r0, [pc, #328]	; (8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8006af4:	f008 faa6 	bl	800f044 <assert_failed>
 8006af8:	682b      	ldr	r3, [r5, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006afa:	b97b      	cbnz	r3, 8006b1c <HAL_ADCEx_MultiModeConfigChannel+0x5c>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	4a50      	ldr	r2, [pc, #320]	; (8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8006b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b04:	d028      	beq.n	8006b58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d024      	beq.n	8006b54 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006b0a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d062      	beq.n	8006bd8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006b12:	494c      	ldr	r1, [pc, #304]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8006b14:	428b      	cmp	r3, r1
 8006b16:	d01f      	beq.n	8006b58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    return HAL_ERROR;
 8006b18:	2001      	movs	r0, #1
} 
 8006b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8006b1c:	686b      	ldr	r3, [r5, #4]
 8006b1e:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 8006b22:	d007      	beq.n	8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8006b24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b28:	d004      	beq.n	8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8006b2a:	f641 311b 	movw	r1, #6939	; 0x1b1b
 8006b2e:	4843      	ldr	r0, [pc, #268]	; (8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8006b30:	f008 fa88 	bl	800f044 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8006b34:	68ab      	ldr	r3, [r5, #8]
 8006b36:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8006b3a:	d0df      	beq.n	8006afc <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b40:	d0dc      	beq.n	8006afc <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b46:	d0d9      	beq.n	8006afc <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006b48:	f641 311c 	movw	r1, #6940	; 0x1b1c
 8006b4c:	483b      	ldr	r0, [pc, #236]	; (8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x17c>)
 8006b4e:	f008 fa79 	bl	800f044 <assert_failed>
 8006b52:	e7d3      	b.n	8006afc <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006b54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8006b58:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006b5c:	2901      	cmp	r1, #1
 8006b5e:	d040      	beq.n	8006be2 <HAL_ADCEx_MultiModeConfigChannel+0x122>
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006b60:	6899      	ldr	r1, [r3, #8]
  __HAL_LOCK(hadc);
 8006b62:	2001      	movs	r0, #1
 8006b64:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006b68:	0748      	lsls	r0, r1, #29
 8006b6a:	d508      	bpl.n	8006b7e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b6e:	f043 0320 	orr.w	r3, r3, #32
 8006b72:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8006b74:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8006b76:	2300      	movs	r3, #0
 8006b78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
} 
 8006b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006b7e:	6891      	ldr	r1, [r2, #8]
 8006b80:	0749      	lsls	r1, r1, #29
 8006b82:	d4f3      	bmi.n	8006b6c <HAL_ADCEx_MultiModeConfigChannel+0xac>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b88:	d053      	beq.n	8006c32 <HAL_ADCEx_MultiModeConfigChannel+0x172>
 8006b8a:	4e2d      	ldr	r6, [pc, #180]	; (8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8006b8c:	492e      	ldr	r1, [pc, #184]	; (8006c48 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8006b8e:	482f      	ldr	r0, [pc, #188]	; (8006c4c <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8006b90:	42b3      	cmp	r3, r6
 8006b92:	bf08      	it	eq
 8006b94:	4601      	moveq	r1, r0
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b96:	6828      	ldr	r0, [r5, #0]
 8006b98:	b328      	cbz	r0, 8006be6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006b9a:	688f      	ldr	r7, [r1, #8]
 8006b9c:	686e      	ldr	r6, [r5, #4]
 8006b9e:	f427 4c60 	bic.w	ip, r7, #57344	; 0xe000
 8006ba2:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8006ba4:	ea46 3647 	orr.w	r6, r6, r7, lsl #13
 8006ba8:	ea46 060c 	orr.w	r6, r6, ip
 8006bac:	608e      	str	r6, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006bae:	689e      	ldr	r6, [r3, #8]
 8006bb0:	f006 0603 	and.w	r6, r6, #3
 8006bb4:	2e01      	cmp	r6, #1
 8006bb6:	d030      	beq.n	8006c1a <HAL_ADCEx_MultiModeConfigChannel+0x15a>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006bb8:	6893      	ldr	r3, [r2, #8]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d033      	beq.n	8006c2a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006bc2:	688b      	ldr	r3, [r1, #8]
 8006bc4:	68aa      	ldr	r2, [r5, #8]
 8006bc6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006bca:	4310      	orrs	r0, r2
 8006bcc:	f023 030f 	bic.w	r3, r3, #15
 8006bd0:	4318      	orrs	r0, r3
 8006bd2:	6088      	str	r0, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e7ce      	b.n	8006b76 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  __HAL_LOCK(hadc);
 8006bd8:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006bdc:	4a19      	ldr	r2, [pc, #100]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8006bde:	2901      	cmp	r1, #1
 8006be0:	d1be      	bne.n	8006b60 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006be2:	2002      	movs	r0, #2
} 
 8006be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006be6:	6888      	ldr	r0, [r1, #8]
 8006be8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8006bec:	6088      	str	r0, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006bee:	6898      	ldr	r0, [r3, #8]
 8006bf0:	f000 0003 	and.w	r0, r0, #3
 8006bf4:	2801      	cmp	r0, #1
 8006bf6:	d00c      	beq.n	8006c12 <HAL_ADCEx_MultiModeConfigChannel+0x152>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006bf8:	6893      	ldr	r3, [r2, #8]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d00f      	beq.n	8006c22 <HAL_ADCEx_MultiModeConfigChannel+0x162>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006c02:	688b      	ldr	r3, [r1, #8]
 8006c04:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c08:	f023 030f 	bic.w	r3, r3, #15
 8006c0c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c0e:	2000      	movs	r0, #0
 8006c10:	e7b1      	b.n	8006b76 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	07d8      	lsls	r0, r3, #31
 8006c16:	d4dd      	bmi.n	8006bd4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8006c18:	e7ee      	b.n	8006bf8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	07df      	lsls	r7, r3, #31
 8006c1e:	d5cb      	bpl.n	8006bb8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006c20:	e7d8      	b.n	8006bd4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006c22:	6813      	ldr	r3, [r2, #0]
 8006c24:	07db      	lsls	r3, r3, #31
 8006c26:	d4d5      	bmi.n	8006bd4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8006c28:	e7eb      	b.n	8006c02 <HAL_ADCEx_MultiModeConfigChannel+0x142>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006c2a:	6813      	ldr	r3, [r2, #0]
 8006c2c:	07de      	lsls	r6, r3, #31
 8006c2e:	d4d1      	bmi.n	8006bd4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8006c30:	e7c7      	b.n	8006bc2 <HAL_ADCEx_MultiModeConfigChannel+0x102>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c32:	4906      	ldr	r1, [pc, #24]	; (8006c4c <HAL_ADCEx_MultiModeConfigChannel+0x18c>)
 8006c34:	e7af      	b.n	8006b96 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8006c36:	bf00      	nop
 8006c38:	50000400 	.word	0x50000400
 8006c3c:	08014f30 	.word	0x08014f30
 8006c40:	50000100 	.word	0x50000100
 8006c44:	50000500 	.word	0x50000500
 8006c48:	50000700 	.word	0x50000700
 8006c4c:	50000300 	.word	0x50000300

08006c50 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006c50:	1ec3      	subs	r3, r0, #3
 8006c52:	2b04      	cmp	r3, #4
{
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006c58:	d903      	bls.n	8006c62 <HAL_NVIC_SetPriorityGrouping+0x12>
 8006c5a:	21bc      	movs	r1, #188	; 0xbc
 8006c5c:	4808      	ldr	r0, [pc, #32]	; (8006c80 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8006c5e:	f008 f9f1 	bl	800f044 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c62:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8006c64:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c66:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8006c6a:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c6c:	0224      	lsls	r4, r4, #8
 8006c6e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c72:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 8006c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8006c7a:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8006c7c:	60d4      	str	r4, [r2, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006c7e:	bd10      	pop	{r4, pc}
 8006c80:	08014f80 	.word	0x08014f80
 8006c84:	e000ed00 	.word	0xe000ed00

08006c88 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006c88:	2a0f      	cmp	r2, #15
{
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	4605      	mov	r5, r0
 8006c90:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006c92:	d834      	bhi.n	8006cfe <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006c94:	2c0f      	cmp	r4, #15
 8006c96:	d82d      	bhi.n	8006cf4 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c98:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <HAL_NVIC_SetPriority+0x80>)
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ca0:	f1c3 0107 	rsb	r1, r3, #7
 8006ca4:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ca6:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006caa:	bf28      	it	cs
 8006cac:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cae:	2a06      	cmp	r2, #6
 8006cb0:	d917      	bls.n	8006ce2 <HAL_NVIC_SetPriority+0x5a>
 8006cb2:	3b03      	subs	r3, #3
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	408a      	lsls	r2, r1
 8006cc4:	ea24 0202 	bic.w	r2, r4, r2
 8006cc8:	409a      	lsls	r2, r3
 8006cca:	4332      	orrs	r2, r6
 8006ccc:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	db09      	blt.n	8006ce8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cd4:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8006cd8:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8006cdc:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006ce0:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	4633      	mov	r3, r6
 8006ce6:	e7ea      	b.n	8006cbe <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce8:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <HAL_NVIC_SetPriority+0x84>)
 8006cea:	f005 050f 	and.w	r5, r5, #15
 8006cee:	442b      	add	r3, r5
 8006cf0:	761a      	strb	r2, [r3, #24]
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006cf4:	21d5      	movs	r1, #213	; 0xd5
 8006cf6:	4806      	ldr	r0, [pc, #24]	; (8006d10 <HAL_NVIC_SetPriority+0x88>)
 8006cf8:	f008 f9a4 	bl	800f044 <assert_failed>
 8006cfc:	e7cc      	b.n	8006c98 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006cfe:	21d4      	movs	r1, #212	; 0xd4
 8006d00:	4803      	ldr	r0, [pc, #12]	; (8006d10 <HAL_NVIC_SetPriority+0x88>)
 8006d02:	f008 f99f 	bl	800f044 <assert_failed>
 8006d06:	e7c5      	b.n	8006c94 <HAL_NVIC_SetPriority+0xc>
 8006d08:	e000ed00 	.word	0xe000ed00
 8006d0c:	e000ecfc 	.word	0xe000ecfc
 8006d10:	08014f80 	.word	0x08014f80

08006d14 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006d14:	2800      	cmp	r0, #0
 8006d16:	db08      	blt.n	8006d2a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d18:	f000 011f 	and.w	r1, r0, #31
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	0940      	lsrs	r0, r0, #5
 8006d20:	4a04      	ldr	r2, [pc, #16]	; (8006d34 <HAL_NVIC_EnableIRQ+0x20>)
 8006d22:	408b      	lsls	r3, r1
 8006d24:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006d28:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006d2a:	21e8      	movs	r1, #232	; 0xe8
 8006d2c:	4802      	ldr	r0, [pc, #8]	; (8006d38 <HAL_NVIC_EnableIRQ+0x24>)
 8006d2e:	f008 b989 	b.w	800f044 <assert_failed>
 8006d32:	bf00      	nop
 8006d34:	e000e100 	.word	0xe000e100
 8006d38:	08014f80 	.word	0x08014f80

08006d3c <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	db0e      	blt.n	8006d5e <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d40:	0943      	lsrs	r3, r0, #5
 8006d42:	3320      	adds	r3, #32
 8006d44:	2201      	movs	r2, #1
 8006d46:	4908      	ldr	r1, [pc, #32]	; (8006d68 <HAL_NVIC_DisableIRQ+0x2c>)
 8006d48:	f000 001f 	and.w	r0, r0, #31
 8006d4c:	fa02 f000 	lsl.w	r0, r2, r0
 8006d50:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006d54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006d58:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006d5c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006d5e:	21f8      	movs	r1, #248	; 0xf8
 8006d60:	4802      	ldr	r0, [pc, #8]	; (8006d6c <HAL_NVIC_DisableIRQ+0x30>)
 8006d62:	f008 b96f 	b.w	800f044 <assert_failed>
 8006d66:	bf00      	nop
 8006d68:	e000e100 	.word	0xe000e100
 8006d6c:	08014f80 	.word	0x08014f80

08006d70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d70:	3801      	subs	r0, #1
 8006d72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006d76:	d20e      	bcs.n	8006d96 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d78:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d7a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d7c:	4c08      	ldr	r4, [pc, #32]	; (8006da0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d7e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d80:	20f0      	movs	r0, #240	; 0xf0
 8006d82:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d86:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d88:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d8a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d8e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8006d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006d96:	2001      	movs	r0, #1
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	e000e010 	.word	0xe000e010
 8006da0:	e000ed00 	.word	0xe000ed00

08006da4 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006da4:	2800      	cmp	r0, #0
 8006da6:	db09      	blt.n	8006dbc <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006da8:	0943      	lsrs	r3, r0, #5
 8006daa:	3360      	adds	r3, #96	; 0x60
 8006dac:	f000 001f 	and.w	r0, r0, #31
 8006db0:	2201      	movs	r2, #1
 8006db2:	4903      	ldr	r1, [pc, #12]	; (8006dc0 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8006db4:	fa02 f000 	lsl.w	r0, r2, r0
 8006db8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	e000e100 	.word	0xe000e100

08006dc4 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8006dc4:	2804      	cmp	r0, #4
{
 8006dc6:	b508      	push	{r3, lr}
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8006dc8:	d011      	beq.n	8006dee <HAL_SYSTICK_CLKSourceConfig+0x2a>
 8006dca:	b928      	cbnz	r0, 8006dd8 <HAL_SYSTICK_CLKSourceConfig+0x14>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006dcc:	4a0b      	ldr	r2, [pc, #44]	; (8006dfc <HAL_SYSTICK_CLKSourceConfig+0x38>)
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	f023 0304 	bic.w	r3, r3, #4
 8006dd4:	6013      	str	r3, [r2, #0]
  }
}
 8006dd6:	bd08      	pop	{r3, pc}
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8006dd8:	f240 11e1 	movw	r1, #481	; 0x1e1
 8006ddc:	4808      	ldr	r0, [pc, #32]	; (8006e00 <HAL_SYSTICK_CLKSourceConfig+0x3c>)
 8006dde:	f008 f931 	bl	800f044 <assert_failed>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006de2:	4a06      	ldr	r2, [pc, #24]	; (8006dfc <HAL_SYSTICK_CLKSourceConfig+0x38>)
 8006de4:	6813      	ldr	r3, [r2, #0]
 8006de6:	f023 0304 	bic.w	r3, r3, #4
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	e7f3      	b.n	8006dd6 <HAL_SYSTICK_CLKSourceConfig+0x12>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006dee:	4a03      	ldr	r2, [pc, #12]	; (8006dfc <HAL_SYSTICK_CLKSourceConfig+0x38>)
 8006df0:	6813      	ldr	r3, [r2, #0]
 8006df2:	f043 0304 	orr.w	r3, r3, #4
 8006df6:	6013      	str	r3, [r2, #0]
}
 8006df8:	bd08      	pop	{r3, pc}
 8006dfa:	bf00      	nop
 8006dfc:	e000e010 	.word	0xe000e010
 8006e00:	08014f80 	.word	0x08014f80

08006e04 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8006e04:	b1d8      	cbz	r0, 8006e3e <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8006e06:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <HAL_DAC_Init+0x40>)
 8006e08:	6802      	ldr	r2, [r0, #0]
 8006e0a:	429a      	cmp	r2, r3
{ 
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8006e10:	d004      	beq.n	8006e1c <HAL_DAC_Init+0x18>
 8006e12:	f240 111f 	movw	r1, #287	; 0x11f
 8006e16:	480c      	ldr	r0, [pc, #48]	; (8006e48 <HAL_DAC_Init+0x44>)
 8006e18:	f008 f914 	bl	800f044 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8006e1c:	7923      	ldrb	r3, [r4, #4]
 8006e1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e22:	b13b      	cbz	r3, 8006e34 <HAL_DAC_Init+0x30>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006e24:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e26:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006e28:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e2a:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8006e2c:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006e2e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006e30:	7122      	strb	r2, [r4, #4]
}
 8006e32:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006e34:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8006e36:	4620      	mov	r0, r4
 8006e38:	f007 ff0c 	bl	800ec54 <HAL_DAC_MspInit>
 8006e3c:	e7f2      	b.n	8006e24 <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 8006e3e:	2001      	movs	r0, #1
}
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40007400 	.word	0x40007400
 8006e48:	08014fd0 	.word	0x08014fd0

08006e4c <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006e4c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006e4e:	4a0d      	ldr	r2, [pc, #52]	; (8006e84 <HAL_DAC_Stop+0x38>)
 8006e50:	6803      	ldr	r3, [r0, #0]
 8006e52:	4293      	cmp	r3, r2
{
 8006e54:	4605      	mov	r5, r0
 8006e56:	460c      	mov	r4, r1
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006e58:	d00f      	beq.n	8006e7a <HAL_DAC_Stop+0x2e>
 8006e5a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006e5e:	480a      	ldr	r0, [pc, #40]	; (8006e88 <HAL_DAC_Stop+0x3c>)
 8006e60:	f008 f8f0 	bl	800f044 <assert_failed>
 8006e64:	682b      	ldr	r3, [r5, #0]
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	2101      	movs	r1, #1
 8006e6a:	fa01 f404 	lsl.w	r4, r1, r4
 8006e6e:	ea22 0404 	bic.w	r4, r2, r4
 8006e72:	601c      	str	r4, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8006e74:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006e76:	7129      	strb	r1, [r5, #4]
}
 8006e78:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006e7a:	f031 0210 	bics.w	r2, r1, #16
 8006e7e:	d1ec      	bne.n	8006e5a <HAL_DAC_Stop+0xe>
 8006e80:	e7f1      	b.n	8006e66 <HAL_DAC_Stop+0x1a>
 8006e82:	bf00      	nop
 8006e84:	40007400 	.word	0x40007400
 8006e88:	08014fd0 	.word	0x08014fd0

08006e8c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8006e8c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006e8e:	4a2e      	ldr	r2, [pc, #184]	; (8006f48 <HAL_DAC_Stop_DMA+0xbc>)
 8006e90:	6803      	ldr	r3, [r0, #0]
 8006e92:	4293      	cmp	r3, r2
{
 8006e94:	4604      	mov	r4, r0
 8006e96:	460d      	mov	r5, r1
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006e98:	d034      	beq.n	8006f04 <HAL_DAC_Stop_DMA+0x78>
 8006e9a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8006e9e:	482b      	ldr	r0, [pc, #172]	; (8006f4c <HAL_DAC_Stop_DMA+0xc0>)
 8006ea0:	f008 f8d0 	bl	800f044 <assert_failed>
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	40a9      	lsls	r1, r5
 8006eae:	ea22 0201 	bic.w	r2, r2, r1
 8006eb2:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	40a9      	lsls	r1, r5
 8006eba:	ea22 0201 	bic.w	r2, r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006ec0:	b19d      	cbz	r5, 8006eea <HAL_DAC_Stop_DMA+0x5e>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8006ec2:	68e0      	ldr	r0, [r4, #12]
 8006ec4:	f000 fb56 	bl	8007574 <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ed0:	6013      	str	r3, [r2, #0]
  }
#endif
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8006ed2:	b9a0      	cbnz	r0, 8006efe <HAL_DAC_Stop_DMA+0x72>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ee0:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	f022 0201 	bic.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8006eea:	68a0      	ldr	r0, [r4, #8]
 8006eec:	f000 fb42 	bl	8007574 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006ef0:	6822      	ldr	r2, [r4, #0]
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef8:	6013      	str	r3, [r2, #0]
  if (status != HAL_OK)
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d0ea      	beq.n	8006ed4 <HAL_DAC_Stop_DMA+0x48>
    hdac->State = HAL_DAC_STATE_ERROR;      
 8006efe:	2304      	movs	r3, #4
 8006f00:	7123      	strb	r3, [r4, #4]
}
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006f04:	2900      	cmp	r1, #0
 8006f06:	d0e8      	beq.n	8006eda <HAL_DAC_Stop_DMA+0x4e>
 8006f08:	2910      	cmp	r1, #16
 8006f0a:	d014      	beq.n	8006f36 <HAL_DAC_Stop_DMA+0xaa>
 8006f0c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8006f10:	480e      	ldr	r0, [pc, #56]	; (8006f4c <HAL_DAC_Stop_DMA+0xc0>)
 8006f12:	f008 f897 	bl	800f044 <assert_failed>
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	40a9      	lsls	r1, r5
 8006f20:	ea22 0201 	bic.w	r2, r2, r1
 8006f24:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	2101      	movs	r1, #1
 8006f2a:	fa01 f505 	lsl.w	r5, r1, r5
 8006f2e:	ea22 0505 	bic.w	r5, r2, r5
 8006f32:	601d      	str	r5, [r3, #0]
 8006f34:	e7c5      	b.n	8006ec2 <HAL_DAC_Stop_DMA+0x36>
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f3c:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e7bc      	b.n	8006ec2 <HAL_DAC_Stop_DMA+0x36>
 8006f48:	40007400 	.word	0x40007400
 8006f4c:	08014fd0 	.word	0x08014fd0

08006f50 <HAL_DAC_ConvCpltCallbackCh1>:
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop

08006f54 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop

08006f58 <HAL_DAC_ErrorCallbackCh1>:
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop

08006f5c <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8006f5c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f5e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006f60:	6923      	ldr	r3, [r4, #16]
 8006f62:	f043 0304 	orr.w	r3, r3, #4
 8006f66:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7ff fff5 	bl	8006f58 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	7123      	strb	r3, [r4, #4]
}
 8006f72:	bd10      	pop	{r4, pc}

08006f74 <DAC_DMAHalfConvCpltCh1>:
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006f74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006f76:	f7ff bfed 	b.w	8006f54 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8006f7a:	bf00      	nop

08006f7c <DAC_DMAConvCpltCh1>:
{
 8006f7c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8006f80:	4620      	mov	r0, r4
 8006f82:	f7ff ffe5 	bl	8006f50 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8006f86:	2301      	movs	r3, #1
 8006f88:	7123      	strb	r3, [r4, #4]
}
 8006f8a:	bd10      	pop	{r4, pc}

08006f8c <HAL_DAC_Start_DMA>:
{
 8006f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006f92:	4d3c      	ldr	r5, [pc, #240]	; (8007084 <HAL_DAC_Start_DMA+0xf8>)
 8006f94:	6800      	ldr	r0, [r0, #0]
{
 8006f96:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006f98:	42a8      	cmp	r0, r5
{
 8006f9a:	460f      	mov	r7, r1
 8006f9c:	4690      	mov	r8, r2
 8006f9e:	4699      	mov	r9, r3
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8006fa0:	d04f      	beq.n	8007042 <HAL_DAC_Start_DMA+0xb6>
 8006fa2:	f240 117d 	movw	r1, #381	; 0x17d
 8006fa6:	4838      	ldr	r0, [pc, #224]	; (8007088 <HAL_DAC_Start_DMA+0xfc>)
 8006fa8:	f008 f84c 	bl	800f044 <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8006fac:	f036 0304 	bics.w	r3, r6, #4
 8006fb0:	d001      	beq.n	8006fb6 <HAL_DAC_Start_DMA+0x2a>
 8006fb2:	2e08      	cmp	r6, #8
 8006fb4:	d149      	bne.n	800704a <HAL_DAC_Start_DMA+0xbe>
  __HAL_LOCK(hdac);
 8006fb6:	7962      	ldrb	r2, [r4, #5]
 8006fb8:	2a01      	cmp	r2, #1
 8006fba:	d04e      	beq.n	800705a <HAL_DAC_Start_DMA+0xce>
  hdac->State = HAL_DAC_STATE_BUSY;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	6825      	ldr	r5, [r4, #0]
 8006fc0:	7123      	strb	r3, [r4, #4]
  __HAL_LOCK(hdac);
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	7162      	strb	r2, [r4, #5]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006fc6:	682b      	ldr	r3, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 8006fc8:	b9cf      	cbnz	r7, 8006ffe <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006fca:	68a0      	ldr	r0, [r4, #8]
 8006fcc:	4a2f      	ldr	r2, [pc, #188]	; (800708c <HAL_DAC_Start_DMA+0x100>)
 8006fce:	6282      	str	r2, [r0, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006fd0:	492f      	ldr	r1, [pc, #188]	; (8007090 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006fd2:	4a30      	ldr	r2, [pc, #192]	; (8007094 <HAL_DAC_Start_DMA+0x108>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    switch(Alignment)
 8006fd8:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006fda:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006fde:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8006fe0:	d04d      	beq.n	800707e <HAL_DAC_Start_DMA+0xf2>
 8006fe2:	2e08      	cmp	r6, #8
 8006fe4:	d048      	beq.n	8007078 <HAL_DAC_Start_DMA+0xec>
 8006fe6:	2e00      	cmp	r6, #0
 8006fe8:	d03a      	beq.n	8007060 <HAL_DAC_Start_DMA+0xd4>
  if(Channel == DAC_CHANNEL_1)
 8006fea:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006fec:	682e      	ldr	r6, [r5, #0]
 8006fee:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006ff6:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006ff8:	f000 fa62 	bl	80074c0 <HAL_DMA_Start_IT>
 8006ffc:	e017      	b.n	800702e <HAL_DAC_Start_DMA+0xa2>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006ffe:	68e0      	ldr	r0, [r4, #12]
 8007000:	4a25      	ldr	r2, [pc, #148]	; (8007098 <HAL_DAC_Start_DMA+0x10c>)
 8007002:	6282      	str	r2, [r0, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007004:	4925      	ldr	r1, [pc, #148]	; (800709c <HAL_DAC_Start_DMA+0x110>)
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007006:	4a26      	ldr	r2, [pc, #152]	; (80070a0 <HAL_DAC_Start_DMA+0x114>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8007008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    switch(Alignment)
 800700c:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800700e:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8007012:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8007014:	d02d      	beq.n	8007072 <HAL_DAC_Start_DMA+0xe6>
 8007016:	2e08      	cmp	r6, #8
 8007018:	d028      	beq.n	800706c <HAL_DAC_Start_DMA+0xe0>
 800701a:	b326      	cbz	r6, 8007066 <HAL_DAC_Start_DMA+0xda>
  if(Channel == DAC_CHANNEL_1)
 800701c:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800701e:	682e      	ldr	r6, [r5, #0]
 8007020:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007024:	464b      	mov	r3, r9
 8007026:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007028:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800702a:	f000 fa49 	bl	80074c0 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE(hdac, Channel);
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	2101      	movs	r1, #1
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	40b9      	lsls	r1, r7
 8007036:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hdac);
 8007038:	2000      	movs	r0, #0
 800703a:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800703c:	6019      	str	r1, [r3, #0]
}
 800703e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
 8007042:	f031 0310 	bics.w	r3, r1, #16
 8007046:	d0b1      	beq.n	8006fac <HAL_DAC_Start_DMA+0x20>
 8007048:	e7ab      	b.n	8006fa2 <HAL_DAC_Start_DMA+0x16>
  assert_param(IS_DAC_ALIGN(Alignment));
 800704a:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800704e:	480e      	ldr	r0, [pc, #56]	; (8007088 <HAL_DAC_Start_DMA+0xfc>)
 8007050:	f007 fff8 	bl	800f044 <assert_failed>
  __HAL_LOCK(hdac);
 8007054:	7962      	ldrb	r2, [r4, #5]
 8007056:	2a01      	cmp	r2, #1
 8007058:	d1b0      	bne.n	8006fbc <HAL_DAC_Start_DMA+0x30>
 800705a:	2002      	movs	r0, #2
}
 800705c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007060:	f105 0208 	add.w	r2, r5, #8
        break;
 8007064:	e7c2      	b.n	8006fec <HAL_DAC_Start_DMA+0x60>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007066:	f105 0214 	add.w	r2, r5, #20
        break;
 800706a:	e7d8      	b.n	800701e <HAL_DAC_Start_DMA+0x92>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800706c:	f105 021c 	add.w	r2, r5, #28
        break;
 8007070:	e7d5      	b.n	800701e <HAL_DAC_Start_DMA+0x92>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007072:	f105 0218 	add.w	r2, r5, #24
        break;
 8007076:	e7d2      	b.n	800701e <HAL_DAC_Start_DMA+0x92>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007078:	f105 0210 	add.w	r2, r5, #16
        break;
 800707c:	e7b6      	b.n	8006fec <HAL_DAC_Start_DMA+0x60>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800707e:	f105 020c 	add.w	r2, r5, #12
        break;
 8007082:	e7b3      	b.n	8006fec <HAL_DAC_Start_DMA+0x60>
 8007084:	40007400 	.word	0x40007400
 8007088:	0801501c 	.word	0x0801501c
 800708c:	08006f7d 	.word	0x08006f7d
 8007090:	08006f75 	.word	0x08006f75
 8007094:	08006f5d 	.word	0x08006f5d
 8007098:	08007149 	.word	0x08007149
 800709c:	0800715d 	.word	0x0800715d
 80070a0:	0800716d 	.word	0x0800716d

080070a4 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80070a4:	680b      	ldr	r3, [r1, #0]
{
 80070a6:	b570      	push	{r4, r5, r6, lr}
 80070a8:	4616      	mov	r6, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80070aa:	f033 0204 	bics.w	r2, r3, #4
{
 80070ae:	460d      	mov	r5, r1
 80070b0:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80070b2:	d012      	beq.n	80070da <HAL_DAC_ConfigChannel+0x36>
 80070b4:	f023 0208 	bic.w	r2, r3, #8
 80070b8:	2a24      	cmp	r2, #36	; 0x24
 80070ba:	d00e      	beq.n	80070da <HAL_DAC_ConfigChannel+0x36>
 80070bc:	f023 0210 	bic.w	r2, r3, #16
 80070c0:	2a0c      	cmp	r2, #12
 80070c2:	d00a      	beq.n	80070da <HAL_DAC_ConfigChannel+0x36>
 80070c4:	f023 0220 	bic.w	r2, r3, #32
 80070c8:	2a14      	cmp	r2, #20
 80070ca:	d006      	beq.n	80070da <HAL_DAC_ConfigChannel+0x36>
 80070cc:	2b3c      	cmp	r3, #60	; 0x3c
 80070ce:	d004      	beq.n	80070da <HAL_DAC_ConfigChannel+0x36>
 80070d0:	f44f 7144 	mov.w	r1, #784	; 0x310
 80070d4:	481a      	ldr	r0, [pc, #104]	; (8007140 <HAL_DAC_ConfigChannel+0x9c>)
 80070d6:	f007 ffb5 	bl	800f044 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
 80070da:	686b      	ldr	r3, [r5, #4]
 80070dc:	f033 0302 	bics.w	r3, r3, #2
 80070e0:	d004      	beq.n	80070ec <HAL_DAC_ConfigChannel+0x48>
 80070e2:	f240 311e 	movw	r1, #798	; 0x31e
 80070e6:	4816      	ldr	r0, [pc, #88]	; (8007140 <HAL_DAC_ConfigChannel+0x9c>)
 80070e8:	f007 ffac 	bl	800f044 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));   
 80070ec:	f036 0310 	bics.w	r3, r6, #16
 80070f0:	d004      	beq.n	80070fc <HAL_DAC_ConfigChannel+0x58>
 80070f2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070f6:	4812      	ldr	r0, [pc, #72]	; (8007140 <HAL_DAC_ConfigChannel+0x9c>)
 80070f8:	f007 ffa4 	bl	800f044 <assert_failed>
  __HAL_LOCK(hdac);
 80070fc:	7963      	ldrb	r3, [r4, #5]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d01b      	beq.n	800713a <HAL_DAC_ConfigChannel+0x96>
  hdac->State = HAL_DAC_STATE_BUSY;
 8007102:	2302      	movs	r3, #2
 8007104:	7123      	strb	r3, [r4, #4]
  tmpreg1 = hdac->Instance->CR;
 8007106:	6821      	ldr	r1, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007108:	e9d5 3500 	ldrd	r3, r5, [r5]
  tmpreg1 = hdac->Instance->CR;
 800710c:	680a      	ldr	r2, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800710e:	f640 70fe 	movw	r0, #4094	; 0xffe
 8007112:	40b0      	lsls	r0, r6
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007114:	432b      	orrs	r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8007116:	ea22 0200 	bic.w	r2, r2, r0
  tmpreg1 |= tmpreg2 << Channel;
 800711a:	40b3      	lsls	r3, r6
 800711c:	4313      	orrs	r3, r2
  hdac->Instance->CR = tmpreg1;
 800711e:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8007120:	680b      	ldr	r3, [r1, #0]
 8007122:	22c0      	movs	r2, #192	; 0xc0
 8007124:	fa02 f606 	lsl.w	r6, r2, r6
 8007128:	ea23 0606 	bic.w	r6, r3, r6
  hdac->State = HAL_DAC_STATE_READY;
 800712c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdac);
 800712e:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8007130:	600e      	str	r6, [r1, #0]
  return HAL_OK;
 8007132:	4618      	mov	r0, r3
  hdac->State = HAL_DAC_STATE_READY;
 8007134:	7122      	strb	r2, [r4, #4]
  __HAL_UNLOCK(hdac);
 8007136:	7163      	strb	r3, [r4, #5]
}
 8007138:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 800713a:	2002      	movs	r0, #2
}
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	bf00      	nop
 8007140:	0801501c 	.word	0x0801501c

08007144 <HAL_DACEx_ConvCpltCallbackCh2>:
}
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop

08007148 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8007148:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800714a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800714c:	4620      	mov	r0, r4
 800714e:	f7ff fff9 	bl	8007144 <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 8007152:	2301      	movs	r3, #1
 8007154:	7123      	strb	r3, [r4, #4]
}
 8007156:	bd10      	pop	{r4, pc}

08007158 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop

0800715c <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800715c:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800715e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007160:	f7ff fffa 	bl	8007158 <HAL_DACEx_ConvHalfCpltCallbackCh2>
}
 8007164:	bd08      	pop	{r3, pc}
 8007166:	bf00      	nop

08007168 <HAL_DACEx_ErrorCallbackCh2>:
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop

0800716c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800716c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800716e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	f043 0304 	orr.w	r3, r3, #4
 8007176:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007178:	4620      	mov	r0, r4
 800717a:	f7ff fff5 	bl	8007168 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 800717e:	2301      	movs	r3, #1
 8007180:	7123      	strb	r3, [r4, #4]
}
 8007182:	bd10      	pop	{r4, pc}

08007184 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8007184:	2800      	cmp	r0, #0
 8007186:	f000 808c 	beq.w	80072a2 <HAL_DMA_Init+0x11e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800718a:	6803      	ldr	r3, [r0, #0]
 800718c:	4a5c      	ldr	r2, [pc, #368]	; (8007300 <HAL_DMA_Init+0x17c>)
 800718e:	4293      	cmp	r3, r2
{ 
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8007194:	d025      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 8007196:	3214      	adds	r2, #20
 8007198:	4293      	cmp	r3, r2
 800719a:	d022      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 800719c:	3214      	adds	r2, #20
 800719e:	4293      	cmp	r3, r2
 80071a0:	d01f      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071a2:	3214      	adds	r2, #20
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d01c      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071a8:	3214      	adds	r2, #20
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d019      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071ae:	3214      	adds	r2, #20
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d016      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071b4:	3214      	adds	r2, #20
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d013      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071ba:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00f      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071c2:	3214      	adds	r2, #20
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00c      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071c8:	3214      	adds	r2, #20
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d009      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071ce:	3214      	adds	r2, #20
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d006      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071d4:	3214      	adds	r2, #20
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <HAL_DMA_Init+0x5e>
 80071da:	21a4      	movs	r1, #164	; 0xa4
 80071dc:	4849      	ldr	r0, [pc, #292]	; (8007304 <HAL_DMA_Init+0x180>)
 80071de:	f007 ff31 	bl	800f044 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	f033 0210 	bics.w	r2, r3, #16
 80071e8:	d002      	beq.n	80071f0 <HAL_DMA_Init+0x6c>
 80071ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ee:	d16b      	bne.n	80072c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80071f0:	68a3      	ldr	r3, [r4, #8]
 80071f2:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80071f6:	d156      	bne.n	80072a6 <HAL_DMA_Init+0x122>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80071f8:	68e3      	ldr	r3, [r4, #12]
 80071fa:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80071fe:	d15a      	bne.n	80072b6 <HAL_DMA_Init+0x132>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8007206:	d002      	beq.n	800720e <HAL_DMA_Init+0x8a>
 8007208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800720c:	d165      	bne.n	80072da <HAL_DMA_Init+0x156>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800720e:	6963      	ldr	r3, [r4, #20]
 8007210:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8007214:	d002      	beq.n	800721c <HAL_DMA_Init+0x98>
 8007216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800721a:	d167      	bne.n	80072ec <HAL_DMA_Init+0x168>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800721c:	69a3      	ldr	r3, [r4, #24]
 800721e:	f033 0320 	bics.w	r3, r3, #32
 8007222:	d003      	beq.n	800722c <HAL_DMA_Init+0xa8>
 8007224:	21aa      	movs	r1, #170	; 0xaa
 8007226:	4837      	ldr	r0, [pc, #220]	; (8007304 <HAL_DMA_Init+0x180>)
 8007228:	f007 ff0c 	bl	800f044 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800722c:	69e0      	ldr	r0, [r4, #28]
 800722e:	f430 5340 	bics.w	r3, r0, #12288	; 0x3000
 8007232:	d004      	beq.n	800723e <HAL_DMA_Init+0xba>
 8007234:	4833      	ldr	r0, [pc, #204]	; (8007304 <HAL_DMA_Init+0x180>)
 8007236:	21ab      	movs	r1, #171	; 0xab
 8007238:	f007 ff04 	bl	800f044 <assert_failed>
 800723c:	69e0      	ldr	r0, [r4, #28]
 800723e:	68e2      	ldr	r2, [r4, #12]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007240:	6821      	ldr	r1, [r4, #0]
 8007242:	6926      	ldr	r6, [r4, #16]
 8007244:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007248:	432b      	orrs	r3, r5
 800724a:	4313      	orrs	r3, r2
 800724c:	6965      	ldr	r5, [r4, #20]
 800724e:	680a      	ldr	r2, [r1, #0]
 8007250:	4333      	orrs	r3, r6
 8007252:	432b      	orrs	r3, r5
 8007254:	69a5      	ldr	r5, [r4, #24]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007256:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800725a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800725e:	432b      	orrs	r3, r5
 8007260:	4313      	orrs	r3, r2
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007262:	4a29      	ldr	r2, [pc, #164]	; (8007308 <HAL_DMA_Init+0x184>)
  tmp |=  hdma->Init.Direction        |
 8007264:	4303      	orrs	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007266:	4291      	cmp	r1, r2
  hdma->Instance->CCR = tmp;  
 8007268:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800726a:	d911      	bls.n	8007290 <HAL_DMA_Init+0x10c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800726c:	4b27      	ldr	r3, [pc, #156]	; (800730c <HAL_DMA_Init+0x188>)
 800726e:	4a28      	ldr	r2, [pc, #160]	; (8007310 <HAL_DMA_Init+0x18c>)
    hdma->DmaBaseAddress = DMA2;
 8007270:	4d28      	ldr	r5, [pc, #160]	; (8007314 <HAL_DMA_Init+0x190>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007272:	440b      	add	r3, r1
 8007274:	fba2 2303 	umull	r2, r3, r2, r3
 8007278:	091b      	lsrs	r3, r3, #4
 800727a:	009b      	lsls	r3, r3, #2
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800727c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800727e:	2201      	movs	r2, #1
 8007280:	e9c4 530f 	strd	r5, r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007284:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8007286:	f884 0020 	strb.w	r0, [r4, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800728a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
}  
 800728e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007290:	4b21      	ldr	r3, [pc, #132]	; (8007318 <HAL_DMA_Init+0x194>)
 8007292:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <HAL_DMA_Init+0x18c>)
    hdma->DmaBaseAddress = DMA1;
 8007294:	4d21      	ldr	r5, [pc, #132]	; (800731c <HAL_DMA_Init+0x198>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007296:	440b      	add	r3, r1
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	e7ec      	b.n	800727c <HAL_DMA_Init+0xf8>
    return HAL_ERROR;
 80072a2:	2001      	movs	r0, #1
}  
 80072a4:	4770      	bx	lr
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80072a6:	21a6      	movs	r1, #166	; 0xa6
 80072a8:	4816      	ldr	r0, [pc, #88]	; (8007304 <HAL_DMA_Init+0x180>)
 80072aa:	f007 fecb 	bl	800f044 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80072ae:	68e3      	ldr	r3, [r4, #12]
 80072b0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80072b4:	d0a4      	beq.n	8007200 <HAL_DMA_Init+0x7c>
 80072b6:	21a7      	movs	r1, #167	; 0xa7
 80072b8:	4812      	ldr	r0, [pc, #72]	; (8007304 <HAL_DMA_Init+0x180>)
 80072ba:	f007 fec3 	bl	800f044 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80072c4:	d0a3      	beq.n	800720e <HAL_DMA_Init+0x8a>
 80072c6:	e79f      	b.n	8007208 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80072c8:	21a5      	movs	r1, #165	; 0xa5
 80072ca:	480e      	ldr	r0, [pc, #56]	; (8007304 <HAL_DMA_Init+0x180>)
 80072cc:	f007 feba 	bl	800f044 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80072d0:	68a3      	ldr	r3, [r4, #8]
 80072d2:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80072d6:	d08f      	beq.n	80071f8 <HAL_DMA_Init+0x74>
 80072d8:	e7e5      	b.n	80072a6 <HAL_DMA_Init+0x122>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80072da:	21a8      	movs	r1, #168	; 0xa8
 80072dc:	4809      	ldr	r0, [pc, #36]	; (8007304 <HAL_DMA_Init+0x180>)
 80072de:	f007 feb1 	bl	800f044 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80072e2:	6963      	ldr	r3, [r4, #20]
 80072e4:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80072e8:	d098      	beq.n	800721c <HAL_DMA_Init+0x98>
 80072ea:	e794      	b.n	8007216 <HAL_DMA_Init+0x92>
 80072ec:	21a9      	movs	r1, #169	; 0xa9
 80072ee:	4805      	ldr	r0, [pc, #20]	; (8007304 <HAL_DMA_Init+0x180>)
 80072f0:	f007 fea8 	bl	800f044 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80072f4:	69a3      	ldr	r3, [r4, #24]
 80072f6:	f033 0320 	bics.w	r3, r3, #32
 80072fa:	d097      	beq.n	800722c <HAL_DMA_Init+0xa8>
 80072fc:	e792      	b.n	8007224 <HAL_DMA_Init+0xa0>
 80072fe:	bf00      	nop
 8007300:	40020008 	.word	0x40020008
 8007304:	0801506c 	.word	0x0801506c
 8007308:	40020407 	.word	0x40020407
 800730c:	bffdfbf8 	.word	0xbffdfbf8
 8007310:	cccccccd 	.word	0xcccccccd
 8007314:	40020400 	.word	0x40020400
 8007318:	bffdfff8 	.word	0xbffdfff8
 800731c:	40020000 	.word	0x40020000

08007320 <HAL_DMA_DeInit>:
  if(NULL == hdma)
 8007320:	2800      	cmp	r0, #0
 8007322:	d05d      	beq.n	80073e0 <HAL_DMA_DeInit+0xc0>
{
 8007324:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8007326:	4a39      	ldr	r2, [pc, #228]	; (800740c <HAL_DMA_DeInit+0xec>)
 8007328:	6803      	ldr	r3, [r0, #0]
 800732a:	4293      	cmp	r3, r2
 800732c:	4604      	mov	r4, r0
 800732e:	d034      	beq.n	800739a <HAL_DMA_DeInit+0x7a>
 8007330:	3214      	adds	r2, #20
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <HAL_DMA_DeInit+0x7a>
 8007336:	3214      	adds	r2, #20
 8007338:	4293      	cmp	r3, r2
 800733a:	d02e      	beq.n	800739a <HAL_DMA_DeInit+0x7a>
 800733c:	3214      	adds	r2, #20
 800733e:	4293      	cmp	r3, r2
 8007340:	d02b      	beq.n	800739a <HAL_DMA_DeInit+0x7a>
 8007342:	3214      	adds	r2, #20
 8007344:	4293      	cmp	r3, r2
 8007346:	d028      	beq.n	800739a <HAL_DMA_DeInit+0x7a>
 8007348:	3214      	adds	r2, #20
 800734a:	4293      	cmp	r3, r2
 800734c:	d025      	beq.n	800739a <HAL_DMA_DeInit+0x7a>
 800734e:	3214      	adds	r2, #20
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_DeInit+0x7a>
 8007354:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8007358:	4293      	cmp	r3, r2
 800735a:	d043      	beq.n	80073e4 <HAL_DMA_DeInit+0xc4>
 800735c:	3214      	adds	r2, #20
 800735e:	4293      	cmp	r3, r2
 8007360:	d040      	beq.n	80073e4 <HAL_DMA_DeInit+0xc4>
 8007362:	3214      	adds	r2, #20
 8007364:	4293      	cmp	r3, r2
 8007366:	d03d      	beq.n	80073e4 <HAL_DMA_DeInit+0xc4>
 8007368:	3214      	adds	r2, #20
 800736a:	4293      	cmp	r3, r2
 800736c:	d03a      	beq.n	80073e4 <HAL_DMA_DeInit+0xc4>
 800736e:	3214      	adds	r2, #20
 8007370:	4293      	cmp	r3, r2
 8007372:	d037      	beq.n	80073e4 <HAL_DMA_DeInit+0xc4>
 8007374:	21e0      	movs	r1, #224	; 0xe0
 8007376:	4826      	ldr	r0, [pc, #152]	; (8007410 <HAL_DMA_DeInit+0xf0>)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007378:	4d26      	ldr	r5, [pc, #152]	; (8007414 <HAL_DMA_DeInit+0xf4>)
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800737a:	f007 fe63 	bl	800f044 <assert_failed>
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	6818      	ldr	r0, [r3, #0]
  hdma->Instance->CCR  = 0U;
 8007382:	2200      	movs	r2, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007384:	f020 0001 	bic.w	r0, r0, #1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007388:	42ab      	cmp	r3, r5
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800738a:	6018      	str	r0, [r3, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800738c:	4619      	mov	r1, r3
  hdma->Instance->CCR  = 0U;
 800738e:	601a      	str	r2, [r3, #0]
  hdma->Instance->CNDTR = 0U;
 8007390:	605a      	str	r2, [r3, #4]
  hdma->Instance->CPAR  = 0U;
 8007392:	609a      	str	r2, [r3, #8]
  hdma->Instance->CMAR = 0U;
 8007394:	60da      	str	r2, [r3, #12]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007396:	d82f      	bhi.n	80073f8 <HAL_DMA_DeInit+0xd8>
 8007398:	e009      	b.n	80073ae <HAL_DMA_DeInit+0x8e>
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800739a:	6819      	ldr	r1, [r3, #0]
  hdma->Instance->CCR  = 0U;
 800739c:	2200      	movs	r2, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800739e:	f021 0101 	bic.w	r1, r1, #1
 80073a2:	6019      	str	r1, [r3, #0]
  hdma->Instance->CCR  = 0U;
 80073a4:	601a      	str	r2, [r3, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80073a6:	4619      	mov	r1, r3
  hdma->Instance->CNDTR = 0U;
 80073a8:	605a      	str	r2, [r3, #4]
  hdma->Instance->CPAR  = 0U;
 80073aa:	609a      	str	r2, [r3, #8]
  hdma->Instance->CMAR = 0U;
 80073ac:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80073ae:	4b1a      	ldr	r3, [pc, #104]	; (8007418 <HAL_DMA_DeInit+0xf8>)
 80073b0:	4a1a      	ldr	r2, [pc, #104]	; (800741c <HAL_DMA_DeInit+0xfc>)
    hdma->DmaBaseAddress = DMA1;
 80073b2:	4d1b      	ldr	r5, [pc, #108]	; (8007420 <HAL_DMA_DeInit+0x100>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80073b4:	440b      	add	r3, r1
 80073b6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ba:	091b      	lsrs	r3, r3, #4
 80073bc:	009b      	lsls	r3, r3, #2
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80073be:	2101      	movs	r1, #1
  hdma->XferCpltCallback = NULL;
 80073c0:	2200      	movs	r2, #0
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80073c2:	4099      	lsls	r1, r3
 80073c4:	e9c4 530f 	strd	r5, r3, [r4, #60]	; 0x3c
  return HAL_OK;
 80073c8:	4610      	mov	r0, r2
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80073ca:	6069      	str	r1, [r5, #4]
  hdma->XferHalfCpltCallback = NULL;
 80073cc:	e9c4 220a 	strd	r2, r2, [r4, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 80073d0:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073d4:	63a2      	str	r2, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 80073d6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 80073da:	f884 2020 	strb.w	r2, [r4, #32]
}
 80073de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80073e0:	2001      	movs	r0, #1
}
 80073e2:	4770      	bx	lr
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80073e4:	6819      	ldr	r1, [r3, #0]
  hdma->Instance->CCR  = 0U;
 80073e6:	2200      	movs	r2, #0
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80073e8:	f021 0101 	bic.w	r1, r1, #1
 80073ec:	6019      	str	r1, [r3, #0]
  hdma->Instance->CCR  = 0U;
 80073ee:	601a      	str	r2, [r3, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80073f0:	4619      	mov	r1, r3
  hdma->Instance->CNDTR = 0U;
 80073f2:	605a      	str	r2, [r3, #4]
  hdma->Instance->CPAR  = 0U;
 80073f4:	609a      	str	r2, [r3, #8]
  hdma->Instance->CMAR = 0U;
 80073f6:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <HAL_DMA_DeInit+0x104>)
 80073fa:	4a08      	ldr	r2, [pc, #32]	; (800741c <HAL_DMA_DeInit+0xfc>)
    hdma->DmaBaseAddress = DMA2;
 80073fc:	4d0a      	ldr	r5, [pc, #40]	; (8007428 <HAL_DMA_DeInit+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80073fe:	440b      	add	r3, r1
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	e7d9      	b.n	80073be <HAL_DMA_DeInit+0x9e>
 800740a:	bf00      	nop
 800740c:	40020008 	.word	0x40020008
 8007410:	0801506c 	.word	0x0801506c
 8007414:	40020407 	.word	0x40020407
 8007418:	bffdfff8 	.word	0xbffdfff8
 800741c:	cccccccd 	.word	0xcccccccd
 8007420:	40020000 	.word	0x40020000
 8007424:	bffdfbf8 	.word	0xbffdfbf8
 8007428:	40020400 	.word	0x40020400

0800742c <HAL_DMA_Start>:
{
 800742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007430:	1e5e      	subs	r6, r3, #1
{
 8007432:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007434:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007438:	429e      	cmp	r6, r3
{
 800743a:	4604      	mov	r4, r0
 800743c:	460f      	mov	r7, r1
 800743e:	4690      	mov	r8, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007440:	d830      	bhi.n	80074a4 <HAL_DMA_Start+0x78>
  __HAL_LOCK(hdma);
 8007442:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d035      	beq.n	80074b6 <HAL_DMA_Start+0x8a>
  if(HAL_DMA_STATE_READY == hdma->State)
 800744a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 800744e:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8007450:	4298      	cmp	r0, r3
  __HAL_LOCK(hdma);
 8007452:	f884 3020 	strb.w	r3, [r4, #32]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007456:	f04f 0300 	mov.w	r3, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 800745a:	d11e      	bne.n	800749a <HAL_DMA_Start+0x6e>
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800745c:	e9d4 620f 	ldrd	r6, r2, [r4, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8007460:	6821      	ldr	r1, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007462:	63a3      	str	r3, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8007464:	680b      	ldr	r3, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007466:	4090      	lsls	r0, r2
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007468:	6862      	ldr	r2, [r4, #4]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 800746a:	f023 0301 	bic.w	r3, r3, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800746e:	2a10      	cmp	r2, #16
  	hdma->State = HAL_DMA_STATE_BUSY;
 8007470:	f04f 0c02 	mov.w	ip, #2
 8007474:	f884 c021 	strb.w	ip, [r4, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 8007478:	600b      	str	r3, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800747a:	6070      	str	r0, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800747c:	604d      	str	r5, [r1, #4]
    hdma->Instance->CPAR = DstAddress;
 800747e:	bf0b      	itete	eq
 8007480:	f8c1 8008 	streq.w	r8, [r1, #8]
    hdma->Instance->CPAR = SrcAddress;
 8007484:	608f      	strne	r7, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007486:	60cf      	streq	r7, [r1, #12]
    hdma->Instance->CMAR = DstAddress;
 8007488:	f8c1 800c 	strne.w	r8, [r1, #12]
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 800748c:	680b      	ldr	r3, [r1, #0]
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	600b      	str	r3, [r1, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8007494:	2000      	movs	r0, #0
} 
 8007496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  	__HAL_UNLOCK(hdma);
 800749a:	f884 3020 	strb.w	r3, [r4, #32]
  	status = HAL_BUSY;
 800749e:	2002      	movs	r0, #2
} 
 80074a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80074a4:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80074a8:	4804      	ldr	r0, [pc, #16]	; (80074bc <HAL_DMA_Start+0x90>)
 80074aa:	f007 fdcb 	bl	800f044 <assert_failed>
  __HAL_LOCK(hdma);
 80074ae:	f894 3020 	ldrb.w	r3, [r4, #32]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d1c9      	bne.n	800744a <HAL_DMA_Start+0x1e>
 80074b6:	2002      	movs	r0, #2
} 
 80074b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074bc:	0801506c 	.word	0x0801506c

080074c0 <HAL_DMA_Start_IT>:
{
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80074c4:	1e5e      	subs	r6, r3, #1
{
 80074c6:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80074c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80074cc:	429e      	cmp	r6, r3
{
 80074ce:	4604      	mov	r4, r0
 80074d0:	460f      	mov	r7, r1
 80074d2:	4690      	mov	r8, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80074d4:	d836      	bhi.n	8007544 <HAL_DMA_Start_IT+0x84>
  __HAL_LOCK(hdma);
 80074d6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d03b      	beq.n	8007556 <HAL_DMA_Start_IT+0x96>
  if(HAL_DMA_STATE_READY == hdma->State)
 80074de:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 80074e2:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80074e4:	4298      	cmp	r0, r3
  __HAL_LOCK(hdma);
 80074e6:	f884 3020 	strb.w	r3, [r4, #32]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074ea:	f04f 0300 	mov.w	r3, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 80074ee:	d124      	bne.n	800753a <HAL_DMA_Start_IT+0x7a>
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80074f0:	6821      	ldr	r1, [r4, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074f2:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80074f4:	e9d4 620f 	ldrd	r6, r2, [r4, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80074f8:	680b      	ldr	r3, [r1, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80074fa:	4090      	lsls	r0, r2
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80074fc:	f023 0301 	bic.w	r3, r3, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007500:	6862      	ldr	r2, [r4, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8007502:	f04f 0c02 	mov.w	ip, #2
 8007506:	f884 c021 	strb.w	ip, [r4, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800750a:	600b      	str	r3, [r1, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 800750c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800750e:	6070      	str	r0, [r6, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007510:	2a10      	cmp	r2, #16
  hdma->Instance->CNDTR = DataLength;
 8007512:	604d      	str	r5, [r1, #4]
    hdma->Instance->CPAR = DstAddress;
 8007514:	bf0b      	itete	eq
 8007516:	f8c1 8008 	streq.w	r8, [r1, #8]
    hdma->Instance->CPAR = SrcAddress;
 800751a:	608f      	strne	r7, [r1, #8]
    hdma->Instance->CMAR = SrcAddress;
 800751c:	60cf      	streq	r7, [r1, #12]
    hdma->Instance->CMAR = DstAddress;
 800751e:	f8c1 800c 	strne.w	r8, [r1, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8007522:	b1db      	cbz	r3, 800755c <HAL_DMA_Start_IT+0x9c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007524:	680b      	ldr	r3, [r1, #0]
 8007526:	f043 030e 	orr.w	r3, r3, #14
 800752a:	600b      	str	r3, [r1, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800752c:	680b      	ldr	r3, [r1, #0]
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	600b      	str	r3, [r1, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8007534:	2000      	movs	r0, #0
} 
 8007536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma); 
 800753a:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 800753e:	2002      	movs	r0, #2
} 
 8007540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007544:	f240 115d 	movw	r1, #349	; 0x15d
 8007548:	4809      	ldr	r0, [pc, #36]	; (8007570 <HAL_DMA_Start_IT+0xb0>)
 800754a:	f007 fd7b 	bl	800f044 <assert_failed>
  __HAL_LOCK(hdma);
 800754e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d1c3      	bne.n	80074de <HAL_DMA_Start_IT+0x1e>
 8007556:	2002      	movs	r0, #2
} 
 8007558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800755c:	680b      	ldr	r3, [r1, #0]
 800755e:	f043 030a 	orr.w	r3, r3, #10
 8007562:	600b      	str	r3, [r1, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8007564:	680b      	ldr	r3, [r1, #0]
 8007566:	f023 0304 	bic.w	r3, r3, #4
 800756a:	600b      	str	r3, [r1, #0]
 800756c:	e7de      	b.n	800752c <HAL_DMA_Start_IT+0x6c>
 800756e:	bf00      	nop
 8007570:	0801506c 	.word	0x0801506c

08007574 <HAL_DMA_Abort>:
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007574:	6802      	ldr	r2, [r0, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007576:	6c01      	ldr	r1, [r0, #64]	; 0x40
{
 8007578:	4603      	mov	r3, r0
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800757a:	6810      	ldr	r0, [r2, #0]
 800757c:	f020 000e 	bic.w	r0, r0, #14
{
 8007580:	b430      	push	{r4, r5}
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007582:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007584:	6010      	str	r0, [r2, #0]
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8007586:	6810      	ldr	r0, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007588:	2401      	movs	r4, #1
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800758a:	f020 0001 	bic.w	r0, r0, #1
 800758e:	6010      	str	r0, [r2, #0]
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007590:	fa04 f101 	lsl.w	r1, r4, r1
	__HAL_UNLOCK(hdma);
 8007594:	2200      	movs	r2, #0
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8007596:	6069      	str	r1, [r5, #4]
}
 8007598:	4610      	mov	r0, r2
	hdma->State = HAL_DMA_STATE_READY; 
 800759a:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	__HAL_UNLOCK(hdma);
 800759e:	f883 2020 	strb.w	r2, [r3, #32]
}
 80075a2:	bc30      	pop	{r4, r5}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop

080075a8 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80075a8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80075ac:	2a02      	cmp	r2, #2
{  
 80075ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80075b0:	d003      	beq.n	80075ba <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075b2:	2204      	movs	r2, #4
 80075b4:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80075b6:	2001      	movs	r0, #1
}
 80075b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80075ba:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80075bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80075be:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80075c0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 80075c2:	6b45      	ldr	r5, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80075c4:	f024 040e 	bic.w	r4, r4, #14
 80075c8:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80075ca:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80075cc:	2601      	movs	r6, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80075ce:	f024 0401 	bic.w	r4, r4, #1
 80075d2:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80075d4:	fa06 f101 	lsl.w	r1, r6, r1
    __HAL_UNLOCK(hdma);
 80075d8:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80075da:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80075dc:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80075e0:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80075e4:	b115      	cbz	r5, 80075ec <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80075e6:	47a8      	blx	r5
  HAL_StatusTypeDef status = HAL_OK;
 80075e8:	4620      	mov	r0, r4
}
 80075ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80075ec:	4628      	mov	r0, r5
}
 80075ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075f0 <HAL_DMA_IRQHandler>:
{
 80075f0:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80075f2:	e9d0 520f 	ldrd	r5, r2, [r0, #60]	; 0x3c
 80075f6:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80075f8:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80075fa:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80075fc:	4093      	lsls	r3, r2
 80075fe:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8007600:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007602:	d00a      	beq.n	800761a <HAL_DMA_IRQHandler+0x2a>
 8007604:	f016 0f04 	tst.w	r6, #4
 8007608:	d007      	beq.n	800761a <HAL_DMA_IRQHandler+0x2a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800760a:	6822      	ldr	r2, [r4, #0]
 800760c:	0692      	lsls	r2, r2, #26
 800760e:	d537      	bpl.n	8007680 <HAL_DMA_IRQHandler+0x90>
  	if(hdma->XferHalfCpltCallback != NULL)
 8007610:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8007612:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8007614:	b1ca      	cbz	r2, 800764a <HAL_DMA_IRQHandler+0x5a>
}  
 8007616:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8007618:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800761a:	2302      	movs	r3, #2
 800761c:	4093      	lsls	r3, r2
 800761e:	420b      	tst	r3, r1
 8007620:	d015      	beq.n	800764e <HAL_DMA_IRQHandler+0x5e>
 8007622:	f016 0f02 	tst.w	r6, #2
 8007626:	d012      	beq.n	800764e <HAL_DMA_IRQHandler+0x5e>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	0692      	lsls	r2, r2, #26
 800762c:	d406      	bmi.n	800763c <HAL_DMA_IRQHandler+0x4c>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800762e:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8007630:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8007632:	f022 020a 	bic.w	r2, r2, #10
 8007636:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8007638:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 800763c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800763e:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8007640:	2300      	movs	r3, #0
 8007642:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8007646:	2a00      	cmp	r2, #0
 8007648:	d1e5      	bne.n	8007616 <HAL_DMA_IRQHandler+0x26>
}  
 800764a:	bc70      	pop	{r4, r5, r6}
 800764c:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800764e:	2308      	movs	r3, #8
 8007650:	4093      	lsls	r3, r2
 8007652:	420b      	tst	r3, r1
 8007654:	d0f9      	beq.n	800764a <HAL_DMA_IRQHandler+0x5a>
 8007656:	0733      	lsls	r3, r6, #28
 8007658:	d5f7      	bpl.n	800764a <HAL_DMA_IRQHandler+0x5a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800765a:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 800765c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800765e:	f023 030e 	bic.w	r3, r3, #14
 8007662:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007664:	2301      	movs	r3, #1
 8007666:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 800766a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800766c:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800766e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8007670:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8007674:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8007678:	2900      	cmp	r1, #0
 800767a:	d0e6      	beq.n	800764a <HAL_DMA_IRQHandler+0x5a>
}  
 800767c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800767e:	4708      	bx	r1
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8007680:	6822      	ldr	r2, [r4, #0]
 8007682:	f022 0204 	bic.w	r2, r2, #4
 8007686:	6022      	str	r2, [r4, #0]
 8007688:	e7c2      	b.n	8007610 <HAL_DMA_IRQHandler+0x20>
 800768a:	bf00      	nop

0800768c <HAL_DMA_RegisterCallback>:
{
 800768c:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 800768e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007692:	2801      	cmp	r0, #1
 8007694:	d01f      	beq.n	80076d6 <HAL_DMA_RegisterCallback+0x4a>
{
 8007696:	b410      	push	{r4}
  if(HAL_DMA_STATE_READY == hdma->State)
 8007698:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
  __HAL_LOCK(hdma);
 800769c:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800769e:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 80076a0:	f883 0020 	strb.w	r0, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80076a4:	d005      	beq.n	80076b2 <HAL_DMA_RegisterCallback+0x26>
  __HAL_UNLOCK(hdma);
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2020 	strb.w	r2, [r3, #32]
}
 80076ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b0:	4770      	bx	lr
    switch (CallbackID)
 80076b2:	2903      	cmp	r1, #3
 80076b4:	d811      	bhi.n	80076da <HAL_DMA_RegisterCallback+0x4e>
 80076b6:	e8df f001 	tbb	[pc, r1]
 80076ba:	080b      	.short	0x080b
 80076bc:	0205      	.short	0x0205
           hdma->XferAbortCallback = pCallback;
 80076be:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 80076c0:	2000      	movs	r0, #0
           break; 
 80076c2:	e7f0      	b.n	80076a6 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferErrorCallback = pCallback;
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80076c6:	2000      	movs	r0, #0
           break;         
 80076c8:	e7ed      	b.n	80076a6 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferHalfCpltCallback = pCallback;
 80076ca:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80076cc:	2000      	movs	r0, #0
           break;         
 80076ce:	e7ea      	b.n	80076a6 <HAL_DMA_RegisterCallback+0x1a>
           hdma->XferCpltCallback = pCallback;
 80076d0:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 80076d2:	2000      	movs	r0, #0
           break;
 80076d4:	e7e7      	b.n	80076a6 <HAL_DMA_RegisterCallback+0x1a>
  __HAL_LOCK(hdma);
 80076d6:	2002      	movs	r0, #2
}
 80076d8:	4770      	bx	lr
           status = HAL_ERROR;
 80076da:	2001      	movs	r0, #1
 80076dc:	e7e3      	b.n	80076a6 <HAL_DMA_RegisterCallback+0x1a>
 80076de:	bf00      	nop

080076e0 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 80076e0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d012      	beq.n	800770e <HAL_DMA_UnRegisterCallback+0x2e>
  if(HAL_DMA_STATE_READY == hdma->State)
 80076e8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80076ec:	2301      	movs	r3, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80076ee:	429a      	cmp	r2, r3
  __HAL_LOCK(hdma);
 80076f0:	f880 3020 	strb.w	r3, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80076f4:	d004      	beq.n	8007700 <HAL_DMA_UnRegisterCallback+0x20>
  __HAL_UNLOCK(hdma);
 80076f6:	2200      	movs	r2, #0
 80076f8:	f880 2020 	strb.w	r2, [r0, #32]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	4770      	bx	lr
    switch (CallbackID)
 8007700:	2904      	cmp	r1, #4
 8007702:	d819      	bhi.n	8007738 <HAL_DMA_UnRegisterCallback+0x58>
 8007704:	e8df f001 	tbb	[pc, r1]
 8007708:	15120f0c 	.word	0x15120f0c
 800770c:	06          	.byte	0x06
 800770d:	00          	.byte	0x00
  __HAL_LOCK(hdma);
 800770e:	2302      	movs	r3, #2
}
 8007710:	4618      	mov	r0, r3
 8007712:	4770      	bx	lr
           hdma->XferCpltCallback = NULL;
 8007714:	2300      	movs	r3, #0
           hdma->XferHalfCpltCallback = NULL;
 8007716:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
           hdma->XferAbortCallback = NULL;
 800771a:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
           break; 
 800771e:	e7ea      	b.n	80076f6 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferCpltCallback = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	6283      	str	r3, [r0, #40]	; 0x28
           break;
 8007724:	e7e7      	b.n	80076f6 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferHalfCpltCallback = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	62c3      	str	r3, [r0, #44]	; 0x2c
           break;         
 800772a:	e7e4      	b.n	80076f6 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferErrorCallback = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	6303      	str	r3, [r0, #48]	; 0x30
           break;         
 8007730:	e7e1      	b.n	80076f6 <HAL_DMA_UnRegisterCallback+0x16>
           hdma->XferAbortCallback = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	6343      	str	r3, [r0, #52]	; 0x34
           break; 
 8007736:	e7de      	b.n	80076f6 <HAL_DMA_UnRegisterCallback+0x16>
           status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e7dc      	b.n	80076f6 <HAL_DMA_UnRegisterCallback+0x16>

0800773c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007740:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 8007744:	b085      	sub	sp, #20
 8007746:	4604      	mov	r4, r0
 8007748:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800774a:	d01e      	beq.n	800778a <HAL_GPIO_Init+0x4e>
 800774c:	4bc7      	ldr	r3, [pc, #796]	; (8007a6c <HAL_GPIO_Init+0x330>)
 800774e:	4298      	cmp	r0, r3
 8007750:	d01b      	beq.n	800778a <HAL_GPIO_Init+0x4e>
 8007752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007756:	4298      	cmp	r0, r3
 8007758:	d017      	beq.n	800778a <HAL_GPIO_Init+0x4e>
 800775a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775e:	4298      	cmp	r0, r3
 8007760:	d013      	beq.n	800778a <HAL_GPIO_Init+0x4e>
 8007762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007766:	4298      	cmp	r0, r3
 8007768:	d00f      	beq.n	800778a <HAL_GPIO_Init+0x4e>
 800776a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800776e:	4298      	cmp	r0, r3
 8007770:	d00b      	beq.n	800778a <HAL_GPIO_Init+0x4e>
 8007772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007776:	4298      	cmp	r0, r3
 8007778:	d007      	beq.n	800778a <HAL_GPIO_Init+0x4e>
 800777a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800777e:	4298      	cmp	r0, r3
 8007780:	d003      	beq.n	800778a <HAL_GPIO_Init+0x4e>
 8007782:	21c3      	movs	r1, #195	; 0xc3
 8007784:	48ba      	ldr	r0, [pc, #744]	; (8007a70 <HAL_GPIO_Init+0x334>)
 8007786:	f007 fc5d 	bl	800f044 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800778a:	f8d8 3000 	ldr.w	r3, [r8]
 800778e:	b29a      	uxth	r2, r3
 8007790:	2a00      	cmp	r2, #0
 8007792:	f000 80cc 	beq.w	800792e <HAL_GPIO_Init+0x1f2>
 8007796:	0c1b      	lsrs	r3, r3, #16
 8007798:	041b      	lsls	r3, r3, #16
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 80c7 	bne.w	800792e <HAL_GPIO_Init+0x1f2>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80077a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d917      	bls.n	80077d8 <HAL_GPIO_Init+0x9c>
 80077a8:	f1a3 0211 	sub.w	r2, r3, #17
 80077ac:	2a01      	cmp	r2, #1
 80077ae:	d913      	bls.n	80077d8 <HAL_GPIO_Init+0x9c>
 80077b0:	49b0      	ldr	r1, [pc, #704]	; (8007a74 <HAL_GPIO_Init+0x338>)
 80077b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077b6:	428a      	cmp	r2, r1
 80077b8:	d00e      	beq.n	80077d8 <HAL_GPIO_Init+0x9c>
 80077ba:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80077be:	428b      	cmp	r3, r1
 80077c0:	d00a      	beq.n	80077d8 <HAL_GPIO_Init+0x9c>
 80077c2:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80077c6:	428a      	cmp	r2, r1
 80077c8:	d006      	beq.n	80077d8 <HAL_GPIO_Init+0x9c>
 80077ca:	4aab      	ldr	r2, [pc, #684]	; (8007a78 <HAL_GPIO_Init+0x33c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <HAL_GPIO_Init+0x9c>
 80077d0:	21c5      	movs	r1, #197	; 0xc5
 80077d2:	48a7      	ldr	r0, [pc, #668]	; (8007a70 <HAL_GPIO_Init+0x334>)
 80077d4:	f007 fc36 	bl	800f044 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80077d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	f200 8127 	bhi.w	8007a30 <HAL_GPIO_Init+0x2f4>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80077e2:	f8d8 1000 	ldr.w	r1, [r8]
 80077e6:	2900      	cmp	r1, #0
 80077e8:	f000 809e 	beq.w	8007928 <HAL_GPIO_Init+0x1ec>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077ec:	4ba3      	ldr	r3, [pc, #652]	; (8007a7c <HAL_GPIO_Init+0x340>)
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077ee:	f8df a294 	ldr.w	sl, [pc, #660]	; 8007a84 <HAL_GPIO_Init+0x348>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80077f2:	4a9e      	ldr	r2, [pc, #632]	; (8007a6c <HAL_GPIO_Init+0x330>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80077f4:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80077f6:	2601      	movs	r6, #1
 80077f8:	40ae      	lsls	r6, r5
    if(iocurrent)
 80077fa:	ea16 0b01 	ands.w	fp, r6, r1
 80077fe:	f000 808e 	beq.w	800791e <HAL_GPIO_Init+0x1e2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007802:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007806:	f021 0c10 	bic.w	ip, r1, #16
 800780a:	f1bc 0f02 	cmp.w	ip, #2
 800780e:	f000 80ba 	beq.w	8007986 <HAL_GPIO_Init+0x24a>
 8007812:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007816:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8007818:	f8d4 e000 	ldr.w	lr, [r4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800781c:	fa07 f709 	lsl.w	r7, r7, r9
 8007820:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007822:	f001 0003 	and.w	r0, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007826:	ea07 0e0e 	and.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800782a:	fa00 f009 	lsl.w	r0, r0, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800782e:	f10c 3cff 	add.w	ip, ip, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007832:	ea40 000e 	orr.w	r0, r0, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007836:	f1bc 0f01 	cmp.w	ip, #1
      GPIOx->MODER = temp;
 800783a:	6020      	str	r0, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800783c:	d97c      	bls.n	8007938 <HAL_GPIO_Init+0x1fc>
      temp = GPIOx->PUPDR;
 800783e:	68e6      	ldr	r6, [r4, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007840:	f8d8 0008 	ldr.w	r0, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007844:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007846:	fa00 f009 	lsl.w	r0, r0, r9
 800784a:	4338      	orrs	r0, r7
      GPIOx->PUPDR = temp;
 800784c:	60e0      	str	r0, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800784e:	00c8      	lsls	r0, r1, #3
 8007850:	d563      	bpl.n	800791a <HAL_GPIO_Init+0x1de>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007852:	6998      	ldr	r0, [r3, #24]
 8007854:	f040 0001 	orr.w	r0, r0, #1
 8007858:	6198      	str	r0, [r3, #24]
 800785a:	6998      	ldr	r0, [r3, #24]
 800785c:	f025 0603 	bic.w	r6, r5, #3
 8007860:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8007864:	f000 0001 	and.w	r0, r0, #1
 8007868:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800786c:	9003      	str	r0, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800786e:	f005 0703 	and.w	r7, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007872:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8007874:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8007878:	00bf      	lsls	r7, r7, #2
 800787a:	200f      	movs	r0, #15
 800787c:	40b8      	lsls	r0, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800787e:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8007882:	ea2c 0000 	bic.w	r0, ip, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007886:	d021      	beq.n	80078cc <HAL_GPIO_Init+0x190>
 8007888:	4294      	cmp	r4, r2
 800788a:	f000 80d6 	beq.w	8007a3a <HAL_GPIO_Init+0x2fe>
 800788e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 8007a80 <HAL_GPIO_Init+0x344>
 8007892:	4564      	cmp	r4, ip
 8007894:	f000 80c6 	beq.w	8007a24 <HAL_GPIO_Init+0x2e8>
 8007898:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8007a88 <HAL_GPIO_Init+0x34c>
 800789c:	4564      	cmp	r4, ip
 800789e:	f000 80d8 	beq.w	8007a52 <HAL_GPIO_Init+0x316>
 80078a2:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8007a8c <HAL_GPIO_Init+0x350>
 80078a6:	4564      	cmp	r4, ip
 80078a8:	f000 80d9 	beq.w	8007a5e <HAL_GPIO_Init+0x322>
 80078ac:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8007a90 <HAL_GPIO_Init+0x354>
 80078b0:	4564      	cmp	r4, ip
 80078b2:	f000 80c8 	beq.w	8007a46 <HAL_GPIO_Init+0x30a>
 80078b6:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8007a94 <HAL_GPIO_Init+0x358>
 80078ba:	4564      	cmp	r4, ip
 80078bc:	bf0c      	ite	eq
 80078be:	f04f 0c06 	moveq.w	ip, #6
 80078c2:	f04f 0c07 	movne.w	ip, #7
 80078c6:	fa0c f707 	lsl.w	r7, ip, r7
 80078ca:	4338      	orrs	r0, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80078cc:	60b0      	str	r0, [r6, #8]
        temp = EXTI->IMR;
 80078ce:	f8da 0000 	ldr.w	r0, [sl]
        temp &= ~((uint32_t)iocurrent);
 80078d2:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80078d6:	03cf      	lsls	r7, r1, #15
        temp &= ~((uint32_t)iocurrent);
 80078d8:	bf54      	ite	pl
 80078da:	4030      	andpl	r0, r6
        {
          temp |= iocurrent;
 80078dc:	ea4b 0000 	orrmi.w	r0, fp, r0
        }
        EXTI->IMR = temp;
 80078e0:	f8ca 0000 	str.w	r0, [sl]

        temp = EXTI->EMR;
 80078e4:	f8da 0004 	ldr.w	r0, [sl, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078e8:	038f      	lsls	r7, r1, #14
        temp &= ~((uint32_t)iocurrent);
 80078ea:	bf54      	ite	pl
 80078ec:	4030      	andpl	r0, r6
        {
          temp |= iocurrent;
 80078ee:	ea4b 0000 	orrmi.w	r0, fp, r0
        }
        EXTI->EMR = temp;
 80078f2:	f8ca 0004 	str.w	r0, [sl, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078f6:	f8da 0008 	ldr.w	r0, [sl, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078fa:	02cf      	lsls	r7, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80078fc:	bf54      	ite	pl
 80078fe:	4030      	andpl	r0, r6
        {
          temp |= iocurrent;
 8007900:	ea4b 0000 	orrmi.w	r0, fp, r0
        }
        EXTI->RTSR = temp;
 8007904:	f8ca 0008 	str.w	r0, [sl, #8]

        temp = EXTI->FTSR;
 8007908:	f8da 000c 	ldr.w	r0, [sl, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800790c:	0289      	lsls	r1, r1, #10
        temp &= ~((uint32_t)iocurrent);
 800790e:	bf54      	ite	pl
 8007910:	4030      	andpl	r0, r6
        {
          temp |= iocurrent;
 8007912:	ea4b 0000 	orrmi.w	r0, fp, r0
        }
        EXTI->FTSR = temp;
 8007916:	f8ca 000c 	str.w	r0, [sl, #12]
 800791a:	f8d8 1000 	ldr.w	r1, [r8]
      }
    }
    
    position++;
 800791e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8007920:	fa31 f005 	lsrs.w	r0, r1, r5
 8007924:	f47f af67 	bne.w	80077f6 <HAL_GPIO_Init+0xba>
  }
}
 8007928:	b005      	add	sp, #20
 800792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800792e:	21c4      	movs	r1, #196	; 0xc4
 8007930:	484f      	ldr	r0, [pc, #316]	; (8007a70 <HAL_GPIO_Init+0x334>)
 8007932:	f007 fb87 	bl	800f044 <assert_failed>
 8007936:	e733      	b.n	80077a0 <HAL_GPIO_Init+0x64>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007938:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800793c:	2801      	cmp	r0, #1
 800793e:	d90d      	bls.n	800795c <HAL_GPIO_Init+0x220>
 8007940:	2803      	cmp	r0, #3
 8007942:	d00b      	beq.n	800795c <HAL_GPIO_Init+0x220>
 8007944:	21ea      	movs	r1, #234	; 0xea
 8007946:	484a      	ldr	r0, [pc, #296]	; (8007a70 <HAL_GPIO_Init+0x334>)
 8007948:	e9cd 3200 	strd	r3, r2, [sp]
 800794c:	f007 fb7a 	bl	800f044 <assert_failed>
 8007950:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007954:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8007958:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp = GPIOx->OSPEEDR;
 800795c:	f8d4 c008 	ldr.w	ip, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007960:	fa00 f009 	lsl.w	r0, r0, r9
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007964:	ea07 0c0c 	and.w	ip, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007968:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->OSPEEDR = temp;
 800796c:	60a0      	str	r0, [r4, #8]
        temp = GPIOx->OTYPER;
 800796e:	f8d4 c004 	ldr.w	ip, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007972:	f3c1 1000 	ubfx	r0, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007976:	ea2c 0c06 	bic.w	ip, ip, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800797a:	4606      	mov	r6, r0
 800797c:	40ae      	lsls	r6, r5
 800797e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OTYPER = temp;
 8007982:	6066      	str	r6, [r4, #4]
 8007984:	e75b      	b.n	800783e <HAL_GPIO_Init+0x102>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8007986:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
 800798a:	d020      	beq.n	80079ce <HAL_GPIO_Init+0x292>
 800798c:	4294      	cmp	r4, r2
 800798e:	d01e      	beq.n	80079ce <HAL_GPIO_Init+0x292>
 8007990:	493b      	ldr	r1, [pc, #236]	; (8007a80 <HAL_GPIO_Init+0x344>)
 8007992:	428c      	cmp	r4, r1
 8007994:	d01b      	beq.n	80079ce <HAL_GPIO_Init+0x292>
 8007996:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800799a:	428c      	cmp	r4, r1
 800799c:	d017      	beq.n	80079ce <HAL_GPIO_Init+0x292>
 800799e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079a2:	428c      	cmp	r4, r1
 80079a4:	d013      	beq.n	80079ce <HAL_GPIO_Init+0x292>
 80079a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079aa:	428c      	cmp	r4, r1
 80079ac:	d00f      	beq.n	80079ce <HAL_GPIO_Init+0x292>
 80079ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079b2:	428c      	cmp	r4, r1
 80079b4:	d00b      	beq.n	80079ce <HAL_GPIO_Init+0x292>
 80079b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079ba:	428c      	cmp	r4, r1
 80079bc:	d007      	beq.n	80079ce <HAL_GPIO_Init+0x292>
 80079be:	21d5      	movs	r1, #213	; 0xd5
 80079c0:	482b      	ldr	r0, [pc, #172]	; (8007a70 <HAL_GPIO_Init+0x334>)
 80079c2:	e9cd 3200 	strd	r3, r2, [sp]
 80079c6:	f007 fb3d 	bl	800f044 <assert_failed>
 80079ca:	e9dd 3200 	ldrd	r3, r2, [sp]
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80079ce:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80079d2:	280c      	cmp	r0, #12
 80079d4:	d90d      	bls.n	80079f2 <HAL_GPIO_Init+0x2b6>
 80079d6:	f1a0 010e 	sub.w	r1, r0, #14
 80079da:	2901      	cmp	r1, #1
 80079dc:	d909      	bls.n	80079f2 <HAL_GPIO_Init+0x2b6>
 80079de:	4824      	ldr	r0, [pc, #144]	; (8007a70 <HAL_GPIO_Init+0x334>)
 80079e0:	21d6      	movs	r1, #214	; 0xd6
 80079e2:	e9cd 3200 	strd	r3, r2, [sp]
 80079e6:	f007 fb2d 	bl	800f044 <assert_failed>
 80079ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 80079ee:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80079f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp = GPIOx->AFR[position >> 3];
 80079f6:	08ef      	lsrs	r7, r5, #3
 80079f8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079fc:	f005 0907 	and.w	r9, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8007a00:	f8d7 c020 	ldr.w	ip, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a04:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007a08:	f04f 0e0f 	mov.w	lr, #15
 8007a0c:	fa0e fe09 	lsl.w	lr, lr, r9
 8007a10:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a14:	fa00 f009 	lsl.w	r0, r0, r9
 8007a18:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 8007a1c:	6238      	str	r0, [r7, #32]
 8007a1e:	f021 0c10 	bic.w	ip, r1, #16
 8007a22:	e6f6      	b.n	8007812 <HAL_GPIO_Init+0xd6>
 8007a24:	f04f 0c02 	mov.w	ip, #2
 8007a28:	fa0c f707 	lsl.w	r7, ip, r7
 8007a2c:	4338      	orrs	r0, r7
 8007a2e:	e74d      	b.n	80078cc <HAL_GPIO_Init+0x190>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007a30:	21c6      	movs	r1, #198	; 0xc6
 8007a32:	480f      	ldr	r0, [pc, #60]	; (8007a70 <HAL_GPIO_Init+0x334>)
 8007a34:	f007 fb06 	bl	800f044 <assert_failed>
 8007a38:	e6d3      	b.n	80077e2 <HAL_GPIO_Init+0xa6>
 8007a3a:	f04f 0c01 	mov.w	ip, #1
 8007a3e:	fa0c f707 	lsl.w	r7, ip, r7
 8007a42:	4338      	orrs	r0, r7
 8007a44:	e742      	b.n	80078cc <HAL_GPIO_Init+0x190>
 8007a46:	f04f 0c05 	mov.w	ip, #5
 8007a4a:	fa0c f707 	lsl.w	r7, ip, r7
 8007a4e:	4338      	orrs	r0, r7
 8007a50:	e73c      	b.n	80078cc <HAL_GPIO_Init+0x190>
 8007a52:	f04f 0c03 	mov.w	ip, #3
 8007a56:	fa0c f707 	lsl.w	r7, ip, r7
 8007a5a:	4338      	orrs	r0, r7
 8007a5c:	e736      	b.n	80078cc <HAL_GPIO_Init+0x190>
 8007a5e:	f04f 0c04 	mov.w	ip, #4
 8007a62:	fa0c f707 	lsl.w	r7, ip, r7
 8007a66:	4338      	orrs	r0, r7
 8007a68:	e730      	b.n	80078cc <HAL_GPIO_Init+0x190>
 8007a6a:	bf00      	nop
 8007a6c:	48000400 	.word	0x48000400
 8007a70:	080150b8 	.word	0x080150b8
 8007a74:	10110000 	.word	0x10110000
 8007a78:	10220000 	.word	0x10220000
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	48000800 	.word	0x48000800
 8007a84:	40010400 	.word	0x40010400
 8007a88:	48000c00 	.word	0x48000c00
 8007a8c:	48001000 	.word	0x48001000
 8007a90:	48001400 	.word	0x48001400
 8007a94:	48001800 	.word	0x48001800

08007a98 <HAL_GPIO_DeInit>:
  uint32_t position = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t tmp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007a98:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
{
 8007a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007aa4:	d01f      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x4e>
 8007aa6:	4b61      	ldr	r3, [pc, #388]	; (8007c2c <HAL_GPIO_DeInit+0x194>)
 8007aa8:	4298      	cmp	r0, r3
 8007aaa:	d01c      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x4e>
 8007aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ab0:	4298      	cmp	r0, r3
 8007ab2:	d018      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x4e>
 8007ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ab8:	4298      	cmp	r0, r3
 8007aba:	d014      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x4e>
 8007abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ac0:	4298      	cmp	r0, r3
 8007ac2:	d010      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x4e>
 8007ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ac8:	4298      	cmp	r0, r3
 8007aca:	d00c      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x4e>
 8007acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad0:	4298      	cmp	r0, r3
 8007ad2:	d008      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x4e>
 8007ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad8:	4298      	cmp	r0, r3
 8007ada:	d004      	beq.n	8007ae6 <HAL_GPIO_DeInit+0x4e>
 8007adc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ae0:	4853      	ldr	r0, [pc, #332]	; (8007c30 <HAL_GPIO_DeInit+0x198>)
 8007ae2:	f007 faaf 	bl	800f044 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007ae6:	b2b3      	uxth	r3, r6
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d05d      	beq.n	8007ba8 <HAL_GPIO_DeInit+0x110>
 8007aec:	0c33      	lsrs	r3, r6, #16
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d159      	bne.n	8007ba8 <HAL_GPIO_DeInit+0x110>
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007af4:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8007c48 <HAL_GPIO_DeInit+0x1b0>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007af8:	f8df b130 	ldr.w	fp, [pc, #304]	; 8007c2c <HAL_GPIO_DeInit+0x194>
{
 8007afc:	2300      	movs	r3, #0
    iocurrent = GPIO_Pin & (1U << position);
 8007afe:	f04f 0901 	mov.w	r9, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b02:	f04f 0a03 	mov.w	sl, #3
    iocurrent = GPIO_Pin & (1U << position);
 8007b06:	fa09 f003 	lsl.w	r0, r9, r3
    if (iocurrent)
 8007b0a:	ea10 0c06 	ands.w	ip, r0, r6
 8007b0e:	d045      	beq.n	8007b9c <HAL_GPIO_DeInit+0x104>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b10:	005a      	lsls	r2, r3, #1
 8007b12:	6821      	ldr	r1, [r4, #0]
 8007b14:	fa0a f202 	lsl.w	r2, sl, r2
 8007b18:	43d2      	mvns	r2, r2
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b1a:	08dd      	lsrs	r5, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b1c:	4011      	ands	r1, r2
 8007b1e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b22:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b24:	f003 0107 	and.w	r1, r3, #7
 8007b28:	f8d5 e020 	ldr.w	lr, [r5, #32]
 8007b2c:	270f      	movs	r7, #15
 8007b2e:	0089      	lsls	r1, r1, #2
 8007b30:	fa07 f101 	lsl.w	r1, r7, r1
 8007b34:	ea2e 0101 	bic.w	r1, lr, r1
 8007b38:	6229      	str	r1, [r5, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b3a:	68a1      	ldr	r1, [r4, #8]
 8007b3c:	4011      	ands	r1, r2
 8007b3e:	60a1      	str	r1, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b40:	6861      	ldr	r1, [r4, #4]
 8007b42:	ea21 0000 	bic.w	r0, r1, r0
 8007b46:	6060      	str	r0, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b48:	68e0      	ldr	r0, [r4, #12]
 8007b4a:	f023 0103 	bic.w	r1, r3, #3
 8007b4e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8007b52:	4002      	ands	r2, r0
 8007b54:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8007b58:	60e2      	str	r2, [r4, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8007b5a:	f003 0203 	and.w	r2, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8007b5e:	6888      	ldr	r0, [r1, #8]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	4097      	lsls	r7, r2
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b64:	f1b4 4f90 	cmp.w	r4, #1207959552	; 0x48000000
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8007b68:	ea00 0007 	and.w	r0, r0, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b6c:	d025      	beq.n	8007bba <HAL_GPIO_DeInit+0x122>
 8007b6e:	455c      	cmp	r4, fp
 8007b70:	d049      	beq.n	8007c06 <HAL_GPIO_DeInit+0x16e>
 8007b72:	4d30      	ldr	r5, [pc, #192]	; (8007c34 <HAL_GPIO_DeInit+0x19c>)
 8007b74:	42ac      	cmp	r4, r5
 8007b76:	d04d      	beq.n	8007c14 <HAL_GPIO_DeInit+0x17c>
 8007b78:	4d2f      	ldr	r5, [pc, #188]	; (8007c38 <HAL_GPIO_DeInit+0x1a0>)
 8007b7a:	42ac      	cmp	r4, r5
 8007b7c:	d04e      	beq.n	8007c1c <HAL_GPIO_DeInit+0x184>
 8007b7e:	4d2f      	ldr	r5, [pc, #188]	; (8007c3c <HAL_GPIO_DeInit+0x1a4>)
 8007b80:	42ac      	cmp	r4, r5
 8007b82:	d043      	beq.n	8007c0c <HAL_GPIO_DeInit+0x174>
 8007b84:	4d2e      	ldr	r5, [pc, #184]	; (8007c40 <HAL_GPIO_DeInit+0x1a8>)
 8007b86:	42ac      	cmp	r4, r5
 8007b88:	d04b      	beq.n	8007c22 <HAL_GPIO_DeInit+0x18a>
 8007b8a:	4d2e      	ldr	r5, [pc, #184]	; (8007c44 <HAL_GPIO_DeInit+0x1ac>)
 8007b8c:	42ac      	cmp	r4, r5
 8007b8e:	bf0c      	ite	eq
 8007b90:	2506      	moveq	r5, #6
 8007b92:	2507      	movne	r5, #7
 8007b94:	fa05 f202 	lsl.w	r2, r5, r2
 8007b98:	4290      	cmp	r0, r2
 8007b9a:	d011      	beq.n	8007bc0 <HAL_GPIO_DeInit+0x128>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
    
    position++;
 8007b9c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != RESET)
 8007b9e:	fa36 f203 	lsrs.w	r2, r6, r3
 8007ba2:	d1b0      	bne.n	8007b06 <HAL_GPIO_DeInit+0x6e>
  }
}
 8007ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007ba8:	f240 1141 	movw	r1, #321	; 0x141
 8007bac:	4820      	ldr	r0, [pc, #128]	; (8007c30 <HAL_GPIO_DeInit+0x198>)
 8007bae:	f007 fa49 	bl	800f044 <assert_failed>
  while ((GPIO_Pin >> position) != RESET)
 8007bb2:	2e00      	cmp	r6, #0
 8007bb4:	d19e      	bne.n	8007af4 <HAL_GPIO_DeInit+0x5c>
}
 8007bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bba:	2200      	movs	r2, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007bbc:	4290      	cmp	r0, r2
 8007bbe:	d1ed      	bne.n	8007b9c <HAL_GPIO_DeInit+0x104>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007bc0:	688a      	ldr	r2, [r1, #8]
 8007bc2:	ea22 0707 	bic.w	r7, r2, r7
 8007bc6:	608f      	str	r7, [r1, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007bc8:	f8d8 2000 	ldr.w	r2, [r8]
 8007bcc:	ea6f 0c0c 	mvn.w	ip, ip
 8007bd0:	ea02 020c 	and.w	r2, r2, ip
 8007bd4:	f8c8 2000 	str.w	r2, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007bd8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007bdc:	ea0c 0202 	and.w	r2, ip, r2
 8007be0:	f8c8 2004 	str.w	r2, [r8, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007be4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007be8:	ea0c 0202 	and.w	r2, ip, r2
 8007bec:	f8c8 2008 	str.w	r2, [r8, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007bf0:	f8d8 200c 	ldr.w	r2, [r8, #12]
    position++;
 8007bf4:	3301      	adds	r3, #1
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007bf6:	ea0c 0202 	and.w	r2, ip, r2
 8007bfa:	f8c8 200c 	str.w	r2, [r8, #12]
  while ((GPIO_Pin >> position) != RESET)
 8007bfe:	fa36 f203 	lsrs.w	r2, r6, r3
 8007c02:	d180      	bne.n	8007b06 <HAL_GPIO_DeInit+0x6e>
 8007c04:	e7ce      	b.n	8007ba4 <HAL_GPIO_DeInit+0x10c>
 8007c06:	fa09 f202 	lsl.w	r2, r9, r2
 8007c0a:	e7d7      	b.n	8007bbc <HAL_GPIO_DeInit+0x124>
 8007c0c:	2504      	movs	r5, #4
 8007c0e:	fa05 f202 	lsl.w	r2, r5, r2
 8007c12:	e7d3      	b.n	8007bbc <HAL_GPIO_DeInit+0x124>
 8007c14:	2502      	movs	r5, #2
 8007c16:	fa05 f202 	lsl.w	r2, r5, r2
 8007c1a:	e7cf      	b.n	8007bbc <HAL_GPIO_DeInit+0x124>
 8007c1c:	fa0a f202 	lsl.w	r2, sl, r2
 8007c20:	e7cc      	b.n	8007bbc <HAL_GPIO_DeInit+0x124>
 8007c22:	2505      	movs	r5, #5
 8007c24:	fa05 f202 	lsl.w	r2, r5, r2
 8007c28:	e7c8      	b.n	8007bbc <HAL_GPIO_DeInit+0x124>
 8007c2a:	bf00      	nop
 8007c2c:	48000400 	.word	0x48000400
 8007c30:	080150b8 	.word	0x080150b8
 8007c34:	48000800 	.word	0x48000800
 8007c38:	48000c00 	.word	0x48000c00
 8007c3c:	48001000 	.word	0x48001000
 8007c40:	48001400 	.word	0x48001400
 8007c44:	48001800 	.word	0x48001800
 8007c48:	40010400 	.word	0x40010400

08007c4c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	f000 8282 	beq.w	8008156 <HAL_RCC_OscConfig+0x50a>
{
 8007c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007c56:	6803      	ldr	r3, [r0, #0]
{
 8007c58:	b083      	sub	sp, #12
 8007c5a:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d079      	beq.n	8007d54 <HAL_RCC_OscConfig+0x108>
 8007c60:	071a      	lsls	r2, r3, #28
 8007c62:	f000 8227 	beq.w	80080b4 <HAL_RCC_OscConfig+0x468>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c66:	07df      	lsls	r7, r3, #31
 8007c68:	f140 816e 	bpl.w	8007f48 <HAL_RCC_OscConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8007c72:	d007      	beq.n	8007c84 <HAL_RCC_OscConfig+0x38>
 8007c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c78:	d004      	beq.n	8007c84 <HAL_RCC_OscConfig+0x38>
 8007c7a:	f240 115d 	movw	r1, #349	; 0x15d
 8007c7e:	48a0      	ldr	r0, [pc, #640]	; (8007f00 <HAL_RCC_OscConfig+0x2b4>)
 8007c80:	f007 f9e0 	bl	800f044 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007c84:	4a9f      	ldr	r2, [pc, #636]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007c86:	6853      	ldr	r3, [r2, #4]
 8007c88:	f003 030c 	and.w	r3, r3, #12
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	f000 8146 	beq.w	8007f1e <HAL_RCC_OscConfig+0x2d2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007c92:	6853      	ldr	r3, [r2, #4]
 8007c94:	f003 030c 	and.w	r3, r3, #12
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	f000 8139 	beq.w	8007f10 <HAL_RCC_OscConfig+0x2c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c9e:	6863      	ldr	r3, [r4, #4]
 8007ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca4:	f000 81d2 	beq.w	800804c <HAL_RCC_OscConfig+0x400>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8231 	beq.w	8008110 <HAL_RCC_OscConfig+0x4c4>
 8007cae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cb2:	f000 82db 	beq.w	800826c <HAL_RCC_OscConfig+0x620>
 8007cb6:	4b93      	ldr	r3, [pc, #588]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e1c5      	b.n	8008056 <HAL_RCC_OscConfig+0x40a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cca:	488e      	ldr	r0, [pc, #568]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ccc:	22f8      	movs	r2, #248	; 0xf8
 8007cce:	6801      	ldr	r1, [r0, #0]
 8007cd0:	fa92 f2a2 	rbit	r2, r2
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	fab2 f282 	clz	r2, r2
 8007cda:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8007cde:	4093      	lsls	r3, r2
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	6003      	str	r3, [r0, #0]
 8007ce4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ce6:	071d      	lsls	r5, r3, #28
 8007ce8:	d534      	bpl.n	8007d54 <HAL_RCC_OscConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007cea:	6963      	ldr	r3, [r4, #20]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d905      	bls.n	8007cfc <HAL_RCC_OscConfig+0xb0>
 8007cf0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007cf4:	4882      	ldr	r0, [pc, #520]	; (8007f00 <HAL_RCC_OscConfig+0x2b4>)
 8007cf6:	f007 f9a5 	bl	800f044 <assert_failed>
 8007cfa:	6963      	ldr	r3, [r4, #20]
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 81e0 	beq.w	80080c2 <HAL_RCC_OscConfig+0x476>
 8007d02:	2201      	movs	r2, #1
 8007d04:	fa92 f1a2 	rbit	r1, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d08:	4b7f      	ldr	r3, [pc, #508]	; (8007f08 <HAL_RCC_OscConfig+0x2bc>)
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d0a:	4e7e      	ldr	r6, [pc, #504]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8007d0c:	fab1 f181 	clz	r1, r1
 8007d10:	440b      	add	r3, r1
 8007d12:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d14:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8007d16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007d18:	f7fd fc06 	bl	8005528 <HAL_GetTick>
 8007d1c:	f04f 0802 	mov.w	r8, #2
 8007d20:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d22:	e005      	b.n	8007d30 <HAL_RCC_OscConfig+0xe4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d24:	f7fd fc00 	bl	8005528 <HAL_GetTick>
 8007d28:	1bc0      	subs	r0, r0, r7
 8007d2a:	2802      	cmp	r0, #2
 8007d2c:	f200 81be 	bhi.w	80080ac <HAL_RCC_OscConfig+0x460>
 8007d30:	fa98 f3a8 	rbit	r3, r8
 8007d34:	fa98 f3a8 	rbit	r3, r8
 8007d38:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d3c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007d3e:	fa98 f3a8 	rbit	r3, r8
 8007d42:	fab3 f383 	clz	r3, r3
 8007d46:	f003 031f 	and.w	r3, r3, #31
 8007d4a:	fa05 f303 	lsl.w	r3, r5, r3
 8007d4e:	4213      	tst	r3, r2
 8007d50:	d0e8      	beq.n	8007d24 <HAL_RCC_OscConfig+0xd8>
 8007d52:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d54:	0758      	lsls	r0, r3, #29
 8007d56:	d53a      	bpl.n	8007dce <HAL_RCC_OscConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d906      	bls.n	8007d6c <HAL_RCC_OscConfig+0x120>
 8007d5e:	2b05      	cmp	r3, #5
 8007d60:	d004      	beq.n	8007d6c <HAL_RCC_OscConfig+0x120>
 8007d62:	f240 2102 	movw	r1, #514	; 0x202
 8007d66:	4866      	ldr	r0, [pc, #408]	; (8007f00 <HAL_RCC_OscConfig+0x2b4>)
 8007d68:	f007 f96c 	bl	800f044 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d6c:	4b65      	ldr	r3, [pc, #404]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	00d1      	lsls	r1, r2, #3
 8007d72:	f100 81f2 	bmi.w	800815a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d76:	69da      	ldr	r2, [r3, #28]
 8007d78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d7c:	61da      	str	r2, [r3, #28]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007d88:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d8c:	4d5f      	ldr	r5, [pc, #380]	; (8007f0c <HAL_RCC_OscConfig+0x2c0>)
 8007d8e:	682a      	ldr	r2, [r5, #0]
 8007d90:	05d2      	lsls	r2, r2, #23
 8007d92:	f140 817b 	bpl.w	800808c <HAL_RCC_OscConfig+0x440>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d96:	68a3      	ldr	r3, [r4, #8]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	f000 8235 	beq.w	8008208 <HAL_RCC_OscConfig+0x5bc>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 81de 	beq.w	8008160 <HAL_RCC_OscConfig+0x514>
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	4b57      	ldr	r3, [pc, #348]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	f000 826c 	beq.w	8008286 <HAL_RCC_OscConfig+0x63a>
 8007dae:	f022 0201 	bic.w	r2, r2, #1
 8007db2:	621a      	str	r2, [r3, #32]
 8007db4:	6a1a      	ldr	r2, [r3, #32]
 8007db6:	f022 0204 	bic.w	r2, r2, #4
 8007dba:	621a      	str	r2, [r3, #32]
 8007dbc:	e229      	b.n	8008212 <HAL_RCC_OscConfig+0x5c6>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	d004      	beq.n	8007dce <HAL_RCC_OscConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dc4:	4a4f      	ldr	r2, [pc, #316]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007dc6:	69d3      	ldr	r3, [r2, #28]
 8007dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dcc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007dce:	69a3      	ldr	r3, [r4, #24]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	f200 8131 	bhi.w	8008038 <HAL_RCC_OscConfig+0x3ec>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 808e 	beq.w	8007ef8 <HAL_RCC_OscConfig+0x2ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ddc:	4d49      	ldr	r5, [pc, #292]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007dde:	686a      	ldr	r2, [r5, #4]
 8007de0:	f002 020c 	and.w	r2, r2, #12
 8007de4:	2a08      	cmp	r2, #8
 8007de6:	f000 8115 	beq.w	8008014 <HAL_RCC_OscConfig+0x3c8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	f040 8259 	bne.w	80082a2 <HAL_RCC_OscConfig+0x656>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007df0:	69e3      	ldr	r3, [r4, #28]
 8007df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df6:	d007      	beq.n	8007e08 <HAL_RCC_OscConfig+0x1bc>
 8007df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfc:	d004      	beq.n	8007e08 <HAL_RCC_OscConfig+0x1bc>
 8007dfe:	f240 214f 	movw	r1, #591	; 0x24f
 8007e02:	483f      	ldr	r0, [pc, #252]	; (8007f00 <HAL_RCC_OscConfig+0x2b4>)
 8007e04:	f007 f91e 	bl	800f044 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8007e08:	6a23      	ldr	r3, [r4, #32]
 8007e0a:	f433 2240 	bics.w	r2, r3, #786432	; 0xc0000
 8007e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e12:	d010      	beq.n	8007e36 <HAL_RCC_OscConfig+0x1ea>
 8007e14:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007e18:	d00d      	beq.n	8007e36 <HAL_RCC_OscConfig+0x1ea>
 8007e1a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007e1e:	d00a      	beq.n	8007e36 <HAL_RCC_OscConfig+0x1ea>
 8007e20:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007e24:	d007      	beq.n	8007e36 <HAL_RCC_OscConfig+0x1ea>
 8007e26:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8007e2a:	d004      	beq.n	8007e36 <HAL_RCC_OscConfig+0x1ea>
 8007e2c:	f44f 7114 	mov.w	r1, #592	; 0x250
 8007e30:	4833      	ldr	r0, [pc, #204]	; (8007f00 <HAL_RCC_OscConfig+0x2b4>)
 8007e32:	f007 f907 	bl	800f044 <assert_failed>
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8007e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e38:	2b0f      	cmp	r3, #15
 8007e3a:	f200 822c 	bhi.w	8008296 <HAL_RCC_OscConfig+0x64a>
 8007e3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e42:	fa93 f3a3 	rbit	r3, r3
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e46:	fab3 f383 	clz	r3, r3
 8007e4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e58:	f7fd fb66 	bl	8005528 <HAL_GetTick>
 8007e5c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8007e60:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e62:	4d28      	ldr	r5, [pc, #160]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007e64:	2601      	movs	r6, #1
 8007e66:	e005      	b.n	8007e74 <HAL_RCC_OscConfig+0x228>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e68:	f7fd fb5e 	bl	8005528 <HAL_GetTick>
 8007e6c:	1bc0      	subs	r0, r0, r7
 8007e6e:	2802      	cmp	r0, #2
 8007e70:	f200 811c 	bhi.w	80080ac <HAL_RCC_OscConfig+0x460>
 8007e74:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e78:	682a      	ldr	r2, [r5, #0]
 8007e7a:	fa98 f3a8 	rbit	r3, r8
 8007e7e:	fab3 f383 	clz	r3, r3
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	fa06 f303 	lsl.w	r3, r6, r3
 8007e8a:	4213      	tst	r3, r2
 8007e8c:	d1ec      	bne.n	8007e68 <HAL_RCC_OscConfig+0x21c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007e90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e92:	f023 030f 	bic.w	r3, r3, #15
 8007e96:	4313      	orrs	r3, r2
 8007e98:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007e9a:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8007e9e:	686a      	ldr	r2, [r5, #4]
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	606b      	str	r3, [r5, #4]
 8007eaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007eae:	fa93 f3a3 	rbit	r3, r3
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007eb2:	fab3 f383 	clz	r3, r3
 8007eb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007eba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8007ec4:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec6:	f7fd fb2f 	bl	8005528 <HAL_GetTick>
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007eca:	4e0e      	ldr	r6, [pc, #56]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8007ecc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ece:	2501      	movs	r5, #1
 8007ed0:	e005      	b.n	8007ede <HAL_RCC_OscConfig+0x292>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed2:	f7fd fb29 	bl	8005528 <HAL_GetTick>
 8007ed6:	1bc0      	subs	r0, r0, r7
 8007ed8:	2802      	cmp	r0, #2
 8007eda:	f200 80e7 	bhi.w	80080ac <HAL_RCC_OscConfig+0x460>
 8007ede:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ee2:	6832      	ldr	r2, [r6, #0]
 8007ee4:	fa94 f3a4 	rbit	r3, r4
 8007ee8:	fab3 f383 	clz	r3, r3
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	fa05 f303 	lsl.w	r3, r5, r3
 8007ef4:	4213      	tst	r3, r2
 8007ef6:	d0ec      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x286>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8007ef8:	2000      	movs	r0, #0
}
 8007efa:	b003      	add	sp, #12
 8007efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f00:	08015104 	.word	0x08015104
 8007f04:	40021000 	.word	0x40021000
 8007f08:	10908120 	.word	0x10908120
 8007f0c:	40007000 	.word	0x40007000
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007f10:	6853      	ldr	r3, [r2, #4]
 8007f12:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1a:	f47f aec0 	bne.w	8007c9e <HAL_RCC_OscConfig+0x52>
 8007f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f22:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f26:	4abf      	ldr	r2, [pc, #764]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 8007f28:	6811      	ldr	r1, [r2, #0]
 8007f2a:	fa93 f3a3 	rbit	r3, r3
 8007f2e:	fab3 f383 	clz	r3, r3
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	2201      	movs	r2, #1
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	420b      	tst	r3, r1
 8007f3e:	d002      	beq.n	8007f46 <HAL_RCC_OscConfig+0x2fa>
 8007f40:	6863      	ldr	r3, [r4, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d066      	beq.n	8008014 <HAL_RCC_OscConfig+0x3c8>
 8007f46:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f48:	079e      	lsls	r6, r3, #30
 8007f4a:	f57f aecc 	bpl.w	8007ce6 <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007f4e:	68e3      	ldr	r3, [r4, #12]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d863      	bhi.n	800801c <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007f54:	6923      	ldr	r3, [r4, #16]
 8007f56:	2b1f      	cmp	r3, #31
 8007f58:	d868      	bhi.n	800802c <HAL_RCC_OscConfig+0x3e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007f5a:	4bb2      	ldr	r3, [pc, #712]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	f012 0f0c 	tst.w	r2, #12
 8007f62:	d042      	beq.n	8007fea <HAL_RCC_OscConfig+0x39e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	f002 020c 	and.w	r2, r2, #12
 8007f6a:	2a08      	cmp	r2, #8
 8007f6c:	d037      	beq.n	8007fde <HAL_RCC_OscConfig+0x392>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f6e:	68e2      	ldr	r2, [r4, #12]
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	f000 8122 	beq.w	80081ba <HAL_RCC_OscConfig+0x56e>
 8007f76:	2201      	movs	r2, #1
 8007f78:	fa92 f3a2 	rbit	r3, r2
        __HAL_RCC_HSI_ENABLE();
 8007f7c:	fab3 f383 	clz	r3, r3
 8007f80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f88:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f8a:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8007f8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007f8e:	f7fd facb 	bl	8005528 <HAL_GetTick>
 8007f92:	f04f 0802 	mov.w	r8, #2
 8007f96:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f98:	4da2      	ldr	r5, [pc, #648]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 8007f9a:	e005      	b.n	8007fa8 <HAL_RCC_OscConfig+0x35c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f9c:	f7fd fac4 	bl	8005528 <HAL_GetTick>
 8007fa0:	1bc0      	subs	r0, r0, r7
 8007fa2:	2802      	cmp	r0, #2
 8007fa4:	f200 8082 	bhi.w	80080ac <HAL_RCC_OscConfig+0x460>
 8007fa8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fac:	682a      	ldr	r2, [r5, #0]
 8007fae:	fa98 f3a8 	rbit	r3, r8
 8007fb2:	fab3 f383 	clz	r3, r3
 8007fb6:	f003 031f 	and.w	r3, r3, #31
 8007fba:	fa06 f303 	lsl.w	r3, r6, r3
 8007fbe:	4213      	tst	r3, r2
 8007fc0:	d0ec      	beq.n	8007f9c <HAL_RCC_OscConfig+0x350>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc2:	6829      	ldr	r1, [r5, #0]
 8007fc4:	22f8      	movs	r2, #248	; 0xf8
 8007fc6:	fa92 f2a2 	rbit	r2, r2
 8007fca:	6923      	ldr	r3, [r4, #16]
 8007fcc:	fab2 f282 	clz	r2, r2
 8007fd0:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8007fd4:	4093      	lsls	r3, r2
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	e683      	b.n	8007ce6 <HAL_RCC_OscConfig+0x9a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe8:	d1c1      	bne.n	8007f6e <HAL_RCC_OscConfig+0x322>
 8007fea:	2302      	movs	r3, #2
 8007fec:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ff0:	4a8c      	ldr	r2, [pc, #560]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 8007ff2:	6811      	ldr	r1, [r2, #0]
 8007ff4:	fa93 f3a3 	rbit	r3, r3
 8007ff8:	fab3 f383 	clz	r3, r3
 8007ffc:	f003 031f 	and.w	r3, r3, #31
 8008000:	2201      	movs	r2, #1
 8008002:	fa02 f303 	lsl.w	r3, r2, r3
 8008006:	420b      	tst	r3, r1
 8008008:	f43f ae5f 	beq.w	8007cca <HAL_RCC_OscConfig+0x7e>
 800800c:	68e3      	ldr	r3, [r4, #12]
 800800e:	4293      	cmp	r3, r2
 8008010:	f43f ae5b 	beq.w	8007cca <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8008014:	2001      	movs	r0, #1
}
 8008016:	b003      	add	sp, #12
 8008018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800801c:	f240 1195 	movw	r1, #405	; 0x195
 8008020:	4881      	ldr	r0, [pc, #516]	; (8008228 <HAL_RCC_OscConfig+0x5dc>)
 8008022:	f007 f80f 	bl	800f044 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	2b1f      	cmp	r3, #31
 800802a:	d996      	bls.n	8007f5a <HAL_RCC_OscConfig+0x30e>
 800802c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8008030:	487d      	ldr	r0, [pc, #500]	; (8008228 <HAL_RCC_OscConfig+0x5dc>)
 8008032:	f007 f807 	bl	800f044 <assert_failed>
 8008036:	e790      	b.n	8007f5a <HAL_RCC_OscConfig+0x30e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008038:	f240 2146 	movw	r1, #582	; 0x246
 800803c:	487a      	ldr	r0, [pc, #488]	; (8008228 <HAL_RCC_OscConfig+0x5dc>)
 800803e:	f007 f801 	bl	800f044 <assert_failed>
 8008042:	69a3      	ldr	r3, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008044:	2b00      	cmp	r3, #0
 8008046:	f47f aec9 	bne.w	8007ddc <HAL_RCC_OscConfig+0x190>
 800804a:	e755      	b.n	8007ef8 <HAL_RCC_OscConfig+0x2ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800804c:	4a75      	ldr	r2, [pc, #468]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 800804e:	6813      	ldr	r3, [r2, #0]
 8008050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008054:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008056:	f7fd fa67 	bl	8005528 <HAL_GetTick>
 800805a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800805e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008060:	4e70      	ldr	r6, [pc, #448]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 8008062:	2501      	movs	r5, #1
 8008064:	e004      	b.n	8008070 <HAL_RCC_OscConfig+0x424>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008066:	f7fd fa5f 	bl	8005528 <HAL_GetTick>
 800806a:	1bc0      	subs	r0, r0, r7
 800806c:	2864      	cmp	r0, #100	; 0x64
 800806e:	d81d      	bhi.n	80080ac <HAL_RCC_OscConfig+0x460>
 8008070:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008074:	6832      	ldr	r2, [r6, #0]
 8008076:	fa98 f3a8 	rbit	r3, r8
 800807a:	fab3 f383 	clz	r3, r3
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	fa05 f303 	lsl.w	r3, r5, r3
 8008086:	4213      	tst	r3, r2
 8008088:	d0ed      	beq.n	8008066 <HAL_RCC_OscConfig+0x41a>
 800808a:	e75c      	b.n	8007f46 <HAL_RCC_OscConfig+0x2fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800808c:	682a      	ldr	r2, [r5, #0]
 800808e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008092:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8008094:	f7fd fa48 	bl	8005528 <HAL_GetTick>
 8008098:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	05db      	lsls	r3, r3, #23
 800809e:	f53f ae7a 	bmi.w	8007d96 <HAL_RCC_OscConfig+0x14a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080a2:	f7fd fa41 	bl	8005528 <HAL_GetTick>
 80080a6:	1b80      	subs	r0, r0, r6
 80080a8:	2864      	cmp	r0, #100	; 0x64
 80080aa:	d9f6      	bls.n	800809a <HAL_RCC_OscConfig+0x44e>
            return HAL_TIMEOUT;
 80080ac:	2003      	movs	r0, #3
}
 80080ae:	b003      	add	sp, #12
 80080b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80080b4:	f240 1157 	movw	r1, #343	; 0x157
 80080b8:	485b      	ldr	r0, [pc, #364]	; (8008228 <HAL_RCC_OscConfig+0x5dc>)
 80080ba:	f006 ffc3 	bl	800f044 <assert_failed>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	e5d1      	b.n	8007c66 <HAL_RCC_OscConfig+0x1a>
 80080c2:	2501      	movs	r5, #1
 80080c4:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 80080c8:	4a58      	ldr	r2, [pc, #352]	; (800822c <HAL_RCC_OscConfig+0x5e0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080ca:	4e56      	ldr	r6, [pc, #344]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
      __HAL_RCC_LSI_DISABLE();
 80080cc:	fab1 f181 	clz	r1, r1
 80080d0:	440a      	add	r2, r1
 80080d2:	0092      	lsls	r2, r2, #2
 80080d4:	f04f 0802 	mov.w	r8, #2
 80080d8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80080da:	f7fd fa25 	bl	8005528 <HAL_GetTick>
 80080de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080e0:	e004      	b.n	80080ec <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080e2:	f7fd fa21 	bl	8005528 <HAL_GetTick>
 80080e6:	1bc0      	subs	r0, r0, r7
 80080e8:	2802      	cmp	r0, #2
 80080ea:	d8df      	bhi.n	80080ac <HAL_RCC_OscConfig+0x460>
 80080ec:	fa98 f3a8 	rbit	r3, r8
 80080f0:	fa98 f3a8 	rbit	r3, r8
 80080f4:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80080fa:	fa98 f3a8 	rbit	r3, r8
 80080fe:	fab3 f383 	clz	r3, r3
 8008102:	f003 031f 	and.w	r3, r3, #31
 8008106:	fa05 f303 	lsl.w	r3, r5, r3
 800810a:	4213      	tst	r3, r2
 800810c:	d1e9      	bne.n	80080e2 <HAL_RCC_OscConfig+0x496>
 800810e:	e620      	b.n	8007d52 <HAL_RCC_OscConfig+0x106>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008110:	4d44      	ldr	r5, [pc, #272]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008118:	602b      	str	r3, [r5, #0]
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008120:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008122:	f7fd fa01 	bl	8005528 <HAL_GetTick>
 8008126:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800812a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800812c:	2601      	movs	r6, #1
 800812e:	e004      	b.n	800813a <HAL_RCC_OscConfig+0x4ee>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008130:	f7fd f9fa 	bl	8005528 <HAL_GetTick>
 8008134:	1bc0      	subs	r0, r0, r7
 8008136:	2864      	cmp	r0, #100	; 0x64
 8008138:	d8b8      	bhi.n	80080ac <HAL_RCC_OscConfig+0x460>
 800813a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800813e:	682a      	ldr	r2, [r5, #0]
 8008140:	fa98 f3a8 	rbit	r3, r8
 8008144:	fab3 f383 	clz	r3, r3
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	fa06 f303 	lsl.w	r3, r6, r3
 8008150:	4213      	tst	r3, r2
 8008152:	d1ed      	bne.n	8008130 <HAL_RCC_OscConfig+0x4e4>
 8008154:	e6f7      	b.n	8007f46 <HAL_RCC_OscConfig+0x2fa>
    return HAL_ERROR;
 8008156:	2001      	movs	r0, #1
}
 8008158:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	e615      	b.n	8007d8c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008160:	4d30      	ldr	r5, [pc, #192]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 8008162:	6a2b      	ldr	r3, [r5, #32]
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	622b      	str	r3, [r5, #32]
 800816a:	6a2b      	ldr	r3, [r5, #32]
 800816c:	f023 0304 	bic.w	r3, r3, #4
 8008170:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8008172:	f7fd f9d9 	bl	8005528 <HAL_GetTick>
 8008176:	f04f 0902 	mov.w	r9, #2
 800817a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800817c:	2601      	movs	r6, #1
 800817e:	e014      	b.n	80081aa <HAL_RCC_OscConfig+0x55e>
 8008180:	fa99 f3a9 	rbit	r3, r9
 8008184:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008186:	fa99 f3a9 	rbit	r3, r9
 800818a:	fab3 f383 	clz	r3, r3
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	fa06 f303 	lsl.w	r3, r6, r3
 8008196:	4213      	tst	r3, r2
 8008198:	f43f ae11 	beq.w	8007dbe <HAL_RCC_OscConfig+0x172>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800819c:	f7fd f9c4 	bl	8005528 <HAL_GetTick>
 80081a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80081a4:	1bc0      	subs	r0, r0, r7
 80081a6:	4298      	cmp	r0, r3
 80081a8:	d880      	bhi.n	80080ac <HAL_RCC_OscConfig+0x460>
 80081aa:	fa99 f3a9 	rbit	r3, r9
 80081ae:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0e4      	beq.n	8008180 <HAL_RCC_OscConfig+0x534>
 80081b6:	6a2a      	ldr	r2, [r5, #32]
 80081b8:	e7e5      	b.n	8008186 <HAL_RCC_OscConfig+0x53a>
 80081ba:	2501      	movs	r5, #1
 80081bc:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80081c0:	fab3 f383 	clz	r3, r3
 80081c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80081c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	f04f 0802 	mov.w	r8, #2
 80081d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80081d4:	f7fd f9a8 	bl	8005528 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081d8:	4e12      	ldr	r6, [pc, #72]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
        tickstart = HAL_GetTick();
 80081da:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081dc:	e005      	b.n	80081ea <HAL_RCC_OscConfig+0x59e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081de:	f7fd f9a3 	bl	8005528 <HAL_GetTick>
 80081e2:	1bc0      	subs	r0, r0, r7
 80081e4:	2802      	cmp	r0, #2
 80081e6:	f63f af61 	bhi.w	80080ac <HAL_RCC_OscConfig+0x460>
 80081ea:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ee:	6832      	ldr	r2, [r6, #0]
 80081f0:	fa98 f3a8 	rbit	r3, r8
 80081f4:	fab3 f383 	clz	r3, r3
 80081f8:	f003 031f 	and.w	r3, r3, #31
 80081fc:	fa05 f303 	lsl.w	r3, r5, r3
 8008200:	4213      	tst	r3, r2
 8008202:	d1ec      	bne.n	80081de <HAL_RCC_OscConfig+0x592>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	e56e      	b.n	8007ce6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008208:	4a06      	ldr	r2, [pc, #24]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 800820a:	6a13      	ldr	r3, [r2, #32]
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8008212:	f7fd f989 	bl	8005528 <HAL_GetTick>
 8008216:	f04f 0902 	mov.w	r9, #2
 800821a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800821c:	4e01      	ldr	r6, [pc, #4]	; (8008224 <HAL_RCC_OscConfig+0x5d8>)
 800821e:	2501      	movs	r5, #1
 8008220:	e01c      	b.n	800825c <HAL_RCC_OscConfig+0x610>
 8008222:	bf00      	nop
 8008224:	40021000 	.word	0x40021000
 8008228:	08015104 	.word	0x08015104
 800822c:	10908120 	.word	0x10908120
 8008230:	fa99 f3a9 	rbit	r3, r9
 8008234:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008236:	fa99 f3a9 	rbit	r3, r9
 800823a:	fab3 f383 	clz	r3, r3
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	fa05 f303 	lsl.w	r3, r5, r3
 8008246:	4213      	tst	r3, r2
 8008248:	f47f adb9 	bne.w	8007dbe <HAL_RCC_OscConfig+0x172>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800824c:	f7fd f96c 	bl	8005528 <HAL_GetTick>
 8008250:	f241 3388 	movw	r3, #5000	; 0x1388
 8008254:	1bc0      	subs	r0, r0, r7
 8008256:	4298      	cmp	r0, r3
 8008258:	f63f af28 	bhi.w	80080ac <HAL_RCC_OscConfig+0x460>
 800825c:	fa99 f3a9 	rbit	r3, r9
 8008260:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0e3      	beq.n	8008230 <HAL_RCC_OscConfig+0x5e4>
 8008268:	6a32      	ldr	r2, [r6, #32]
 800826a:	e7e4      	b.n	8008236 <HAL_RCC_OscConfig+0x5ea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800826c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008270:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e6e7      	b.n	8008056 <HAL_RCC_OscConfig+0x40a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008286:	f042 0204 	orr.w	r2, r2, #4
 800828a:	621a      	str	r2, [r3, #32]
 800828c:	6a1a      	ldr	r2, [r3, #32]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	621a      	str	r2, [r3, #32]
 8008294:	e7bd      	b.n	8008212 <HAL_RCC_OscConfig+0x5c6>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8008296:	f240 2152 	movw	r1, #594	; 0x252
 800829a:	4816      	ldr	r0, [pc, #88]	; (80082f4 <HAL_RCC_OscConfig+0x6a8>)
 800829c:	f006 fed2 	bl	800f044 <assert_failed>
 80082a0:	e5cd      	b.n	8007e3e <HAL_RCC_OscConfig+0x1f2>
 80082a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082a6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80082aa:	fab3 f383 	clz	r3, r3
 80082ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80082b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082bc:	f7fd f934 	bl	8005528 <HAL_GetTick>
 80082c0:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80082c4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082c6:	2601      	movs	r6, #1
 80082c8:	e005      	b.n	80082d6 <HAL_RCC_OscConfig+0x68a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ca:	f7fd f92d 	bl	8005528 <HAL_GetTick>
 80082ce:	1bc0      	subs	r0, r0, r7
 80082d0:	2802      	cmp	r0, #2
 80082d2:	f63f aeeb 	bhi.w	80080ac <HAL_RCC_OscConfig+0x460>
 80082d6:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082da:	682a      	ldr	r2, [r5, #0]
 80082dc:	fa94 f3a4 	rbit	r3, r4
 80082e0:	fab3 f383 	clz	r3, r3
 80082e4:	f003 031f 	and.w	r3, r3, #31
 80082e8:	fa06 f303 	lsl.w	r3, r6, r3
 80082ec:	4213      	tst	r3, r2
 80082ee:	d1ec      	bne.n	80082ca <HAL_RCC_OscConfig+0x67e>
 80082f0:	e602      	b.n	8007ef8 <HAL_RCC_OscConfig+0x2ac>
 80082f2:	bf00      	nop
 80082f4:	08015104 	.word	0x08015104

080082f8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082f8:	2800      	cmp	r0, #0
 80082fa:	f000 8126 	beq.w	800854a <HAL_RCC_ClockConfig+0x252>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80082fe:	6803      	ldr	r3, [r0, #0]
{
 8008300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008304:	071e      	lsls	r6, r3, #28
 8008306:	4604      	mov	r4, r0
 8008308:	460d      	mov	r5, r1
 800830a:	f000 80fa 	beq.w	8008502 <HAL_RCC_ClockConfig+0x20a>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800830e:	2d02      	cmp	r5, #2
 8008310:	f200 80ea 	bhi.w	80084e8 <HAL_RCC_ClockConfig+0x1f0>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008314:	4a8f      	ldr	r2, [pc, #572]	; (8008554 <HAL_RCC_ClockConfig+0x25c>)
 8008316:	6813      	ldr	r3, [r2, #0]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	42ab      	cmp	r3, r5
 800831e:	d20c      	bcs.n	800833a <HAL_RCC_ClockConfig+0x42>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008320:	6813      	ldr	r3, [r2, #0]
 8008322:	f023 0307 	bic.w	r3, r3, #7
 8008326:	432b      	orrs	r3, r5
 8008328:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	42ab      	cmp	r3, r5
 8008332:	d002      	beq.n	800833a <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8008334:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8008336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	0798      	lsls	r0, r3, #30
 800833e:	d51e      	bpl.n	800837e <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008340:	68a1      	ldr	r1, [r4, #8]
 8008342:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8008346:	d014      	beq.n	8008372 <HAL_RCC_ClockConfig+0x7a>
 8008348:	f021 0220 	bic.w	r2, r1, #32
 800834c:	2a90      	cmp	r2, #144	; 0x90
 800834e:	d010      	beq.n	8008372 <HAL_RCC_ClockConfig+0x7a>
 8008350:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8008354:	2aa0      	cmp	r2, #160	; 0xa0
 8008356:	d00c      	beq.n	8008372 <HAL_RCC_ClockConfig+0x7a>
 8008358:	f021 0210 	bic.w	r2, r1, #16
 800835c:	2ac0      	cmp	r2, #192	; 0xc0
 800835e:	d008      	beq.n	8008372 <HAL_RCC_ClockConfig+0x7a>
 8008360:	29f0      	cmp	r1, #240	; 0xf0
 8008362:	d006      	beq.n	8008372 <HAL_RCC_ClockConfig+0x7a>
 8008364:	f240 21d2 	movw	r1, #722	; 0x2d2
 8008368:	487b      	ldr	r0, [pc, #492]	; (8008558 <HAL_RCC_ClockConfig+0x260>)
 800836a:	f006 fe6b 	bl	800f044 <assert_failed>
 800836e:	68a1      	ldr	r1, [r4, #8]
 8008370:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008372:	487a      	ldr	r0, [pc, #488]	; (800855c <HAL_RCC_ClockConfig+0x264>)
 8008374:	6842      	ldr	r2, [r0, #4]
 8008376:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800837a:	430a      	orrs	r2, r1
 800837c:	6042      	str	r2, [r0, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800837e:	07d9      	lsls	r1, r3, #31
 8008380:	d534      	bpl.n	80083ec <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008382:	6863      	ldr	r3, [r4, #4]
 8008384:	2b02      	cmp	r3, #2
 8008386:	f200 80d9 	bhi.w	800853c <HAL_RCC_ClockConfig+0x244>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800838a:	2b01      	cmp	r3, #1
 800838c:	f000 80c4 	beq.w	8008518 <HAL_RCC_ClockConfig+0x220>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008390:	2b02      	cmp	r3, #2
 8008392:	bf0c      	ite	eq
 8008394:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 8008398:	2202      	movne	r2, #2
 800839a:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800839e:	496f      	ldr	r1, [pc, #444]	; (800855c <HAL_RCC_ClockConfig+0x264>)
 80083a0:	6808      	ldr	r0, [r1, #0]
 80083a2:	fa92 f2a2 	rbit	r2, r2
 80083a6:	fab2 f282 	clz	r2, r2
 80083aa:	f002 021f 	and.w	r2, r2, #31
 80083ae:	2101      	movs	r1, #1
 80083b0:	fa01 f202 	lsl.w	r2, r1, r2
 80083b4:	4202      	tst	r2, r0
 80083b6:	d0bd      	beq.n	8008334 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083b8:	4e68      	ldr	r6, [pc, #416]	; (800855c <HAL_RCC_ClockConfig+0x264>)
 80083ba:	6872      	ldr	r2, [r6, #4]
 80083bc:	f022 0203 	bic.w	r2, r2, #3
 80083c0:	4313      	orrs	r3, r2
 80083c2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80083c4:	f7fd f8b0 	bl	8005528 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083c8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80083cc:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ce:	e006      	b.n	80083de <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083d0:	f7fd f8aa 	bl	8005528 <HAL_GetTick>
 80083d4:	eba0 0008 	sub.w	r0, r0, r8
 80083d8:	42b8      	cmp	r0, r7
 80083da:	f200 80b8 	bhi.w	800854e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083de:	6873      	ldr	r3, [r6, #4]
 80083e0:	6862      	ldr	r2, [r4, #4]
 80083e2:	f003 030c 	and.w	r3, r3, #12
 80083e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80083ea:	d1f1      	bne.n	80083d0 <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083ec:	4a59      	ldr	r2, [pc, #356]	; (8008554 <HAL_RCC_ClockConfig+0x25c>)
 80083ee:	6813      	ldr	r3, [r2, #0]
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	42ab      	cmp	r3, r5
 80083f6:	d909      	bls.n	800840c <HAL_RCC_ClockConfig+0x114>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f8:	6813      	ldr	r3, [r2, #0]
 80083fa:	f023 0307 	bic.w	r3, r3, #7
 80083fe:	432b      	orrs	r3, r5
 8008400:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	42ab      	cmp	r3, r5
 800840a:	d193      	bne.n	8008334 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	075a      	lsls	r2, r3, #29
 8008410:	d518      	bpl.n	8008444 <HAL_RCC_ClockConfig+0x14c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008412:	68e1      	ldr	r1, [r4, #12]
 8008414:	f431 6280 	bics.w	r2, r1, #1024	; 0x400
 8008418:	d00e      	beq.n	8008438 <HAL_RCC_ClockConfig+0x140>
 800841a:	f421 7200 	bic.w	r2, r1, #512	; 0x200
 800841e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8008422:	d009      	beq.n	8008438 <HAL_RCC_ClockConfig+0x140>
 8008424:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8008428:	d006      	beq.n	8008438 <HAL_RCC_ClockConfig+0x140>
 800842a:	f240 3115 	movw	r1, #789	; 0x315
 800842e:	484a      	ldr	r0, [pc, #296]	; (8008558 <HAL_RCC_ClockConfig+0x260>)
 8008430:	f006 fe08 	bl	800f044 <assert_failed>
 8008434:	68e1      	ldr	r1, [r4, #12]
 8008436:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008438:	4848      	ldr	r0, [pc, #288]	; (800855c <HAL_RCC_ClockConfig+0x264>)
 800843a:	6842      	ldr	r2, [r0, #4]
 800843c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008440:	430a      	orrs	r2, r1
 8008442:	6042      	str	r2, [r0, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008444:	071b      	lsls	r3, r3, #28
 8008446:	d518      	bpl.n	800847a <HAL_RCC_ClockConfig+0x182>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008448:	6922      	ldr	r2, [r4, #16]
 800844a:	f432 6380 	bics.w	r3, r2, #1024	; 0x400
 800844e:	d00d      	beq.n	800846c <HAL_RCC_ClockConfig+0x174>
 8008450:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8008454:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008458:	d008      	beq.n	800846c <HAL_RCC_ClockConfig+0x174>
 800845a:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800845e:	d005      	beq.n	800846c <HAL_RCC_ClockConfig+0x174>
 8008460:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8008464:	483c      	ldr	r0, [pc, #240]	; (8008558 <HAL_RCC_ClockConfig+0x260>)
 8008466:	f006 fded 	bl	800f044 <assert_failed>
 800846a:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800846c:	493b      	ldr	r1, [pc, #236]	; (800855c <HAL_RCC_ClockConfig+0x264>)
 800846e:	684b      	ldr	r3, [r1, #4]
 8008470:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008474:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008478:	604b      	str	r3, [r1, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800847a:	4a38      	ldr	r2, [pc, #224]	; (800855c <HAL_RCC_ClockConfig+0x264>)
 800847c:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800847e:	f003 010c 	and.w	r1, r3, #12
 8008482:	2908      	cmp	r1, #8
 8008484:	d146      	bne.n	8008514 <HAL_RCC_ClockConfig+0x21c>
 8008486:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 800848a:	fa91 f1a1 	rbit	r1, r1
 800848e:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008490:	fab1 f181 	clz	r1, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008494:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008496:	fa90 f0a0 	rbit	r0, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800849a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800849e:	40cb      	lsrs	r3, r1
 80084a0:	492f      	ldr	r1, [pc, #188]	; (8008560 <HAL_RCC_ClockConfig+0x268>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80084a2:	4c30      	ldr	r4, [pc, #192]	; (8008564 <HAL_RCC_ClockConfig+0x26c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80084a4:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80084a6:	4930      	ldr	r1, [pc, #192]	; (8008568 <HAL_RCC_ClockConfig+0x270>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80084a8:	fab0 f080 	clz	r0, r0
 80084ac:	f002 020f 	and.w	r2, r2, #15
 80084b0:	40c2      	lsrs	r2, r0
 80084b2:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80084b4:	fbb1 f1f2 	udiv	r1, r1, r2
 80084b8:	fb03 f101 	mul.w	r1, r3, r1
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80084bc:	4b27      	ldr	r3, [pc, #156]	; (800855c <HAL_RCC_ClockConfig+0x264>)
 80084be:	22f0      	movs	r2, #240	; 0xf0
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	fa92 f2a2 	rbit	r2, r2
 80084c6:	fab2 f282 	clz	r2, r2
 80084ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084ce:	40d3      	lsrs	r3, r2
 80084d0:	4826      	ldr	r0, [pc, #152]	; (800856c <HAL_RCC_ClockConfig+0x274>)
 80084d2:	4a27      	ldr	r2, [pc, #156]	; (8008570 <HAL_RCC_ClockConfig+0x278>)
 80084d4:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 80084d6:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80084d8:	fa21 f303 	lsr.w	r3, r1, r3
 80084dc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80084de:	f7fc ffed 	bl	80054bc <HAL_InitTick>
  return HAL_OK;
 80084e2:	2000      	movs	r0, #0
}
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 80084e8:	f240 21bb 	movw	r1, #699	; 0x2bb
 80084ec:	481a      	ldr	r0, [pc, #104]	; (8008558 <HAL_RCC_ClockConfig+0x260>)
 80084ee:	f006 fda9 	bl	800f044 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084f2:	4a18      	ldr	r2, [pc, #96]	; (8008554 <HAL_RCC_ClockConfig+0x25c>)
 80084f4:	6813      	ldr	r3, [r2, #0]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	42ab      	cmp	r3, r5
 80084fc:	f4ff af10 	bcc.w	8008320 <HAL_RCC_ClockConfig+0x28>
 8008500:	e71b      	b.n	800833a <HAL_RCC_ClockConfig+0x42>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008502:	f240 21ba 	movw	r1, #698	; 0x2ba
 8008506:	4814      	ldr	r0, [pc, #80]	; (8008558 <HAL_RCC_ClockConfig+0x260>)
 8008508:	f006 fd9c 	bl	800f044 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800850c:	2d02      	cmp	r5, #2
 800850e:	f67f af01 	bls.w	8008314 <HAL_RCC_ClockConfig+0x1c>
 8008512:	e7e9      	b.n	80084e8 <HAL_RCC_ClockConfig+0x1f0>
      sysclockfreq = HSE_VALUE;
 8008514:	4914      	ldr	r1, [pc, #80]	; (8008568 <HAL_RCC_ClockConfig+0x270>)
 8008516:	e7d1      	b.n	80084bc <HAL_RCC_ClockConfig+0x1c4>
 8008518:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800851c:	fa92 f1a2 	rbit	r1, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008520:	490e      	ldr	r1, [pc, #56]	; (800855c <HAL_RCC_ClockConfig+0x264>)
 8008522:	6809      	ldr	r1, [r1, #0]
 8008524:	fa92 f2a2 	rbit	r2, r2
 8008528:	fab2 f282 	clz	r2, r2
 800852c:	f002 021f 	and.w	r2, r2, #31
 8008530:	fa03 f202 	lsl.w	r2, r3, r2
 8008534:	420a      	tst	r2, r1
 8008536:	f47f af3f 	bne.w	80083b8 <HAL_RCC_ClockConfig+0xc0>
 800853a:	e6fb      	b.n	8008334 <HAL_RCC_ClockConfig+0x3c>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800853c:	f240 21d9 	movw	r1, #729	; 0x2d9
 8008540:	4805      	ldr	r0, [pc, #20]	; (8008558 <HAL_RCC_ClockConfig+0x260>)
 8008542:	f006 fd7f 	bl	800f044 <assert_failed>
 8008546:	6863      	ldr	r3, [r4, #4]
 8008548:	e71f      	b.n	800838a <HAL_RCC_ClockConfig+0x92>
    return HAL_ERROR;
 800854a:	2001      	movs	r0, #1
}
 800854c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800854e:	2003      	movs	r0, #3
 8008550:	e6f1      	b.n	8008336 <HAL_RCC_ClockConfig+0x3e>
 8008552:	bf00      	nop
 8008554:	40022000 	.word	0x40022000
 8008558:	08015104 	.word	0x08015104
 800855c:	40021000 	.word	0x40021000
 8008560:	08015150 	.word	0x08015150
 8008564:	08015160 	.word	0x08015160
 8008568:	007a1200 	.word	0x007a1200
 800856c:	08015430 	.word	0x08015430
 8008570:	2000000c 	.word	0x2000000c

08008574 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8008574:	4a12      	ldr	r2, [pc, #72]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x4c>)
 8008576:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008578:	f003 010c 	and.w	r1, r3, #12
 800857c:	2908      	cmp	r1, #8
 800857e:	d001      	beq.n	8008584 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8008580:	4810      	ldr	r0, [pc, #64]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008582:	4770      	bx	lr
{
 8008584:	b430      	push	{r4, r5}
 8008586:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 800858a:	fa90 f0a0 	rbit	r0, r0
 800858e:	210f      	movs	r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008590:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008594:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008596:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800859a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800859e:	40c3      	lsrs	r3, r0
 80085a0:	4809      	ldr	r0, [pc, #36]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80085a2:	4d0a      	ldr	r5, [pc, #40]	; (80085cc <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80085a4:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80085a6:	4c07      	ldr	r4, [pc, #28]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80085a8:	fab1 f181 	clz	r1, r1
 80085ac:	f002 030f 	and.w	r3, r2, #15
 80085b0:	40cb      	lsrs	r3, r1
 80085b2:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80085b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80085b8:	bc30      	pop	{r4, r5}
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80085ba:	fb00 f003 	mul.w	r0, r0, r3
}
 80085be:	4770      	bx	lr
 80085c0:	40021000 	.word	0x40021000
 80085c4:	007a1200 	.word	0x007a1200
 80085c8:	08015150 	.word	0x08015150
 80085cc:	08015160 	.word	0x08015160

080085d0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80085d0:	4b01      	ldr	r3, [pc, #4]	; (80085d8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	2000000c 	.word	0x2000000c

080085dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80085dc:	4b08      	ldr	r3, [pc, #32]	; (8008600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	fa92 f2a2 	rbit	r2, r2
 80085e8:	fab2 f282 	clz	r2, r2
 80085ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085f0:	40d3      	lsrs	r3, r2
 80085f2:	4904      	ldr	r1, [pc, #16]	; (8008604 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80085f4:	4a04      	ldr	r2, [pc, #16]	; (8008608 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80085f6:	5ccb      	ldrb	r3, [r1, r3]
 80085f8:	6810      	ldr	r0, [r2, #0]
}    
 80085fa:	40d8      	lsrs	r0, r3
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40021000 	.word	0x40021000
 8008604:	08015440 	.word	0x08015440
 8008608:	2000000c 	.word	0x2000000c

0800860c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800860c:	4b08      	ldr	r3, [pc, #32]	; (8008630 <HAL_RCC_GetPCLK2Freq+0x24>)
 800860e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	fa92 f2a2 	rbit	r2, r2
 8008618:	fab2 f282 	clz	r2, r2
 800861c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008620:	40d3      	lsrs	r3, r2
 8008622:	4904      	ldr	r1, [pc, #16]	; (8008634 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8008624:	4a04      	ldr	r2, [pc, #16]	; (8008638 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008626:	5ccb      	ldrb	r3, [r1, r3]
 8008628:	6810      	ldr	r0, [r2, #0]
} 
 800862a:	40d8      	lsrs	r0, r3
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	40021000 	.word	0x40021000
 8008634:	08015440 	.word	0x08015440
 8008638:	2000000c 	.word	0x2000000c

0800863c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800863c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tickstart = 0U;
  uint32_t temp_reg = 0U;
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008640:	4bad      	ldr	r3, [pc, #692]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
{
 8008642:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008644:	6800      	ldr	r0, [r0, #0]
 8008646:	4298      	cmp	r0, r3
{
 8008648:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800864a:	f200 8216 	bhi.w	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x43e>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800864e:	03c6      	lsls	r6, r0, #15
 8008650:	d546      	bpl.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8008658:	d003      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800865a:	2183      	movs	r1, #131	; 0x83
 800865c:	48a7      	ldr	r0, [pc, #668]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800865e:	f006 fcf1 	bl	800f044 <assert_failed>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008662:	4ba7      	ldr	r3, [pc, #668]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008664:	69da      	ldr	r2, [r3, #28]
 8008666:	00d5      	lsls	r5, r2, #3
 8008668:	f140 81e3 	bpl.w	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800866c:	4da5      	ldr	r5, [pc, #660]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800866e:	682a      	ldr	r2, [r5, #0]
 8008670:	05d0      	lsls	r0, r2, #23
    FlagStatus       pwrclkchanged = RESET;
 8008672:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008676:	f140 81ec 	bpl.w	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x416>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800867a:	4da1      	ldr	r5, [pc, #644]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800867c:	6861      	ldr	r1, [r4, #4]
 800867e:	6a2a      	ldr	r2, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008680:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8008684:	d020      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8008686:	f401 7340 	and.w	r3, r1, #768	; 0x300
 800868a:	4293      	cmp	r3, r2
 800868c:	d01c      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800868e:	6a29      	ldr	r1, [r5, #32]
 8008690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008694:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8008698:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800869c:	4f9a      	ldr	r7, [pc, #616]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800869e:	fab2 f282 	clz	r2, r2
 80086a2:	443a      	add	r2, r7
 80086a4:	0092      	lsls	r2, r2, #2
 80086a6:	f04f 0c01 	mov.w	ip, #1
 80086aa:	f8c2 c000 	str.w	ip, [r2]
 80086ae:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086b2:	fab3 f383 	clz	r3, r3
 80086b6:	443b      	add	r3, r7
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80086be:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 80086c0:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80086c2:	f100 81ee 	bmi.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80086c6:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80086c8:	4a8d      	ldr	r2, [pc, #564]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086ca:	6a13      	ldr	r3, [r2, #32]
 80086cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086d0:	430b      	orrs	r3, r1
 80086d2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80086d4:	b11e      	cbz	r6, 80086de <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086d6:	69d3      	ldr	r3, [r2, #28]
 80086d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086dc:	61d3      	str	r3, [r2, #28]
 80086de:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086e0:	07c3      	lsls	r3, r0, #31
 80086e2:	d509      	bpl.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80086e4:	68a2      	ldr	r2, [r4, #8]
 80086e6:	2a03      	cmp	r2, #3
 80086e8:	f200 81cd 	bhi.w	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086ec:	4984      	ldr	r1, [pc, #528]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086ee:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80086f0:	f023 0303 	bic.w	r3, r3, #3
 80086f4:	4313      	orrs	r3, r2
 80086f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086f8:	0787      	lsls	r7, r0, #30
 80086fa:	d50f      	bpl.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80086fc:	68e2      	ldr	r2, [r4, #12]
 80086fe:	f432 3340 	bics.w	r3, r2, #196608	; 0x30000
 8008702:	d005      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008704:	487d      	ldr	r0, [pc, #500]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008706:	21d5      	movs	r1, #213	; 0xd5
 8008708:	f006 fc9c 	bl	800f044 <assert_failed>
 800870c:	68e2      	ldr	r2, [r4, #12]
 800870e:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008710:	497b      	ldr	r1, [pc, #492]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008712:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008714:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008718:	4313      	orrs	r3, r2
 800871a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800871c:	0746      	lsls	r6, r0, #29
 800871e:	d50f      	bpl.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8008720:	6922      	ldr	r2, [r4, #16]
 8008722:	f432 2340 	bics.w	r3, r2, #786432	; 0xc0000
 8008726:	d005      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8008728:	4874      	ldr	r0, [pc, #464]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800872a:	21e1      	movs	r1, #225	; 0xe1
 800872c:	f006 fc8a 	bl	800f044 <assert_failed>
 8008730:	6922      	ldr	r2, [r4, #16]
 8008732:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008734:	4972      	ldr	r1, [pc, #456]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008736:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008738:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800873c:	4313      	orrs	r3, r2
 800873e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008740:	0685      	lsls	r5, r0, #26
 8008742:	d50f      	bpl.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008744:	69e2      	ldr	r2, [r4, #28]
 8008746:	f032 0310 	bics.w	r3, r2, #16
 800874a:	d005      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800874c:	486b      	ldr	r0, [pc, #428]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800874e:	21ec      	movs	r1, #236	; 0xec
 8008750:	f006 fc78 	bl	800f044 <assert_failed>
 8008754:	69e2      	ldr	r2, [r4, #28]
 8008756:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008758:	4969      	ldr	r1, [pc, #420]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800875a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800875c:	f023 0310 	bic.w	r3, r3, #16
 8008760:	4313      	orrs	r3, r2
 8008762:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008764:	0381      	lsls	r1, r0, #14
 8008766:	d50a      	bpl.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8008768:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800876a:	f432 0380 	bics.w	r3, r2, #4194304	; 0x400000
 800876e:	f040 8191 	bne.w	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x458>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008772:	4963      	ldr	r1, [pc, #396]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008774:	684b      	ldr	r3, [r1, #4]
 8008776:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800877a:	4313      	orrs	r3, r2
 800877c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800877e:	0642      	lsls	r2, r0, #25
 8008780:	d510      	bpl.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008782:	6a22      	ldr	r2, [r4, #32]
 8008784:	f032 0320 	bics.w	r3, r2, #32
 8008788:	d006      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800878a:	485c      	ldr	r0, [pc, #368]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800878c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8008790:	f006 fc58 	bl	800f044 <assert_failed>
 8008794:	6a22      	ldr	r2, [r4, #32]
 8008796:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008798:	4959      	ldr	r1, [pc, #356]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800879a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800879c:	f023 0320 	bic.w	r3, r3, #32
 80087a0:	4313      	orrs	r3, r2
 80087a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087a4:	0343      	lsls	r3, r0, #13
 80087a6:	d510      	bpl.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80087a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80087aa:	f032 0340 	bics.w	r3, r2, #64	; 0x40
 80087ae:	d006      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x182>
 80087b0:	4852      	ldr	r0, [pc, #328]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80087b2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80087b6:	f006 fc45 	bl	800f044 <assert_failed>
 80087ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80087bc:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087be:	4950      	ldr	r1, [pc, #320]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80087c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c6:	4313      	orrs	r3, r2
 80087c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087ca:	0707      	lsls	r7, r0, #28
 80087cc:	d510      	bpl.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80087ce:	6962      	ldr	r2, [r4, #20]
 80087d0:	f432 1340 	bics.w	r3, r2, #3145728	; 0x300000
 80087d4:	d006      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80087d6:	4849      	ldr	r0, [pc, #292]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80087d8:	f240 112f 	movw	r1, #303	; 0x12f
 80087dc:	f006 fc32 	bl	800f044 <assert_failed>
 80087e0:	6962      	ldr	r2, [r4, #20]
 80087e2:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087e4:	4946      	ldr	r1, [pc, #280]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80087e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80087ec:	4313      	orrs	r3, r2
 80087ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80087f0:	06c6      	lsls	r6, r0, #27
 80087f2:	d510      	bpl.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80087f4:	69a2      	ldr	r2, [r4, #24]
 80087f6:	f432 0340 	bics.w	r3, r2, #12582912	; 0xc00000
 80087fa:	d006      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80087fc:	483f      	ldr	r0, [pc, #252]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80087fe:	f240 1139 	movw	r1, #313	; 0x139
 8008802:	f006 fc1f 	bl	800f044 <assert_failed>
 8008806:	69a2      	ldr	r2, [r4, #24]
 8008808:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800880a:	493d      	ldr	r1, [pc, #244]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800880c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800880e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008812:	4313      	orrs	r3, r2
 8008814:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008816:	0585      	lsls	r5, r0, #22
 8008818:	d510      	bpl.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800881a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800881c:	f432 0300 	bics.w	r3, r2, #8388608	; 0x800000
 8008820:	d006      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8008822:	4836      	ldr	r0, [pc, #216]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008824:	f240 1149 	movw	r1, #329	; 0x149
 8008828:	f006 fc0c 	bl	800f044 <assert_failed>
 800882c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800882e:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008830:	4933      	ldr	r1, [pc, #204]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008832:	684b      	ldr	r3, [r1, #4]
 8008834:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008838:	4313      	orrs	r3, r2
 800883a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800883c:	0601      	lsls	r1, r0, #24
 800883e:	d527      	bpl.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 8008840:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008842:	f432 7380 	bics.w	r3, r2, #256	; 0x100
 8008846:	d01d      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8008848:	f022 0320 	bic.w	r3, r2, #32
 800884c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8008850:	d018      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8008852:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008856:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800885a:	d013      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800885c:	f022 0310 	bic.w	r3, r2, #16
 8008860:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008864:	d00e      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8008866:	f5b2 7fb8 	cmp.w	r2, #368	; 0x170
 800886a:	d00b      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800886c:	f022 0330 	bic.w	r3, r2, #48	; 0x30
 8008870:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008874:	d006      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8008876:	4821      	ldr	r0, [pc, #132]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008878:	f240 1169 	movw	r1, #361	; 0x169
 800887c:	f006 fbe2 	bl	800f044 <assert_failed>
 8008880:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008882:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008884:	491e      	ldr	r1, [pc, #120]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008886:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008888:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800888c:	4313      	orrs	r3, r2
 800888e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008890:	05c2      	lsls	r2, r0, #23
 8008892:	d527      	bpl.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 8008894:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008896:	f432 5300 	bics.w	r3, r2, #8192	; 0x2000
 800889a:	d01d      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800889c:	f422 6380 	bic.w	r3, r2, #1024	; 0x400
 80088a0:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 80088a4:	d018      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80088a6:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 80088aa:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 80088ae:	d013      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80088b0:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 80088b4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80088b8:	d00e      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80088ba:	f5b2 5f38 	cmp.w	r2, #11776	; 0x2e00
 80088be:	d00b      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80088c0:	f422 63c0 	bic.w	r3, r2, #1536	; 0x600
 80088c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088c8:	d006      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80088ca:	480c      	ldr	r0, [pc, #48]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80088cc:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80088d0:	f006 fbb8 	bl	800f044 <assert_failed>
 80088d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80088d6:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80088d8:	4909      	ldr	r1, [pc, #36]	; (8008900 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80088da:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80088dc:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80088e0:	4313      	orrs	r3, r2
 80088e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80088e4:	04c3      	lsls	r3, r0, #19
 80088e6:	d51b      	bpl.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 80088e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80088ea:	f432 7380 	bics.w	r3, r2, #256	; 0x100
 80088ee:	d011      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80088f0:	4802      	ldr	r0, [pc, #8]	; (80088fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80088f2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80088f6:	e009      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80088f8:	03f733ff 	.word	0x03f733ff
 80088fc:	08015170 	.word	0x08015170
 8008900:	40021000 	.word	0x40021000
 8008904:	40007000 	.word	0x40007000
 8008908:	10908100 	.word	0x10908100
 800890c:	f006 fb9a 	bl	800f044 <assert_failed>
 8008910:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008912:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008914:	4975      	ldr	r1, [pc, #468]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8008916:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800891c:	4313      	orrs	r3, r2
 800891e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008920:	0487      	lsls	r7, r0, #18
 8008922:	d510      	bpl.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 8008924:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008926:	f432 7300 	bics.w	r3, r2, #512	; 0x200
 800892a:	d006      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800892c:	4870      	ldr	r0, [pc, #448]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800892e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8008932:	f006 fb87 	bl	800f044 <assert_failed>
 8008936:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008938:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800893a:	496c      	ldr	r1, [pc, #432]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800893c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800893e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008942:	4313      	orrs	r3, r2
 8008944:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8008946:	02c6      	lsls	r6, r0, #11
 8008948:	d510      	bpl.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
 800894a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800894c:	f032 7380 	bics.w	r3, r2, #16777216	; 0x1000000
 8008950:	d006      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008952:	4867      	ldr	r0, [pc, #412]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008954:	f240 2103 	movw	r1, #515	; 0x203
 8008958:	f006 fb74 	bl	800f044 <assert_failed>
 800895c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800895e:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008960:	4962      	ldr	r1, [pc, #392]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8008962:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008968:	4313      	orrs	r3, r2
 800896a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800896c:	0285      	lsls	r5, r0, #10
 800896e:	d510      	bpl.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
 8008970:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008972:	f032 7300 	bics.w	r3, r2, #33554432	; 0x2000000
 8008976:	d006      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008978:	485d      	ldr	r0, [pc, #372]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800897a:	f240 210d 	movw	r1, #525	; 0x20d
 800897e:	f006 fb61 	bl	800f044 <assert_failed>
 8008982:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008984:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8008986:	4959      	ldr	r1, [pc, #356]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8008988:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800898a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800898e:	4313      	orrs	r3, r2
 8008990:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008992:	0241      	lsls	r1, r0, #9
 8008994:	d510      	bpl.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
 8008996:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008998:	f432 6380 	bics.w	r3, r2, #1024	; 0x400
 800899c:	d006      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x370>
 800899e:	4854      	ldr	r0, [pc, #336]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80089a0:	f240 2117 	movw	r1, #535	; 0x217
 80089a4:	f006 fb4e 	bl	800f044 <assert_failed>
 80089a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80089aa:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80089ac:	494f      	ldr	r1, [pc, #316]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80089ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80089b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089b4:	4313      	orrs	r3, r2
 80089b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80089b8:	0202      	lsls	r2, r0, #8
 80089ba:	d510      	bpl.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
 80089bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80089be:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80089c2:	d006      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
 80089c4:	484a      	ldr	r0, [pc, #296]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80089c6:	f240 2121 	movw	r1, #545	; 0x221
 80089ca:	f006 fb3b 	bl	800f044 <assert_failed>
 80089ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80089d0:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80089d2:	4946      	ldr	r1, [pc, #280]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80089d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80089d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089da:	4313      	orrs	r3, r2
 80089dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80089de:	01c3      	lsls	r3, r0, #7
 80089e0:	d510      	bpl.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
 80089e2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80089e4:	f432 5300 	bics.w	r3, r2, #8192	; 0x2000
 80089e8:	d006      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80089ea:	4841      	ldr	r0, [pc, #260]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80089ec:	f240 212b 	movw	r1, #555	; 0x22b
 80089f0:	f006 fb28 	bl	800f044 <assert_failed>
 80089f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80089f6:	6820      	ldr	r0, [r4, #0]
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80089f8:	493c      	ldr	r1, [pc, #240]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80089fa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80089fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a00:	4313      	orrs	r3, r2
 8008a02:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8008a04:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008a08:	d010      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
 8008a0a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008a0c:	f432 4300 	bics.w	r3, r2, #32768	; 0x8000
 8008a10:	d005      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8008a12:	f44f 710e 	mov.w	r1, #568	; 0x238
 8008a16:	4836      	ldr	r0, [pc, #216]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008a18:	f006 fb14 	bl	800f044 <assert_failed>
 8008a1c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8008a1e:	4933      	ldr	r1, [pc, #204]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8008a20:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008a22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a26:	4313      	orrs	r3, r2
 8008a28:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008a2a:	2000      	movs	r0, #0
}
 8008a2c:	b003      	add	sp, #12
 8008a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a32:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a34:	4d2f      	ldr	r5, [pc, #188]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008a3a:	61da      	str	r2, [r3, #28]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a46:	682a      	ldr	r2, [r5, #0]
 8008a48:	05d0      	lsls	r0, r2, #23
      pwrclkchanged = SET;
 8008a4a:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a4e:	f53f ae14 	bmi.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a52:	682a      	ldr	r2, [r5, #0]
 8008a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a58:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8008a5a:	f7fc fd65 	bl	8005528 <HAL_GetTick>
 8008a5e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	05d9      	lsls	r1, r3, #23
 8008a64:	f53f ae09 	bmi.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x3e>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a68:	f7fc fd5e 	bl	8005528 <HAL_GetTick>
 8008a6c:	1bc0      	subs	r0, r0, r7
 8008a6e:	2864      	cmp	r0, #100	; 0x64
 8008a70:	d9f6      	bls.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x424>
          return HAL_TIMEOUT;
 8008a72:	2003      	movs	r0, #3
}
 8008a74:	b003      	add	sp, #12
 8008a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008a7a:	481d      	ldr	r0, [pc, #116]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008a7c:	217d      	movs	r1, #125	; 0x7d
 8008a7e:	f006 fae1 	bl	800f044 <assert_failed>
 8008a82:	6820      	ldr	r0, [r4, #0]
 8008a84:	e5e3      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x12>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008a86:	481a      	ldr	r0, [pc, #104]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008a88:	21ca      	movs	r1, #202	; 0xca
 8008a8a:	f006 fadb 	bl	800f044 <assert_failed>
 8008a8e:	68a2      	ldr	r2, [r4, #8]
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	e62b      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xb0>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 8008a94:	4816      	ldr	r0, [pc, #88]	; (8008af0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8008a96:	21fa      	movs	r1, #250	; 0xfa
 8008a98:	f006 fad4 	bl	800f044 <assert_failed>
 8008a9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	e667      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x136>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aa2:	4667      	mov	r7, ip
        tickstart = HAL_GetTick();
 8008aa4:	f7fc fd40 	bl	8005528 <HAL_GetTick>
 8008aa8:	f04f 0902 	mov.w	r9, #2
 8008aac:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aae:	e015      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008ab0:	fa99 f3a9 	rbit	r3, r9
 8008ab4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008ab6:	fa99 f3a9 	rbit	r3, r9
 8008aba:	fab3 f383 	clz	r3, r3
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	fa07 f303 	lsl.w	r3, r7, r3
 8008ac6:	4213      	tst	r3, r2
 8008ac8:	f47f adfd 	bne.w	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008acc:	f7fc fd2c 	bl	8005528 <HAL_GetTick>
 8008ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ad4:	eba0 0008 	sub.w	r0, r0, r8
 8008ad8:	4298      	cmp	r0, r3
 8008ada:	d8ca      	bhi.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008adc:	fa99 f3a9 	rbit	r3, r9
 8008ae0:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0e3      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8008ae8:	6a2a      	ldr	r2, [r5, #32]
 8008aea:	e7e4      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008aec:	40021000 	.word	0x40021000
 8008af0:	08015170 	.word	0x08015170
 8008af4:	40007000 	.word	0x40007000

08008af8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008af8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* frequency == 0 : means that no available frequency for the peripheral */
  uint32_t frequency = 0U;

  uint32_t srcclk = 0U;
#if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR2_ADCPRE12) || defined(RCC_CFGR2_ADCPRE34)
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8008afa:	4dba      	ldr	r5, [pc, #744]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
#if defined(RCC_CFGR_SDPRE)
  uint8_t sdadc_prescaler_table[16] = { 2U,  4U,  6U, 8U, 10U, 12U, 14U, 16U, 20U, 24U, 28U, 32U, 36U, 40U, 44U, 48U};
#endif /* RCC_CFGR_SDPRE */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008afc:	4fba      	ldr	r7, [pc, #744]	; (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
{
 8008afe:	4606      	mov	r6, r0
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8008b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
 8008b02:	b089      	sub	sp, #36	; 0x24
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8008b04:	466c      	mov	r4, sp
 8008b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008b0c:	42be      	cmp	r6, r7
  uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
 8008b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008b12:	d846      	bhi.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
  
  switch (PeriphClk)
 8008b14:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8008b18:	f000 818a 	beq.w	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008b1c:	d92a      	bls.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008b1e:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8008b22:	f000 8180 	beq.w	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8008b26:	d961      	bls.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008b28:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8008b2c:	f000 8154 	beq.w	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008b30:	f200 80a2 	bhi.w	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8008b34:	f5b6 1f00 	cmp.w	r6, #2097152	; 0x200000
 8008b38:	f000 80fe 	beq.w	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008b3c:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 8008b40:	d152      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
#endif /* RCC_CFGR3_TIM8SW */
#if defined(RCC_CFGR3_TIM15SW)
  case RCC_PERIPHCLK_TIM15:
    {
      /* Get the current TIM15 source */
      srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8008b42:	4baa      	ldr	r3, [pc, #680]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30

      /* Check if PLL is ready and if TIM15 clock selection is PLL */
      if ((srcclk == RCC_TIM15CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008b46:	055d      	lsls	r5, r3, #21
 8008b48:	f140 80fa 	bpl.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
    {
      /* Get the current TIM20 source */
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();

      /* Check if PLL is ready and if TIM20 clock selection is PLL */
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008b4c:	4ba7      	ldr	r3, [pc, #668]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008b54:	d02b      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  */
static uint32_t RCC_GetPLLCLKFreq(void)
{
  uint32_t pllmul = 0U, pllsource = 0U, prediv = 0U, pllclk = 0U;

  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008b56:	685a      	ldr	r2, [r3, #4]
  pllmul = ( pllmul >> 18U) + 2U;
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008b58:	6859      	ldr	r1, [r3, #4]
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/2U * PLLMUL */
    pllclk = (HSI_VALUE >> 1U) * pllmul;
  }
#else
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008b5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    pllclk = (HSE_VALUE/prediv) * pllmul;
  }
  else
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008b5c:	48a4      	ldr	r0, [pc, #656]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
  pllmul = ( pllmul >> 18U) + 2U;
 8008b5e:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8008b62:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008b64:	f001 020f 	and.w	r2, r1, #15
 8008b68:	3201      	adds	r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008b6a:	fbb0 f0f2 	udiv	r0, r0, r2
 8008b6e:	fb00 f003 	mul.w	r0, r0, r3
 8008b72:	e01c      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008b74:	2e10      	cmp	r6, #16
 8008b76:	f000 8100 	beq.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008b7a:	d91a      	bls.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8008b7c:	2e80      	cmp	r6, #128	; 0x80
 8008b7e:	f000 815c 	beq.w	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008b82:	d84c      	bhi.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8008b84:	2e20      	cmp	r6, #32
 8008b86:	f000 80ca 	beq.w	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 8008b8a:	2e40      	cmp	r6, #64	; 0x40
 8008b8c:	d12c      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008b8e:	4b97      	ldr	r3, [pc, #604]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008b90:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008b92:	f010 0020 	ands.w	r0, r0, #32
 8008b96:	d03a      	beq.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
}
 8008b98:	b009      	add	sp, #36	; 0x24
 8008b9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        frequency = HAL_RCC_GetSysClockFreq();
 8008b9e:	f7ff bce9 	b.w	8008574 <HAL_RCC_GetSysClockFreq>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008ba2:	4894      	ldr	r0, [pc, #592]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008ba4:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8008ba8:	f006 fa4c 	bl	800f044 <assert_failed>
  uint32_t frequency = 0U;
 8008bac:	2000      	movs	r0, #0
}
 8008bae:	b009      	add	sp, #36	; 0x24
 8008bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (PeriphClk)
 8008bb2:	2e02      	cmp	r6, #2
 8008bb4:	f000 8126 	beq.w	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008bb8:	f240 8166 	bls.w	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8008bbc:	2e04      	cmp	r6, #4
 8008bbe:	f000 8094 	beq.w	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008bc2:	2e08      	cmp	r6, #8
 8008bc4:	d110      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008bc6:	4b89      	ldr	r3, [pc, #548]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008bca:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 8008bce:	f000 80cf 	beq.w	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008bd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bd6:	f000 814f 	beq.w	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
      else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bde:	d0db      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008be4:	f000 8092 	beq.w	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x214>
  uint32_t frequency = 0U;
 8008be8:	2000      	movs	r0, #0
  return(frequency);
 8008bea:	e7e0      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008bec:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8008bf0:	f000 80dc 	beq.w	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 8008bf4:	f240 8156 	bls.w	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008bf8:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8008bfc:	d056      	beq.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008bfe:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8008c02:	d1f1      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008c04:	4b79      	ldr	r3, [pc, #484]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c06:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008c08:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8008c0c:	d1c4      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8008c0e:	461a      	mov	r2, r3
        frequency = HSI_VALUE;
 8008c10:	4b77      	ldr	r3, [pc, #476]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008c12:	6812      	ldr	r2, [r2, #0]
        frequency = HSI_VALUE;
 8008c14:	f012 0f02 	tst.w	r2, #2
 8008c18:	bf18      	it	ne
 8008c1a:	4618      	movne	r0, r3
 8008c1c:	e7c7      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008c1e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8008c22:	f040 8091 	bne.w	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      srcclk = __HAL_RCC_GET_ADC34_SOURCE();
 8008c26:	4a71      	ldr	r2, [pc, #452]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC34PLLCLK_OFF)
 8008c2a:	f413 5378 	ands.w	r3, r3, #15872	; 0x3e00
 8008c2e:	f000 8087 	beq.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	0191      	lsls	r1, r2, #6
 8008c36:	d5d7      	bpl.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008c38:	496c      	ldr	r1, [pc, #432]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c3a:	f44f 5078 	mov.w	r0, #15872	; 0x3e00
 8008c3e:	684a      	ldr	r2, [r1, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008c40:	684c      	ldr	r4, [r1, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c42:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008c44:	fa90 f0a0 	rbit	r0, r0
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8008c48:	fab0 f080 	clz	r0, r0
 8008c4c:	40c3      	lsrs	r3, r0
 8008c4e:	f003 030f 	and.w	r3, r3, #15
 8008c52:	a808      	add	r0, sp, #32
 8008c54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  pllmul = ( pllmul >> 18U) + 2U;
 8008c58:	f3c2 4283 	ubfx	r2, r2, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c5c:	f001 010f 	and.w	r1, r1, #15
  pllmul = ( pllmul >> 18U) + 2U;
 8008c60:	3202      	adds	r2, #2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8008c62:	f833 4c20 	ldrh.w	r4, [r3, #-32]
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c66:	4862      	ldr	r0, [pc, #392]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c68:	1c4b      	adds	r3, r1, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c6e:	fb00 f002 	mul.w	r0, r0, r2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
 8008c72:	fbb0 f0f4 	udiv	r0, r0, r4
 8008c76:	e79a      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008c78:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
 8008c7c:	d16f      	bne.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
      srcclk = __HAL_RCC_GET_TIM17_SOURCE();
 8008c7e:	4b5b      	ldr	r3, [pc, #364]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM17CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008c82:	0490      	lsls	r0, r2, #18
 8008c84:	d55c      	bpl.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	019b      	lsls	r3, r3, #6
 8008c8a:	d5ad      	bpl.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008c8c:	4a57      	ldr	r2, [pc, #348]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008c8e:	4858      	ldr	r0, [pc, #352]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008c90:	6853      	ldr	r3, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008c92:	6851      	ldr	r1, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  pllmul = ( pllmul >> 18U) + 2U;
 8008c96:	f3c3 4383 	ubfx	r3, r3, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008c9a:	f002 020f 	and.w	r2, r2, #15
  pllmul = ( pllmul >> 18U) + 2U;
 8008c9e:	3302      	adds	r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008ca0:	3201      	adds	r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008ca2:	fbb0 f0f2 	udiv	r0, r0, r2
 8008ca6:	fb00 f003 	mul.w	r0, r0, r3
 8008caa:	e780      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008cac:	4b4f      	ldr	r3, [pc, #316]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cae:	6818      	ldr	r0, [r3, #0]
 8008cb0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008cb4:	f43f af7b 	beq.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008cb8:	685b      	ldr	r3, [r3, #4]
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008cba:	4a4c      	ldr	r2, [pc, #304]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008cbc:	484c      	ldr	r0, [pc, #304]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
        if (srcclk == RCC_USBCLKSOURCE_PLL)
 8008cbe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008cc2:	6853      	ldr	r3, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008cc4:	6851      	ldr	r1, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008cc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  pllmul = ( pllmul >> 18U) + 2U;
 8008cc8:	f3c3 4383 	ubfx	r3, r3, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008ccc:	f002 020f 	and.w	r2, r2, #15
  pllmul = ( pllmul >> 18U) + 2U;
 8008cd0:	f103 0302 	add.w	r3, r3, #2
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008cd4:	f102 0201 	add.w	r2, r2, #1
    pllclk = (HSI_VALUE/prediv) * pllmul;
 8008cd8:	fbb0 f0f2 	udiv	r0, r0, r2
 8008cdc:	fb00 f003 	mul.w	r0, r0, r3
          frequency = (RCC_GetPLLCLKFreq() * 3U) / 2U;
 8008ce0:	bf04      	itt	eq
 8008ce2:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 8008ce6:	0840      	lsreq	r0, r0, #1
 8008ce8:	e761      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008cea:	4b40      	ldr	r3, [pc, #256]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008cee:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 8008cf2:	d03d      	beq.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008cf4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008cf8:	f000 80be 	beq.w	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
      else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d00:	f43f af4a 	beq.w	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008d04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d08:	f47f af6e 	bne.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008d0c:	4b37      	ldr	r3, [pc, #220]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
        frequency = LSE_VALUE;
 8008d10:	f013 0f02 	tst.w	r3, #2
 8008d14:	bf0c      	ite	eq
 8008d16:	2000      	moveq	r0, #0
 8008d18:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008d1c:	e747      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008d1e:	4b33      	ldr	r3, [pc, #204]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d20:	6b18      	ldr	r0, [r3, #48]	; 0x30
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008d22:	f010 0010 	ands.w	r0, r0, #16
 8008d26:	f47f af37 	bne.w	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8008d2a:	681a      	ldr	r2, [r3, #0]
        frequency = HSI_VALUE;
 8008d2c:	4b30      	ldr	r3, [pc, #192]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008d2e:	f012 0f02 	tst.w	r2, #2
 8008d32:	bf18      	it	ne
 8008d34:	4618      	movne	r0, r3
 8008d36:	e73a      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_TIM34_SOURCE();
 8008d38:	4b2c      	ldr	r3, [pc, #176]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008d3c:	0192      	lsls	r2, r2, #6
 8008d3e:	d4a2      	bmi.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
          frequency = SystemCoreClock;
 8008d40:	4b2d      	ldr	r3, [pc, #180]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8008d42:	6818      	ldr	r0, [r3, #0]
}
 8008d44:	b009      	add	sp, #36	; 0x24
 8008d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (PeriphClk)
 8008d48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008d4c:	f47f af4c 	bne.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008d50:	4b26      	ldr	r3, [pc, #152]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d52:	685b      	ldr	r3, [r3, #4]
      if (srcclk == RCC_I2SCLKSOURCE_EXT)
 8008d54:	0218      	lsls	r0, r3, #8
 8008d56:	f57f af1f 	bpl.w	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        frequency = 0xDEADDEADU;
 8008d5a:	4828      	ldr	r0, [pc, #160]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8008d5c:	e727      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008d5e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8008d62:	f47f af41 	bne.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();
 8008d66:	4b21      	ldr	r3, [pc, #132]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008d6a:	0419      	lsls	r1, r3, #16
 8008d6c:	d5e8      	bpl.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008d6e:	e6ed      	b.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
}
 8008d70:	b009      	add	sp, #36	; 0x24
 8008d72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        frequency = HAL_RCC_GetPCLK1Freq();
 8008d76:	f7ff bc31 	b.w	80085dc <HAL_RCC_GetPCLK1Freq>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008d7a:	4a1c      	ldr	r2, [pc, #112]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008d7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008d7e:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 8008d82:	d0f5      	beq.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008d84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008d88:	f000 8096 	beq.w	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d90:	f43f af02 	beq.w	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d98:	f47f af26 	bne.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8008d9c:	6a13      	ldr	r3, [r2, #32]
        frequency = LSE_VALUE;
 8008d9e:	f013 0f02 	tst.w	r3, #2
 8008da2:	bf0c      	ite	eq
 8008da4:	2000      	moveq	r0, #0
 8008da6:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008daa:	e700      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008dac:	4a0f      	ldr	r2, [pc, #60]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008dae:	6a13      	ldr	r3, [r2, #32]
 8008db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008db8:	d0f0      	beq.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dbe:	f000 8082 	beq.w	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dc6:	f47f af0f 	bne.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8008dca:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 32U;
 8008dcc:	480c      	ldr	r0, [pc, #48]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8008dce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008dd2:	bf08      	it	eq
 8008dd4:	2000      	moveq	r0, #0
 8008dd6:	e6ea      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      srcclk = __HAL_RCC_GET_TIM16_SOURCE();
 8008dd8:	4b04      	ldr	r3, [pc, #16]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM16CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008ddc:	0514      	lsls	r4, r2, #20
 8008dde:	d5af      	bpl.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008de0:	e6b5      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8008de2:	bf00      	nop
 8008de4:	08014b14 	.word	0x08014b14
 8008de8:	03f733ff 	.word	0x03f733ff
 8008dec:	40021000 	.word	0x40021000
 8008df0:	007a1200 	.word	0x007a1200
 8008df4:	08015170 	.word	0x08015170
 8008df8:	2000000c 	.word	0x2000000c
 8008dfc:	deaddead 	.word	0xdeaddead
 8008e00:	0003d090 	.word	0x0003d090
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008e04:	4a36      	ldr	r2, [pc, #216]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008e06:	6b13      	ldr	r3, [r2, #48]	; 0x30
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008e08:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 8008e0c:	d0b0      	beq.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008e0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e12:	d051      	beq.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e18:	f43f aebe 	beq.w	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8008e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e20:	f43f af74 	beq.w	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8008e24:	e6e0      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_TIM2_SOURCE();
 8008e26:	4b2e      	ldr	r3, [pc, #184]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM2CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008e2a:	01d7      	lsls	r7, r2, #7
 8008e2c:	d588      	bpl.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008e2e:	e68e      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8008e30:	4b2b      	ldr	r3, [pc, #172]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008e34:	05d2      	lsls	r2, r2, #23
 8008e36:	d583      	bpl.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008e38:	e689      	b.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8008e3a:	4a29      	ldr	r2, [pc, #164]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008e3c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      if (srcclk == RCC_ADC12PLLCLK_OFF)
 8008e3e:	f413 73f8 	ands.w	r3, r3, #496	; 0x1f0
 8008e42:	f43f af7d 	beq.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008e46:	6810      	ldr	r0, [r2, #0]
 8008e48:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008e4c:	f43f aeaf 	beq.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8008e50:	6851      	ldr	r1, [r2, #4]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8008e52:	6850      	ldr	r0, [r2, #4]
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008e54:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008e56:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8008e5a:	fa92 f2a2 	rbit	r2, r2
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE12)) & 0xF];
 8008e5e:	fab2 f282 	clz	r2, r2
 8008e62:	40d3      	lsrs	r3, r2
 8008e64:	f003 030f 	and.w	r3, r3, #15
 8008e68:	aa08      	add	r2, sp, #32
 8008e6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  pllmul = ( pllmul >> 18U) + 2U;
 8008e6e:	f3c1 4283 	ubfx	r2, r1, #18, #4
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8008e72:	f000 010f 	and.w	r1, r0, #15
 8008e76:	e6f3      	b.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008e78:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
        frequency = HSI_VALUE;
 8008e7a:	481a      	ldr	r0, [pc, #104]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>)
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008e7c:	681b      	ldr	r3, [r3, #0]
        frequency = HSI_VALUE;
 8008e7e:	f013 0f02 	tst.w	r3, #2
 8008e82:	bf08      	it	eq
 8008e84:	2000      	moveq	r0, #0
 8008e86:	e692      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
  switch (PeriphClk)
 8008e88:	2e01      	cmp	r6, #1
 8008e8a:	f47f aead 	bne.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008e8e:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008e92:	f013 0303 	ands.w	r3, r3, #3
 8008e96:	d01e      	beq.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d0ed      	beq.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	f47f af35 	bne.w	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8008ea2:	e679      	b.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  switch (PeriphClk)
 8008ea4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8008ea8:	f47f ae9e 	bne.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      srcclk = __HAL_RCC_GET_TIM8_SOURCE();
 8008eac:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8008eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      if ((srcclk == RCC_TIM8CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8008eb0:	0596      	lsls	r6, r2, #22
 8008eb2:	f57f af45 	bpl.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008eb6:	e6e6      	b.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8008eb8:	6813      	ldr	r3, [r2, #0]
        frequency = HSI_VALUE;
 8008eba:	480a      	ldr	r0, [pc, #40]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>)
 8008ebc:	f013 0f02 	tst.w	r3, #2
 8008ec0:	bf08      	it	eq
 8008ec2:	2000      	moveq	r0, #0
 8008ec4:	e673      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008ec6:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8008ec8:	f013 0f02 	tst.w	r3, #2
 8008ecc:	f649 4040 	movw	r0, #40000	; 0x9c40
 8008ed0:	bf08      	it	eq
 8008ed2:	2000      	moveq	r0, #0
 8008ed4:	e66b      	b.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
}
 8008ed6:	b009      	add	sp, #36	; 0x24
 8008ed8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        frequency = HAL_RCC_GetPCLK2Freq();
 8008edc:	f7ff bb96 	b.w	800860c <HAL_RCC_GetPCLK2Freq>
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	007a1200 	.word	0x007a1200

08008ee8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f000 80c6 	beq.w	800907a <HAL_TIM_Base_Init+0x192>
{ 
 8008eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8008ef0:	4a73      	ldr	r2, [pc, #460]	; (80090c0 <HAL_TIM_Base_Init+0x1d8>)
 8008ef2:	6803      	ldr	r3, [r0, #0]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	d02a      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008efe:	d027      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f00:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d023      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d01f      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d01b      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d017      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f20:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f28:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00f      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d00b      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d007      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d003      	beq.n	8008f50 <HAL_TIM_Base_Init+0x68>
 8008f48:	21d5      	movs	r1, #213	; 0xd5
 8008f4a:	485e      	ldr	r0, [pc, #376]	; (80090c4 <HAL_TIM_Base_Init+0x1dc>)
 8008f4c:	f006 f87a 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008f50:	68a3      	ldr	r3, [r4, #8]
 8008f52:	f033 0210 	bics.w	r2, r3, #16
 8008f56:	d009      	beq.n	8008f6c <HAL_TIM_Base_Init+0x84>
 8008f58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008f5c:	2a20      	cmp	r2, #32
 8008f5e:	d005      	beq.n	8008f6c <HAL_TIM_Base_Init+0x84>
 8008f60:	2b40      	cmp	r3, #64	; 0x40
 8008f62:	d003      	beq.n	8008f6c <HAL_TIM_Base_Init+0x84>
 8008f64:	21d6      	movs	r1, #214	; 0xd6
 8008f66:	4857      	ldr	r0, [pc, #348]	; (80090c4 <HAL_TIM_Base_Init+0x1dc>)
 8008f68:	f006 f86c 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8008f72:	d003      	beq.n	8008f7c <HAL_TIM_Base_Init+0x94>
 8008f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f78:	f040 8090 	bne.w	800909c <HAL_TIM_Base_Init+0x1b4>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008f7c:	69a3      	ldr	r3, [r4, #24]
 8008f7e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008f82:	d003      	beq.n	8008f8c <HAL_TIM_Base_Init+0xa4>
 8008f84:	21d8      	movs	r1, #216	; 0xd8
 8008f86:	484f      	ldr	r0, [pc, #316]	; (80090c4 <HAL_TIM_Base_Init+0x1dc>)
 8008f88:	f006 f85c 	bl	800f044 <assert_failed>
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8008f8c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008f90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d033      	beq.n	8009000 <HAL_TIM_Base_Init+0x118>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8008f98:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f9a:	4e49      	ldr	r6, [pc, #292]	; (80090c0 <HAL_TIM_Base_Init+0x1d8>)
 8008f9c:	69a5      	ldr	r5, [r4, #24]
 8008f9e:	68e0      	ldr	r0, [r4, #12]
 8008fa0:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fa8:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8008faa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fac:	d067      	beq.n	800907e <HAL_TIM_Base_Init+0x196>
 8008fae:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008fb2:	d044      	beq.n	800903e <HAL_TIM_Base_Init+0x156>
 8008fb4:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8008fb8:	42b2      	cmp	r2, r6
 8008fba:	d027      	beq.n	800900c <HAL_TIM_Base_Init+0x124>
 8008fbc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008fc0:	42b2      	cmp	r2, r6
 8008fc2:	d023      	beq.n	800900c <HAL_TIM_Base_Init+0x124>
 8008fc4:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8008fc8:	42b2      	cmp	r2, r6
 8008fca:	d01f      	beq.n	800900c <HAL_TIM_Base_Init+0x124>
 8008fcc:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8008fd0:	42b2      	cmp	r2, r6
 8008fd2:	d06f      	beq.n	80090b4 <HAL_TIM_Base_Init+0x1cc>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fd4:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8008fd8:	42b2      	cmp	r2, r6
 8008fda:	d069      	beq.n	80090b0 <HAL_TIM_Base_Init+0x1c8>
 8008fdc:	4e3a      	ldr	r6, [pc, #232]	; (80090c8 <HAL_TIM_Base_Init+0x1e0>)
 8008fde:	42b2      	cmp	r2, r6
 8008fe0:	d066      	beq.n	80090b0 <HAL_TIM_Base_Init+0x1c8>
 8008fe2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008fe6:	42b2      	cmp	r2, r6
 8008fe8:	d062      	beq.n	80090b0 <HAL_TIM_Base_Init+0x1c8>
 8008fea:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008fee:	42b2      	cmp	r2, r6
 8008ff0:	d05e      	beq.n	80090b0 <HAL_TIM_Base_Init+0x1c8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ff6:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8008ff8:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ffa:	62d0      	str	r0, [r2, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8008ffc:	6291      	str	r1, [r2, #40]	; 0x28
 8008ffe:	e018      	b.n	8009032 <HAL_TIM_Base_Init+0x14a>
    htim->Lock = HAL_UNLOCKED;
 8009000:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009004:	4620      	mov	r0, r4
 8009006:	f006 f9e9 	bl	800f3dc <HAL_TIM_Base_MspInit>
 800900a:	e7c5      	b.n	8008f98 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 800900c:	68a6      	ldr	r6, [r4, #8]
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800900e:	4f2f      	ldr	r7, [pc, #188]	; (80090cc <HAL_TIM_Base_Init+0x1e4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009014:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009016:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800901c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800901e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009022:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009024:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8009026:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009028:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800902a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800902c:	d115      	bne.n	800905a <HAL_TIM_Base_Init+0x172>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800902e:	6963      	ldr	r3, [r4, #20]
 8009030:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8009032:	2301      	movs	r3, #1
 8009034:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8009036:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8009038:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 800903e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009040:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009046:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800904c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800904e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009052:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009054:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009056:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009058:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800905a:	4b1d      	ldr	r3, [pc, #116]	; (80090d0 <HAL_TIM_Base_Init+0x1e8>)
 800905c:	429a      	cmp	r2, r3
 800905e:	d0e6      	beq.n	800902e <HAL_TIM_Base_Init+0x146>
 8009060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009064:	429a      	cmp	r2, r3
 8009066:	d0e2      	beq.n	800902e <HAL_TIM_Base_Init+0x146>
 8009068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800906c:	429a      	cmp	r2, r3
 800906e:	d0de      	beq.n	800902e <HAL_TIM_Base_Init+0x146>
 8009070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009074:	429a      	cmp	r2, r3
 8009076:	d1dc      	bne.n	8009032 <HAL_TIM_Base_Init+0x14a>
 8009078:	e7d9      	b.n	800902e <HAL_TIM_Base_Init+0x146>
    return HAL_ERROR;
 800907a:	2001      	movs	r0, #1
}
 800907c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800907e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009080:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009086:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800908c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800908e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009092:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009094:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009096:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009098:	6291      	str	r1, [r2, #40]	; 0x28
 800909a:	e7c8      	b.n	800902e <HAL_TIM_Base_Init+0x146>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800909c:	21d7      	movs	r1, #215	; 0xd7
 800909e:	4809      	ldr	r0, [pc, #36]	; (80090c4 <HAL_TIM_Base_Init+0x1dc>)
 80090a0:	f005 ffd0 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80090a4:	69a3      	ldr	r3, [r4, #24]
 80090a6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80090aa:	f43f af6f 	beq.w	8008f8c <HAL_TIM_Base_Init+0xa4>
 80090ae:	e769      	b.n	8008f84 <HAL_TIM_Base_Init+0x9c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090b0:	6926      	ldr	r6, [r4, #16]
 80090b2:	e7e9      	b.n	8009088 <HAL_TIM_Base_Init+0x1a0>
    tmpcr1 |= Structure->CounterMode;
 80090b4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80090ba:	4333      	orrs	r3, r6
 80090bc:	e78e      	b.n	8008fdc <HAL_TIM_Base_Init+0xf4>
 80090be:	bf00      	nop
 80090c0:	40012c00 	.word	0x40012c00
 80090c4:	080151c0 	.word	0x080151c0
 80090c8:	40014400 	.word	0x40014400
 80090cc:	40013400 	.word	0x40013400
 80090d0:	40014000 	.word	0x40014000

080090d4 <HAL_TIM_Base_DeInit>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80090d4:	4a25      	ldr	r2, [pc, #148]	; (800916c <HAL_TIM_Base_DeInit+0x98>)
 80090d6:	6803      	ldr	r3, [r0, #0]
 80090d8:	4293      	cmp	r3, r2
{
 80090da:	b510      	push	{r4, lr}
 80090dc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80090de:	d02b      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 80090e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e4:	d028      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 80090e6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d024      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 80090ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d020      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 80090f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d01c      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 80090fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009102:	4293      	cmp	r3, r2
 8009104:	d018      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 8009106:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800910a:	4293      	cmp	r3, r2
 800910c:	d014      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 800910e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009112:	4293      	cmp	r3, r2
 8009114:	d010      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 8009116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800911a:	4293      	cmp	r3, r2
 800911c:	d00c      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 800911e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009122:	4293      	cmp	r3, r2
 8009124:	d008      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 8009126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800912a:	4293      	cmp	r3, r2
 800912c:	d004      	beq.n	8009138 <HAL_TIM_Base_DeInit+0x64>
 800912e:	21f7      	movs	r1, #247	; 0xf7
 8009130:	480f      	ldr	r0, [pc, #60]	; (8009170 <HAL_TIM_Base_DeInit+0x9c>)
 8009132:	f005 ff87 	bl	800f044 <assert_failed>
 8009136:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009138:	2202      	movs	r2, #2
 800913a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800913e:	6a19      	ldr	r1, [r3, #32]
 8009140:	f241 1211 	movw	r2, #4369	; 0x1111
 8009144:	4211      	tst	r1, r2
 8009146:	d108      	bne.n	800915a <HAL_TIM_Base_DeInit+0x86>
 8009148:	6a19      	ldr	r1, [r3, #32]
 800914a:	f240 4244 	movw	r2, #1092	; 0x444
 800914e:	4211      	tst	r1, r2
 8009150:	d103      	bne.n	800915a <HAL_TIM_Base_DeInit+0x86>
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	f022 0201 	bic.w	r2, r2, #1
 8009158:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 800915a:	4620      	mov	r0, r4
 800915c:	f006 f9de 	bl	800f51c <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET; 
 8009160:	2000      	movs	r0, #0
 8009162:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009166:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800916a:	bd10      	pop	{r4, pc}
 800916c:	40012c00 	.word	0x40012c00
 8009170:	080151c0 	.word	0x080151c0

08009174 <HAL_TIM_Base_Start>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009174:	4a1e      	ldr	r2, [pc, #120]	; (80091f0 <HAL_TIM_Base_Start+0x7c>)
 8009176:	6803      	ldr	r3, [r0, #0]
 8009178:	4293      	cmp	r3, r2
{
 800917a:	b510      	push	{r4, lr}
 800917c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800917e:	d02c      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 8009180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009184:	d029      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 8009186:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800918a:	4293      	cmp	r3, r2
 800918c:	d025      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 800918e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009192:	4293      	cmp	r3, r2
 8009194:	d021      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 8009196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800919a:	4293      	cmp	r3, r2
 800919c:	d01d      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 800919e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d019      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 80091a6:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d015      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 80091ae:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d011      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 80091b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00d      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 80091be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d009      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 80091c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d005      	beq.n	80091da <HAL_TIM_Base_Start+0x66>
 80091ce:	f240 1131 	movw	r1, #305	; 0x131
 80091d2:	4808      	ldr	r0, [pc, #32]	; (80091f4 <HAL_TIM_Base_Start+0x80>)
 80091d4:	f005 ff36 	bl	800f044 <assert_failed>
 80091d8:	6823      	ldr	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80091da:	2202      	movs	r2, #2
 80091dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80091e0:	681a      	ldr	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 80091e2:	2101      	movs	r1, #1
  __HAL_TIM_ENABLE(htim);
 80091e4:	430a      	orrs	r2, r1
 80091e6:	601a      	str	r2, [r3, #0]
}
 80091e8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80091ea:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 80091ee:	bd10      	pop	{r4, pc}
 80091f0:	40012c00 	.word	0x40012c00
 80091f4:	080151c0 	.word	0x080151c0

080091f8 <HAL_TIM_Base_Stop>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80091f8:	4a24      	ldr	r2, [pc, #144]	; (800928c <HAL_TIM_Base_Stop+0x94>)
 80091fa:	6803      	ldr	r3, [r0, #0]
 80091fc:	4293      	cmp	r3, r2
{
 80091fe:	b510      	push	{r4, lr}
 8009200:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009202:	d02c      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 8009204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009208:	d029      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 800920a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800920e:	4293      	cmp	r3, r2
 8009210:	d025      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 8009212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009216:	4293      	cmp	r3, r2
 8009218:	d021      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 800921a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800921e:	4293      	cmp	r3, r2
 8009220:	d01d      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 8009222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009226:	4293      	cmp	r3, r2
 8009228:	d019      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 800922a:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800922e:	4293      	cmp	r3, r2
 8009230:	d015      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 8009232:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009236:	4293      	cmp	r3, r2
 8009238:	d011      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 800923a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800923e:	4293      	cmp	r3, r2
 8009240:	d00d      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 8009242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009246:	4293      	cmp	r3, r2
 8009248:	d009      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 800924a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800924e:	4293      	cmp	r3, r2
 8009250:	d005      	beq.n	800925e <HAL_TIM_Base_Stop+0x66>
 8009252:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009256:	480e      	ldr	r0, [pc, #56]	; (8009290 <HAL_TIM_Base_Stop+0x98>)
 8009258:	f005 fef4 	bl	800f044 <assert_failed>
 800925c:	6823      	ldr	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800925e:	2202      	movs	r2, #2
 8009260:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8009264:	6a19      	ldr	r1, [r3, #32]
 8009266:	f241 1211 	movw	r2, #4369	; 0x1111
 800926a:	4211      	tst	r1, r2
 800926c:	d108      	bne.n	8009280 <HAL_TIM_Base_Stop+0x88>
 800926e:	6a19      	ldr	r1, [r3, #32]
 8009270:	f240 4244 	movw	r2, #1092	; 0x444
 8009274:	4211      	tst	r1, r2
 8009276:	d103      	bne.n	8009280 <HAL_TIM_Base_Stop+0x88>
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	f022 0201 	bic.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8009280:	2301      	movs	r3, #1
 8009282:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009286:	2000      	movs	r0, #0
 8009288:	bd10      	pop	{r4, pc}
 800928a:	bf00      	nop
 800928c:	40012c00 	.word	0x40012c00
 8009290:	080151c0 	.word	0x080151c0

08009294 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009294:	4a1e      	ldr	r2, [pc, #120]	; (8009310 <HAL_TIM_Base_Start_IT+0x7c>)
 8009296:	6803      	ldr	r3, [r0, #0]
 8009298:	4293      	cmp	r3, r2
{
 800929a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800929c:	d02d      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 800929e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a2:	d02a      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092a4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d026      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d022      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d01e      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d01a      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092c4:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d016      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092cc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d012      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00e      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00a      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d006      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x66>
 80092ec:	4604      	mov	r4, r0
 80092ee:	f240 115f 	movw	r1, #351	; 0x15f
 80092f2:	4808      	ldr	r0, [pc, #32]	; (8009314 <HAL_TIM_Base_Start_IT+0x80>)
 80092f4:	f005 fea6 	bl	800f044 <assert_failed>
 80092f8:	6823      	ldr	r3, [r4, #0]
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	f042 0201 	orr.w	r2, r2, #1
 8009300:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	f042 0201 	orr.w	r2, r2, #1
 8009308:	601a      	str	r2, [r3, #0]
}
 800930a:	2000      	movs	r0, #0
 800930c:	bd10      	pop	{r4, pc}
 800930e:	bf00      	nop
 8009310:	40012c00 	.word	0x40012c00
 8009314:	080151c0 	.word	0x080151c0

08009318 <HAL_TIM_Base_Stop_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009318:	4a23      	ldr	r2, [pc, #140]	; (80093a8 <HAL_TIM_Base_Stop_IT+0x90>)
 800931a:	6803      	ldr	r3, [r0, #0]
 800931c:	4293      	cmp	r3, r2
{
 800931e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009320:	d02d      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009326:	d02a      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009328:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800932c:	4293      	cmp	r3, r2
 800932e:	d026      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009330:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009334:	4293      	cmp	r3, r2
 8009336:	d022      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800933c:	4293      	cmp	r3, r2
 800933e:	d01e      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009340:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009344:	4293      	cmp	r3, r2
 8009346:	d01a      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009348:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800934c:	4293      	cmp	r3, r2
 800934e:	d016      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009350:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009354:	4293      	cmp	r3, r2
 8009356:	d012      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009358:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800935c:	4293      	cmp	r3, r2
 800935e:	d00e      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009360:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009364:	4293      	cmp	r3, r2
 8009366:	d00a      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800936c:	4293      	cmp	r3, r2
 800936e:	d006      	beq.n	800937e <HAL_TIM_Base_Stop_IT+0x66>
 8009370:	4604      	mov	r4, r0
 8009372:	f240 1173 	movw	r1, #371	; 0x173
 8009376:	480d      	ldr	r0, [pc, #52]	; (80093ac <HAL_TIM_Base_Stop_IT+0x94>)
 8009378:	f005 fe64 	bl	800f044 <assert_failed>
 800937c:	6823      	ldr	r3, [r4, #0]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800937e:	68da      	ldr	r2, [r3, #12]
 8009380:	f022 0201 	bic.w	r2, r2, #1
 8009384:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8009386:	6a19      	ldr	r1, [r3, #32]
 8009388:	f241 1211 	movw	r2, #4369	; 0x1111
 800938c:	4211      	tst	r1, r2
 800938e:	d108      	bne.n	80093a2 <HAL_TIM_Base_Stop_IT+0x8a>
 8009390:	6a19      	ldr	r1, [r3, #32]
 8009392:	f240 4244 	movw	r2, #1092	; 0x444
 8009396:	4211      	tst	r1, r2
 8009398:	d103      	bne.n	80093a2 <HAL_TIM_Base_Stop_IT+0x8a>
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	f022 0201 	bic.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
}
 80093a2:	2000      	movs	r0, #0
 80093a4:	bd10      	pop	{r4, pc}
 80093a6:	bf00      	nop
 80093a8:	40012c00 	.word	0x40012c00
 80093ac:	080151c0 	.word	0x080151c0

080093b0 <HAL_TIM_OC_MspInit>:
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop

080093b4 <HAL_TIM_OC_Init>:
  if(htim == NULL)
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f000 80c9 	beq.w	800954c <HAL_TIM_OC_Init+0x198>
{
 80093ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80093bc:	4a75      	ldr	r2, [pc, #468]	; (8009594 <HAL_TIM_OC_Init+0x1e0>)
 80093be:	6803      	ldr	r3, [r0, #0]
 80093c0:	4293      	cmp	r3, r2
 80093c2:	4604      	mov	r4, r0
 80093c4:	d02b      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 80093c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ca:	d028      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 80093cc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d024      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 80093d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093d8:	4293      	cmp	r3, r2
 80093da:	d020      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 80093dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d01c      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 80093e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d018      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 80093ec:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d014      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 80093f4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d010      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 80093fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009400:	4293      	cmp	r3, r2
 8009402:	d00c      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 8009404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009408:	4293      	cmp	r3, r2
 800940a:	d008      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 800940c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009410:	4293      	cmp	r3, r2
 8009412:	d004      	beq.n	800941e <HAL_TIM_OC_Init+0x6a>
 8009414:	f240 11ef 	movw	r1, #495	; 0x1ef
 8009418:	485f      	ldr	r0, [pc, #380]	; (8009598 <HAL_TIM_OC_Init+0x1e4>)
 800941a:	f005 fe13 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	f033 0210 	bics.w	r2, r3, #16
 8009424:	d00a      	beq.n	800943c <HAL_TIM_OC_Init+0x88>
 8009426:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800942a:	2a20      	cmp	r2, #32
 800942c:	d006      	beq.n	800943c <HAL_TIM_OC_Init+0x88>
 800942e:	2b40      	cmp	r3, #64	; 0x40
 8009430:	d004      	beq.n	800943c <HAL_TIM_OC_Init+0x88>
 8009432:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009436:	4858      	ldr	r0, [pc, #352]	; (8009598 <HAL_TIM_OC_Init+0x1e4>)
 8009438:	f005 fe04 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8009442:	d003      	beq.n	800944c <HAL_TIM_OC_Init+0x98>
 8009444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009448:	f040 8091 	bne.w	800956e <HAL_TIM_OC_Init+0x1ba>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800944c:	69a3      	ldr	r3, [r4, #24]
 800944e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009452:	d004      	beq.n	800945e <HAL_TIM_OC_Init+0xaa>
 8009454:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8009458:	484f      	ldr	r0, [pc, #316]	; (8009598 <HAL_TIM_OC_Init+0x1e4>)
 800945a:	f005 fdf3 	bl	800f044 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 800945e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009466:	2b00      	cmp	r3, #0
 8009468:	d033      	beq.n	80094d2 <HAL_TIM_OC_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800946a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800946c:	4e49      	ldr	r6, [pc, #292]	; (8009594 <HAL_TIM_OC_Init+0x1e0>)
 800946e:	69a5      	ldr	r5, [r4, #24]
 8009470:	68e0      	ldr	r0, [r4, #12]
 8009472:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8009474:	2302      	movs	r3, #2
 8009476:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800947a:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800947c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800947e:	d067      	beq.n	8009550 <HAL_TIM_OC_Init+0x19c>
 8009480:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009484:	d044      	beq.n	8009510 <HAL_TIM_OC_Init+0x15c>
 8009486:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800948a:	42b2      	cmp	r2, r6
 800948c:	d027      	beq.n	80094de <HAL_TIM_OC_Init+0x12a>
 800948e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009492:	42b2      	cmp	r2, r6
 8009494:	d023      	beq.n	80094de <HAL_TIM_OC_Init+0x12a>
 8009496:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 800949a:	42b2      	cmp	r2, r6
 800949c:	d01f      	beq.n	80094de <HAL_TIM_OC_Init+0x12a>
 800949e:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 80094a2:	42b2      	cmp	r2, r6
 80094a4:	d070      	beq.n	8009588 <HAL_TIM_OC_Init+0x1d4>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094a6:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 80094aa:	42b2      	cmp	r2, r6
 80094ac:	d06a      	beq.n	8009584 <HAL_TIM_OC_Init+0x1d0>
 80094ae:	4e3b      	ldr	r6, [pc, #236]	; (800959c <HAL_TIM_OC_Init+0x1e8>)
 80094b0:	42b2      	cmp	r2, r6
 80094b2:	d067      	beq.n	8009584 <HAL_TIM_OC_Init+0x1d0>
 80094b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80094b8:	42b2      	cmp	r2, r6
 80094ba:	d063      	beq.n	8009584 <HAL_TIM_OC_Init+0x1d0>
 80094bc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80094c0:	42b2      	cmp	r2, r6
 80094c2:	d05f      	beq.n	8009584 <HAL_TIM_OC_Init+0x1d0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094c8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80094ca:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094cc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80094ce:	6291      	str	r1, [r2, #40]	; 0x28
 80094d0:	e018      	b.n	8009504 <HAL_TIM_OC_Init+0x150>
    htim->Lock = HAL_UNLOCKED;
 80094d2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7ff ff6a 	bl	80093b0 <HAL_TIM_OC_MspInit>
 80094dc:	e7c5      	b.n	800946a <HAL_TIM_OC_Init+0xb6>
    tmpcr1 |= Structure->CounterMode;
 80094de:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80094e0:	4f2f      	ldr	r7, [pc, #188]	; (80095a0 <HAL_TIM_OC_Init+0x1ec>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80094e6:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094e8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ee:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094f4:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80094f6:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80094f8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094fa:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80094fc:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80094fe:	d115      	bne.n	800952c <HAL_TIM_OC_Init+0x178>
    TIMx->RCR = Structure->RepetitionCounter;
 8009500:	6963      	ldr	r3, [r4, #20]
 8009502:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009504:	2301      	movs	r3, #1
 8009506:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8009508:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800950a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8009510:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009512:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009518:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800951a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800951e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009524:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009526:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009528:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800952a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800952c:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <HAL_TIM_OC_Init+0x1f0>)
 800952e:	429a      	cmp	r2, r3
 8009530:	d0e6      	beq.n	8009500 <HAL_TIM_OC_Init+0x14c>
 8009532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009536:	429a      	cmp	r2, r3
 8009538:	d0e2      	beq.n	8009500 <HAL_TIM_OC_Init+0x14c>
 800953a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800953e:	429a      	cmp	r2, r3
 8009540:	d0de      	beq.n	8009500 <HAL_TIM_OC_Init+0x14c>
 8009542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009546:	429a      	cmp	r2, r3
 8009548:	d1dc      	bne.n	8009504 <HAL_TIM_OC_Init+0x150>
 800954a:	e7d9      	b.n	8009500 <HAL_TIM_OC_Init+0x14c>
    return HAL_ERROR;
 800954c:	2001      	movs	r0, #1
}
 800954e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009550:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009552:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009558:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800955a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800955e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009564:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009566:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009568:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800956a:	6291      	str	r1, [r2, #40]	; 0x28
 800956c:	e7c8      	b.n	8009500 <HAL_TIM_OC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800956e:	f240 11f1 	movw	r1, #497	; 0x1f1
 8009572:	4809      	ldr	r0, [pc, #36]	; (8009598 <HAL_TIM_OC_Init+0x1e4>)
 8009574:	f005 fd66 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009578:	69a3      	ldr	r3, [r4, #24]
 800957a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800957e:	f43f af6e 	beq.w	800945e <HAL_TIM_OC_Init+0xaa>
 8009582:	e767      	b.n	8009454 <HAL_TIM_OC_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009584:	6926      	ldr	r6, [r4, #16]
 8009586:	e7e8      	b.n	800955a <HAL_TIM_OC_Init+0x1a6>
    tmpcr1 |= Structure->CounterMode;
 8009588:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800958a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800958e:	4333      	orrs	r3, r6
 8009590:	e78d      	b.n	80094ae <HAL_TIM_OC_Init+0xfa>
 8009592:	bf00      	nop
 8009594:	40012c00 	.word	0x40012c00
 8009598:	080151c0 	.word	0x080151c0
 800959c:	40014400 	.word	0x40014400
 80095a0:	40013400 	.word	0x40013400
 80095a4:	40014000 	.word	0x40014000

080095a8 <HAL_TIM_PWM_MspInit>:
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop

080095ac <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f000 80c9 	beq.w	8009744 <HAL_TIM_PWM_Init+0x198>
{
 80095b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80095b4:	4a75      	ldr	r2, [pc, #468]	; (800978c <HAL_TIM_PWM_Init+0x1e0>)
 80095b6:	6803      	ldr	r3, [r0, #0]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	4604      	mov	r4, r0
 80095bc:	d02b      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c2:	d028      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095c4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d024      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d020      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095d8:	4293      	cmp	r3, r2
 80095da:	d01c      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d018      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095e4:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d014      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095ec:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d010      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d00c      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 80095fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009600:	4293      	cmp	r3, r2
 8009602:	d008      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 8009604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009608:	4293      	cmp	r3, r2
 800960a:	d004      	beq.n	8009616 <HAL_TIM_PWM_Init+0x6a>
 800960c:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8009610:	485f      	ldr	r0, [pc, #380]	; (8009790 <HAL_TIM_PWM_Init+0x1e4>)
 8009612:	f005 fd17 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009616:	68a3      	ldr	r3, [r4, #8]
 8009618:	f033 0210 	bics.w	r2, r3, #16
 800961c:	d00a      	beq.n	8009634 <HAL_TIM_PWM_Init+0x88>
 800961e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009622:	2a20      	cmp	r2, #32
 8009624:	d006      	beq.n	8009634 <HAL_TIM_PWM_Init+0x88>
 8009626:	2b40      	cmp	r3, #64	; 0x40
 8009628:	d004      	beq.n	8009634 <HAL_TIM_PWM_Init+0x88>
 800962a:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800962e:	4858      	ldr	r0, [pc, #352]	; (8009790 <HAL_TIM_PWM_Init+0x1e4>)
 8009630:	f005 fd08 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800963a:	d003      	beq.n	8009644 <HAL_TIM_PWM_Init+0x98>
 800963c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009640:	f040 8091 	bne.w	8009766 <HAL_TIM_PWM_Init+0x1ba>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009644:	69a3      	ldr	r3, [r4, #24]
 8009646:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800964a:	d004      	beq.n	8009656 <HAL_TIM_PWM_Init+0xaa>
 800964c:	f240 31f1 	movw	r1, #1009	; 0x3f1
 8009650:	484f      	ldr	r0, [pc, #316]	; (8009790 <HAL_TIM_PWM_Init+0x1e4>)
 8009652:	f005 fcf7 	bl	800f044 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8009656:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800965a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800965e:	2b00      	cmp	r3, #0
 8009660:	d033      	beq.n	80096ca <HAL_TIM_PWM_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8009662:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009664:	4e49      	ldr	r6, [pc, #292]	; (800978c <HAL_TIM_PWM_Init+0x1e0>)
 8009666:	69a5      	ldr	r5, [r4, #24]
 8009668:	68e0      	ldr	r0, [r4, #12]
 800966a:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 800966c:	2302      	movs	r3, #2
 800966e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009672:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8009674:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009676:	d067      	beq.n	8009748 <HAL_TIM_PWM_Init+0x19c>
 8009678:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800967c:	d044      	beq.n	8009708 <HAL_TIM_PWM_Init+0x15c>
 800967e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8009682:	42b2      	cmp	r2, r6
 8009684:	d027      	beq.n	80096d6 <HAL_TIM_PWM_Init+0x12a>
 8009686:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800968a:	42b2      	cmp	r2, r6
 800968c:	d023      	beq.n	80096d6 <HAL_TIM_PWM_Init+0x12a>
 800968e:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8009692:	42b2      	cmp	r2, r6
 8009694:	d01f      	beq.n	80096d6 <HAL_TIM_PWM_Init+0x12a>
 8009696:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 800969a:	42b2      	cmp	r2, r6
 800969c:	d070      	beq.n	8009780 <HAL_TIM_PWM_Init+0x1d4>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800969e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 80096a2:	42b2      	cmp	r2, r6
 80096a4:	d06a      	beq.n	800977c <HAL_TIM_PWM_Init+0x1d0>
 80096a6:	4e3b      	ldr	r6, [pc, #236]	; (8009794 <HAL_TIM_PWM_Init+0x1e8>)
 80096a8:	42b2      	cmp	r2, r6
 80096aa:	d067      	beq.n	800977c <HAL_TIM_PWM_Init+0x1d0>
 80096ac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80096b0:	42b2      	cmp	r2, r6
 80096b2:	d063      	beq.n	800977c <HAL_TIM_PWM_Init+0x1d0>
 80096b4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80096b8:	42b2      	cmp	r2, r6
 80096ba:	d05f      	beq.n	800977c <HAL_TIM_PWM_Init+0x1d0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096c0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80096c2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096c4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80096c6:	6291      	str	r1, [r2, #40]	; 0x28
 80096c8:	e018      	b.n	80096fc <HAL_TIM_PWM_Init+0x150>
    htim->Lock = HAL_UNLOCKED;
 80096ca:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7ff ff6a 	bl	80095a8 <HAL_TIM_PWM_MspInit>
 80096d4:	e7c5      	b.n	8009662 <HAL_TIM_PWM_Init+0xb6>
    tmpcr1 |= Structure->CounterMode;
 80096d6:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80096d8:	4f2f      	ldr	r7, [pc, #188]	; (8009798 <HAL_TIM_PWM_Init+0x1ec>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80096de:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096e0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80096e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096e6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ec:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80096ee:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80096f0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096f2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80096f4:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80096f6:	d115      	bne.n	8009724 <HAL_TIM_PWM_Init+0x178>
    TIMx->RCR = Structure->RepetitionCounter;
 80096f8:	6963      	ldr	r3, [r4, #20]
 80096fa:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80096fc:	2301      	movs	r3, #1
 80096fe:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8009700:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8009702:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8009708:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800970a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800970c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009710:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009716:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800971c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800971e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009720:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009722:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009724:	4b1d      	ldr	r3, [pc, #116]	; (800979c <HAL_TIM_PWM_Init+0x1f0>)
 8009726:	429a      	cmp	r2, r3
 8009728:	d0e6      	beq.n	80096f8 <HAL_TIM_PWM_Init+0x14c>
 800972a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800972e:	429a      	cmp	r2, r3
 8009730:	d0e2      	beq.n	80096f8 <HAL_TIM_PWM_Init+0x14c>
 8009732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009736:	429a      	cmp	r2, r3
 8009738:	d0de      	beq.n	80096f8 <HAL_TIM_PWM_Init+0x14c>
 800973a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973e:	429a      	cmp	r2, r3
 8009740:	d1dc      	bne.n	80096fc <HAL_TIM_PWM_Init+0x150>
 8009742:	e7d9      	b.n	80096f8 <HAL_TIM_PWM_Init+0x14c>
    return HAL_ERROR;
 8009744:	2001      	movs	r0, #1
}
 8009746:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009748:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800974a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800974c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009750:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009756:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800975c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800975e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009760:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009762:	6291      	str	r1, [r2, #40]	; 0x28
 8009764:	e7c8      	b.n	80096f8 <HAL_TIM_PWM_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009766:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800976a:	4809      	ldr	r0, [pc, #36]	; (8009790 <HAL_TIM_PWM_Init+0x1e4>)
 800976c:	f005 fc6a 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009770:	69a3      	ldr	r3, [r4, #24]
 8009772:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009776:	f43f af6e 	beq.w	8009656 <HAL_TIM_PWM_Init+0xaa>
 800977a:	e767      	b.n	800964c <HAL_TIM_PWM_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800977c:	6926      	ldr	r6, [r4, #16]
 800977e:	e7e8      	b.n	8009752 <HAL_TIM_PWM_Init+0x1a6>
    tmpcr1 |= Structure->CounterMode;
 8009780:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009786:	4333      	orrs	r3, r6
 8009788:	e78d      	b.n	80096a6 <HAL_TIM_PWM_Init+0xfa>
 800978a:	bf00      	nop
 800978c:	40012c00 	.word	0x40012c00
 8009790:	080151c0 	.word	0x080151c0
 8009794:	40014400 	.word	0x40014400
 8009798:	40013400 	.word	0x40013400
 800979c:	40014000 	.word	0x40014000

080097a0 <HAL_TIM_PWM_Start>:
{
 80097a0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80097a2:	4b54      	ldr	r3, [pc, #336]	; (80098f4 <HAL_TIM_PWM_Start+0x154>)
 80097a4:	6804      	ldr	r4, [r0, #0]
 80097a6:	429c      	cmp	r4, r3
{
 80097a8:	4606      	mov	r6, r0
 80097aa:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80097ac:	d018      	beq.n	80097e0 <HAL_TIM_PWM_Start+0x40>
 80097ae:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80097b2:	d077      	beq.n	80098a4 <HAL_TIM_PWM_Start+0x104>
 80097b4:	4b50      	ldr	r3, [pc, #320]	; (80098f8 <HAL_TIM_PWM_Start+0x158>)
 80097b6:	429c      	cmp	r4, r3
 80097b8:	d074      	beq.n	80098a4 <HAL_TIM_PWM_Start+0x104>
 80097ba:	4b50      	ldr	r3, [pc, #320]	; (80098fc <HAL_TIM_PWM_Start+0x15c>)
 80097bc:	429c      	cmp	r4, r3
 80097be:	d071      	beq.n	80098a4 <HAL_TIM_PWM_Start+0x104>
 80097c0:	4b4f      	ldr	r3, [pc, #316]	; (8009900 <HAL_TIM_PWM_Start+0x160>)
 80097c2:	429c      	cmp	r4, r3
 80097c4:	d00c      	beq.n	80097e0 <HAL_TIM_PWM_Start+0x40>
 80097c6:	4b4f      	ldr	r3, [pc, #316]	; (8009904 <HAL_TIM_PWM_Start+0x164>)
 80097c8:	429c      	cmp	r4, r3
 80097ca:	f000 8084 	beq.w	80098d6 <HAL_TIM_PWM_Start+0x136>
 80097ce:	4b4e      	ldr	r3, [pc, #312]	; (8009908 <HAL_TIM_PWM_Start+0x168>)
 80097d0:	429c      	cmp	r4, r3
 80097d2:	d07d      	beq.n	80098d0 <HAL_TIM_PWM_Start+0x130>
 80097d4:	4b4d      	ldr	r3, [pc, #308]	; (800990c <HAL_TIM_PWM_Start+0x16c>)
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d07a      	beq.n	80098d0 <HAL_TIM_PWM_Start+0x130>
 80097da:	4b4d      	ldr	r3, [pc, #308]	; (8009910 <HAL_TIM_PWM_Start+0x170>)
 80097dc:	429c      	cmp	r4, r3
 80097de:	d164      	bne.n	80098aa <HAL_TIM_PWM_Start+0x10a>
 80097e0:	2d14      	cmp	r5, #20
 80097e2:	d96c      	bls.n	80098be <HAL_TIM_PWM_Start+0x11e>
 80097e4:	f240 414f 	movw	r1, #1103	; 0x44f
 80097e8:	484a      	ldr	r0, [pc, #296]	; (8009914 <HAL_TIM_PWM_Start+0x174>)
 80097ea:	f005 fc2b 	bl	800f044 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097ee:	6834      	ldr	r4, [r6, #0]
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 80097f0:	4b40      	ldr	r3, [pc, #256]	; (80098f4 <HAL_TIM_PWM_Start+0x154>)
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d024      	beq.n	8009840 <HAL_TIM_PWM_Start+0xa0>
 80097f6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80097fa:	d01f      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 80097fc:	4b3e      	ldr	r3, [pc, #248]	; (80098f8 <HAL_TIM_PWM_Start+0x158>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d01c      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 8009802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009806:	429c      	cmp	r4, r3
 8009808:	d018      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 800980a:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800980e:	429c      	cmp	r4, r3
 8009810:	d014      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 8009812:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009816:	429c      	cmp	r4, r3
 8009818:	d010      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 800981a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800981e:	429c      	cmp	r4, r3
 8009820:	d00c      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 8009822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009826:	429c      	cmp	r4, r3
 8009828:	d008      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 800982a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982e:	429c      	cmp	r4, r3
 8009830:	d004      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 8009832:	f241 5173 	movw	r1, #5491	; 0x1573
 8009836:	4837      	ldr	r0, [pc, #220]	; (8009914 <HAL_TIM_PWM_Start+0x174>)
 8009838:	f005 fc04 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800983c:	2d14      	cmp	r5, #20
 800983e:	d942      	bls.n	80098c6 <HAL_TIM_PWM_Start+0x126>
 8009840:	2d3c      	cmp	r5, #60	; 0x3c
 8009842:	d004      	beq.n	800984e <HAL_TIM_PWM_Start+0xae>
 8009844:	f241 5174 	movw	r1, #5492	; 0x1574
 8009848:	4832      	ldr	r0, [pc, #200]	; (8009914 <HAL_TIM_PWM_Start+0x174>)
 800984a:	f005 fbfb 	bl	800f044 <assert_failed>

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800984e:	6a22      	ldr	r2, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8009850:	6833      	ldr	r3, [r6, #0]
 8009852:	4828      	ldr	r0, [pc, #160]	; (80098f4 <HAL_TIM_PWM_Start+0x154>)
  tmp = TIM_CCER_CC1E << Channel;
 8009854:	2101      	movs	r1, #1
 8009856:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 8009858:	ea22 0201 	bic.w	r2, r2, r1
 800985c:	6222      	str	r2, [r4, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800985e:	6a22      	ldr	r2, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8009860:	4283      	cmp	r3, r0
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8009862:	ea41 0102 	orr.w	r1, r1, r2
 8009866:	6221      	str	r1, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8009868:	d012      	beq.n	8009890 <HAL_TIM_PWM_Start+0xf0>
 800986a:	4a25      	ldr	r2, [pc, #148]	; (8009900 <HAL_TIM_PWM_Start+0x160>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00f      	beq.n	8009890 <HAL_TIM_PWM_Start+0xf0>
 8009870:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009874:	4293      	cmp	r3, r2
 8009876:	d00b      	beq.n	8009890 <HAL_TIM_PWM_Start+0xf0>
 8009878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800987c:	4293      	cmp	r3, r2
 800987e:	d007      	beq.n	8009890 <HAL_TIM_PWM_Start+0xf0>
 8009880:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009884:	4293      	cmp	r3, r2
 8009886:	d003      	beq.n	8009890 <HAL_TIM_PWM_Start+0xf0>
 8009888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800988c:	4293      	cmp	r3, r2
 800988e:	d103      	bne.n	8009898 <HAL_TIM_PWM_Start+0xf8>
    __HAL_TIM_MOE_ENABLE(htim);
 8009890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009896:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	f042 0201 	orr.w	r2, r2, #1
 800989e:	601a      	str	r2, [r3, #0]
} 
 80098a0:	2000      	movs	r0, #0
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80098a4:	f035 030c 	bics.w	r3, r5, #12
 80098a8:	d0c8      	beq.n	800983c <HAL_TIM_PWM_Start+0x9c>
 80098aa:	f240 414f 	movw	r1, #1103	; 0x44f
 80098ae:	4819      	ldr	r0, [pc, #100]	; (8009914 <HAL_TIM_PWM_Start+0x174>)
 80098b0:	f005 fbc8 	bl	800f044 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098b4:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 80098b6:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <HAL_TIM_PWM_Start+0x154>)
 80098b8:	429c      	cmp	r4, r3
 80098ba:	d19c      	bne.n	80097f6 <HAL_TIM_PWM_Start+0x56>
 80098bc:	e7be      	b.n	800983c <HAL_TIM_PWM_Start+0x9c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80098be:	4b16      	ldr	r3, [pc, #88]	; (8009918 <HAL_TIM_PWM_Start+0x178>)
 80098c0:	40eb      	lsrs	r3, r5
 80098c2:	07da      	lsls	r2, r3, #31
 80098c4:	d50b      	bpl.n	80098de <HAL_TIM_PWM_Start+0x13e>
  assert_param(IS_TIM_CHANNELS(Channel));
 80098c6:	4b14      	ldr	r3, [pc, #80]	; (8009918 <HAL_TIM_PWM_Start+0x178>)
 80098c8:	40eb      	lsrs	r3, r5
 80098ca:	07db      	lsls	r3, r3, #31
 80098cc:	d4bf      	bmi.n	800984e <HAL_TIM_PWM_Start+0xae>
 80098ce:	e7b7      	b.n	8009840 <HAL_TIM_PWM_Start+0xa0>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80098d0:	2d00      	cmp	r5, #0
 80098d2:	d1ea      	bne.n	80098aa <HAL_TIM_PWM_Start+0x10a>
 80098d4:	e7f7      	b.n	80098c6 <HAL_TIM_PWM_Start+0x126>
 80098d6:	f031 0304 	bics.w	r3, r1, #4
 80098da:	d1e6      	bne.n	80098aa <HAL_TIM_PWM_Start+0x10a>
 80098dc:	e7f3      	b.n	80098c6 <HAL_TIM_PWM_Start+0x126>
 80098de:	f240 414f 	movw	r1, #1103	; 0x44f
 80098e2:	480c      	ldr	r0, [pc, #48]	; (8009914 <HAL_TIM_PWM_Start+0x174>)
 80098e4:	f005 fbae 	bl	800f044 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098e8:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 80098ea:	4b02      	ldr	r3, [pc, #8]	; (80098f4 <HAL_TIM_PWM_Start+0x154>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	d182      	bne.n	80097f6 <HAL_TIM_PWM_Start+0x56>
 80098f0:	e7e9      	b.n	80098c6 <HAL_TIM_PWM_Start+0x126>
 80098f2:	bf00      	nop
 80098f4:	40012c00 	.word	0x40012c00
 80098f8:	40000400 	.word	0x40000400
 80098fc:	40000800 	.word	0x40000800
 8009900:	40013400 	.word	0x40013400
 8009904:	40014000 	.word	0x40014000
 8009908:	40014400 	.word	0x40014400
 800990c:	40014800 	.word	0x40014800
 8009910:	40015000 	.word	0x40015000
 8009914:	080151c0 	.word	0x080151c0
 8009918:	00111111 	.word	0x00111111

0800991c <HAL_TIM_PWM_Stop>:
{   
 800991c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800991e:	4b63      	ldr	r3, [pc, #396]	; (8009aac <HAL_TIM_PWM_Stop+0x190>)
 8009920:	6804      	ldr	r4, [r0, #0]
 8009922:	429c      	cmp	r4, r3
{   
 8009924:	4606      	mov	r6, r0
 8009926:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009928:	d01d      	beq.n	8009966 <HAL_TIM_PWM_Stop+0x4a>
 800992a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800992e:	f000 8094 	beq.w	8009a5a <HAL_TIM_PWM_Stop+0x13e>
 8009932:	4b5f      	ldr	r3, [pc, #380]	; (8009ab0 <HAL_TIM_PWM_Stop+0x194>)
 8009934:	429c      	cmp	r4, r3
 8009936:	f000 8090 	beq.w	8009a5a <HAL_TIM_PWM_Stop+0x13e>
 800993a:	4b5e      	ldr	r3, [pc, #376]	; (8009ab4 <HAL_TIM_PWM_Stop+0x198>)
 800993c:	429c      	cmp	r4, r3
 800993e:	f000 808c 	beq.w	8009a5a <HAL_TIM_PWM_Stop+0x13e>
 8009942:	4b5d      	ldr	r3, [pc, #372]	; (8009ab8 <HAL_TIM_PWM_Stop+0x19c>)
 8009944:	429c      	cmp	r4, r3
 8009946:	d00e      	beq.n	8009966 <HAL_TIM_PWM_Stop+0x4a>
 8009948:	4b5c      	ldr	r3, [pc, #368]	; (8009abc <HAL_TIM_PWM_Stop+0x1a0>)
 800994a:	429c      	cmp	r4, r3
 800994c:	f000 809e 	beq.w	8009a8c <HAL_TIM_PWM_Stop+0x170>
 8009950:	4b5b      	ldr	r3, [pc, #364]	; (8009ac0 <HAL_TIM_PWM_Stop+0x1a4>)
 8009952:	429c      	cmp	r4, r3
 8009954:	f000 8097 	beq.w	8009a86 <HAL_TIM_PWM_Stop+0x16a>
 8009958:	4b5a      	ldr	r3, [pc, #360]	; (8009ac4 <HAL_TIM_PWM_Stop+0x1a8>)
 800995a:	429c      	cmp	r4, r3
 800995c:	f000 8093 	beq.w	8009a86 <HAL_TIM_PWM_Stop+0x16a>
 8009960:	4b59      	ldr	r3, [pc, #356]	; (8009ac8 <HAL_TIM_PWM_Stop+0x1ac>)
 8009962:	429c      	cmp	r4, r3
 8009964:	d17c      	bne.n	8009a60 <HAL_TIM_PWM_Stop+0x144>
 8009966:	2d14      	cmp	r5, #20
 8009968:	f240 8084 	bls.w	8009a74 <HAL_TIM_PWM_Stop+0x158>
 800996c:	f240 416f 	movw	r1, #1135	; 0x46f
 8009970:	4856      	ldr	r0, [pc, #344]	; (8009acc <HAL_TIM_PWM_Stop+0x1b0>)
 8009972:	f005 fb67 	bl	800f044 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009976:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8009978:	4b4c      	ldr	r3, [pc, #304]	; (8009aac <HAL_TIM_PWM_Stop+0x190>)
 800997a:	429c      	cmp	r4, r3
 800997c:	d024      	beq.n	80099c8 <HAL_TIM_PWM_Stop+0xac>
 800997e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009982:	d01f      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 8009984:	4b4a      	ldr	r3, [pc, #296]	; (8009ab0 <HAL_TIM_PWM_Stop+0x194>)
 8009986:	429c      	cmp	r4, r3
 8009988:	d01c      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 800998a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800998e:	429c      	cmp	r4, r3
 8009990:	d018      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 8009992:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8009996:	429c      	cmp	r4, r3
 8009998:	d014      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 800999a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800999e:	429c      	cmp	r4, r3
 80099a0:	d010      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 80099a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099a6:	429c      	cmp	r4, r3
 80099a8:	d00c      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 80099aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099ae:	429c      	cmp	r4, r3
 80099b0:	d008      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 80099b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b6:	429c      	cmp	r4, r3
 80099b8:	d004      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 80099ba:	f241 5173 	movw	r1, #5491	; 0x1573
 80099be:	4843      	ldr	r0, [pc, #268]	; (8009acc <HAL_TIM_PWM_Stop+0x1b0>)
 80099c0:	f005 fb40 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80099c4:	2d14      	cmp	r5, #20
 80099c6:	d959      	bls.n	8009a7c <HAL_TIM_PWM_Stop+0x160>
 80099c8:	2d3c      	cmp	r5, #60	; 0x3c
 80099ca:	d004      	beq.n	80099d6 <HAL_TIM_PWM_Stop+0xba>
 80099cc:	f241 5174 	movw	r1, #5492	; 0x1574
 80099d0:	483e      	ldr	r0, [pc, #248]	; (8009acc <HAL_TIM_PWM_Stop+0x1b0>)
 80099d2:	f005 fb37 	bl	800f044 <assert_failed>
  TIMx->CCER &= ~tmp;
 80099d6:	6a22      	ldr	r2, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80099d8:	6833      	ldr	r3, [r6, #0]
  tmp = TIM_CCER_CC1E << Channel;
 80099da:	2101      	movs	r1, #1
 80099dc:	fa01 f505 	lsl.w	r5, r1, r5
  TIMx->CCER &= ~tmp;
 80099e0:	ea22 0505 	bic.w	r5, r2, r5
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80099e4:	4a31      	ldr	r2, [pc, #196]	; (8009aac <HAL_TIM_PWM_Stop+0x190>)
  TIMx->CCER &= ~tmp;
 80099e6:	6225      	str	r5, [r4, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80099e8:	6a21      	ldr	r1, [r4, #32]
 80099ea:	6221      	str	r1, [r4, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d013      	beq.n	8009a18 <HAL_TIM_PWM_Stop+0xfc>
 80099f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00f      	beq.n	8009a18 <HAL_TIM_PWM_Stop+0xfc>
 80099f8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00b      	beq.n	8009a18 <HAL_TIM_PWM_Stop+0xfc>
 8009a00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d007      	beq.n	8009a18 <HAL_TIM_PWM_Stop+0xfc>
 8009a08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d003      	beq.n	8009a18 <HAL_TIM_PWM_Stop+0xfc>
 8009a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d10d      	bne.n	8009a34 <HAL_TIM_PWM_Stop+0x118>
    __HAL_TIM_MOE_DISABLE(htim);
 8009a18:	6a19      	ldr	r1, [r3, #32]
 8009a1a:	f241 1211 	movw	r2, #4369	; 0x1111
 8009a1e:	4211      	tst	r1, r2
 8009a20:	d108      	bne.n	8009a34 <HAL_TIM_PWM_Stop+0x118>
 8009a22:	6a19      	ldr	r1, [r3, #32]
 8009a24:	f240 4244 	movw	r2, #1092	; 0x444
 8009a28:	4211      	tst	r1, r2
 8009a2a:	d103      	bne.n	8009a34 <HAL_TIM_PWM_Stop+0x118>
 8009a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a32:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8009a34:	6a19      	ldr	r1, [r3, #32]
 8009a36:	f241 1211 	movw	r2, #4369	; 0x1111
 8009a3a:	4211      	tst	r1, r2
 8009a3c:	d108      	bne.n	8009a50 <HAL_TIM_PWM_Stop+0x134>
 8009a3e:	6a19      	ldr	r1, [r3, #32]
 8009a40:	f240 4244 	movw	r2, #1092	; 0x444
 8009a44:	4211      	tst	r1, r2
 8009a46:	d103      	bne.n	8009a50 <HAL_TIM_PWM_Stop+0x134>
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	f022 0201 	bic.w	r2, r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
} 
 8009a56:	2000      	movs	r0, #0
 8009a58:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009a5a:	f035 030c 	bics.w	r3, r5, #12
 8009a5e:	d0b1      	beq.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
 8009a60:	f240 416f 	movw	r1, #1135	; 0x46f
 8009a64:	4819      	ldr	r0, [pc, #100]	; (8009acc <HAL_TIM_PWM_Stop+0x1b0>)
 8009a66:	f005 faed 	bl	800f044 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a6a:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8009a6c:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <HAL_TIM_PWM_Stop+0x190>)
 8009a6e:	429c      	cmp	r4, r3
 8009a70:	d185      	bne.n	800997e <HAL_TIM_PWM_Stop+0x62>
 8009a72:	e7a7      	b.n	80099c4 <HAL_TIM_PWM_Stop+0xa8>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009a74:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <HAL_TIM_PWM_Stop+0x1b4>)
 8009a76:	40eb      	lsrs	r3, r5
 8009a78:	07da      	lsls	r2, r3, #31
 8009a7a:	d50b      	bpl.n	8009a94 <HAL_TIM_PWM_Stop+0x178>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009a7c:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <HAL_TIM_PWM_Stop+0x1b4>)
 8009a7e:	40eb      	lsrs	r3, r5
 8009a80:	07db      	lsls	r3, r3, #31
 8009a82:	d4a8      	bmi.n	80099d6 <HAL_TIM_PWM_Stop+0xba>
 8009a84:	e7a0      	b.n	80099c8 <HAL_TIM_PWM_Stop+0xac>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009a86:	2d00      	cmp	r5, #0
 8009a88:	d1ea      	bne.n	8009a60 <HAL_TIM_PWM_Stop+0x144>
 8009a8a:	e7f7      	b.n	8009a7c <HAL_TIM_PWM_Stop+0x160>
 8009a8c:	f031 0304 	bics.w	r3, r1, #4
 8009a90:	d1e6      	bne.n	8009a60 <HAL_TIM_PWM_Stop+0x144>
 8009a92:	e7f3      	b.n	8009a7c <HAL_TIM_PWM_Stop+0x160>
 8009a94:	f240 416f 	movw	r1, #1135	; 0x46f
 8009a98:	480c      	ldr	r0, [pc, #48]	; (8009acc <HAL_TIM_PWM_Stop+0x1b0>)
 8009a9a:	f005 fad3 	bl	800f044 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a9e:	6834      	ldr	r4, [r6, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 8009aa0:	4b02      	ldr	r3, [pc, #8]	; (8009aac <HAL_TIM_PWM_Stop+0x190>)
 8009aa2:	429c      	cmp	r4, r3
 8009aa4:	f47f af6b 	bne.w	800997e <HAL_TIM_PWM_Stop+0x62>
 8009aa8:	e7e8      	b.n	8009a7c <HAL_TIM_PWM_Stop+0x160>
 8009aaa:	bf00      	nop
 8009aac:	40012c00 	.word	0x40012c00
 8009ab0:	40000400 	.word	0x40000400
 8009ab4:	40000800 	.word	0x40000800
 8009ab8:	40013400 	.word	0x40013400
 8009abc:	40014000 	.word	0x40014000
 8009ac0:	40014400 	.word	0x40014400
 8009ac4:	40014800 	.word	0x40014800
 8009ac8:	40015000 	.word	0x40015000
 8009acc:	080151c0 	.word	0x080151c0
 8009ad0:	00111111 	.word	0x00111111

08009ad4 <HAL_TIM_IC_MspInit>:
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop

08009ad8 <HAL_TIM_IC_Init>:
  if(htim == NULL)
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	f000 80c9 	beq.w	8009c70 <HAL_TIM_IC_Init+0x198>
{
 8009ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ae0:	4a75      	ldr	r2, [pc, #468]	; (8009cb8 <HAL_TIM_IC_Init+0x1e0>)
 8009ae2:	6803      	ldr	r3, [r0, #0]
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	d02b      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aee:	d028      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009af0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d024      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009af8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d020      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d01c      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009b08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d018      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009b10:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d014      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009b18:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d010      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009b20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d00c      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d008      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d004      	beq.n	8009b42 <HAL_TIM_IC_Init+0x6a>
 8009b38:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8009b3c:	485f      	ldr	r0, [pc, #380]	; (8009cbc <HAL_TIM_IC_Init+0x1e4>)
 8009b3e:	f005 fa81 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	f033 0210 	bics.w	r2, r3, #16
 8009b48:	d00a      	beq.n	8009b60 <HAL_TIM_IC_Init+0x88>
 8009b4a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009b4e:	2a20      	cmp	r2, #32
 8009b50:	d006      	beq.n	8009b60 <HAL_TIM_IC_Init+0x88>
 8009b52:	2b40      	cmp	r3, #64	; 0x40
 8009b54:	d004      	beq.n	8009b60 <HAL_TIM_IC_Init+0x88>
 8009b56:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8009b5a:	4858      	ldr	r0, [pc, #352]	; (8009cbc <HAL_TIM_IC_Init+0x1e4>)
 8009b5c:	f005 fa72 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
 8009b60:	6923      	ldr	r3, [r4, #16]
 8009b62:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8009b66:	d003      	beq.n	8009b70 <HAL_TIM_IC_Init+0x98>
 8009b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b6c:	f040 8091 	bne.w	8009c92 <HAL_TIM_IC_Init+0x1ba>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009b70:	69a3      	ldr	r3, [r4, #24]
 8009b72:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009b76:	d004      	beq.n	8009b82 <HAL_TIM_IC_Init+0xaa>
 8009b78:	f240 51f3 	movw	r1, #1523	; 0x5f3
 8009b7c:	484f      	ldr	r0, [pc, #316]	; (8009cbc <HAL_TIM_IC_Init+0x1e4>)
 8009b7e:	f005 fa61 	bl	800f044 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8009b82:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009b86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d033      	beq.n	8009bf6 <HAL_TIM_IC_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8009b8e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b90:	4e49      	ldr	r6, [pc, #292]	; (8009cb8 <HAL_TIM_IC_Init+0x1e0>)
 8009b92:	69a5      	ldr	r5, [r4, #24]
 8009b94:	68e0      	ldr	r0, [r4, #12]
 8009b96:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY; 
 8009b98:	2302      	movs	r3, #2
 8009b9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b9e:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8009ba0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ba2:	d067      	beq.n	8009c74 <HAL_TIM_IC_Init+0x19c>
 8009ba4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009ba8:	d044      	beq.n	8009c34 <HAL_TIM_IC_Init+0x15c>
 8009baa:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8009bae:	42b2      	cmp	r2, r6
 8009bb0:	d027      	beq.n	8009c02 <HAL_TIM_IC_Init+0x12a>
 8009bb2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009bb6:	42b2      	cmp	r2, r6
 8009bb8:	d023      	beq.n	8009c02 <HAL_TIM_IC_Init+0x12a>
 8009bba:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8009bbe:	42b2      	cmp	r2, r6
 8009bc0:	d01f      	beq.n	8009c02 <HAL_TIM_IC_Init+0x12a>
 8009bc2:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8009bc6:	42b2      	cmp	r2, r6
 8009bc8:	d070      	beq.n	8009cac <HAL_TIM_IC_Init+0x1d4>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bca:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8009bce:	42b2      	cmp	r2, r6
 8009bd0:	d06a      	beq.n	8009ca8 <HAL_TIM_IC_Init+0x1d0>
 8009bd2:	4e3b      	ldr	r6, [pc, #236]	; (8009cc0 <HAL_TIM_IC_Init+0x1e8>)
 8009bd4:	42b2      	cmp	r2, r6
 8009bd6:	d067      	beq.n	8009ca8 <HAL_TIM_IC_Init+0x1d0>
 8009bd8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009bdc:	42b2      	cmp	r2, r6
 8009bde:	d063      	beq.n	8009ca8 <HAL_TIM_IC_Init+0x1d0>
 8009be0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009be4:	42b2      	cmp	r2, r6
 8009be6:	d05f      	beq.n	8009ca8 <HAL_TIM_IC_Init+0x1d0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bec:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009bee:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009bf0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009bf2:	6291      	str	r1, [r2, #40]	; 0x28
 8009bf4:	e018      	b.n	8009c28 <HAL_TIM_IC_Init+0x150>
    htim->Lock = HAL_UNLOCKED;
 8009bf6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f7ff ff6a 	bl	8009ad4 <HAL_TIM_IC_MspInit>
 8009c00:	e7c5      	b.n	8009b8e <HAL_TIM_IC_Init+0xb6>
    tmpcr1 |= Structure->CounterMode;
 8009c02:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009c04:	4f2f      	ldr	r7, [pc, #188]	; (8009cc4 <HAL_TIM_IC_Init+0x1ec>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c0a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c0c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c12:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c18:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009c1a:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8009c1c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c1e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009c20:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009c22:	d115      	bne.n	8009c50 <HAL_TIM_IC_Init+0x178>
    TIMx->RCR = Structure->RepetitionCounter;
 8009c24:	6963      	ldr	r3, [r4, #20]
 8009c26:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8009c2c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8009c2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8009c34:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c36:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c3c:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c42:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c48:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009c4a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c4c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009c4e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009c50:	4b1d      	ldr	r3, [pc, #116]	; (8009cc8 <HAL_TIM_IC_Init+0x1f0>)
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d0e6      	beq.n	8009c24 <HAL_TIM_IC_Init+0x14c>
 8009c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d0e2      	beq.n	8009c24 <HAL_TIM_IC_Init+0x14c>
 8009c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d0de      	beq.n	8009c24 <HAL_TIM_IC_Init+0x14c>
 8009c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d1dc      	bne.n	8009c28 <HAL_TIM_IC_Init+0x150>
 8009c6e:	e7d9      	b.n	8009c24 <HAL_TIM_IC_Init+0x14c>
    return HAL_ERROR;
 8009c70:	2001      	movs	r0, #1
}
 8009c72:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009c74:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c76:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c7c:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c82:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c88:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009c8a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c8c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009c8e:	6291      	str	r1, [r2, #40]	; 0x28
 8009c90:	e7c8      	b.n	8009c24 <HAL_TIM_IC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
 8009c92:	f240 51f2 	movw	r1, #1522	; 0x5f2
 8009c96:	4809      	ldr	r0, [pc, #36]	; (8009cbc <HAL_TIM_IC_Init+0x1e4>)
 8009c98:	f005 f9d4 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009c9c:	69a3      	ldr	r3, [r4, #24]
 8009c9e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009ca2:	f43f af6e 	beq.w	8009b82 <HAL_TIM_IC_Init+0xaa>
 8009ca6:	e767      	b.n	8009b78 <HAL_TIM_IC_Init+0xa0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ca8:	6926      	ldr	r6, [r4, #16]
 8009caa:	e7e8      	b.n	8009c7e <HAL_TIM_IC_Init+0x1a6>
    tmpcr1 |= Structure->CounterMode;
 8009cac:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009cb2:	4333      	orrs	r3, r6
 8009cb4:	e78d      	b.n	8009bd2 <HAL_TIM_IC_Init+0xfa>
 8009cb6:	bf00      	nop
 8009cb8:	40012c00 	.word	0x40012c00
 8009cbc:	080151c0 	.word	0x080151c0
 8009cc0:	40014400 	.word	0x40014400
 8009cc4:	40013400 	.word	0x40013400
 8009cc8:	40014000 	.word	0x40014000

08009ccc <HAL_TIM_OnePulse_MspInit>:
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop

08009cd0 <HAL_TIM_OnePulse_Init>:
  if(htim == NULL)
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f000 80da 	beq.w	8009e8a <HAL_TIM_OnePulse_Init+0x1ba>
{
 8009cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009cd8:	4a83      	ldr	r2, [pc, #524]	; (8009ee8 <HAL_TIM_OnePulse_Init+0x218>)
 8009cda:	6803      	ldr	r3, [r0, #0]
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	4604      	mov	r4, r0
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	d02b      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce8:	d028      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009cea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d024      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d020      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d01c      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d018      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009d0a:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d014      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009d12:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d010      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d00c      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d008      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d004      	beq.n	8009d3c <HAL_TIM_OnePulse_Init+0x6c>
 8009d32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009d36:	486d      	ldr	r0, [pc, #436]	; (8009eec <HAL_TIM_OnePulse_Init+0x21c>)
 8009d38:	f005 f984 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009d3c:	68a3      	ldr	r3, [r4, #8]
 8009d3e:	f033 0210 	bics.w	r2, r3, #16
 8009d42:	d00a      	beq.n	8009d5a <HAL_TIM_OnePulse_Init+0x8a>
 8009d44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009d48:	2a20      	cmp	r2, #32
 8009d4a:	d006      	beq.n	8009d5a <HAL_TIM_OnePulse_Init+0x8a>
 8009d4c:	2b40      	cmp	r3, #64	; 0x40
 8009d4e:	d004      	beq.n	8009d5a <HAL_TIM_OnePulse_Init+0x8a>
 8009d50:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8009d54:	4865      	ldr	r0, [pc, #404]	; (8009eec <HAL_TIM_OnePulse_Init+0x21c>)
 8009d56:	f005 f975 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8009d60:	d003      	beq.n	8009d6a <HAL_TIM_OnePulse_Init+0x9a>
 8009d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d66:	f040 80ad 	bne.w	8009ec4 <HAL_TIM_OnePulse_Init+0x1f4>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8009d6a:	f035 0308 	bics.w	r3, r5, #8
 8009d6e:	f040 809e 	bne.w	8009eae <HAL_TIM_OnePulse_Init+0x1de>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009d72:	69a3      	ldr	r3, [r4, #24]
 8009d74:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009d78:	d004      	beq.n	8009d84 <HAL_TIM_OnePulse_Init+0xb4>
 8009d7a:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8009d7e:	485b      	ldr	r0, [pc, #364]	; (8009eec <HAL_TIM_OnePulse_Init+0x21c>)
 8009d80:	f005 f960 	bl	800f044 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8009d84:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8009d88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d036      	beq.n	8009dfe <HAL_TIM_OnePulse_Init+0x12e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d90:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d92:	4e55      	ldr	r6, [pc, #340]	; (8009ee8 <HAL_TIM_OnePulse_Init+0x218>)
 8009d94:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8009d98:	68e0      	ldr	r0, [r4, #12]
 8009d9a:	6861      	ldr	r1, [r4, #4]
  htim->State= HAL_TIM_STATE_BUSY;
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009da2:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8009da4:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009da6:	d072      	beq.n	8009e8e <HAL_TIM_OnePulse_Init+0x1be>
 8009da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dac:	d04e      	beq.n	8009e4c <HAL_TIM_OnePulse_Init+0x17c>
 8009dae:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8009db2:	42b3      	cmp	r3, r6
 8009db4:	d029      	beq.n	8009e0a <HAL_TIM_OnePulse_Init+0x13a>
 8009db6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009dba:	42b3      	cmp	r3, r6
 8009dbc:	d025      	beq.n	8009e0a <HAL_TIM_OnePulse_Init+0x13a>
 8009dbe:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8009dc2:	42b3      	cmp	r3, r6
 8009dc4:	d021      	beq.n	8009e0a <HAL_TIM_OnePulse_Init+0x13a>
 8009dc6:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8009dca:	42b3      	cmp	r3, r6
 8009dcc:	f000 8086 	beq.w	8009edc <HAL_TIM_OnePulse_Init+0x20c>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dd0:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8009dd4:	42b3      	cmp	r3, r6
 8009dd6:	d07f      	beq.n	8009ed8 <HAL_TIM_OnePulse_Init+0x208>
 8009dd8:	4e45      	ldr	r6, [pc, #276]	; (8009ef0 <HAL_TIM_OnePulse_Init+0x220>)
 8009dda:	42b3      	cmp	r3, r6
 8009ddc:	d07c      	beq.n	8009ed8 <HAL_TIM_OnePulse_Init+0x208>
 8009dde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009de2:	42b3      	cmp	r3, r6
 8009de4:	d078      	beq.n	8009ed8 <HAL_TIM_OnePulse_Init+0x208>
 8009de6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009dea:	42b3      	cmp	r3, r6
 8009dec:	d074      	beq.n	8009ed8 <HAL_TIM_OnePulse_Init+0x208>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009df2:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8009df6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009df8:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009dfa:	6299      	str	r1, [r3, #40]	; 0x28
 8009dfc:	e019      	b.n	8009e32 <HAL_TIM_OnePulse_Init+0x162>
    htim->Lock = HAL_UNLOCKED;
 8009dfe:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8009e02:	4620      	mov	r0, r4
 8009e04:	f7ff ff62 	bl	8009ccc <HAL_TIM_OnePulse_MspInit>
 8009e08:	e7c2      	b.n	8009d90 <HAL_TIM_OnePulse_Init+0xc0>
    tmpcr1 |= Structure->CounterMode;
 8009e0a:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009e0c:	4f39      	ldr	r7, [pc, #228]	; (8009ef4 <HAL_TIM_OnePulse_Init+0x224>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009e12:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e14:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e1a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e20:	ea4c 0202 	orr.w	r2, ip, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009e24:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 8009e26:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e28:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009e2a:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009e2c:	d11d      	bne.n	8009e6a <HAL_TIM_OnePulse_Init+0x19a>
    TIMx->RCR = Structure->RepetitionCounter;
 8009e2e:	6962      	ldr	r2, [r4, #20]
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009e32:	2601      	movs	r6, #1
 8009e34:	615e      	str	r6, [r3, #20]
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	f022 0208 	bic.w	r2, r2, #8
 8009e3c:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	432a      	orrs	r2, r5
 8009e42:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009e44:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8009e46:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 8009e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8009e4c:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e4e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009e54:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e5a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e60:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8009e64:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e66:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009e68:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8009e6a:	4a23      	ldr	r2, [pc, #140]	; (8009ef8 <HAL_TIM_OnePulse_Init+0x228>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d0de      	beq.n	8009e2e <HAL_TIM_OnePulse_Init+0x15e>
 8009e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d0da      	beq.n	8009e2e <HAL_TIM_OnePulse_Init+0x15e>
 8009e78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d0d6      	beq.n	8009e2e <HAL_TIM_OnePulse_Init+0x15e>
 8009e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d1d4      	bne.n	8009e32 <HAL_TIM_OnePulse_Init+0x162>
 8009e88:	e7d1      	b.n	8009e2e <HAL_TIM_OnePulse_Init+0x15e>
    return HAL_ERROR;
 8009e8a:	2001      	movs	r0, #1
}
 8009e8c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009e8e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e90:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009e96:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e9c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ea2:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8009ea6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ea8:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009eaa:	6299      	str	r1, [r3, #40]	; 0x28
 8009eac:	e7bf      	b.n	8009e2e <HAL_TIM_OnePulse_Init+0x15e>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8009eae:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8009eb2:	480e      	ldr	r0, [pc, #56]	; (8009eec <HAL_TIM_OnePulse_Init+0x21c>)
 8009eb4:	f005 f8c6 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009eb8:	69a3      	ldr	r3, [r4, #24]
 8009eba:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009ebe:	f43f af61 	beq.w	8009d84 <HAL_TIM_OnePulse_Init+0xb4>
 8009ec2:	e75a      	b.n	8009d7a <HAL_TIM_OnePulse_Init+0xaa>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009ec4:	f240 71d2 	movw	r1, #2002	; 0x7d2
 8009ec8:	4808      	ldr	r0, [pc, #32]	; (8009eec <HAL_TIM_OnePulse_Init+0x21c>)
 8009eca:	f005 f8bb 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
 8009ece:	f035 0308 	bics.w	r3, r5, #8
 8009ed2:	f43f af4e 	beq.w	8009d72 <HAL_TIM_OnePulse_Init+0xa2>
 8009ed6:	e7ea      	b.n	8009eae <HAL_TIM_OnePulse_Init+0x1de>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ed8:	6926      	ldr	r6, [r4, #16]
 8009eda:	e7dd      	b.n	8009e98 <HAL_TIM_OnePulse_Init+0x1c8>
    tmpcr1 |= Structure->CounterMode;
 8009edc:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ede:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009ee2:	4332      	orrs	r2, r6
 8009ee4:	e778      	b.n	8009dd8 <HAL_TIM_OnePulse_Init+0x108>
 8009ee6:	bf00      	nop
 8009ee8:	40012c00 	.word	0x40012c00
 8009eec:	080151c0 	.word	0x080151c0
 8009ef0:	40014400 	.word	0x40014400
 8009ef4:	40013400 	.word	0x40013400
 8009ef8:	40014000 	.word	0x40014000

08009efc <HAL_TIM_IC_ConfigChannel>:
{
 8009efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efe:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009f00:	48b7      	ldr	r0, [pc, #732]	; (800a1e0 <HAL_TIM_IC_ConfigChannel+0x2e4>)
 8009f02:	682b      	ldr	r3, [r5, #0]
 8009f04:	4283      	cmp	r3, r0
{
 8009f06:	460c      	mov	r4, r1
 8009f08:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009f0a:	d022      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f10:	d01f      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f12:	4ab4      	ldr	r2, [pc, #720]	; (800a1e4 <HAL_TIM_IC_ConfigChannel+0x2e8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d01c      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d018      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f20:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d014      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f28:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d010      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d00c      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d008      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d004      	beq.n	8009f52 <HAL_TIM_IC_ConfigChannel+0x56>
 8009f48:	f640 31de 	movw	r1, #3038	; 0xbde
 8009f4c:	48a6      	ldr	r0, [pc, #664]	; (800a1e8 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 8009f4e:	f005 f879 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	f033 0202 	bics.w	r2, r3, #2
 8009f58:	d002      	beq.n	8009f60 <HAL_TIM_IC_ConfigChannel+0x64>
 8009f5a:	2b0a      	cmp	r3, #10
 8009f5c:	f040 80fc 	bne.w	800a158 <HAL_TIM_IC_ConfigChannel+0x25c>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8009f60:	6863      	ldr	r3, [r4, #4]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d864      	bhi.n	800a032 <HAL_TIM_IC_ConfigChannel+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8009f68:	68a3      	ldr	r3, [r4, #8]
 8009f6a:	f033 030c 	bics.w	r3, r3, #12
 8009f6e:	d004      	beq.n	8009f7a <HAL_TIM_IC_ConfigChannel+0x7e>
 8009f70:	f640 31e1 	movw	r1, #3041	; 0xbe1
 8009f74:	489c      	ldr	r0, [pc, #624]	; (800a1e8 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 8009f76:	f005 f865 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009f7a:	68e3      	ldr	r3, [r4, #12]
 8009f7c:	2b0f      	cmp	r3, #15
 8009f7e:	d85e      	bhi.n	800a03e <HAL_TIM_IC_ConfigChannel+0x142>
  __HAL_LOCK(htim);
 8009f80:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d063      	beq.n	800a050 <HAL_TIM_IC_ConfigChannel+0x154>
  htim->State = HAL_TIM_STATE_BUSY;
 8009f88:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8009f8a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009f8c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 8009f90:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 8009f94:	682b      	ldr	r3, [r5, #0]
  if (Channel == TIM_CHANNEL_1)
 8009f96:	2e00      	cmp	r6, #0
 8009f98:	d05c      	beq.n	800a054 <HAL_TIM_IC_ConfigChannel+0x158>
  else if (Channel == TIM_CHANNEL_2)
 8009f9a:	2e04      	cmp	r6, #4
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009f9c:	4a90      	ldr	r2, [pc, #576]	; (800a1e0 <HAL_TIM_IC_ConfigChannel+0x2e4>)
  else if (Channel == TIM_CHANNEL_2)
 8009f9e:	f000 8098 	beq.w	800a0d2 <HAL_TIM_IC_ConfigChannel+0x1d6>
  else if (Channel == TIM_CHANNEL_3)
 8009fa2:	2e08      	cmp	r6, #8
 8009fa4:	f000 80de 	beq.w	800a164 <HAL_TIM_IC_ConfigChannel+0x268>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d018      	beq.n	8009fde <HAL_TIM_IC_ConfigChannel+0xe2>
 8009fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb0:	d015      	beq.n	8009fde <HAL_TIM_IC_ConfigChannel+0xe2>
 8009fb2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d011      	beq.n	8009fde <HAL_TIM_IC_ConfigChannel+0xe2>
 8009fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d00d      	beq.n	8009fde <HAL_TIM_IC_ConfigChannel+0xe2>
 8009fc2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d009      	beq.n	8009fde <HAL_TIM_IC_ConfigChannel+0xe2>
 8009fca:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d005      	beq.n	8009fde <HAL_TIM_IC_ConfigChannel+0xe2>
 8009fd2:	f640 4119 	movw	r1, #3097	; 0xc19
 8009fd6:	4884      	ldr	r0, [pc, #528]	; (800a1e8 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 8009fd8:	f005 f834 	bl	800f044 <assert_failed>
 8009fdc:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fde:	6a1e      	ldr	r6, [r3, #32]
 8009fe0:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance, 
 8009fe4:	e9d4 2700 	ldrd	r2, r7, [r4]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009fe8:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fec:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009fee:	69d8      	ldr	r0, [r3, #28]
  tmpccer = TIMx->CCER;
 8009ff0:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009ff2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ff6:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009ff8:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009ffa:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ffe:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a002:	b289      	uxth	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a004:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a008:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a00c:	4332      	orrs	r2, r6
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a00e:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800a010:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a012:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a014:	69da      	ldr	r2, [r3, #28]
 800a016:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a01a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a01c:	69da      	ldr	r2, [r3, #28]
 800a01e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
 800a022:	61dc      	str	r4, [r3, #28]
  htim->State = HAL_TIM_STATE_READY;
 800a024:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800a026:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a028:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a02c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 800a030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800a032:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
 800a036:	486c      	ldr	r0, [pc, #432]	; (800a1e8 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 800a038:	f005 f804 	bl	800f044 <assert_failed>
 800a03c:	e794      	b.n	8009f68 <HAL_TIM_IC_ConfigChannel+0x6c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800a03e:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800a042:	4869      	ldr	r0, [pc, #420]	; (800a1e8 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 800a044:	f004 fffe 	bl	800f044 <assert_failed>
  __HAL_LOCK(htim);
 800a048:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d19b      	bne.n	8009f88 <HAL_TIM_IC_ConfigChannel+0x8c>
 800a050:	2002      	movs	r0, #2
}
 800a052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a054:	6a1e      	ldr	r6, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a056:	f8df c188 	ldr.w	ip, [pc, #392]	; 800a1e0 <HAL_TIM_IC_ConfigChannel+0x2e4>
    TIM_TI1_SetConfig(htim->Instance,
 800a05a:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a05c:	f026 0601 	bic.w	r6, r6, #1
    TIM_TI1_SetConfig(htim->Instance,
 800a060:	e9d4 1000 	ldrd	r1, r0, [r4]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a064:	4563      	cmp	r3, ip
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a066:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a068:	699f      	ldr	r7, [r3, #24]
  tmpccer = TIMx->CCER;
 800a06a:	6a1e      	ldr	r6, [r3, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a06c:	d019      	beq.n	800a0a2 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a072:	d016      	beq.n	800a0a2 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a074:	f5ac 3c94 	sub.w	ip, ip, #75776	; 0x12800
 800a078:	4563      	cmp	r3, ip
 800a07a:	d012      	beq.n	800a0a2 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a07c:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 800a080:	4563      	cmp	r3, ip
 800a082:	d00e      	beq.n	800a0a2 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a084:	f50c 3c96 	add.w	ip, ip, #76800	; 0x12c00
 800a088:	4563      	cmp	r3, ip
 800a08a:	d00a      	beq.n	800a0a2 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a08c:	f50c 6c40 	add.w	ip, ip, #3072	; 0xc00
 800a090:	4563      	cmp	r3, ip
 800a092:	d006      	beq.n	800a0a2 <HAL_TIM_IC_ConfigChannel+0x1a6>
 800a094:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800a098:	4563      	cmp	r3, ip
 800a09a:	d002      	beq.n	800a0a2 <HAL_TIM_IC_ConfigChannel+0x1a6>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a09c:	f047 0001 	orr.w	r0, r7, #1
 800a0a0:	e002      	b.n	800a0a8 <HAL_TIM_IC_ConfigChannel+0x1ac>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a0a2:	f027 0703 	bic.w	r7, r7, #3
    tmpccmr1 |= TIM_ICSelection;
 800a0a6:	4338      	orrs	r0, r7
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0a8:	0112      	lsls	r2, r2, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0aa:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0ae:	b2d2      	uxtb	r2, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0b0:	f026 060a 	bic.w	r6, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a0b4:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0b8:	4302      	orrs	r2, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a0ba:	4331      	orrs	r1, r6
  TIMx->CCMR1 = tmpccmr1;
 800a0bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0be:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a0c0:	6999      	ldr	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a0c2:	68a0      	ldr	r0, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a0c4:	f021 010c 	bic.w	r1, r1, #12
 800a0c8:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a0ca:	699a      	ldr	r2, [r3, #24]
 800a0cc:	4302      	orrs	r2, r0
 800a0ce:	619a      	str	r2, [r3, #24]
 800a0d0:	e7a8      	b.n	800a024 <HAL_TIM_IC_ConfigChannel+0x128>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d01c      	beq.n	800a110 <HAL_TIM_IC_ConfigChannel+0x214>
 800a0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0da:	d019      	beq.n	800a110 <HAL_TIM_IC_ConfigChannel+0x214>
 800a0dc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d015      	beq.n	800a110 <HAL_TIM_IC_ConfigChannel+0x214>
 800a0e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d011      	beq.n	800a110 <HAL_TIM_IC_ConfigChannel+0x214>
 800a0ec:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d00d      	beq.n	800a110 <HAL_TIM_IC_ConfigChannel+0x214>
 800a0f4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d009      	beq.n	800a110 <HAL_TIM_IC_ConfigChannel+0x214>
 800a0fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a100:	4293      	cmp	r3, r2
 800a102:	d005      	beq.n	800a110 <HAL_TIM_IC_ConfigChannel+0x214>
 800a104:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a108:	4837      	ldr	r0, [pc, #220]	; (800a1e8 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 800a10a:	f004 ff9b 	bl	800f044 <assert_failed>
 800a10e:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a110:	6a1e      	ldr	r6, [r3, #32]
 800a112:	f026 0610 	bic.w	r6, r6, #16
    TIM_TI2_SetConfig(htim->Instance, 
 800a116:	e9d4 2700 	ldrd	r2, r7, [r4]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a11a:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a11e:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a120:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800a122:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a124:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a128:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a12a:	0309      	lsls	r1, r1, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a12c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a130:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a134:	b289      	uxth	r1, r1
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a136:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a13a:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a13e:	4332      	orrs	r2, r6
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a140:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800a142:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a144:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a146:	699a      	ldr	r2, [r3, #24]
 800a148:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a14c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a14e:	699a      	ldr	r2, [r3, #24]
 800a150:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
 800a154:	619c      	str	r4, [r3, #24]
 800a156:	e765      	b.n	800a024 <HAL_TIM_IC_ConfigChannel+0x128>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800a158:	f640 31df 	movw	r1, #3039	; 0xbdf
 800a15c:	4822      	ldr	r0, [pc, #136]	; (800a1e8 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 800a15e:	f004 ff71 	bl	800f044 <assert_failed>
 800a162:	e6fd      	b.n	8009f60 <HAL_TIM_IC_ConfigChannel+0x64>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a164:	4293      	cmp	r3, r2
 800a166:	d018      	beq.n	800a19a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a16c:	d015      	beq.n	800a19a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a16e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a172:	4293      	cmp	r3, r2
 800a174:	d011      	beq.n	800a19a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d00d      	beq.n	800a19a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a17e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a182:	4293      	cmp	r3, r2
 800a184:	d009      	beq.n	800a19a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a186:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d005      	beq.n	800a19a <HAL_TIM_IC_ConfigChannel+0x29e>
 800a18e:	f640 4109 	movw	r1, #3081	; 0xc09
 800a192:	4815      	ldr	r0, [pc, #84]	; (800a1e8 <HAL_TIM_IC_ConfigChannel+0x2ec>)
 800a194:	f004 ff56 	bl	800f044 <assert_failed>
 800a198:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a19a:	6a1e      	ldr	r6, [r3, #32]
 800a19c:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,  
 800a1a0:	e9d4 2000 	ldrd	r2, r0, [r4]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a1a4:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1a8:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a1aa:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 800a1ac:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a1ae:	f027 0703 	bic.w	r7, r7, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a1b2:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1b4:	0109      	lsls	r1, r1, #4
  tmpccmr2 |= TIM_ICSelection;
 800a1b6:	4338      	orrs	r0, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a1b8:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1bc:	b2c9      	uxtb	r1, r1
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a1be:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a1c2:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a1c6:	4332      	orrs	r2, r6
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1c8:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800a1ca:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 800a1cc:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a1ce:	69da      	ldr	r2, [r3, #28]
 800a1d0:	f022 020c 	bic.w	r2, r2, #12
 800a1d4:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a1d6:	69da      	ldr	r2, [r3, #28]
 800a1d8:	4322      	orrs	r2, r4
 800a1da:	61da      	str	r2, [r3, #28]
 800a1dc:	e722      	b.n	800a024 <HAL_TIM_IC_ConfigChannel+0x128>
 800a1de:	bf00      	nop
 800a1e0:	40012c00 	.word	0x40012c00
 800a1e4:	40000400 	.word	0x40000400
 800a1e8:	080151c0 	.word	0x080151c0

0800a1ec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a1ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	f000 81b2 	beq.w	800a55a <HAL_TIM_ConfigClockSource+0x36e>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a1f6:	680a      	ldr	r2, [r1, #0]
{
 800a1f8:	b570      	push	{r4, r5, r6, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	460d      	mov	r5, r1
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a1fe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  __HAL_LOCK(htim);
 800a202:	f04f 0101 	mov.w	r1, #1
 800a206:	4604      	mov	r4, r0
 800a208:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a20c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a210:	d043      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0xae>
 800a212:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a216:	f000 8082 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x132>
 800a21a:	f032 0330 	bics.w	r3, r2, #48	; 0x30
 800a21e:	f040 80c9 	bne.w	800a3b4 <HAL_TIM_ConfigClockSource+0x1c8>
  tmpsmcr = htim->Instance->SMCR;
 800a222:	6823      	ldr	r3, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a224:	49b6      	ldr	r1, [pc, #728]	; (800a500 <HAL_TIM_ConfigClockSource+0x314>)
  tmpsmcr = htim->Instance->SMCR;
 800a226:	6898      	ldr	r0, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800a228:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a22a:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800a22e:	6099      	str	r1, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800a230:	f000 8205 	beq.w	800a63e <HAL_TIM_ConfigClockSource+0x452>
 800a234:	f200 80c8 	bhi.w	800a3c8 <HAL_TIM_ConfigClockSource+0x1dc>
 800a238:	2a10      	cmp	r2, #16
 800a23a:	f000 8190 	beq.w	800a55e <HAL_TIM_ConfigClockSource+0x372>
 800a23e:	f240 8262 	bls.w	800a706 <HAL_TIM_ConfigClockSource+0x51a>
 800a242:	2a20      	cmp	r2, #32
 800a244:	f000 8162 	beq.w	800a50c <HAL_TIM_ConfigClockSource+0x320>
 800a248:	2a30      	cmp	r2, #48	; 0x30
 800a24a:	d161      	bne.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a24c:	4aad      	ldr	r2, [pc, #692]	; (800a504 <HAL_TIM_ConfigClockSource+0x318>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d01c      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0xa0>
 800a252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a256:	d019      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0xa0>
 800a258:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d015      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0xa0>
 800a260:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a264:	4293      	cmp	r3, r2
 800a266:	d011      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0xa0>
 800a268:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00d      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0xa0>
 800a270:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a274:	4293      	cmp	r3, r2
 800a276:	d009      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0xa0>
 800a278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d005      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0xa0>
 800a280:	f241 0150 	movw	r1, #4176	; 0x1050
 800a284:	48a0      	ldr	r0, [pc, #640]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a286:	f004 fedd 	bl	800f044 <assert_failed>
 800a28a:	6823      	ldr	r3, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800a28c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a28e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a292:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 800a296:	609a      	str	r2, [r3, #8]
 800a298:	e03a      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
  tmpsmcr = htim->Instance->SMCR;
 800a29a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a29c:	4a98      	ldr	r2, [pc, #608]	; (800a500 <HAL_TIM_ConfigClockSource+0x314>)
  tmpsmcr = htim->Instance->SMCR;
 800a29e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2a0:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800a2a2:	609a      	str	r2, [r3, #8]
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
 800a2a4:	4a97      	ldr	r2, [pc, #604]	; (800a504 <HAL_TIM_ConfigClockSource+0x318>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d02c      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ae:	d029      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2b0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d025      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d021      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d01d      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d019      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2d0:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d015      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2d8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d011      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00d      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d009      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d005      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0x118>
 800a2f8:	f640 71d4 	movw	r1, #4052	; 0xfd4
 800a2fc:	4882      	ldr	r0, [pc, #520]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a2fe:	f004 fea1 	bl	800f044 <assert_failed>
 800a302:	6823      	ldr	r3, [r4, #0]
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a304:	689a      	ldr	r2, [r3, #8]
 800a306:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a30a:	f022 0207 	bic.w	r2, r2, #7
 800a30e:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a310:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800a312:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a314:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a318:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a31c:	bd70      	pop	{r4, r5, r6, pc}
  tmpsmcr = htim->Instance->SMCR;
 800a31e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a320:	4a77      	ldr	r2, [pc, #476]	; (800a500 <HAL_TIM_ConfigClockSource+0x314>)
  tmpsmcr = htim->Instance->SMCR;
 800a322:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a324:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800a326:	609a      	str	r2, [r3, #8]
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a328:	4a76      	ldr	r2, [pc, #472]	; (800a504 <HAL_TIM_ConfigClockSource+0x318>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d017      	beq.n	800a35e <HAL_TIM_ConfigClockSource+0x172>
 800a32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a332:	d014      	beq.n	800a35e <HAL_TIM_ConfigClockSource+0x172>
 800a334:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a338:	4293      	cmp	r3, r2
 800a33a:	d010      	beq.n	800a35e <HAL_TIM_ConfigClockSource+0x172>
 800a33c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a340:	4293      	cmp	r3, r2
 800a342:	d00c      	beq.n	800a35e <HAL_TIM_ConfigClockSource+0x172>
 800a344:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a348:	4293      	cmp	r3, r2
 800a34a:	d008      	beq.n	800a35e <HAL_TIM_ConfigClockSource+0x172>
 800a34c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a350:	4293      	cmp	r3, r2
 800a352:	d004      	beq.n	800a35e <HAL_TIM_ConfigClockSource+0x172>
 800a354:	f640 71f7 	movw	r1, #4087	; 0xff7
 800a358:	486b      	ldr	r0, [pc, #428]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a35a:	f004 fe73 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a35e:	68ab      	ldr	r3, [r5, #8]
 800a360:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a364:	d004      	beq.n	800a370 <HAL_TIM_ConfigClockSource+0x184>
 800a366:	f640 71fa 	movw	r1, #4090	; 0xffa
 800a36a:	4867      	ldr	r0, [pc, #412]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a36c:	f004 fe6a 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a370:	686b      	ldr	r3, [r5, #4]
 800a372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a376:	d009      	beq.n	800a38c <HAL_TIM_ConfigClockSource+0x1a0>
 800a378:	f033 0202 	bics.w	r2, r3, #2
 800a37c:	d006      	beq.n	800a38c <HAL_TIM_ConfigClockSource+0x1a0>
 800a37e:	2b0a      	cmp	r3, #10
 800a380:	d004      	beq.n	800a38c <HAL_TIM_ConfigClockSource+0x1a0>
 800a382:	f640 71fb 	movw	r1, #4091	; 0xffb
 800a386:	4860      	ldr	r0, [pc, #384]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a388:	f004 fe5c 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a38c:	68e8      	ldr	r0, [r5, #12]
 800a38e:	280f      	cmp	r0, #15
 800a390:	f200 819d 	bhi.w	800a6ce <HAL_TIM_ConfigClockSource+0x4e2>
      TIM_ETR_SetConfig(htim->Instance, 
 800a394:	6822      	ldr	r2, [r4, #0]
 800a396:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800a398:	6891      	ldr	r1, [r2, #8]
 800a39a:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a39c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800a3a0:	432b      	orrs	r3, r5
 800a3a2:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3a4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800a3a8:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3aa:	6893      	ldr	r3, [r2, #8]
 800a3ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3b0:	6093      	str	r3, [r2, #8]
    break;
 800a3b2:	e7ad      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	f43f af34 	beq.w	800a222 <HAL_TIM_ConfigClockSource+0x36>
 800a3ba:	f640 71c8 	movw	r1, #4040	; 0xfc8
 800a3be:	4852      	ldr	r0, [pc, #328]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a3c0:	f004 fe40 	bl	800f044 <assert_failed>
 800a3c4:	682a      	ldr	r2, [r5, #0]
 800a3c6:	e72c      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x36>
  switch (sClockSourceConfig->ClockSource)
 800a3c8:	2a70      	cmp	r2, #112	; 0x70
 800a3ca:	f000 80ef 	beq.w	800a5ac <HAL_TIM_ConfigClockSource+0x3c0>
 800a3ce:	f200 81cb 	bhi.w	800a768 <HAL_TIM_ConfigClockSource+0x57c>
 800a3d2:	2a50      	cmp	r2, #80	; 0x50
 800a3d4:	d04b      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x282>
 800a3d6:	2a60      	cmp	r2, #96	; 0x60
 800a3d8:	d19a      	bne.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a3da:	4a4a      	ldr	r2, [pc, #296]	; (800a504 <HAL_TIM_ConfigClockSource+0x318>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d01b      	beq.n	800a418 <HAL_TIM_ConfigClockSource+0x22c>
 800a3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e4:	d018      	beq.n	800a418 <HAL_TIM_ConfigClockSource+0x22c>
 800a3e6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d014      	beq.n	800a418 <HAL_TIM_ConfigClockSource+0x22c>
 800a3ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d010      	beq.n	800a418 <HAL_TIM_ConfigClockSource+0x22c>
 800a3f6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d00c      	beq.n	800a418 <HAL_TIM_ConfigClockSource+0x22c>
 800a3fe:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a402:	4293      	cmp	r3, r2
 800a404:	d008      	beq.n	800a418 <HAL_TIM_ConfigClockSource+0x22c>
 800a406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d004      	beq.n	800a418 <HAL_TIM_ConfigClockSource+0x22c>
 800a40e:	f241 011a 	movw	r1, #4122	; 0x101a
 800a412:	483d      	ldr	r0, [pc, #244]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a414:	f004 fe16 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a418:	686b      	ldr	r3, [r5, #4]
 800a41a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a41e:	d009      	beq.n	800a434 <HAL_TIM_ConfigClockSource+0x248>
 800a420:	f033 0202 	bics.w	r2, r3, #2
 800a424:	d006      	beq.n	800a434 <HAL_TIM_ConfigClockSource+0x248>
 800a426:	2b0a      	cmp	r3, #10
 800a428:	d004      	beq.n	800a434 <HAL_TIM_ConfigClockSource+0x248>
 800a42a:	f241 011d 	movw	r1, #4125	; 0x101d
 800a42e:	4836      	ldr	r0, [pc, #216]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a430:	f004 fe08 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a434:	68ee      	ldr	r6, [r5, #12]
 800a436:	2e0f      	cmp	r6, #15
 800a438:	f200 818f 	bhi.w	800a75a <HAL_TIM_ConfigClockSource+0x56e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a440:	6a18      	ldr	r0, [r3, #32]
 800a442:	f020 0010 	bic.w	r0, r0, #16
 800a446:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a448:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800a44a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a44c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a450:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a454:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a458:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800a45c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a45e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800a460:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a462:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a466:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 800a46a:	609a      	str	r2, [r3, #8]
 800a46c:	e750      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a46e:	4a25      	ldr	r2, [pc, #148]	; (800a504 <HAL_TIM_ConfigClockSource+0x318>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d01b      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0x2c0>
 800a474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a478:	d018      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0x2c0>
 800a47a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a47e:	4293      	cmp	r3, r2
 800a480:	d014      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0x2c0>
 800a482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a486:	4293      	cmp	r3, r2
 800a488:	d010      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0x2c0>
 800a48a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a48e:	4293      	cmp	r3, r2
 800a490:	d00c      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0x2c0>
 800a492:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a496:	4293      	cmp	r3, r2
 800a498:	d008      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0x2c0>
 800a49a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d004      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0x2c0>
 800a4a2:	f241 010b 	movw	r1, #4107	; 0x100b
 800a4a6:	4818      	ldr	r0, [pc, #96]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a4a8:	f004 fdcc 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a4ac:	686b      	ldr	r3, [r5, #4]
 800a4ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4b2:	d009      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x2dc>
 800a4b4:	f033 0202 	bics.w	r2, r3, #2
 800a4b8:	d006      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x2dc>
 800a4ba:	2b0a      	cmp	r3, #10
 800a4bc:	d004      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x2dc>
 800a4be:	f241 010e 	movw	r1, #4110	; 0x100e
 800a4c2:	4811      	ldr	r0, [pc, #68]	; (800a508 <HAL_TIM_ConfigClockSource+0x31c>)
 800a4c4:	f004 fdbe 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a4c8:	68ee      	ldr	r6, [r5, #12]
 800a4ca:	2e0f      	cmp	r6, #15
 800a4cc:	f200 8106 	bhi.w	800a6dc <HAL_TIM_ConfigClockSource+0x4f0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800a4d4:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4d6:	6a1d      	ldr	r5, [r3, #32]
 800a4d8:	f025 0501 	bic.w	r5, r5, #1
 800a4dc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800a4de:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4e0:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4e8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800a4ec:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a4ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4f0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800a4f2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a4f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a4f8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 800a4fc:	609a      	str	r2, [r3, #8]
 800a4fe:	e707      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
 800a500:	fffe0088 	.word	0xfffe0088
 800a504:	40012c00 	.word	0x40012c00
 800a508:	080151c0 	.word	0x080151c0
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a50c:	4a9b      	ldr	r2, [pc, #620]	; (800a77c <HAL_TIM_ConfigClockSource+0x590>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d01c      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0x360>
 800a512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a516:	d019      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0x360>
 800a518:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d015      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0x360>
 800a520:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a524:	4293      	cmp	r3, r2
 800a526:	d011      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0x360>
 800a528:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00d      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0x360>
 800a530:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a534:	4293      	cmp	r3, r2
 800a536:	d009      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0x360>
 800a538:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d005      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0x360>
 800a540:	f241 0148 	movw	r1, #4168	; 0x1048
 800a544:	488e      	ldr	r0, [pc, #568]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a546:	f004 fd7d 	bl	800f044 <assert_failed>
 800a54a:	6823      	ldr	r3, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800a54c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a54e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a552:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 800a556:	609a      	str	r2, [r3, #8]
 800a558:	e6da      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
  __HAL_LOCK(htim);
 800a55a:	2002      	movs	r0, #2
}
 800a55c:	4770      	bx	lr
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a55e:	4a87      	ldr	r2, [pc, #540]	; (800a77c <HAL_TIM_ConfigClockSource+0x590>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d01c      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x3b2>
 800a564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a568:	d019      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x3b2>
 800a56a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a56e:	4293      	cmp	r3, r2
 800a570:	d015      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x3b2>
 800a572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a576:	4293      	cmp	r3, r2
 800a578:	d011      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x3b2>
 800a57a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a57e:	4293      	cmp	r3, r2
 800a580:	d00d      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x3b2>
 800a582:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a586:	4293      	cmp	r3, r2
 800a588:	d009      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x3b2>
 800a58a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a58e:	4293      	cmp	r3, r2
 800a590:	d005      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x3b2>
 800a592:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800a596:	487a      	ldr	r0, [pc, #488]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a598:	f004 fd54 	bl	800f044 <assert_failed>
 800a59c:	6823      	ldr	r3, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800a59e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a5a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a5a4:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 800a5a8:	609a      	str	r2, [r3, #8]
 800a5aa:	e6b1      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a5ac:	4a73      	ldr	r2, [pc, #460]	; (800a77c <HAL_TIM_ConfigClockSource+0x590>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d017      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x3f6>
 800a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b6:	d014      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x3f6>
 800a5b8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d010      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x3f6>
 800a5c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00c      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x3f6>
 800a5c8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d008      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x3f6>
 800a5d0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d004      	beq.n	800a5e2 <HAL_TIM_ConfigClockSource+0x3f6>
 800a5d8:	f640 71dd 	movw	r1, #4061	; 0xfdd
 800a5dc:	4868      	ldr	r0, [pc, #416]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a5de:	f004 fd31 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a5e2:	68ab      	ldr	r3, [r5, #8]
 800a5e4:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a5e8:	d004      	beq.n	800a5f4 <HAL_TIM_ConfigClockSource+0x408>
 800a5ea:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800a5ee:	4864      	ldr	r0, [pc, #400]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a5f0:	f004 fd28 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a5f4:	686b      	ldr	r3, [r5, #4]
 800a5f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5fa:	d009      	beq.n	800a610 <HAL_TIM_ConfigClockSource+0x424>
 800a5fc:	f033 0202 	bics.w	r2, r3, #2
 800a600:	d006      	beq.n	800a610 <HAL_TIM_ConfigClockSource+0x424>
 800a602:	2b0a      	cmp	r3, #10
 800a604:	d004      	beq.n	800a610 <HAL_TIM_ConfigClockSource+0x424>
 800a606:	f640 71e1 	movw	r1, #4065	; 0xfe1
 800a60a:	485d      	ldr	r0, [pc, #372]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a60c:	f004 fd1a 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a610:	68e8      	ldr	r0, [r5, #12]
 800a612:	280f      	cmp	r0, #15
 800a614:	d869      	bhi.n	800a6ea <HAL_TIM_ConfigClockSource+0x4fe>
      TIM_ETR_SetConfig(htim->Instance, 
 800a616:	6822      	ldr	r2, [r4, #0]
 800a618:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800a61a:	6891      	ldr	r1, [r2, #8]
 800a61c:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a61e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800a622:	432b      	orrs	r3, r5
 800a624:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a626:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800a62a:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a62c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a62e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a632:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a636:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a63a:	6093      	str	r3, [r2, #8]
    break;
 800a63c:	e668      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a63e:	4a4f      	ldr	r2, [pc, #316]	; (800a77c <HAL_TIM_ConfigClockSource+0x590>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d01b      	beq.n	800a67c <HAL_TIM_ConfigClockSource+0x490>
 800a644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a648:	d018      	beq.n	800a67c <HAL_TIM_ConfigClockSource+0x490>
 800a64a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a64e:	4293      	cmp	r3, r2
 800a650:	d014      	beq.n	800a67c <HAL_TIM_ConfigClockSource+0x490>
 800a652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a656:	4293      	cmp	r3, r2
 800a658:	d010      	beq.n	800a67c <HAL_TIM_ConfigClockSource+0x490>
 800a65a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a65e:	4293      	cmp	r3, r2
 800a660:	d00c      	beq.n	800a67c <HAL_TIM_ConfigClockSource+0x490>
 800a662:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a666:	4293      	cmp	r3, r2
 800a668:	d008      	beq.n	800a67c <HAL_TIM_ConfigClockSource+0x490>
 800a66a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a66e:	4293      	cmp	r3, r2
 800a670:	d004      	beq.n	800a67c <HAL_TIM_ConfigClockSource+0x490>
 800a672:	f241 0129 	movw	r1, #4137	; 0x1029
 800a676:	4842      	ldr	r0, [pc, #264]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a678:	f004 fce4 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a67c:	686b      	ldr	r3, [r5, #4]
 800a67e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a682:	d009      	beq.n	800a698 <HAL_TIM_ConfigClockSource+0x4ac>
 800a684:	f033 0202 	bics.w	r2, r3, #2
 800a688:	d006      	beq.n	800a698 <HAL_TIM_ConfigClockSource+0x4ac>
 800a68a:	2b0a      	cmp	r3, #10
 800a68c:	d004      	beq.n	800a698 <HAL_TIM_ConfigClockSource+0x4ac>
 800a68e:	f241 012c 	movw	r1, #4140	; 0x102c
 800a692:	483b      	ldr	r0, [pc, #236]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a694:	f004 fcd6 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a698:	68ee      	ldr	r6, [r5, #12]
 800a69a:	2e0f      	cmp	r6, #15
 800a69c:	d82c      	bhi.n	800a6f8 <HAL_TIM_ConfigClockSource+0x50c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800a6a2:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6a4:	6a1d      	ldr	r5, [r3, #32]
 800a6a6:	f025 0501 	bic.w	r5, r5, #1
 800a6aa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800a6ac:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6ae:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6b6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800a6ba:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a6bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6be:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800a6c0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a6c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a6c6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 800a6ca:	609a      	str	r2, [r3, #8]
 800a6cc:	e620      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6ce:	482c      	ldr	r0, [pc, #176]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a6d0:	f640 71fc 	movw	r1, #4092	; 0xffc
 800a6d4:	f004 fcb6 	bl	800f044 <assert_failed>
 800a6d8:	68e8      	ldr	r0, [r5, #12]
 800a6da:	e65b      	b.n	800a394 <HAL_TIM_ConfigClockSource+0x1a8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6dc:	f241 010f 	movw	r1, #4111	; 0x100f
 800a6e0:	4827      	ldr	r0, [pc, #156]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a6e2:	f004 fcaf 	bl	800f044 <assert_failed>
 800a6e6:	68ee      	ldr	r6, [r5, #12]
 800a6e8:	e6f2      	b.n	800a4d0 <HAL_TIM_ConfigClockSource+0x2e4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6ea:	4825      	ldr	r0, [pc, #148]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a6ec:	f640 71e2 	movw	r1, #4066	; 0xfe2
 800a6f0:	f004 fca8 	bl	800f044 <assert_failed>
 800a6f4:	68e8      	ldr	r0, [r5, #12]
 800a6f6:	e78e      	b.n	800a616 <HAL_TIM_ConfigClockSource+0x42a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6f8:	f241 012d 	movw	r1, #4141	; 0x102d
 800a6fc:	4820      	ldr	r0, [pc, #128]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a6fe:	f004 fca1 	bl	800f044 <assert_failed>
 800a702:	68ee      	ldr	r6, [r5, #12]
 800a704:	e7cb      	b.n	800a69e <HAL_TIM_ConfigClockSource+0x4b2>
  switch (sClockSourceConfig->ClockSource)
 800a706:	2a00      	cmp	r2, #0
 800a708:	f47f ae02 	bne.w	800a310 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a70c:	4a1b      	ldr	r2, [pc, #108]	; (800a77c <HAL_TIM_ConfigClockSource+0x590>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d01c      	beq.n	800a74c <HAL_TIM_ConfigClockSource+0x560>
 800a712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a716:	d019      	beq.n	800a74c <HAL_TIM_ConfigClockSource+0x560>
 800a718:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d015      	beq.n	800a74c <HAL_TIM_ConfigClockSource+0x560>
 800a720:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a724:	4293      	cmp	r3, r2
 800a726:	d011      	beq.n	800a74c <HAL_TIM_ConfigClockSource+0x560>
 800a728:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d00d      	beq.n	800a74c <HAL_TIM_ConfigClockSource+0x560>
 800a730:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a734:	4293      	cmp	r3, r2
 800a736:	d009      	beq.n	800a74c <HAL_TIM_ConfigClockSource+0x560>
 800a738:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d005      	beq.n	800a74c <HAL_TIM_ConfigClockSource+0x560>
 800a740:	f241 0138 	movw	r1, #4152	; 0x1038
 800a744:	480e      	ldr	r0, [pc, #56]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a746:	f004 fc7d 	bl	800f044 <assert_failed>
 800a74a:	6823      	ldr	r3, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800a74c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800a74e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800a752:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800a756:	609a      	str	r2, [r3, #8]
 800a758:	e5da      	b.n	800a310 <HAL_TIM_ConfigClockSource+0x124>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a75a:	f241 011e 	movw	r1, #4126	; 0x101e
 800a75e:	4808      	ldr	r0, [pc, #32]	; (800a780 <HAL_TIM_ConfigClockSource+0x594>)
 800a760:	f004 fc70 	bl	800f044 <assert_failed>
 800a764:	68ee      	ldr	r6, [r5, #12]
 800a766:	e669      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x250>
  switch (sClockSourceConfig->ClockSource)
 800a768:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a76c:	f43f ad9a 	beq.w	800a2a4 <HAL_TIM_ConfigClockSource+0xb8>
 800a770:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a774:	f47f adcc 	bne.w	800a310 <HAL_TIM_ConfigClockSource+0x124>
 800a778:	e5d6      	b.n	800a328 <HAL_TIM_ConfigClockSource+0x13c>
 800a77a:	bf00      	nop
 800a77c:	40012c00 	.word	0x40012c00
 800a780:	080151c0 	.word	0x080151c0

0800a784 <HAL_TIM_SlaveConfigSynchronization>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800a784:	4aad      	ldr	r2, [pc, #692]	; (800aa3c <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a786:	6803      	ldr	r3, [r0, #0]
 800a788:	4293      	cmp	r3, r2
{
 800a78a:	b570      	push	{r4, r5, r6, lr}
 800a78c:	4604      	mov	r4, r0
 800a78e:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800a790:	d01b      	beq.n	800a7ca <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a796:	d018      	beq.n	800a7ca <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a798:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d014      	beq.n	800a7ca <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a7a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d010      	beq.n	800a7ca <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a7a8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d00c      	beq.n	800a7ca <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a7b0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d008      	beq.n	800a7ca <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a7b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d004      	beq.n	800a7ca <HAL_TIM_SlaveConfigSynchronization+0x46>
 800a7c0:	f241 018f 	movw	r1, #4239	; 0x108f
 800a7c4:	489e      	ldr	r0, [pc, #632]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a7c6:	f004 fc3d 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800a7d0:	d007      	beq.n	800a7e2 <HAL_TIM_SlaveConfigSynchronization+0x5e>
 800a7d2:	3b04      	subs	r3, #4
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d904      	bls.n	800a7e2 <HAL_TIM_SlaveConfigSynchronization+0x5e>
 800a7d8:	f241 0190 	movw	r1, #4240	; 0x1090
 800a7dc:	4898      	ldr	r0, [pc, #608]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a7de:	f004 fc31 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800a7e2:	686b      	ldr	r3, [r5, #4]
 800a7e4:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a7e8:	d006      	beq.n	800a7f8 <HAL_TIM_SlaveConfigSynchronization+0x74>
 800a7ea:	2b40      	cmp	r3, #64	; 0x40
 800a7ec:	d004      	beq.n	800a7f8 <HAL_TIM_SlaveConfigSynchronization+0x74>
 800a7ee:	f241 0191 	movw	r1, #4241	; 0x1091
 800a7f2:	4893      	ldr	r0, [pc, #588]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a7f4:	f004 fc26 	bl	800f044 <assert_failed>
  __HAL_LOCK(htim);
 800a7f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d07a      	beq.n	800a8f6 <HAL_TIM_SlaveConfigSynchronization+0x172>
  htim->State = HAL_TIM_STATE_BUSY;
 800a800:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800a802:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a804:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a808:	e9d5 1000 	ldrd	r1, r0, [r5]
  tmpsmcr = htim->Instance->SMCR;
 800a80c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a80e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a812:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a814:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a818:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a81c:	430a      	orrs	r2, r1
  switch (sSlaveConfig->InputTrigger)
 800a81e:	2830      	cmp	r0, #48	; 0x30
  __HAL_LOCK(htim);
 800a820:	f04f 0101 	mov.w	r1, #1
 800a824:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800a828:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800a82a:	f000 8156 	beq.w	800aada <HAL_TIM_SlaveConfigSynchronization+0x356>
 800a82e:	d94a      	bls.n	800a8c6 <HAL_TIM_SlaveConfigSynchronization+0x142>
 800a830:	2850      	cmp	r0, #80	; 0x50
 800a832:	f000 8107 	beq.w	800aa44 <HAL_TIM_SlaveConfigSynchronization+0x2c0>
 800a836:	d960      	bls.n	800a8fa <HAL_TIM_SlaveConfigSynchronization+0x176>
 800a838:	2860      	cmp	r0, #96	; 0x60
 800a83a:	f000 80ba 	beq.w	800a9b2 <HAL_TIM_SlaveConfigSynchronization+0x22e>
 800a83e:	2870      	cmp	r0, #112	; 0x70
 800a840:	d149      	bne.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a842:	4a7e      	ldr	r2, [pc, #504]	; (800aa3c <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d017      	beq.n	800a878 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84c:	d014      	beq.n	800a878 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a84e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a852:	4293      	cmp	r3, r2
 800a854:	d010      	beq.n	800a878 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d00c      	beq.n	800a878 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a85e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a862:	4293      	cmp	r3, r2
 800a864:	d008      	beq.n	800a878 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a866:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d004      	beq.n	800a878 <HAL_TIM_SlaveConfigSynchronization+0xf4>
 800a86e:	f241 31b7 	movw	r1, #5047	; 0x13b7
 800a872:	4873      	ldr	r0, [pc, #460]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a874:	f004 fbe6 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800a878:	68eb      	ldr	r3, [r5, #12]
 800a87a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a87e:	d004      	beq.n	800a88a <HAL_TIM_SlaveConfigSynchronization+0x106>
 800a880:	f241 31b8 	movw	r1, #5048	; 0x13b8
 800a884:	486e      	ldr	r0, [pc, #440]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a886:	f004 fbdd 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800a88a:	68ab      	ldr	r3, [r5, #8]
 800a88c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a890:	d009      	beq.n	800a8a6 <HAL_TIM_SlaveConfigSynchronization+0x122>
 800a892:	f033 0202 	bics.w	r2, r3, #2
 800a896:	d006      	beq.n	800a8a6 <HAL_TIM_SlaveConfigSynchronization+0x122>
 800a898:	2b0a      	cmp	r3, #10
 800a89a:	d004      	beq.n	800a8a6 <HAL_TIM_SlaveConfigSynchronization+0x122>
 800a89c:	f241 31b9 	movw	r1, #5049	; 0x13b9
 800a8a0:	4867      	ldr	r0, [pc, #412]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a8a2:	f004 fbcf 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800a8a6:	6928      	ldr	r0, [r5, #16]
 800a8a8:	280f      	cmp	r0, #15
 800a8aa:	f200 819c 	bhi.w	800abe6 <HAL_TIM_SlaveConfigSynchronization+0x462>
      TIM_ETR_SetConfig(htim->Instance, 
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	68ea      	ldr	r2, [r5, #12]
  tmpsmcr = TIMx->SMCR;
 800a8b2:	6899      	ldr	r1, [r3, #8]
 800a8b4:	68ad      	ldr	r5, [r5, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8b6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800a8ba:	432a      	orrs	r2, r5
 800a8bc:	430a      	orrs	r2, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a8be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800a8c2:	609a      	str	r2, [r3, #8]
 800a8c4:	e007      	b.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
  switch (sSlaveConfig->InputTrigger)
 800a8c6:	2810      	cmp	r0, #16
 800a8c8:	d052      	beq.n	800a970 <HAL_TIM_SlaveConfigSynchronization+0x1ec>
 800a8ca:	2820      	cmp	r0, #32
 800a8cc:	f000 8155 	beq.w	800ab7a <HAL_TIM_SlaveConfigSynchronization+0x3f6>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	f000 812a 	beq.w	800ab2a <HAL_TIM_SlaveConfigSynchronization+0x3a6>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a8d6:	68da      	ldr	r2, [r3, #12]
 800a8d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8dc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a8de:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 800a8e0:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 800a8e2:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a8e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a8e8:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800a8ea:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 800a8ec:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);  
 800a8f0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
} 
 800a8f4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800a8f6:	2002      	movs	r0, #2
} 
 800a8f8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800a8fa:	2840      	cmp	r0, #64	; 0x40
 800a8fc:	d1eb      	bne.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a8fe:	4a4f      	ldr	r2, [pc, #316]	; (800aa3c <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d023      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a908:	d020      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a90a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a90e:	4293      	cmp	r3, r2
 800a910:	d01c      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a916:	4293      	cmp	r3, r2
 800a918:	d018      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a91a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a91e:	4293      	cmp	r3, r2
 800a920:	d014      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a922:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a926:	4293      	cmp	r3, r2
 800a928:	d010      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a92a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a92e:	4293      	cmp	r3, r2
 800a930:	d00c      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a936:	4293      	cmp	r3, r2
 800a938:	d008      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a93a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a93e:	4293      	cmp	r3, r2
 800a940:	d004      	beq.n	800a94c <HAL_TIM_SlaveConfigSynchronization+0x1c8>
 800a942:	f241 31c6 	movw	r1, #5062	; 0x13c6
 800a946:	483e      	ldr	r0, [pc, #248]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a948:	f004 fb7c 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800a94c:	6928      	ldr	r0, [r5, #16]
 800a94e:	280f      	cmp	r0, #15
 800a950:	f200 813b 	bhi.w	800abca <HAL_TIM_SlaveConfigSynchronization+0x446>
      tmpccer = htim->Instance->CCER;
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	6a1d      	ldr	r5, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a958:	6a19      	ldr	r1, [r3, #32]
 800a95a:	f021 0101 	bic.w	r1, r1, #1
 800a95e:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 800a960:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a962:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a966:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800a96a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800a96c:	621d      	str	r5, [r3, #32]
 800a96e:	e7b2      	b.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a970:	4a32      	ldr	r2, [pc, #200]	; (800aa3c <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d0af      	beq.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a97a:	d0ac      	beq.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a97c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a980:	4293      	cmp	r3, r2
 800a982:	d0a8      	beq.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a988:	4293      	cmp	r3, r2
 800a98a:	d0a4      	beq.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a98c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a990:	4293      	cmp	r3, r2
 800a992:	d0a0      	beq.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a994:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a998:	4293      	cmp	r3, r2
 800a99a:	d09c      	beq.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a99c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d098      	beq.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800a9a4:	f241 31ff 	movw	r1, #5119	; 0x13ff
 800a9a8:	4825      	ldr	r0, [pc, #148]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a9aa:	f004 fb4b 	bl	800f044 <assert_failed>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	e791      	b.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a9b2:	4a22      	ldr	r2, [pc, #136]	; (800aa3c <HAL_TIM_SlaveConfigSynchronization+0x2b8>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d01b      	beq.n	800a9f0 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a9b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9bc:	d018      	beq.n	800a9f0 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a9be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d014      	beq.n	800a9f0 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a9c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d010      	beq.n	800a9f0 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a9ce:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00c      	beq.n	800a9f0 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a9d6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d008      	beq.n	800a9f0 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a9de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d004      	beq.n	800a9f0 <HAL_TIM_SlaveConfigSynchronization+0x26c>
 800a9e6:	f241 31ea 	movw	r1, #5098	; 0x13ea
 800a9ea:	4815      	ldr	r0, [pc, #84]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800a9ec:	f004 fb2a 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800a9f0:	68ab      	ldr	r3, [r5, #8]
 800a9f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9f6:	d009      	beq.n	800aa0c <HAL_TIM_SlaveConfigSynchronization+0x288>
 800a9f8:	f033 0202 	bics.w	r2, r3, #2
 800a9fc:	d006      	beq.n	800aa0c <HAL_TIM_SlaveConfigSynchronization+0x288>
 800a9fe:	2b0a      	cmp	r3, #10
 800aa00:	d004      	beq.n	800aa0c <HAL_TIM_SlaveConfigSynchronization+0x288>
 800aa02:	f241 31eb 	movw	r1, #5099	; 0x13eb
 800aa06:	480e      	ldr	r0, [pc, #56]	; (800aa40 <HAL_TIM_SlaveConfigSynchronization+0x2bc>)
 800aa08:	f004 fb1c 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800aa0c:	692e      	ldr	r6, [r5, #16]
 800aa0e:	2e0f      	cmp	r6, #15
 800aa10:	f200 80e2 	bhi.w	800abd8 <HAL_TIM_SlaveConfigSynchronization+0x454>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	68ad      	ldr	r5, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa18:	6a18      	ldr	r0, [r3, #32]
 800aa1a:	f020 0010 	bic.w	r0, r0, #16
 800aa1e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa20:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800aa22:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa24:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa2c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa30:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800aa34:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa36:	621a      	str	r2, [r3, #32]
 800aa38:	e74d      	b.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aa3a:	bf00      	nop
 800aa3c:	40012c00 	.word	0x40012c00
 800aa40:	080151c0 	.word	0x080151c0
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800aa44:	4a6f      	ldr	r2, [pc, #444]	; (800ac04 <HAL_TIM_SlaveConfigSynchronization+0x480>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d023      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa4e:	d020      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa50:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d01c      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d018      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa60:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d014      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa68:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d010      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d00c      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d008      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d004      	beq.n	800aa92 <HAL_TIM_SlaveConfigSynchronization+0x30e>
 800aa88:	f241 31dc 	movw	r1, #5084	; 0x13dc
 800aa8c:	485e      	ldr	r0, [pc, #376]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800aa8e:	f004 fad9 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800aa92:	68ab      	ldr	r3, [r5, #8]
 800aa94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa98:	d009      	beq.n	800aaae <HAL_TIM_SlaveConfigSynchronization+0x32a>
 800aa9a:	f033 0202 	bics.w	r2, r3, #2
 800aa9e:	d006      	beq.n	800aaae <HAL_TIM_SlaveConfigSynchronization+0x32a>
 800aaa0:	2b0a      	cmp	r3, #10
 800aaa2:	d004      	beq.n	800aaae <HAL_TIM_SlaveConfigSynchronization+0x32a>
 800aaa4:	f241 31dd 	movw	r1, #5085	; 0x13dd
 800aaa8:	4857      	ldr	r0, [pc, #348]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800aaaa:	f004 facb 	bl	800f044 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800aaae:	692e      	ldr	r6, [r5, #16]
 800aab0:	2e0f      	cmp	r6, #15
 800aab2:	f200 809f 	bhi.w	800abf4 <HAL_TIM_SlaveConfigSynchronization+0x470>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	68a9      	ldr	r1, [r5, #8]
  tmpccer = TIMx->CCER;
 800aaba:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aabc:	6a1d      	ldr	r5, [r3, #32]
 800aabe:	f025 0501 	bic.w	r5, r5, #1
 800aac2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800aac4:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aac6:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aaca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800aace:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aad0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800aad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aad6:	6219      	str	r1, [r3, #32]
 800aad8:	e6fd      	b.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800aada:	4a4a      	ldr	r2, [pc, #296]	; (800ac04 <HAL_TIM_SlaveConfigSynchronization+0x480>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	f43f aefa 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae6:	f43f aef6 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aaea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	f43f aef1 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aaf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	f43f aeec 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aafe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800ab02:	4293      	cmp	r3, r2
 800ab04:	f43f aee7 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab08:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	f43f aee2 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab16:	4293      	cmp	r3, r2
 800ab18:	f43f aedd 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab1c:	f241 410d 	movw	r1, #5133	; 0x140d
 800ab20:	4839      	ldr	r0, [pc, #228]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800ab22:	f004 fa8f 	bl	800f044 <assert_failed>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	e6d5      	b.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ab2a:	4a36      	ldr	r2, [pc, #216]	; (800ac04 <HAL_TIM_SlaveConfigSynchronization+0x480>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	f43f aed2 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab36:	f43f aece 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab3a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	f43f aec9 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	f43f aec4 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab4e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800ab52:	4293      	cmp	r3, r2
 800ab54:	f43f aebf 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab58:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	f43f aeba 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab66:	4293      	cmp	r3, r2
 800ab68:	f43f aeb5 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab6c:	f241 31f8 	movw	r1, #5112	; 0x13f8
 800ab70:	4825      	ldr	r0, [pc, #148]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800ab72:	f004 fa67 	bl	800f044 <assert_failed>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	e6ad      	b.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ab7a:	4a22      	ldr	r2, [pc, #136]	; (800ac04 <HAL_TIM_SlaveConfigSynchronization+0x480>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	f43f aeaa 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab86:	f43f aea6 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	f43f aea1 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	f43f ae9c 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800ab9e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800aba2:	4293      	cmp	r3, r2
 800aba4:	f43f ae97 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800aba8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800abac:	4293      	cmp	r3, r2
 800abae:	f43f ae92 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800abb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abb6:	4293      	cmp	r3, r2
 800abb8:	f43f ae8d 	beq.w	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
 800abbc:	f241 4106 	movw	r1, #5126	; 0x1406
 800abc0:	4811      	ldr	r0, [pc, #68]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800abc2:	f004 fa3f 	bl	800f044 <assert_failed>
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	e685      	b.n	800a8d6 <HAL_TIM_SlaveConfigSynchronization+0x152>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800abca:	480f      	ldr	r0, [pc, #60]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800abcc:	f241 31c7 	movw	r1, #5063	; 0x13c7
 800abd0:	f004 fa38 	bl	800f044 <assert_failed>
 800abd4:	6928      	ldr	r0, [r5, #16]
 800abd6:	e6bd      	b.n	800a954 <HAL_TIM_SlaveConfigSynchronization+0x1d0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800abd8:	f241 31ec 	movw	r1, #5100	; 0x13ec
 800abdc:	480a      	ldr	r0, [pc, #40]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800abde:	f004 fa31 	bl	800f044 <assert_failed>
 800abe2:	692e      	ldr	r6, [r5, #16]
 800abe4:	e716      	b.n	800aa14 <HAL_TIM_SlaveConfigSynchronization+0x290>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800abe6:	4808      	ldr	r0, [pc, #32]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800abe8:	f241 31ba 	movw	r1, #5050	; 0x13ba
 800abec:	f004 fa2a 	bl	800f044 <assert_failed>
 800abf0:	6928      	ldr	r0, [r5, #16]
 800abf2:	e65c      	b.n	800a8ae <HAL_TIM_SlaveConfigSynchronization+0x12a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800abf4:	f241 31de 	movw	r1, #5086	; 0x13de
 800abf8:	4803      	ldr	r0, [pc, #12]	; (800ac08 <HAL_TIM_SlaveConfigSynchronization+0x484>)
 800abfa:	f004 fa23 	bl	800f044 <assert_failed>
 800abfe:	692e      	ldr	r6, [r5, #16]
 800ac00:	e759      	b.n	800aab6 <HAL_TIM_SlaveConfigSynchronization+0x332>
 800ac02:	bf00      	nop
 800ac04:	40012c00 	.word	0x40012c00
 800ac08:	080151c0 	.word	0x080151c0

0800ac0c <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac0c:	6a02      	ldr	r2, [r0, #32]
{
 800ac0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac12:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac14:	f022 0201 	bic.w	r2, r2, #1
  tmpccer |= OC_Config->OCPolarity;
 800ac18:	6888      	ldr	r0, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800ac1a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac1c:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800ac1e:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2; 
 800ac20:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800ac24:	69a3      	ldr	r3, [r4, #24]
{
 800ac26:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac28:	4943      	ldr	r1, [pc, #268]	; (800ad38 <TIM_OC1_SetConfig+0x12c>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800ac2e:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac32:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac36:	428c      	cmp	r4, r1
  tmpccer |= OC_Config->OCPolarity;
 800ac38:	ea45 0500 	orr.w	r5, r5, r0
  tmpccmrx |= OC_Config->OCMode;
 800ac3c:	ea46 0603 	orr.w	r6, r6, r3
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac40:	d043      	beq.n	800acca <TIM_OC1_SetConfig+0xbe>
 800ac42:	4b3e      	ldr	r3, [pc, #248]	; (800ad3c <TIM_OC1_SetConfig+0x130>)
 800ac44:	429c      	cmp	r4, r3
 800ac46:	d00f      	beq.n	800ac68 <TIM_OC1_SetConfig+0x5c>
 800ac48:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800ac4c:	429c      	cmp	r4, r3
 800ac4e:	d00b      	beq.n	800ac68 <TIM_OC1_SetConfig+0x5c>
 800ac50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac54:	429c      	cmp	r4, r3
 800ac56:	d007      	beq.n	800ac68 <TIM_OC1_SetConfig+0x5c>
 800ac58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac5c:	429c      	cmp	r4, r3
 800ac5e:	d003      	beq.n	800ac68 <TIM_OC1_SetConfig+0x5c>
 800ac60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac64:	429c      	cmp	r4, r3
 800ac66:	d128      	bne.n	800acba <TIM_OC1_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f025 0908 	bic.w	r9, r5, #8
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d152      	bne.n	800ad18 <TIM_OC1_SetConfig+0x10c>
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac72:	f025 050c 	bic.w	r5, r5, #12
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ac76:	4b31      	ldr	r3, [pc, #196]	; (800ad3c <TIM_OC1_SetConfig+0x130>)
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	d00f      	beq.n	800ac9c <TIM_OC1_SetConfig+0x90>
 800ac7c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800ac80:	429c      	cmp	r4, r3
 800ac82:	d00b      	beq.n	800ac9c <TIM_OC1_SetConfig+0x90>
 800ac84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac88:	429c      	cmp	r4, r3
 800ac8a:	d007      	beq.n	800ac9c <TIM_OC1_SetConfig+0x90>
 800ac8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac90:	429c      	cmp	r4, r3
 800ac92:	d003      	beq.n	800ac9c <TIM_OC1_SetConfig+0x90>
 800ac94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	d10e      	bne.n	800acba <TIM_OC1_SetConfig+0xae>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800aca2:	d129      	bne.n	800acf8 <TIM_OC1_SetConfig+0xec>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800acaa:	d12e      	bne.n	800ad0a <TIM_OC1_SetConfig+0xfe>
 800acac:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acae:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 800acb2:	ea48 0802 	orr.w	r8, r8, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800acb6:	ea43 0808 	orr.w	r8, r3, r8
  TIMx->CCR1 = OC_Config->Pulse;
 800acba:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800acbc:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800acc0:	61a6      	str	r6, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800acc2:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 800acc4:	6225      	str	r5, [r4, #32]
} 
 800acc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f025 0908 	bic.w	r9, r5, #8
 800acd0:	b373      	cbz	r3, 800ad30 <TIM_OC1_SetConfig+0x124>
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d027      	beq.n	800ad26 <TIM_OC1_SetConfig+0x11a>
 800acd6:	f241 219b 	movw	r1, #4763	; 0x129b
 800acda:	4819      	ldr	r0, [pc, #100]	; (800ad40 <TIM_OC1_SetConfig+0x134>)
 800acdc:	f004 f9b2 	bl	800f044 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800ace0:	68fd      	ldr	r5, [r7, #12]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ace2:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <TIM_OC1_SetConfig+0x12c>)
    tmpccer |= OC_Config->OCNPolarity;
 800ace4:	ea49 0505 	orr.w	r5, r9, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ace8:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800acea:	f025 0504 	bic.w	r5, r5, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800acee:	d1c2      	bne.n	800ac76 <TIM_OC1_SetConfig+0x6a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800acf6:	d0d5      	beq.n	800aca4 <TIM_OC1_SetConfig+0x98>
 800acf8:	f241 21a8 	movw	r1, #4776	; 0x12a8
 800acfc:	4810      	ldr	r0, [pc, #64]	; (800ad40 <TIM_OC1_SetConfig+0x134>)
 800acfe:	f004 f9a1 	bl	800f044 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ad08:	d0d0      	beq.n	800acac <TIM_OC1_SetConfig+0xa0>
 800ad0a:	f241 21a9 	movw	r1, #4777	; 0x12a9
 800ad0e:	480c      	ldr	r0, [pc, #48]	; (800ad40 <TIM_OC1_SetConfig+0x134>)
 800ad10:	f004 f998 	bl	800f044 <assert_failed>
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	e7c9      	b.n	800acac <TIM_OC1_SetConfig+0xa0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ad18:	2b08      	cmp	r3, #8
 800ad1a:	d1dc      	bne.n	800acd6 <TIM_OC1_SetConfig+0xca>
 800ad1c:	f025 050c 	bic.w	r5, r5, #12
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad20:	f045 0508 	orr.w	r5, r5, #8
 800ad24:	e7a7      	b.n	800ac76 <TIM_OC1_SetConfig+0x6a>
 800ad26:	f025 050c 	bic.w	r5, r5, #12
 800ad2a:	f045 0508 	orr.w	r5, r5, #8
 800ad2e:	e7b5      	b.n	800ac9c <TIM_OC1_SetConfig+0x90>
 800ad30:	f025 050c 	bic.w	r5, r5, #12
 800ad34:	e7b2      	b.n	800ac9c <TIM_OC1_SetConfig+0x90>
 800ad36:	bf00      	nop
 800ad38:	40012c00 	.word	0x40012c00
 800ad3c:	40013400 	.word	0x40013400
 800ad40:	080151c0 	.word	0x080151c0

0800ad44 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad44:	6a02      	ldr	r2, [r0, #32]
{
 800ad46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad4a:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad4c:	f022 0210 	bic.w	r2, r2, #16
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad50:	6888      	ldr	r0, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad52:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad54:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800ad56:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2; 
 800ad58:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800ad5c:	69a3      	ldr	r3, [r4, #24]
{
 800ad5e:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad60:	493d      	ldr	r1, [pc, #244]	; (800ae58 <TIM_OC2_SetConfig+0x114>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 800ad66:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad6a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad6e:	428c      	cmp	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad70:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad74:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad78:	d037      	beq.n	800adea <TIM_OC2_SetConfig+0xa6>
 800ad7a:	4b38      	ldr	r3, [pc, #224]	; (800ae5c <TIM_OC2_SetConfig+0x118>)
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	d013      	beq.n	800ada8 <TIM_OC2_SetConfig+0x64>
 800ad80:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800ad84:	429c      	cmp	r4, r3
 800ad86:	d00f      	beq.n	800ada8 <TIM_OC2_SetConfig+0x64>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ad88:	4b35      	ldr	r3, [pc, #212]	; (800ae60 <TIM_OC2_SetConfig+0x11c>)
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d016      	beq.n	800adbc <TIM_OC2_SetConfig+0x78>
 800ad8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad92:	429c      	cmp	r4, r3
 800ad94:	d012      	beq.n	800adbc <TIM_OC2_SetConfig+0x78>
 800ad96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad9a:	429c      	cmp	r4, r3
 800ad9c:	d00e      	beq.n	800adbc <TIM_OC2_SetConfig+0x78>
 800ad9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada2:	429c      	cmp	r4, r3
 800ada4:	d119      	bne.n	800adda <TIM_OC2_SetConfig+0x96>
 800ada6:	e009      	b.n	800adbc <TIM_OC2_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f025 0980 	bic.w	r9, r5, #128	; 0x80
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d147      	bne.n	800ae42 <TIM_OC2_SetConfig+0xfe>
    tmpccer &= ~TIM_CCER_CC2NE;
 800adb2:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800adb6:	4b29      	ldr	r3, [pc, #164]	; (800ae5c <TIM_OC2_SetConfig+0x118>)
 800adb8:	429c      	cmp	r4, r3
 800adba:	d1e5      	bne.n	800ad88 <TIM_OC2_SetConfig+0x44>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800adc2:	d120      	bne.n	800ae06 <TIM_OC2_SetConfig+0xc2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800adca:	d125      	bne.n	800ae18 <TIM_OC2_SetConfig+0xd4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adcc:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800adce:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
 800add2:	ea48 0882 	orr.w	r8, r8, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800add6:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800adda:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800addc:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ade0:	61a6      	str	r6, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800ade2:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 800ade4:	6225      	str	r5, [r4, #32]
}
 800ade6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f025 0980 	bic.w	r9, r5, #128	; 0x80
 800adf0:	b373      	cbz	r3, 800ae50 <TIM_OC2_SetConfig+0x10c>
 800adf2:	2b08      	cmp	r3, #8
 800adf4:	d117      	bne.n	800ae26 <TIM_OC2_SetConfig+0xe2>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800adfc:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae00:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ae04:	d0de      	beq.n	800adc4 <TIM_OC2_SetConfig+0x80>
 800ae06:	f241 21f3 	movw	r1, #4851	; 0x12f3
 800ae0a:	4816      	ldr	r0, [pc, #88]	; (800ae64 <TIM_OC2_SetConfig+0x120>)
 800ae0c:	f004 f91a 	bl	800f044 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ae16:	d0d9      	beq.n	800adcc <TIM_OC2_SetConfig+0x88>
 800ae18:	f241 21f4 	movw	r1, #4852	; 0x12f4
 800ae1c:	4811      	ldr	r0, [pc, #68]	; (800ae64 <TIM_OC2_SetConfig+0x120>)
 800ae1e:	f004 f911 	bl	800f044 <assert_failed>
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	e7d2      	b.n	800adcc <TIM_OC2_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ae26:	f241 21e5 	movw	r1, #4837	; 0x12e5
 800ae2a:	480e      	ldr	r0, [pc, #56]	; (800ae64 <TIM_OC2_SetConfig+0x120>)
 800ae2c:	f004 f90a 	bl	800f044 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae30:	68fd      	ldr	r5, [r7, #12]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ae32:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <TIM_OC2_SetConfig+0x114>)
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae34:	ea49 1505 	orr.w	r5, r9, r5, lsl #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ae38:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae3a:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800ae3e:	d0bd      	beq.n	800adbc <TIM_OC2_SetConfig+0x78>
 800ae40:	e7b9      	b.n	800adb6 <TIM_OC2_SetConfig+0x72>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ae42:	2b08      	cmp	r3, #8
 800ae44:	d1ef      	bne.n	800ae26 <TIM_OC2_SetConfig+0xe2>
 800ae46:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae4a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800ae4e:	e7b2      	b.n	800adb6 <TIM_OC2_SetConfig+0x72>
 800ae50:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800ae54:	e7b2      	b.n	800adbc <TIM_OC2_SetConfig+0x78>
 800ae56:	bf00      	nop
 800ae58:	40012c00 	.word	0x40012c00
 800ae5c:	40013400 	.word	0x40013400
 800ae60:	40014000 	.word	0x40014000
 800ae64:	080151c0 	.word	0x080151c0

0800ae68 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae68:	6a02      	ldr	r2, [r0, #32]
{
 800ae6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae6e:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae74:	6888      	ldr	r0, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800ae76:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae78:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800ae7a:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2; 
 800ae7c:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800ae80:	69e3      	ldr	r3, [r4, #28]
{
 800ae82:	460f      	mov	r7, r1
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae84:	493d      	ldr	r1, [pc, #244]	; (800af7c <TIM_OC3_SetConfig+0x114>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800ae86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800ae8a:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800ae8e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae92:	428c      	cmp	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae94:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800ae98:	ea46 0603 	orr.w	r6, r6, r3
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae9c:	d037      	beq.n	800af0e <TIM_OC3_SetConfig+0xa6>
 800ae9e:	4b38      	ldr	r3, [pc, #224]	; (800af80 <TIM_OC3_SetConfig+0x118>)
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d013      	beq.n	800aecc <TIM_OC3_SetConfig+0x64>
 800aea4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800aea8:	429c      	cmp	r4, r3
 800aeaa:	d00f      	beq.n	800aecc <TIM_OC3_SetConfig+0x64>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800aeac:	4b35      	ldr	r3, [pc, #212]	; (800af84 <TIM_OC3_SetConfig+0x11c>)
 800aeae:	429c      	cmp	r4, r3
 800aeb0:	d016      	beq.n	800aee0 <TIM_OC3_SetConfig+0x78>
 800aeb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d012      	beq.n	800aee0 <TIM_OC3_SetConfig+0x78>
 800aeba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aebe:	429c      	cmp	r4, r3
 800aec0:	d00e      	beq.n	800aee0 <TIM_OC3_SetConfig+0x78>
 800aec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec6:	429c      	cmp	r4, r3
 800aec8:	d119      	bne.n	800aefe <TIM_OC3_SetConfig+0x96>
 800aeca:	e009      	b.n	800aee0 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f425 6900 	bic.w	r9, r5, #2048	; 0x800
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d147      	bne.n	800af66 <TIM_OC3_SetConfig+0xfe>
    tmpccer &= ~TIM_CCER_CC3NE;
 800aed6:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800aeda:	4b29      	ldr	r3, [pc, #164]	; (800af80 <TIM_OC3_SetConfig+0x118>)
 800aedc:	429c      	cmp	r4, r3
 800aede:	d1e5      	bne.n	800aeac <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800aee6:	d120      	bne.n	800af2a <TIM_OC3_SetConfig+0xc2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800aeee:	d125      	bne.n	800af3c <TIM_OC3_SetConfig+0xd4>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aef0:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aef2:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
 800aef6:	ea48 1802 	orr.w	r8, r8, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aefa:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800aefe:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800af00:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800af04:	61e6      	str	r6, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800af06:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 800af08:	6225      	str	r5, [r4, #32]
}
 800af0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f425 6900 	bic.w	r9, r5, #2048	; 0x800
 800af14:	b373      	cbz	r3, 800af74 <TIM_OC3_SetConfig+0x10c>
 800af16:	2b08      	cmp	r3, #8
 800af18:	d117      	bne.n	800af4a <TIM_OC3_SetConfig+0xe2>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
 800af20:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800af24:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800af28:	d0de      	beq.n	800aee8 <TIM_OC3_SetConfig+0x80>
 800af2a:	f241 3141 	movw	r1, #4929	; 0x1341
 800af2e:	4816      	ldr	r0, [pc, #88]	; (800af88 <TIM_OC3_SetConfig+0x120>)
 800af30:	f004 f888 	bl	800f044 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800af3a:	d0d9      	beq.n	800aef0 <TIM_OC3_SetConfig+0x88>
 800af3c:	f241 3142 	movw	r1, #4930	; 0x1342
 800af40:	4811      	ldr	r0, [pc, #68]	; (800af88 <TIM_OC3_SetConfig+0x120>)
 800af42:	f004 f87f 	bl	800f044 <assert_failed>
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	e7d2      	b.n	800aef0 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800af4a:	f241 3134 	movw	r1, #4916	; 0x1334
 800af4e:	480e      	ldr	r0, [pc, #56]	; (800af88 <TIM_OC3_SetConfig+0x120>)
 800af50:	f004 f878 	bl	800f044 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af54:	68fd      	ldr	r5, [r7, #12]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800af56:	4b09      	ldr	r3, [pc, #36]	; (800af7c <TIM_OC3_SetConfig+0x114>)
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af58:	ea49 2505 	orr.w	r5, r9, r5, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800af5c:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC3NE;
 800af5e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800af62:	d0bd      	beq.n	800aee0 <TIM_OC3_SetConfig+0x78>
 800af64:	e7b9      	b.n	800aeda <TIM_OC3_SetConfig+0x72>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800af66:	2b08      	cmp	r3, #8
 800af68:	d1ef      	bne.n	800af4a <TIM_OC3_SetConfig+0xe2>
 800af6a:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpccer &= ~TIM_CCER_CC3NE;
 800af6e:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800af72:	e7b2      	b.n	800aeda <TIM_OC3_SetConfig+0x72>
 800af74:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
 800af78:	e7b2      	b.n	800aee0 <TIM_OC3_SetConfig+0x78>
 800af7a:	bf00      	nop
 800af7c:	40012c00 	.word	0x40012c00
 800af80:	40013400 	.word	0x40013400
 800af84:	40014000 	.word	0x40014000
 800af88:	080151c0 	.word	0x080151c0

0800af8c <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af8c:	6a02      	ldr	r2, [r0, #32]
{
 800af8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af92:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af98:	6888      	ldr	r0, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af9a:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af9c:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800af9e:	6a26      	ldr	r6, [r4, #32]
  tmpcr2 =  TIMx->CR2; 
 800afa0:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800afa2:	69e3      	ldr	r3, [r4, #28]
{
 800afa4:	4688      	mov	r8, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800afa6:	491c      	ldr	r1, [pc, #112]	; (800b018 <TIM_OC4_SetConfig+0x8c>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800afac:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afb0:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800afb4:	428c      	cmp	r4, r1
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afb6:	ea46 3600 	orr.w	r6, r6, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afba:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800afbe:	d012      	beq.n	800afe6 <TIM_OC4_SetConfig+0x5a>
 800afc0:	4b16      	ldr	r3, [pc, #88]	; (800b01c <TIM_OC4_SetConfig+0x90>)
 800afc2:	429c      	cmp	r4, r3
 800afc4:	d00f      	beq.n	800afe6 <TIM_OC4_SetConfig+0x5a>
 800afc6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800afca:	429c      	cmp	r4, r3
 800afcc:	d00b      	beq.n	800afe6 <TIM_OC4_SetConfig+0x5a>
 800afce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afd2:	429c      	cmp	r4, r3
 800afd4:	d007      	beq.n	800afe6 <TIM_OC4_SetConfig+0x5a>
 800afd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afda:	429c      	cmp	r4, r3
 800afdc:	d003      	beq.n	800afe6 <TIM_OC4_SetConfig+0x5a>
 800afde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe2:	429c      	cmp	r4, r3
 800afe4:	d108      	bne.n	800aff8 <TIM_OC4_SetConfig+0x6c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800afe6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800afea:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800afee:	d10b      	bne.n	800b008 <TIM_OC4_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aff0:	f427 4780 	bic.w	r7, r7, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aff4:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800aff8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  TIMx->CR2 = tmpcr2;
 800affc:	6067      	str	r7, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800affe:	61e5      	str	r5, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800b000:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 800b002:	6226      	str	r6, [r4, #32]
}
 800b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b008:	f241 3182 	movw	r1, #4994	; 0x1382
 800b00c:	4804      	ldr	r0, [pc, #16]	; (800b020 <TIM_OC4_SetConfig+0x94>)
 800b00e:	f004 f819 	bl	800f044 <assert_failed>
 800b012:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b016:	e7eb      	b.n	800aff0 <TIM_OC4_SetConfig+0x64>
 800b018:	40012c00 	.word	0x40012c00
 800b01c:	40013400 	.word	0x40013400
 800b020:	080151c0 	.word	0x080151c0

0800b024 <TIM_CCxChannelCmd>:
{
 800b024:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 800b026:	4b24      	ldr	r3, [pc, #144]	; (800b0b8 <TIM_CCxChannelCmd+0x94>)
 800b028:	4298      	cmp	r0, r3
{
 800b02a:	b083      	sub	sp, #12
 800b02c:	4604      	mov	r4, r0
 800b02e:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
 800b030:	d025      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b032:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b036:	d022      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b038:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b03c:	4298      	cmp	r0, r3
 800b03e:	d01e      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b044:	4298      	cmp	r0, r3
 800b046:	d01a      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b048:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b04c:	4298      	cmp	r0, r3
 800b04e:	d016      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b050:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b054:	4298      	cmp	r0, r3
 800b056:	d012      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b05c:	4298      	cmp	r0, r3
 800b05e:	d00e      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b064:	4298      	cmp	r0, r3
 800b066:	d00a      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06c:	4298      	cmp	r0, r3
 800b06e:	d006      	beq.n	800b07e <TIM_CCxChannelCmd+0x5a>
 800b070:	f241 5173 	movw	r1, #5491	; 0x1573
 800b074:	4811      	ldr	r0, [pc, #68]	; (800b0bc <TIM_CCxChannelCmd+0x98>)
 800b076:	9201      	str	r2, [sp, #4]
 800b078:	f003 ffe4 	bl	800f044 <assert_failed>
 800b07c:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800b07e:	2d14      	cmp	r5, #20
 800b080:	d90d      	bls.n	800b09e <TIM_CCxChannelCmd+0x7a>
 800b082:	2d3c      	cmp	r5, #60	; 0x3c
 800b084:	d10f      	bne.n	800b0a6 <TIM_CCxChannelCmd+0x82>
  TIMx->CCER &= ~tmp;
 800b086:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800b088:	2101      	movs	r1, #1
 800b08a:	40a9      	lsls	r1, r5
  TIMx->CCER &= ~tmp;
 800b08c:	ea23 0301 	bic.w	r3, r3, r1
 800b090:	6223      	str	r3, [r4, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800b092:	6a23      	ldr	r3, [r4, #32]
 800b094:	40aa      	lsls	r2, r5
 800b096:	431a      	orrs	r2, r3
 800b098:	6222      	str	r2, [r4, #32]
}
 800b09a:	b003      	add	sp, #12
 800b09c:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800b09e:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <TIM_CCxChannelCmd+0x9c>)
 800b0a0:	40eb      	lsrs	r3, r5
 800b0a2:	07db      	lsls	r3, r3, #31
 800b0a4:	d4ef      	bmi.n	800b086 <TIM_CCxChannelCmd+0x62>
 800b0a6:	f241 5174 	movw	r1, #5492	; 0x1574
 800b0aa:	4804      	ldr	r0, [pc, #16]	; (800b0bc <TIM_CCxChannelCmd+0x98>)
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	f003 ffc9 	bl	800f044 <assert_failed>
 800b0b2:	9a01      	ldr	r2, [sp, #4]
 800b0b4:	e7e7      	b.n	800b086 <TIM_CCxChannelCmd+0x62>
 800b0b6:	bf00      	nop
 800b0b8:	40012c00 	.word	0x40012c00
 800b0bc:	080151c0 	.word	0x080151c0
 800b0c0:	00111111 	.word	0x00111111

0800b0c4 <HAL_TIM_OC_ConfigChannel>:
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b0c4:	2a14      	cmp	r2, #20
{  
 800b0c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ca:	4615      	mov	r5, r2
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b0d0:	d966      	bls.n	800b1a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b0d2:	2a3c      	cmp	r2, #60	; 0x3c
 800b0d4:	d168      	bne.n	800b1a8 <HAL_TIM_OC_ConfigChannel+0xe4>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800b0d6:	6833      	ldr	r3, [r6, #0]
 800b0d8:	f023 0210 	bic.w	r2, r3, #16
 800b0dc:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b0e0:	d009      	beq.n	800b0f6 <HAL_TIM_OC_ConfigChannel+0x32>
 800b0e2:	2a40      	cmp	r2, #64	; 0x40
 800b0e4:	d007      	beq.n	800b0f6 <HAL_TIM_OC_ConfigChannel+0x32>
 800b0e6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b0ea:	d004      	beq.n	800b0f6 <HAL_TIM_OC_ConfigChannel+0x32>
 800b0ec:	f240 6123 	movw	r1, #1571	; 0x623
 800b0f0:	48a0      	ldr	r0, [pc, #640]	; (800b374 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b0f2:	f003 ffa7 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b0f6:	68b3      	ldr	r3, [r6, #8]
 800b0f8:	f033 0302 	bics.w	r3, r3, #2
 800b0fc:	d004      	beq.n	800b108 <HAL_TIM_OC_ConfigChannel+0x44>
 800b0fe:	f240 6124 	movw	r1, #1572	; 0x624
 800b102:	489c      	ldr	r0, [pc, #624]	; (800b374 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b104:	f003 ff9e 	bl	800f044 <assert_failed>
  
  /* Check input state */
  __HAL_LOCK(htim); 
 800b108:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	f000 812d 	beq.w	800b36c <HAL_TIM_OC_ConfigChannel+0x2a8>
 800b112:	2201      	movs	r2, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
 800b114:	2302      	movs	r3, #2
  __HAL_LOCK(htim); 
 800b116:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b11a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  switch (Channel)
 800b11e:	2d14      	cmp	r5, #20
 800b120:	d836      	bhi.n	800b190 <HAL_TIM_OC_ConfigChannel+0xcc>
 800b122:	e8df f005 	tbb	[pc, r5]
 800b126:	3547      	.short	0x3547
 800b128:	35743535 	.word	0x35743535
 800b12c:	35993535 	.word	0x35993535
 800b130:	35ba3535 	.word	0x35ba3535
 800b134:	350b3535 	.word	0x350b3535
 800b138:	3535      	.short	0x3535
 800b13a:	db          	.byte	0xdb
 800b13b:	00          	.byte	0x00
    break;
    
    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	4f8e      	ldr	r7, [pc, #568]	; (800b378 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b140:	42bb      	cmp	r3, r7
 800b142:	d008      	beq.n	800b156 <HAL_TIM_OC_ConfigChannel+0x92>
 800b144:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800b380 <HAL_TIM_OC_ConfigChannel+0x2bc>
 800b148:	4543      	cmp	r3, r8
 800b14a:	d004      	beq.n	800b156 <HAL_TIM_OC_ConfigChannel+0x92>
 800b14c:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800b388 <HAL_TIM_OC_ConfigChannel+0x2c4>
 800b150:	454b      	cmp	r3, r9
 800b152:	f040 811b 	bne.w	800b38c <HAL_TIM_OC_ConfigChannel+0x2c8>
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b156:	6a1a      	ldr	r2, [r3, #32]
 800b158:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b15c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b15e:	6a1f      	ldr	r7, [r3, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800b160:	685d      	ldr	r5, [r3, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b162:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b164:	68b0      	ldr	r0, [r6, #8]
  tmpccmrx |= OC_Config->OCMode;
 800b166:	6831      	ldr	r1, [r6, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b168:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800b16c:	f427 3c00 	bic.w	ip, r7, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b170:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b174:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800b178:	430a      	orrs	r2, r1
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b17a:	6970      	ldr	r0, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b17c:	f425 3180 	bic.w	r1, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b180:	ea41 2500 	orr.w	r5, r1, r0, lsl #8
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b184:	6871      	ldr	r1, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b186:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b188:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800b18a:	6599      	str	r1, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800b18c:	f8c3 c020 	str.w	ip, [r3, #32]
  htim->State = HAL_TIM_STATE_READY;
 800b190:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 800b192:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b194:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 800b198:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b1a0:	4b76      	ldr	r3, [pc, #472]	; (800b37c <HAL_TIM_OC_ConfigChannel+0x2b8>)
 800b1a2:	40d3      	lsrs	r3, r2
 800b1a4:	07db      	lsls	r3, r3, #31
 800b1a6:	d496      	bmi.n	800b0d6 <HAL_TIM_OC_ConfigChannel+0x12>
 800b1a8:	f240 6122 	movw	r1, #1570	; 0x622
 800b1ac:	4871      	ldr	r0, [pc, #452]	; (800b374 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b1ae:	f003 ff49 	bl	800f044 <assert_failed>
 800b1b2:	e790      	b.n	800b0d6 <HAL_TIM_OC_ConfigChannel+0x12>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
 800b1b4:	6820      	ldr	r0, [r4, #0]
 800b1b6:	4b70      	ldr	r3, [pc, #448]	; (800b378 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b1b8:	4298      	cmp	r0, r3
 800b1ba:	d024      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b1c0:	d021      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1c2:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b1c6:	4298      	cmp	r0, r3
 800b1c8:	d01d      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1ce:	4298      	cmp	r0, r3
 800b1d0:	d019      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1d2:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b1d6:	4298      	cmp	r0, r3
 800b1d8:	d015      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1da:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b1de:	4298      	cmp	r0, r3
 800b1e0:	d011      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1e6:	4298      	cmp	r0, r3
 800b1e8:	d00d      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1ee:	4298      	cmp	r0, r3
 800b1f0:	d009      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f6:	4298      	cmp	r0, r3
 800b1f8:	d005      	beq.n	800b206 <HAL_TIM_OC_ConfigChannel+0x142>
 800b1fa:	485e      	ldr	r0, [pc, #376]	; (800b374 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b1fc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800b200:	f003 ff20 	bl	800f044 <assert_failed>
 800b204:	6820      	ldr	r0, [r4, #0]
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b206:	4631      	mov	r1, r6
 800b208:	f7ff fd00 	bl	800ac0c <TIM_OC1_SetConfig>
    break;
 800b20c:	e7c0      	b.n	800b190 <HAL_TIM_OC_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
 800b20e:	6820      	ldr	r0, [r4, #0]
 800b210:	4b59      	ldr	r3, [pc, #356]	; (800b378 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b212:	4298      	cmp	r0, r3
 800b214:	d01c      	beq.n	800b250 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b216:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b21a:	d019      	beq.n	800b250 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b21c:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b220:	4298      	cmp	r0, r3
 800b222:	d015      	beq.n	800b250 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b228:	4298      	cmp	r0, r3
 800b22a:	d011      	beq.n	800b250 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b22c:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b230:	4298      	cmp	r0, r3
 800b232:	d00d      	beq.n	800b250 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b234:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b238:	4298      	cmp	r0, r3
 800b23a:	d009      	beq.n	800b250 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b240:	4298      	cmp	r0, r3
 800b242:	d005      	beq.n	800b250 <HAL_TIM_OC_ConfigChannel+0x18c>
 800b244:	484b      	ldr	r0, [pc, #300]	; (800b374 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b246:	f240 613a 	movw	r1, #1594	; 0x63a
 800b24a:	f003 fefb 	bl	800f044 <assert_failed>
 800b24e:	6820      	ldr	r0, [r4, #0]
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b250:	4631      	mov	r1, r6
 800b252:	f7ff fd77 	bl	800ad44 <TIM_OC2_SetConfig>
    break;
 800b256:	e79b      	b.n	800b190 <HAL_TIM_OC_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
 800b258:	6820      	ldr	r0, [r4, #0]
 800b25a:	4b47      	ldr	r3, [pc, #284]	; (800b378 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b25c:	4298      	cmp	r0, r3
 800b25e:	d018      	beq.n	800b292 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b260:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b264:	d015      	beq.n	800b292 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b266:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b26a:	4298      	cmp	r0, r3
 800b26c:	d011      	beq.n	800b292 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b26e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b272:	4298      	cmp	r0, r3
 800b274:	d00d      	beq.n	800b292 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b276:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b27a:	4298      	cmp	r0, r3
 800b27c:	d009      	beq.n	800b292 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b27e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800b282:	4298      	cmp	r0, r3
 800b284:	d005      	beq.n	800b292 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800b286:	483b      	ldr	r0, [pc, #236]	; (800b374 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b288:	f240 6144 	movw	r1, #1604	; 0x644
 800b28c:	f003 feda 	bl	800f044 <assert_failed>
 800b290:	6820      	ldr	r0, [r4, #0]
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b292:	4631      	mov	r1, r6
 800b294:	f7ff fde8 	bl	800ae68 <TIM_OC3_SetConfig>
    break;
 800b298:	e77a      	b.n	800b190 <HAL_TIM_OC_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
 800b29a:	6820      	ldr	r0, [r4, #0]
 800b29c:	4b36      	ldr	r3, [pc, #216]	; (800b378 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b29e:	4298      	cmp	r0, r3
 800b2a0:	d018      	beq.n	800b2d4 <HAL_TIM_OC_ConfigChannel+0x210>
 800b2a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b2a6:	d015      	beq.n	800b2d4 <HAL_TIM_OC_ConfigChannel+0x210>
 800b2a8:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b2ac:	4298      	cmp	r0, r3
 800b2ae:	d011      	beq.n	800b2d4 <HAL_TIM_OC_ConfigChannel+0x210>
 800b2b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2b4:	4298      	cmp	r0, r3
 800b2b6:	d00d      	beq.n	800b2d4 <HAL_TIM_OC_ConfigChannel+0x210>
 800b2b8:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b2bc:	4298      	cmp	r0, r3
 800b2be:	d009      	beq.n	800b2d4 <HAL_TIM_OC_ConfigChannel+0x210>
 800b2c0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800b2c4:	4298      	cmp	r0, r3
 800b2c6:	d005      	beq.n	800b2d4 <HAL_TIM_OC_ConfigChannel+0x210>
 800b2c8:	482a      	ldr	r0, [pc, #168]	; (800b374 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b2ca:	f240 614e 	movw	r1, #1614	; 0x64e
 800b2ce:	f003 feb9 	bl	800f044 <assert_failed>
 800b2d2:	6820      	ldr	r0, [r4, #0]
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	f7ff fe59 	bl	800af8c <TIM_OC4_SetConfig>
    break;
 800b2da:	e759      	b.n	800b190 <HAL_TIM_OC_ConfigChannel+0xcc>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	4a26      	ldr	r2, [pc, #152]	; (800b378 <HAL_TIM_OC_ConfigChannel+0x2b4>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d00d      	beq.n	800b300 <HAL_TIM_OC_ConfigChannel+0x23c>
 800b2e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d009      	beq.n	800b300 <HAL_TIM_OC_ConfigChannel+0x23c>
 800b2ec:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d005      	beq.n	800b300 <HAL_TIM_OC_ConfigChannel+0x23c>
 800b2f4:	f240 6162 	movw	r1, #1634	; 0x662
 800b2f8:	481e      	ldr	r0, [pc, #120]	; (800b374 <HAL_TIM_OC_ConfigChannel+0x2b0>)
 800b2fa:	f003 fea3 	bl	800f044 <assert_failed>
 800b2fe:	6823      	ldr	r3, [r4, #0]
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b300:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b302:	68b7      	ldr	r7, [r6, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b304:	6835      	ldr	r5, [r6, #0]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b306:	f8df e070 	ldr.w	lr, [pc, #112]	; 800b378 <HAL_TIM_OC_ConfigChannel+0x2b4>
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b30a:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 800b30e:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800b310:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b312:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b316:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b318:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b31c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b320:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b324:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b326:	ea41 5107 	orr.w	r1, r1, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b32a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b32e:	d011      	beq.n	800b354 <HAL_TIM_OC_ConfigChannel+0x290>
 800b330:	4d13      	ldr	r5, [pc, #76]	; (800b380 <HAL_TIM_OC_ConfigChannel+0x2bc>)
 800b332:	42ab      	cmp	r3, r5
 800b334:	d00e      	beq.n	800b354 <HAL_TIM_OC_ConfigChannel+0x290>
 800b336:	4813      	ldr	r0, [pc, #76]	; (800b384 <HAL_TIM_OC_ConfigChannel+0x2c0>)
 800b338:	4283      	cmp	r3, r0
 800b33a:	d00b      	beq.n	800b354 <HAL_TIM_OC_ConfigChannel+0x290>
 800b33c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b340:	4283      	cmp	r3, r0
 800b342:	d007      	beq.n	800b354 <HAL_TIM_OC_ConfigChannel+0x290>
 800b344:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b348:	4283      	cmp	r3, r0
 800b34a:	d003      	beq.n	800b354 <HAL_TIM_OC_ConfigChannel+0x290>
 800b34c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800b350:	4283      	cmp	r3, r0
 800b352:	d104      	bne.n	800b35e <HAL_TIM_OC_ConfigChannel+0x29a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b354:	6975      	ldr	r5, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b356:	f42c 2080 	bic.w	r0, ip, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b35a:	ea40 2c85 	orr.w	ip, r0, r5, lsl #10
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b35e:	6870      	ldr	r0, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b360:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b364:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800b366:	65d8      	str	r0, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800b368:	6219      	str	r1, [r3, #32]
 800b36a:	e711      	b.n	800b190 <HAL_TIM_OC_ConfigChannel+0xcc>
  __HAL_LOCK(htim); 
 800b36c:	2002      	movs	r0, #2
}
 800b36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b372:	bf00      	nop
 800b374:	0801520c 	.word	0x0801520c
 800b378:	40012c00 	.word	0x40012c00
 800b37c:	00111111 	.word	0x00111111
 800b380:	40013400 	.word	0x40013400
 800b384:	40014000 	.word	0x40014000
 800b388:	40015000 	.word	0x40015000
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 800b38c:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 800b390:	4817      	ldr	r0, [pc, #92]	; (800b3f0 <HAL_TIM_OC_ConfigChannel+0x32c>)
 800b392:	f003 fe57 	bl	800f044 <assert_failed>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b396:	6823      	ldr	r3, [r4, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b398:	f8d6 e008 	ldr.w	lr, [r6, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b39c:	6a19      	ldr	r1, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800b39e:	6830      	ldr	r0, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b3a0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b3a4:	6219      	str	r1, [r3, #32]
  tmpccer = TIMx->CCER;
 800b3a6:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b3a8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b3aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800b3b0:	f421 3c00 	bic.w	ip, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b3b8:	42bb      	cmp	r3, r7
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b3ba:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800b3be:	ea42 0200 	orr.w	r2, r2, r0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b3c2:	f43f aeda 	beq.w	800b17a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b3c6:	4543      	cmp	r3, r8
 800b3c8:	f43f aed7 	beq.w	800b17a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b3cc:	4909      	ldr	r1, [pc, #36]	; (800b3f4 <HAL_TIM_OC_ConfigChannel+0x330>)
 800b3ce:	428b      	cmp	r3, r1
 800b3d0:	f43f aed3 	beq.w	800b17a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b3d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b3d8:	428b      	cmp	r3, r1
 800b3da:	f43f aece 	beq.w	800b17a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b3de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b3e2:	428b      	cmp	r3, r1
 800b3e4:	f43f aec9 	beq.w	800b17a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b3e8:	454b      	cmp	r3, r9
 800b3ea:	f47f aecb 	bne.w	800b184 <HAL_TIM_OC_ConfigChannel+0xc0>
 800b3ee:	e6c4      	b.n	800b17a <HAL_TIM_OC_ConfigChannel+0xb6>
 800b3f0:	0801520c 	.word	0x0801520c
 800b3f4:	40014000 	.word	0x40014000

0800b3f8 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b3f8:	2a14      	cmp	r2, #20
{
 800b3fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3fe:	4616      	mov	r6, r2
 800b400:	4604      	mov	r4, r0
 800b402:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b404:	f240 8088 	bls.w	800b518 <HAL_TIM_PWM_ConfigChannel+0x120>
 800b408:	2a3c      	cmp	r2, #60	; 0x3c
 800b40a:	f040 808a 	bne.w	800b522 <HAL_TIM_PWM_ConfigChannel+0x12a>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b40e:	682b      	ldr	r3, [r5, #0]
 800b410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b414:	f022 0210 	bic.w	r2, r2, #16
 800b418:	2a60      	cmp	r2, #96	; 0x60
 800b41a:	f023 0310 	bic.w	r3, r3, #16
 800b41e:	d007      	beq.n	800b430 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b420:	4aa2      	ldr	r2, [pc, #648]	; (800b6ac <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d004      	beq.n	800b430 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b426:	f240 618b 	movw	r1, #1675	; 0x68b
 800b42a:	48a1      	ldr	r0, [pc, #644]	; (800b6b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b42c:	f003 fe0a 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b430:	68ab      	ldr	r3, [r5, #8]
 800b432:	f033 0302 	bics.w	r3, r3, #2
 800b436:	d004      	beq.n	800b442 <HAL_TIM_PWM_ConfigChannel+0x4a>
 800b438:	f240 618c 	movw	r1, #1676	; 0x68c
 800b43c:	489c      	ldr	r0, [pc, #624]	; (800b6b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b43e:	f003 fe01 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b442:	692b      	ldr	r3, [r5, #16]
 800b444:	f033 0304 	bics.w	r3, r3, #4
 800b448:	d004      	beq.n	800b454 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800b44a:	f240 618d 	movw	r1, #1677	; 0x68d
 800b44e:	4898      	ldr	r0, [pc, #608]	; (800b6b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b450:	f003 fdf8 	bl	800f044 <assert_failed>
  __HAL_LOCK(htim);
 800b454:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b458:	2b01      	cmp	r3, #1
 800b45a:	f000 8196 	beq.w	800b78a <HAL_TIM_PWM_ConfigChannel+0x392>
 800b45e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b460:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800b462:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b466:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800b46a:	2e14      	cmp	r6, #20
 800b46c:	d84c      	bhi.n	800b508 <HAL_TIM_PWM_ConfigChannel+0x110>
 800b46e:	e8df f016 	tbh	[pc, r6, lsl #1]
 800b472:	00e2      	.short	0x00e2
 800b474:	004b004b 	.word	0x004b004b
 800b478:	012b004b 	.word	0x012b004b
 800b47c:	004b004b 	.word	0x004b004b
 800b480:	015e004b 	.word	0x015e004b
 800b484:	004b004b 	.word	0x004b004b
 800b488:	00b3004b 	.word	0x00b3004b
 800b48c:	004b004b 	.word	0x004b004b
 800b490:	0015004b 	.word	0x0015004b
 800b494:	004b004b 	.word	0x004b004b
 800b498:	005e004b 	.word	0x005e004b
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	4f85      	ldr	r7, [pc, #532]	; (800b6b4 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b4a0:	42bb      	cmp	r3, r7
 800b4a2:	d008      	beq.n	800b4b6 <HAL_TIM_PWM_ConfigChannel+0xbe>
 800b4a4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800b6bc <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800b4a8:	4543      	cmp	r3, r8
 800b4aa:	d004      	beq.n	800b4b6 <HAL_TIM_PWM_ConfigChannel+0xbe>
 800b4ac:	f8df 9214 	ldr.w	r9, [pc, #532]	; 800b6c4 <HAL_TIM_PWM_ConfigChannel+0x2cc>
 800b4b0:	454b      	cmp	r3, r9
 800b4b2:	f040 816d 	bne.w	800b790 <HAL_TIM_PWM_ConfigChannel+0x398>
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4b6:	6a1a      	ldr	r2, [r3, #32]
 800b4b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b4bc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800b4be:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b4c0:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b4c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4c4:	68a8      	ldr	r0, [r5, #8]
  tmpccmrx |= OC_Config->OCMode;
 800b4c6:	6829      	ldr	r1, [r5, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800b4cc:	f427 3c00 	bic.w	ip, r7, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4d4:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800b4d8:	430a      	orrs	r2, r1
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4da:	6968      	ldr	r0, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4dc:	f426 3180 	bic.w	r1, r6, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4e0:	ea41 2600 	orr.w	r6, r1, r0, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800b4e4:	6869      	ldr	r1, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800b4e6:	605e      	str	r6, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b4e8:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800b4ea:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;  
 800b4ec:	f8c3 c020 	str.w	ip, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b4f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800b4f2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b4f4:	f041 0108 	orr.w	r1, r1, #8
 800b4f8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b4fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b4fc:	f021 0104 	bic.w	r1, r1, #4
 800b500:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800b502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b504:	4302      	orrs	r2, r0
 800b506:	655a      	str	r2, [r3, #84]	; 0x54
  htim->State = HAL_TIM_STATE_READY;
 800b508:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800b50a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b50c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b510:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_CHANNELS(Channel)); 
 800b518:	4b67      	ldr	r3, [pc, #412]	; (800b6b8 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 800b51a:	40d3      	lsrs	r3, r2
 800b51c:	07db      	lsls	r3, r3, #31
 800b51e:	f53f af76 	bmi.w	800b40e <HAL_TIM_PWM_ConfigChannel+0x16>
 800b522:	f240 618a 	movw	r1, #1674	; 0x68a
 800b526:	4862      	ldr	r0, [pc, #392]	; (800b6b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b528:	f003 fd8c 	bl	800f044 <assert_failed>
 800b52c:	e76f      	b.n	800b40e <HAL_TIM_PWM_ConfigChannel+0x16>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	4a60      	ldr	r2, [pc, #384]	; (800b6b4 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d00d      	beq.n	800b552 <HAL_TIM_PWM_ConfigChannel+0x15a>
 800b536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d009      	beq.n	800b552 <HAL_TIM_PWM_ConfigChannel+0x15a>
 800b53e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b542:	4293      	cmp	r3, r2
 800b544:	d005      	beq.n	800b552 <HAL_TIM_PWM_ConfigChannel+0x15a>
 800b546:	f240 61ee 	movw	r1, #1774	; 0x6ee
 800b54a:	4859      	ldr	r0, [pc, #356]	; (800b6b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b54c:	f003 fd7a 	bl	800f044 <assert_failed>
 800b550:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b552:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b554:	68af      	ldr	r7, [r5, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b556:	682e      	ldr	r6, [r5, #0]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b558:	f8df e158 	ldr.w	lr, [pc, #344]	; 800b6b4 <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b55c:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 800b560:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 800b562:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b564:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b56a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b56e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b572:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b576:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b578:	ea41 5107 	orr.w	r1, r1, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b57c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b580:	d011      	beq.n	800b5a6 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b582:	4e4e      	ldr	r6, [pc, #312]	; (800b6bc <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800b584:	42b3      	cmp	r3, r6
 800b586:	d00e      	beq.n	800b5a6 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b588:	484d      	ldr	r0, [pc, #308]	; (800b6c0 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800b58a:	4283      	cmp	r3, r0
 800b58c:	d00b      	beq.n	800b5a6 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b58e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b592:	4283      	cmp	r3, r0
 800b594:	d007      	beq.n	800b5a6 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b596:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b59a:	4283      	cmp	r3, r0
 800b59c:	d003      	beq.n	800b5a6 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800b59e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800b5a2:	4283      	cmp	r3, r0
 800b5a4:	d104      	bne.n	800b5b0 <HAL_TIM_PWM_ConfigChannel+0x1b8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5a6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5a8:	f42c 2080 	bic.w	r0, ip, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5ac:	ea40 2c86 	orr.w	ip, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 800b5b0:	6868      	ldr	r0, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800b5b2:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b5b6:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800b5b8:	65d8      	str	r0, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;  
 800b5ba:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800b5be:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5c0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800b5c4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5c8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b5cc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800b5ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5d0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b5d4:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800b5d6:	e797      	b.n	800b508 <HAL_TIM_PWM_ConfigChannel+0x110>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
 800b5d8:	6820      	ldr	r0, [r4, #0]
 800b5da:	4b36      	ldr	r3, [pc, #216]	; (800b6b4 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b5dc:	4298      	cmp	r0, r3
 800b5de:	d018      	beq.n	800b612 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b5e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b5e4:	d015      	beq.n	800b612 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b5e6:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b5ea:	4298      	cmp	r0, r3
 800b5ec:	d011      	beq.n	800b612 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b5ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5f2:	4298      	cmp	r0, r3
 800b5f4:	d00d      	beq.n	800b612 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b5f6:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b5fa:	4298      	cmp	r0, r3
 800b5fc:	d009      	beq.n	800b612 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b5fe:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800b602:	4298      	cmp	r0, r3
 800b604:	d005      	beq.n	800b612 <HAL_TIM_PWM_ConfigChannel+0x21a>
 800b606:	482a      	ldr	r0, [pc, #168]	; (800b6b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b608:	f240 61cc 	movw	r1, #1740	; 0x6cc
 800b60c:	f003 fd1a 	bl	800f044 <assert_failed>
 800b610:	6820      	ldr	r0, [r4, #0]
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b612:	4629      	mov	r1, r5
 800b614:	f7ff fcba 	bl	800af8c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b618:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800b61a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b61c:	69d9      	ldr	r1, [r3, #28]
 800b61e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800b622:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b624:	69d9      	ldr	r1, [r3, #28]
 800b626:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b62a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800b62c:	69da      	ldr	r2, [r3, #28]
 800b62e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b632:	61da      	str	r2, [r3, #28]
    break;
 800b634:	e768      	b.n	800b508 <HAL_TIM_PWM_ConfigChannel+0x110>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	4b1e      	ldr	r3, [pc, #120]	; (800b6b4 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800b63a:	4298      	cmp	r0, r3
 800b63c:	d024      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b63e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b642:	d021      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b644:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b648:	4298      	cmp	r0, r3
 800b64a:	d01d      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b64c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b650:	4298      	cmp	r0, r3
 800b652:	d019      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b654:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b658:	4298      	cmp	r0, r3
 800b65a:	d015      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b65c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b660:	4298      	cmp	r0, r3
 800b662:	d011      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b668:	4298      	cmp	r0, r3
 800b66a:	d00d      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b66c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b670:	4298      	cmp	r0, r3
 800b672:	d009      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b678:	4298      	cmp	r0, r3
 800b67a:	d005      	beq.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x290>
 800b67c:	480c      	ldr	r0, [pc, #48]	; (800b6b0 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800b67e:	f240 6199 	movw	r1, #1689	; 0x699
 800b682:	f003 fcdf 	bl	800f044 <assert_failed>
 800b686:	6820      	ldr	r0, [r4, #0]
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b688:	4629      	mov	r1, r5
 800b68a:	f7ff fabf 	bl	800ac0c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b68e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b690:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b692:	6999      	ldr	r1, [r3, #24]
 800b694:	f041 0108 	orr.w	r1, r1, #8
 800b698:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b69a:	6999      	ldr	r1, [r3, #24]
 800b69c:	f021 0104 	bic.w	r1, r1, #4
 800b6a0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	4302      	orrs	r2, r0
 800b6a6:	619a      	str	r2, [r3, #24]
    break;
 800b6a8:	e72e      	b.n	800b508 <HAL_TIM_PWM_ConfigChannel+0x110>
 800b6aa:	bf00      	nop
 800b6ac:	00010040 	.word	0x00010040
 800b6b0:	0801520c 	.word	0x0801520c
 800b6b4:	40012c00 	.word	0x40012c00
 800b6b8:	00111111 	.word	0x00111111
 800b6bc:	40013400 	.word	0x40013400
 800b6c0:	40014000 	.word	0x40014000
 800b6c4:	40015000 	.word	0x40015000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
 800b6c8:	6820      	ldr	r0, [r4, #0]
 800b6ca:	4b4a      	ldr	r3, [pc, #296]	; (800b7f4 <HAL_TIM_PWM_ConfigChannel+0x3fc>)
 800b6cc:	4298      	cmp	r0, r3
 800b6ce:	d01c      	beq.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x312>
 800b6d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b6d4:	d019      	beq.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x312>
 800b6d6:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b6da:	4298      	cmp	r0, r3
 800b6dc:	d015      	beq.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x312>
 800b6de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6e2:	4298      	cmp	r0, r3
 800b6e4:	d011      	beq.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x312>
 800b6e6:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b6ea:	4298      	cmp	r0, r3
 800b6ec:	d00d      	beq.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x312>
 800b6ee:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800b6f2:	4298      	cmp	r0, r3
 800b6f4:	d009      	beq.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x312>
 800b6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6fa:	4298      	cmp	r0, r3
 800b6fc:	d005      	beq.n	800b70a <HAL_TIM_PWM_ConfigChannel+0x312>
 800b6fe:	483e      	ldr	r0, [pc, #248]	; (800b7f8 <HAL_TIM_PWM_ConfigChannel+0x400>)
 800b700:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800b704:	f003 fc9e 	bl	800f044 <assert_failed>
 800b708:	6820      	ldr	r0, [r4, #0]
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7ff fb1a 	bl	800ad44 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b710:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b712:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b714:	6999      	ldr	r1, [r3, #24]
 800b716:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800b71a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b71c:	6999      	ldr	r1, [r3, #24]
 800b71e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b722:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b724:	699a      	ldr	r2, [r3, #24]
 800b726:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800b72a:	619a      	str	r2, [r3, #24]
    break;
 800b72c:	e6ec      	b.n	800b508 <HAL_TIM_PWM_ConfigChannel+0x110>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
 800b72e:	6820      	ldr	r0, [r4, #0]
 800b730:	4b30      	ldr	r3, [pc, #192]	; (800b7f4 <HAL_TIM_PWM_ConfigChannel+0x3fc>)
 800b732:	4298      	cmp	r0, r3
 800b734:	d018      	beq.n	800b768 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b736:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b73a:	d015      	beq.n	800b768 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b73c:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800b740:	4298      	cmp	r0, r3
 800b742:	d011      	beq.n	800b768 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b748:	4298      	cmp	r0, r3
 800b74a:	d00d      	beq.n	800b768 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b74c:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 800b750:	4298      	cmp	r0, r3
 800b752:	d009      	beq.n	800b768 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b754:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800b758:	4298      	cmp	r0, r3
 800b75a:	d005      	beq.n	800b768 <HAL_TIM_PWM_ConfigChannel+0x370>
 800b75c:	4826      	ldr	r0, [pc, #152]	; (800b7f8 <HAL_TIM_PWM_ConfigChannel+0x400>)
 800b75e:	f240 61bb 	movw	r1, #1723	; 0x6bb
 800b762:	f003 fc6f 	bl	800f044 <assert_failed>
 800b766:	6820      	ldr	r0, [r4, #0]
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b768:	4629      	mov	r1, r5
 800b76a:	f7ff fb7d 	bl	800ae68 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b76e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800b770:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b772:	69d9      	ldr	r1, [r3, #28]
 800b774:	f041 0108 	orr.w	r1, r1, #8
 800b778:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b77a:	69d9      	ldr	r1, [r3, #28]
 800b77c:	f021 0104 	bic.w	r1, r1, #4
 800b780:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800b782:	69da      	ldr	r2, [r3, #28]
 800b784:	4302      	orrs	r2, r0
 800b786:	61da      	str	r2, [r3, #28]
    break;
 800b788:	e6be      	b.n	800b508 <HAL_TIM_PWM_ConfigChannel+0x110>
  __HAL_LOCK(htim);
 800b78a:	2002      	movs	r0, #2
}
 800b78c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
 800b790:	f240 61dd 	movw	r1, #1757	; 0x6dd
 800b794:	4818      	ldr	r0, [pc, #96]	; (800b7f8 <HAL_TIM_PWM_ConfigChannel+0x400>)
 800b796:	f003 fc55 	bl	800f044 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b79a:	6823      	ldr	r3, [r4, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b79c:	f8d5 e008 	ldr.w	lr, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7a0:	6a19      	ldr	r1, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800b7a2:	6828      	ldr	r0, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7a4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b7a8:	6219      	str	r1, [r3, #32]
  tmpccer = TIMx->CCER;
 800b7aa:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2; 
 800b7ac:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800b7ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800b7b4:	f421 3c00 	bic.w	ip, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b7bc:	42bb      	cmp	r3, r7
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b7be:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800b7c2:	ea42 0200 	orr.w	r2, r2, r0
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c6:	f43f ae88 	beq.w	800b4da <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b7ca:	4543      	cmp	r3, r8
 800b7cc:	f43f ae85 	beq.w	800b4da <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b7d0:	490a      	ldr	r1, [pc, #40]	; (800b7fc <HAL_TIM_PWM_ConfigChannel+0x404>)
 800b7d2:	428b      	cmp	r3, r1
 800b7d4:	f43f ae81 	beq.w	800b4da <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b7d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7dc:	428b      	cmp	r3, r1
 800b7de:	f43f ae7c 	beq.w	800b4da <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b7e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7e6:	428b      	cmp	r3, r1
 800b7e8:	f43f ae77 	beq.w	800b4da <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b7ec:	454b      	cmp	r3, r9
 800b7ee:	f47f ae79 	bne.w	800b4e4 <HAL_TIM_PWM_ConfigChannel+0xec>
 800b7f2:	e672      	b.n	800b4da <HAL_TIM_PWM_ConfigChannel+0xe2>
 800b7f4:	40012c00 	.word	0x40012c00
 800b7f8:	0801520c 	.word	0x0801520c
 800b7fc:	40014000 	.word	0x40014000

0800b800 <HAL_TIMEx_MasterConfigSynchronization>:
{
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800b802:	4a3f      	ldr	r2, [pc, #252]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b804:	6803      	ldr	r3, [r0, #0]
 800b806:	4293      	cmp	r3, r2
{
 800b808:	4605      	mov	r5, r0
 800b80a:	460e      	mov	r6, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800b80c:	d023      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b812:	d020      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b814:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b818:	4293      	cmp	r3, r2
 800b81a:	d01c      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b81c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b820:	4293      	cmp	r3, r2
 800b822:	d018      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b828:	4293      	cmp	r3, r2
 800b82a:	d014      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b82c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b830:	4293      	cmp	r3, r2
 800b832:	d010      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b834:	f502 3290 	add.w	r2, r2, #73728	; 0x12000
 800b838:	4293      	cmp	r3, r2
 800b83a:	d00c      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b83c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800b840:	4293      	cmp	r3, r2
 800b842:	d008      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b844:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b848:	4293      	cmp	r3, r2
 800b84a:	d004      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b84c:	f240 7117 	movw	r1, #1815	; 0x717
 800b850:	482c      	ldr	r0, [pc, #176]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b852:	f003 fbf7 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b856:	6833      	ldr	r3, [r6, #0]
 800b858:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b85c:	d006      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800b85e:	2b40      	cmp	r3, #64	; 0x40
 800b860:	d004      	beq.n	800b86c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 800b862:	f44f 61e3 	mov.w	r1, #1816	; 0x718
 800b866:	4827      	ldr	r0, [pc, #156]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b868:	f003 fbec 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b86c:	68b3      	ldr	r3, [r6, #8]
 800b86e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800b872:	d13a      	bne.n	800b8ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
  __HAL_LOCK(htim);
 800b874:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d03f      	beq.n	800b8fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>
  tmpcr2 = htim->Instance->CR2;
 800b87c:	682b      	ldr	r3, [r5, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b87e:	4a20      	ldr	r2, [pc, #128]	; (800b900 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
  tmpcr2 = htim->Instance->CR2;
 800b880:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800b882:	689f      	ldr	r7, [r3, #8]
  __HAL_LOCK(htim);
 800b884:	2101      	movs	r1, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b886:	4293      	cmp	r3, r2
  __HAL_LOCK(htim);
 800b888:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b88c:	d007      	beq.n	800b89e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800b88e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b892:	4293      	cmp	r3, r2
 800b894:	d003      	beq.n	800b89e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800b896:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d116      	bne.n	800b8cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800b89e:	6872      	ldr	r2, [r6, #4]
 800b8a0:	f432 1140 	bics.w	r1, r2, #3145728	; 0x300000
 800b8a4:	d00f      	beq.n	800b8c6 <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 800b8a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800b8aa:	d00c      	beq.n	800b8c6 <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 800b8ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b8b0:	d009      	beq.n	800b8c6 <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 800b8b2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800b8b6:	d006      	beq.n	800b8c6 <HAL_TIMEx_MasterConfigSynchronization+0xc6>
 800b8b8:	f44f 61e5 	mov.w	r1, #1832	; 0x728
 800b8bc:	4811      	ldr	r0, [pc, #68]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8be:	f003 fbc1 	bl	800f044 <assert_failed>
 800b8c2:	6872      	ldr	r2, [r6, #4]
 800b8c4:	682b      	ldr	r3, [r5, #0]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8c6:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8ca:	4314      	orrs	r4, r2
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8cc:	68b2      	ldr	r2, [r6, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8ce:	6831      	ldr	r1, [r6, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8d0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b8d4:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8d8:	4317      	orrs	r7, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8da:	430c      	orrs	r4, r1
  __HAL_UNLOCK(htim);
 800b8dc:	2200      	movs	r2, #0
  htim->Instance->CR2 = tmpcr2;
 800b8de:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 800b8e0:	4610      	mov	r0, r2
  htim->Instance->SMCR = tmpsmcr;
 800b8e2:	609f      	str	r7, [r3, #8]
  __HAL_UNLOCK(htim);
 800b8e4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
} 
 800b8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b8ea:	f240 7119 	movw	r1, #1817	; 0x719
 800b8ee:	4805      	ldr	r0, [pc, #20]	; (800b904 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8f0:	f003 fba8 	bl	800f044 <assert_failed>
  __HAL_LOCK(htim);
 800b8f4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d1bf      	bne.n	800b87c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800b8fc:	2002      	movs	r0, #2
} 
 800b8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b900:	40012c00 	.word	0x40012c00
 800b904:	0801520c 	.word	0x0801520c

0800b908 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b908:	4a70      	ldr	r2, [pc, #448]	; (800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>)
 800b90a:	6803      	ldr	r3, [r0, #0]
 800b90c:	4293      	cmp	r3, r2
{
 800b90e:	b570      	push	{r4, r5, r6, lr}
 800b910:	4606      	mov	r6, r0
 800b912:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b914:	d018      	beq.n	800b948 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d014      	beq.n	800b948 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b91e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800b922:	4293      	cmp	r3, r2
 800b924:	d010      	beq.n	800b948 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d00c      	beq.n	800b948 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b92e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b932:	4293      	cmp	r3, r2
 800b934:	d008      	beq.n	800b948 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d004      	beq.n	800b948 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 800b93e:	f240 7184 	movw	r1, #1924	; 0x784
 800b942:	4863      	ldr	r0, [pc, #396]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800b944:	f003 fb7e 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b948:	682b      	ldr	r3, [r5, #0]
 800b94a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800b94e:	f040 80a5 	bne.w	800ba9c <HAL_TIMEx_ConfigBreakDeadTime+0x194>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b952:	686b      	ldr	r3, [r5, #4]
 800b954:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800b958:	f040 809a 	bne.w	800ba90 <HAL_TIMEx_ConfigBreakDeadTime+0x188>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b95c:	68ab      	ldr	r3, [r5, #8]
 800b95e:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800b962:	d004      	beq.n	800b96e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800b964:	f240 7187 	movw	r1, #1927	; 0x787
 800b968:	4859      	ldr	r0, [pc, #356]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800b96a:	f003 fb6b 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b96e:	68eb      	ldr	r3, [r5, #12]
 800b970:	2bff      	cmp	r3, #255	; 0xff
 800b972:	d87d      	bhi.n	800ba70 <HAL_TIMEx_ConfigBreakDeadTime+0x168>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b974:	692b      	ldr	r3, [r5, #16]
 800b976:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800b97a:	f040 8083 	bne.w	800ba84 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b97e:	696b      	ldr	r3, [r5, #20]
 800b980:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800b984:	d004      	beq.n	800b990 <HAL_TIMEx_ConfigBreakDeadTime+0x88>
 800b986:	f240 718a 	movw	r1, #1930	; 0x78a
 800b98a:	4851      	ldr	r0, [pc, #324]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800b98c:	f003 fb5a 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800b990:	69ab      	ldr	r3, [r5, #24]
 800b992:	2b0f      	cmp	r3, #15
 800b994:	d858      	bhi.n	800ba48 <HAL_TIMEx_ConfigBreakDeadTime+0x140>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b996:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b998:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800b99c:	d15d      	bne.n	800ba5a <HAL_TIMEx_ConfigBreakDeadTime+0x152>
  __HAL_LOCK(htim);
 800b99e:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d062      	beq.n	800ba6c <HAL_TIMEx_ConfigBreakDeadTime+0x164>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9a6:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b9aa:	e9d5 2100 	ldrd	r2, r1, [r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9ae:	f423 7440 	bic.w	r4, r3, #768	; 0x300
 800b9b2:	4304      	orrs	r4, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9b4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800b9b8:	430c      	orrs	r4, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b9ba:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800b9be:	4314      	orrs	r4, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b9c0:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b9c4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800b9c8:	430c      	orrs	r4, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b9ca:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b9ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800b9d0:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b9d2:	4314      	orrs	r4, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b9d4:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 800b9d8:	431c      	orrs	r4, r3
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b9da:	4a3c      	ldr	r2, [pc, #240]	; (800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x1c4>)
 800b9dc:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800b9de:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 800b9e2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b9e6:	4293      	cmp	r3, r2
  __HAL_LOCK(htim);
 800b9e8:	f04f 0101 	mov.w	r1, #1
 800b9ec:	f886 103c 	strb.w	r1, [r6, #60]	; 0x3c
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b9f0:	d007      	beq.n	800ba02 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b9f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d003      	beq.n	800ba02 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b9fa:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d11c      	bne.n	800ba3c <HAL_TIMEx_ConfigBreakDeadTime+0x134>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800ba02:	69eb      	ldr	r3, [r5, #28]
 800ba04:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800ba08:	d155      	bne.n	800bab6 <HAL_TIMEx_ConfigBreakDeadTime+0x1ae>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800ba0a:	6a2b      	ldr	r3, [r5, #32]
 800ba0c:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 800ba10:	d004      	beq.n	800ba1c <HAL_TIMEx_ConfigBreakDeadTime+0x114>
 800ba12:	f240 71a2 	movw	r1, #1954	; 0x7a2
 800ba16:	482e      	ldr	r0, [pc, #184]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba18:	f003 fb14 	bl	800f044 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800ba1c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ba1e:	2a0f      	cmp	r2, #15
 800ba20:	d842      	bhi.n	800baa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1a0>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba22:	e9d5 0107 	ldrd	r0, r1, [r5, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800ba26:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 800ba2a:	ea44 5402 	orr.w	r4, r4, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba2e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800ba32:	4304      	orrs	r4, r0
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba34:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 800ba38:	6833      	ldr	r3, [r6, #0]
 800ba3a:	430c      	orrs	r4, r1
  __HAL_UNLOCK(htim);
 800ba3c:	2200      	movs	r2, #0
  htim->Instance->BDTR = tmpbdtr;
 800ba3e:	645c      	str	r4, [r3, #68]	; 0x44
  return HAL_OK;
 800ba40:	4610      	mov	r0, r2
  __HAL_UNLOCK(htim);
 800ba42:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
}
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800ba48:	f240 718b 	movw	r1, #1931	; 0x78b
 800ba4c:	4820      	ldr	r0, [pc, #128]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba4e:	f003 faf9 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800ba52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ba54:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800ba58:	d0a1      	beq.n	800b99e <HAL_TIMEx_ConfigBreakDeadTime+0x96>
 800ba5a:	f240 718c 	movw	r1, #1932	; 0x78c
 800ba5e:	481c      	ldr	r0, [pc, #112]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba60:	f003 faf0 	bl	800f044 <assert_failed>
  __HAL_LOCK(htim);
 800ba64:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d19c      	bne.n	800b9a6 <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
 800ba6c:	2002      	movs	r0, #2
}
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800ba70:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800ba74:	4816      	ldr	r0, [pc, #88]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba76:	f003 fae5 	bl	800f044 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800ba7a:	692b      	ldr	r3, [r5, #16]
 800ba7c:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800ba80:	f43f af7d 	beq.w	800b97e <HAL_TIMEx_ConfigBreakDeadTime+0x76>
 800ba84:	f240 7189 	movw	r1, #1929	; 0x789
 800ba88:	4811      	ldr	r0, [pc, #68]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba8a:	f003 fadb 	bl	800f044 <assert_failed>
 800ba8e:	e776      	b.n	800b97e <HAL_TIMEx_ConfigBreakDeadTime+0x76>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800ba90:	f240 7186 	movw	r1, #1926	; 0x786
 800ba94:	480e      	ldr	r0, [pc, #56]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800ba96:	f003 fad5 	bl	800f044 <assert_failed>
 800ba9a:	e75f      	b.n	800b95c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800ba9c:	f240 7185 	movw	r1, #1925	; 0x785
 800baa0:	480b      	ldr	r0, [pc, #44]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800baa2:	f003 facf 	bl	800f044 <assert_failed>
 800baa6:	e754      	b.n	800b952 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800baa8:	f240 71a3 	movw	r1, #1955	; 0x7a3
 800baac:	4808      	ldr	r0, [pc, #32]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800baae:	f003 fac9 	bl	800f044 <assert_failed>
 800bab2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800bab4:	e7b5      	b.n	800ba22 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800bab6:	f240 71a1 	movw	r1, #1953	; 0x7a1
 800baba:	4805      	ldr	r0, [pc, #20]	; (800bad0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c8>)
 800babc:	f003 fac2 	bl	800f044 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800bac0:	6a2b      	ldr	r3, [r5, #32]
 800bac2:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 800bac6:	d0a9      	beq.n	800ba1c <HAL_TIMEx_ConfigBreakDeadTime+0x114>
 800bac8:	e7a3      	b.n	800ba12 <HAL_TIMEx_ConfigBreakDeadTime+0x10a>
 800baca:	bf00      	nop
 800bacc:	40012c00 	.word	0x40012c00
 800bad0:	0801520c 	.word	0x0801520c

0800bad4 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bad6:	460f      	mov	r7, r1
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800bad8:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 800badc:	2920      	cmp	r1, #32
{
 800bade:	b083      	sub	sp, #12
  if(huart->gState == HAL_UART_STATE_READY)
 800bae0:	d130      	bne.n	800bb44 <HAL_UART_Transmit+0x70>
  {
    if((pData == NULL ) || (Size == 0U))
 800bae2:	b397      	cbz	r7, 800bb4a <HAL_UART_Transmit+0x76>
 800bae4:	9201      	str	r2, [sp, #4]
 800bae6:	b382      	cbz	r2, 800bb4a <HAL_UART_Transmit+0x76>
 800bae8:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800baea:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800baee:	2b01      	cmp	r3, #1
 800baf0:	4604      	mov	r4, r0
 800baf2:	d027      	beq.n	800bb44 <HAL_UART_Transmit+0x70>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baf4:	2300      	movs	r3, #0
 800baf6:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_LOCK(huart);
 800baf8:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bafa:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800bafc:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb00:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800bb04:	f7f9 fd10 	bl	8005528 <HAL_GetTick>

    huart->TxXferSize = Size;
 800bb08:	9a01      	ldr	r2, [sp, #4]
 800bb0a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800bb0e:	4606      	mov	r6, r0
 800bb10:	6820      	ldr	r0, [r4, #0]
    huart->TxXferCount = Size;
 800bb12:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800bb16:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	b313      	cbz	r3, 800bb64 <HAL_UART_Transmit+0x90>
    {
      huart->TxXferCount--;
 800bb1e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800bb22:	3a01      	subs	r2, #1
 800bb24:	b292      	uxth	r2, r2
 800bb26:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800bb2a:	1c69      	adds	r1, r5, #1
 800bb2c:	d126      	bne.n	800bb7c <HAL_UART_Transmit+0xa8>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb2e:	69c2      	ldr	r2, [r0, #28]
 800bb30:	0612      	lsls	r2, r2, #24
 800bb32:	d5fc      	bpl.n	800bb2e <HAL_UART_Transmit+0x5a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb34:	68a3      	ldr	r3, [r4, #8]
 800bb36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb3a:	d03b      	beq.n	800bbb4 <HAL_UART_Transmit+0xe0>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800bb3c:	783b      	ldrb	r3, [r7, #0]
 800bb3e:	8503      	strh	r3, [r0, #40]	; 0x28
 800bb40:	3701      	adds	r7, #1
 800bb42:	e7e8      	b.n	800bb16 <HAL_UART_Transmit+0x42>
    return HAL_BUSY;
 800bb44:	2002      	movs	r0, #2
}
 800bb46:	b003      	add	sp, #12
 800bb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800bb4a:	2001      	movs	r0, #1
}
 800bb4c:	b003      	add	sp, #12
 800bb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb50:	69c3      	ldr	r3, [r0, #28]
 800bb52:	065b      	lsls	r3, r3, #25
 800bb54:	d40b      	bmi.n	800bb6e <HAL_UART_Transmit+0x9a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800bb56:	b1dd      	cbz	r5, 800bb90 <HAL_UART_Transmit+0xbc>
 800bb58:	f7f9 fce6 	bl	8005528 <HAL_GetTick>
 800bb5c:	1b80      	subs	r0, r0, r6
 800bb5e:	4285      	cmp	r5, r0
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	d315      	bcc.n	800bb90 <HAL_UART_Transmit+0xbc>
 800bb64:	1c69      	adds	r1, r5, #1
 800bb66:	d1f3      	bne.n	800bb50 <HAL_UART_Transmit+0x7c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb68:	69c3      	ldr	r3, [r0, #28]
 800bb6a:	065a      	lsls	r2, r3, #25
 800bb6c:	d5fc      	bpl.n	800bb68 <HAL_UART_Transmit+0x94>
    huart->gState = HAL_UART_STATE_READY;
 800bb6e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800bb70:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 800bb72:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800bb76:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800bb7a:	e7e4      	b.n	800bb46 <HAL_UART_Transmit+0x72>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb7c:	69c3      	ldr	r3, [r0, #28]
 800bb7e:	061b      	lsls	r3, r3, #24
 800bb80:	d4d8      	bmi.n	800bb34 <HAL_UART_Transmit+0x60>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800bb82:	b12d      	cbz	r5, 800bb90 <HAL_UART_Transmit+0xbc>
 800bb84:	f7f9 fcd0 	bl	8005528 <HAL_GetTick>
 800bb88:	1b80      	subs	r0, r0, r6
 800bb8a:	4285      	cmp	r5, r0
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	d2cc      	bcs.n	800bb2a <HAL_UART_Transmit+0x56>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb90:	6803      	ldr	r3, [r0, #0]
 800bb92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb96:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb98:	6883      	ldr	r3, [r0, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800bb9a:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb9c:	f023 0301 	bic.w	r3, r3, #1
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bba0:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba2:	6083      	str	r3, [r0, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800bba4:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
      return HAL_TIMEOUT;
 800bba8:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800bbaa:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800bbae:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
 800bbb2:	e7c8      	b.n	800bb46 <HAL_UART_Transmit+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1c0      	bne.n	800bb3c <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800bbba:	f837 3b02 	ldrh.w	r3, [r7], #2
 800bbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc2:	8503      	strh	r3, [r0, #40]	; 0x28
        pData += 2U;
 800bbc4:	e7a7      	b.n	800bb16 <HAL_UART_Transmit+0x42>
 800bbc6:	bf00      	nop

0800bbc8 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800bbc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bbca:	2bff      	cmp	r3, #255	; 0xff
{
 800bbcc:	b510      	push	{r4, lr}
 800bbce:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800bbd0:	f200 8095 	bhi.w	800bcfe <UART_AdvFeatureConfig+0x136>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbd4:	07da      	lsls	r2, r3, #31
 800bbd6:	d50a      	bpl.n	800bbee <UART_AdvFeatureConfig+0x26>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800bbd8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bbda:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 800bbde:	f040 8095 	bne.w	800bd0c <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbe2:	6820      	ldr	r0, [r4, #0]
 800bbe4:	6842      	ldr	r2, [r0, #4]
 800bbe6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bbea:	430a      	orrs	r2, r1
 800bbec:	6042      	str	r2, [r0, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbee:	0798      	lsls	r0, r3, #30
 800bbf0:	d50a      	bpl.n	800bc08 <UART_AdvFeatureConfig+0x40>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800bbf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bbf4:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800bbf8:	f040 8090 	bne.w	800bd1c <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbfc:	6820      	ldr	r0, [r4, #0]
 800bbfe:	6842      	ldr	r2, [r0, #4]
 800bc00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bc04:	430a      	orrs	r2, r1
 800bc06:	6042      	str	r2, [r0, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc08:	0759      	lsls	r1, r3, #29
 800bc0a:	d50a      	bpl.n	800bc22 <UART_AdvFeatureConfig+0x5a>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800bc0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bc0e:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800bc12:	f040 808b 	bne.w	800bd2c <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc16:	6820      	ldr	r0, [r4, #0]
 800bc18:	6842      	ldr	r2, [r0, #4]
 800bc1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	6042      	str	r2, [r0, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc22:	071a      	lsls	r2, r3, #28
 800bc24:	d50a      	bpl.n	800bc3c <UART_AdvFeatureConfig+0x74>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800bc26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc28:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 800bc2c:	f040 8086 	bne.w	800bd3c <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc30:	6820      	ldr	r0, [r4, #0]
 800bc32:	6842      	ldr	r2, [r0, #4]
 800bc34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc38:	430a      	orrs	r2, r1
 800bc3a:	6042      	str	r2, [r0, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc3c:	06d8      	lsls	r0, r3, #27
 800bc3e:	d50a      	bpl.n	800bc56 <UART_AdvFeatureConfig+0x8e>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800bc40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bc42:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800bc46:	f040 8081 	bne.w	800bd4c <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc4a:	6820      	ldr	r0, [r4, #0]
 800bc4c:	6882      	ldr	r2, [r0, #8]
 800bc4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bc52:	430a      	orrs	r2, r1
 800bc54:	6082      	str	r2, [r0, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc56:	0699      	lsls	r1, r3, #26
 800bc58:	d509      	bpl.n	800bc6e <UART_AdvFeatureConfig+0xa6>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800bc5a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bc5c:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 800bc60:	d17c      	bne.n	800bd5c <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc62:	6820      	ldr	r0, [r4, #0]
 800bc64:	6882      	ldr	r2, [r0, #8]
 800bc66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	6082      	str	r2, [r0, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc6e:	065a      	lsls	r2, r3, #25
 800bc70:	d52b      	bpl.n	800bcca <UART_AdvFeatureConfig+0x102>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	4a46      	ldr	r2, [pc, #280]	; (800bd90 <UART_AdvFeatureConfig+0x1c8>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00c      	beq.n	800bc94 <UART_AdvFeatureConfig+0xcc>
 800bc7a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d008      	beq.n	800bc94 <UART_AdvFeatureConfig+0xcc>
 800bc82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d004      	beq.n	800bc94 <UART_AdvFeatureConfig+0xcc>
 800bc8a:	f640 01d1 	movw	r1, #2257	; 0x8d1
 800bc8e:	4841      	ldr	r0, [pc, #260]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bc90:	f003 f9d8 	bl	800f044 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800bc94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc96:	b35b      	cbz	r3, 800bcf0 <UART_AdvFeatureConfig+0x128>
 800bc98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc9c:	d166      	bne.n	800bd6c <UART_AdvFeatureConfig+0x1a4>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc9e:	6822      	ldr	r2, [r4, #0]
 800bca0:	6853      	ldr	r3, [r2, #4]
 800bca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bca6:	6053      	str	r3, [r2, #4]
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800bca8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bcaa:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 800bcae:	d006      	beq.n	800bcbe <UART_AdvFeatureConfig+0xf6>
 800bcb0:	4838      	ldr	r0, [pc, #224]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bcb2:	f640 01d7 	movw	r1, #2263	; 0x8d7
 800bcb6:	f003 f9c5 	bl	800f044 <assert_failed>
 800bcba:	6822      	ldr	r2, [r4, #0]
 800bcbc:	6c60      	ldr	r0, [r4, #68]	; 0x44
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcbe:	6851      	ldr	r1, [r2, #4]
 800bcc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcc2:	f421 01c0 	bic.w	r1, r1, #6291456	; 0x600000
 800bcc6:	4301      	orrs	r1, r0
 800bcc8:	6051      	str	r1, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bcca:	061b      	lsls	r3, r3, #24
 800bccc:	d50f      	bpl.n	800bcee <UART_AdvFeatureConfig+0x126>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800bcce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800bcd0:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 800bcd4:	d005      	beq.n	800bce2 <UART_AdvFeatureConfig+0x11a>
 800bcd6:	f640 01df 	movw	r1, #2271	; 0x8df
 800bcda:	482e      	ldr	r0, [pc, #184]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bcdc:	f003 f9b2 	bl	800f044 <assert_failed>
 800bce0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bce2:	6821      	ldr	r1, [r4, #0]
 800bce4:	684b      	ldr	r3, [r1, #4]
 800bce6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bcea:	4313      	orrs	r3, r2
 800bcec:	604b      	str	r3, [r1, #4]
}
 800bcee:	bd10      	pop	{r4, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bcf0:	6821      	ldr	r1, [r4, #0]
 800bcf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcf4:	684a      	ldr	r2, [r1, #4]
 800bcf6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800bcfa:	604a      	str	r2, [r1, #4]
 800bcfc:	e7e5      	b.n	800bcca <UART_AdvFeatureConfig+0x102>
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800bcfe:	f640 01a2 	movw	r1, #2210	; 0x8a2
 800bd02:	4824      	ldr	r0, [pc, #144]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bd04:	f003 f99e 	bl	800f044 <assert_failed>
 800bd08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd0a:	e763      	b.n	800bbd4 <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800bd0c:	f640 01a7 	movw	r1, #2215	; 0x8a7
 800bd10:	4820      	ldr	r0, [pc, #128]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bd12:	f003 f997 	bl	800f044 <assert_failed>
 800bd16:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800bd1a:	e762      	b.n	800bbe2 <UART_AdvFeatureConfig+0x1a>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800bd1c:	f640 01ae 	movw	r1, #2222	; 0x8ae
 800bd20:	481c      	ldr	r0, [pc, #112]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bd22:	f003 f98f 	bl	800f044 <assert_failed>
 800bd26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bd28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd2a:	e767      	b.n	800bbfc <UART_AdvFeatureConfig+0x34>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800bd2c:	f640 01b5 	movw	r1, #2229	; 0x8b5
 800bd30:	4818      	ldr	r0, [pc, #96]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bd32:	f003 f987 	bl	800f044 <assert_failed>
 800bd36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bd38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd3a:	e76c      	b.n	800bc16 <UART_AdvFeatureConfig+0x4e>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800bd3c:	f640 01bc 	movw	r1, #2236	; 0x8bc
 800bd40:	4814      	ldr	r0, [pc, #80]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bd42:	f003 f97f 	bl	800f044 <assert_failed>
 800bd46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd4a:	e771      	b.n	800bc30 <UART_AdvFeatureConfig+0x68>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800bd4c:	f640 01c3 	movw	r1, #2243	; 0x8c3
 800bd50:	4810      	ldr	r0, [pc, #64]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bd52:	f003 f977 	bl	800f044 <assert_failed>
 800bd56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bd58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd5a:	e776      	b.n	800bc4a <UART_AdvFeatureConfig+0x82>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800bd5c:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800bd60:	480c      	ldr	r0, [pc, #48]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bd62:	f003 f96f 	bl	800f044 <assert_failed>
 800bd66:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bd68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd6a:	e77a      	b.n	800bc62 <UART_AdvFeatureConfig+0x9a>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800bd6c:	f640 01d2 	movw	r1, #2258	; 0x8d2
 800bd70:	4808      	ldr	r0, [pc, #32]	; (800bd94 <UART_AdvFeatureConfig+0x1cc>)
 800bd72:	f003 f967 	bl	800f044 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd76:	6822      	ldr	r2, [r4, #0]
 800bd78:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bd7a:	6853      	ldr	r3, [r2, #4]
 800bd7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bd80:	430b      	orrs	r3, r1
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd86:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd88:	d08e      	beq.n	800bca8 <UART_AdvFeatureConfig+0xe0>
 800bd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd8c:	e79d      	b.n	800bcca <UART_AdvFeatureConfig+0x102>
 800bd8e:	bf00      	nop
 800bd90:	40013800 	.word	0x40013800
 800bd94:	08015260 	.word	0x08015260

0800bd98 <HAL_UART_Init>:
  if(huart == NULL)
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	f000 81bf 	beq.w	800c11c <HAL_UART_Init+0x384>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800bd9e:	6982      	ldr	r2, [r0, #24]
{
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	4604      	mov	r4, r0
 800bda4:	6803      	ldr	r3, [r0, #0]
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800bda6:	2a00      	cmp	r2, #0
 800bda8:	f000 8099 	beq.w	800bede <HAL_UART_Init+0x146>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800bdac:	4ab5      	ldr	r2, [pc, #724]	; (800c084 <HAL_UART_Init+0x2ec>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00c      	beq.n	800bdcc <HAL_UART_Init+0x34>
 800bdb2:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d008      	beq.n	800bdcc <HAL_UART_Init+0x34>
 800bdba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d004      	beq.n	800bdcc <HAL_UART_Init+0x34>
 800bdc2:	f240 1131 	movw	r1, #305	; 0x131
 800bdc6:	48b0      	ldr	r0, [pc, #704]	; (800c088 <HAL_UART_Init+0x2f0>)
 800bdc8:	f003 f93c 	bl	800f044 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 800bdcc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800bdd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 80a6 	beq.w	800bf26 <HAL_UART_Init+0x18e>
  huart->gState = HAL_UART_STATE_BUSY;
 800bdda:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800bddc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800bdde:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800bde2:	6813      	ldr	r3, [r2, #0]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bde4:	6860      	ldr	r0, [r4, #4]
 800bde6:	49a9      	ldr	r1, [pc, #676]	; (800c08c <HAL_UART_Init+0x2f4>)
  __HAL_UART_DISABLE(huart);
 800bde8:	f023 0301 	bic.w	r3, r3, #1
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bdec:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 800bdee:	6013      	str	r3, [r2, #0]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bdf0:	f200 8093 	bhi.w	800bf1a <HAL_UART_Init+0x182>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bdf4:	68a3      	ldr	r3, [r4, #8]
 800bdf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdfa:	d007      	beq.n	800be0c <HAL_UART_Init+0x74>
 800bdfc:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800be00:	d004      	beq.n	800be0c <HAL_UART_Init+0x74>
 800be02:	f640 013a 	movw	r1, #2106	; 0x83a
 800be06:	48a0      	ldr	r0, [pc, #640]	; (800c088 <HAL_UART_Init+0x2f0>)
 800be08:	f003 f91c 	bl	800f044 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800be0c:	68e3      	ldr	r3, [r4, #12]
 800be0e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800be12:	d004      	beq.n	800be1e <HAL_UART_Init+0x86>
 800be14:	f640 013b 	movw	r1, #2107	; 0x83b
 800be18:	489b      	ldr	r0, [pc, #620]	; (800c088 <HAL_UART_Init+0x2f0>)
 800be1a:	f003 f913 	bl	800f044 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800be1e:	6923      	ldr	r3, [r4, #16]
 800be20:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800be24:	d003      	beq.n	800be2e <HAL_UART_Init+0x96>
 800be26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800be2a:	f040 80a3 	bne.w	800bf74 <HAL_UART_Init+0x1dc>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800be2e:	6963      	ldr	r3, [r4, #20]
 800be30:	f033 020c 	bics.w	r2, r3, #12
 800be34:	d100      	bne.n	800be38 <HAL_UART_Init+0xa0>
 800be36:	b923      	cbnz	r3, 800be42 <HAL_UART_Init+0xaa>
 800be38:	f640 013d 	movw	r1, #2109	; 0x83d
 800be3c:	4892      	ldr	r0, [pc, #584]	; (800c088 <HAL_UART_Init+0x2f0>)
 800be3e:	f003 f901 	bl	800f044 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800be42:	69a3      	ldr	r3, [r4, #24]
 800be44:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800be48:	d004      	beq.n	800be54 <HAL_UART_Init+0xbc>
 800be4a:	f640 013e 	movw	r1, #2110	; 0x83e
 800be4e:	488e      	ldr	r0, [pc, #568]	; (800c088 <HAL_UART_Init+0x2f0>)
 800be50:	f003 f8f8 	bl	800f044 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800be54:	6a23      	ldr	r3, [r4, #32]
 800be56:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800be5a:	d004      	beq.n	800be66 <HAL_UART_Init+0xce>
 800be5c:	f640 013f 	movw	r1, #2111	; 0x83f
 800be60:	4889      	ldr	r0, [pc, #548]	; (800c088 <HAL_UART_Init+0x2f0>)
 800be62:	f003 f8ef 	bl	800f044 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800be66:	69e0      	ldr	r0, [r4, #28]
 800be68:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800be6c:	d005      	beq.n	800be7a <HAL_UART_Init+0xe2>
 800be6e:	4886      	ldr	r0, [pc, #536]	; (800c088 <HAL_UART_Init+0x2f0>)
 800be70:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800be74:	f003 f8e6 	bl	800f044 <assert_failed>
 800be78:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	68a2      	ldr	r2, [r4, #8]
 800be7e:	6927      	ldr	r7, [r4, #16]
 800be80:	681e      	ldr	r6, [r3, #0]
 800be82:	6965      	ldr	r5, [r4, #20]
 800be84:	4982      	ldr	r1, [pc, #520]	; (800c090 <HAL_UART_Init+0x2f8>)
 800be86:	433a      	orrs	r2, r7
 800be88:	4031      	ands	r1, r6
 800be8a:	432a      	orrs	r2, r5
 800be8c:	430a      	orrs	r2, r1
 800be8e:	4302      	orrs	r2, r0
 800be90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be92:	6859      	ldr	r1, [r3, #4]
 800be94:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800be96:	69a2      	ldr	r2, [r4, #24]
 800be98:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be9a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800be9e:	4329      	orrs	r1, r5
 800bea0:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800bea2:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bea4:	4d77      	ldr	r5, [pc, #476]	; (800c084 <HAL_UART_Init+0x2ec>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800bea6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800beaa:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800beac:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800beae:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800beb0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800beb2:	d03e      	beq.n	800bf32 <HAL_UART_Init+0x19a>
 800beb4:	4a77      	ldr	r2, [pc, #476]	; (800c094 <HAL_UART_Init+0x2fc>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	f000 80f8 	beq.w	800c0ac <HAL_UART_Init+0x314>
 800bebc:	4a76      	ldr	r2, [pc, #472]	; (800c098 <HAL_UART_Init+0x300>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	f000 811c 	beq.w	800c0fc <HAL_UART_Init+0x364>
 800bec4:	4a75      	ldr	r2, [pc, #468]	; (800c09c <HAL_UART_Init+0x304>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d05a      	beq.n	800bf80 <HAL_UART_Init+0x1e8>
 800beca:	4a75      	ldr	r2, [pc, #468]	; (800c0a0 <HAL_UART_Init+0x308>)
 800becc:	4293      	cmp	r3, r2
 800bece:	f000 80ca 	beq.w	800c066 <HAL_UART_Init+0x2ce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bed2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bed6:	f000 8168 	beq.w	800c1aa <HAL_UART_Init+0x412>
    return HAL_ERROR;
 800beda:	2001      	movs	r0, #1
}
 800bedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800bede:	4a69      	ldr	r2, [pc, #420]	; (800c084 <HAL_UART_Init+0x2ec>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	f43f af73 	beq.w	800bdcc <HAL_UART_Init+0x34>
 800bee6:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800beea:	4293      	cmp	r3, r2
 800beec:	f43f af6e 	beq.w	800bdcc <HAL_UART_Init+0x34>
 800bef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bef4:	4293      	cmp	r3, r2
 800bef6:	f43f af69 	beq.w	800bdcc <HAL_UART_Init+0x34>
 800befa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800befe:	4293      	cmp	r3, r2
 800bf00:	f43f af64 	beq.w	800bdcc <HAL_UART_Init+0x34>
 800bf04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	f43f af5f 	beq.w	800bdcc <HAL_UART_Init+0x34>
 800bf0e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800bf12:	485d      	ldr	r0, [pc, #372]	; (800c088 <HAL_UART_Init+0x2f0>)
 800bf14:	f003 f896 	bl	800f044 <assert_failed>
 800bf18:	e758      	b.n	800bdcc <HAL_UART_Init+0x34>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bf1a:	f640 0139 	movw	r1, #2105	; 0x839
 800bf1e:	485a      	ldr	r0, [pc, #360]	; (800c088 <HAL_UART_Init+0x2f0>)
 800bf20:	f003 f890 	bl	800f044 <assert_failed>
 800bf24:	e766      	b.n	800bdf4 <HAL_UART_Init+0x5c>
    huart->Lock = HAL_UNLOCKED;
 800bf26:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f005 ff0e 	bl	8011d4c <HAL_UART_MspInit>
 800bf30:	e753      	b.n	800bdda <HAL_UART_Init+0x42>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf32:	4a5c      	ldr	r2, [pc, #368]	; (800c0a4 <HAL_UART_Init+0x30c>)
 800bf34:	495c      	ldr	r1, [pc, #368]	; (800c0a8 <HAL_UART_Init+0x310>)
 800bf36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bf38:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf3c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bf40:	5c8a      	ldrb	r2, [r1, r2]
 800bf42:	f000 80ed 	beq.w	800c120 <HAL_UART_Init+0x388>
    switch (clocksource)
 800bf46:	2a08      	cmp	r2, #8
 800bf48:	d8c7      	bhi.n	800beda <HAL_UART_Init+0x142>
 800bf4a:	a101      	add	r1, pc, #4	; (adr r1, 800bf50 <HAL_UART_Init+0x1b8>)
 800bf4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf50:	0800c061 	.word	0x0800c061
 800bf54:	0800bfa5 	.word	0x0800bfa5
 800bf58:	0800c0dd 	.word	0x0800c0dd
 800bf5c:	0800bedb 	.word	0x0800bedb
 800bf60:	0800c07f 	.word	0x0800c07f
 800bf64:	0800bedb 	.word	0x0800bedb
 800bf68:	0800bedb 	.word	0x0800bedb
 800bf6c:	0800bedb 	.word	0x0800bedb
 800bf70:	0800c0cb 	.word	0x0800c0cb
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bf74:	f640 013c 	movw	r1, #2108	; 0x83c
 800bf78:	4843      	ldr	r0, [pc, #268]	; (800c088 <HAL_UART_Init+0x2f0>)
 800bf7a:	f003 f863 	bl	800f044 <assert_failed>
 800bf7e:	e756      	b.n	800be2e <HAL_UART_Init+0x96>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf80:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800bf84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bf86:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800bf8a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800bf8e:	d072      	beq.n	800c076 <HAL_UART_Init+0x2de>
 800bf90:	d95f      	bls.n	800c052 <HAL_UART_Init+0x2ba>
 800bf92:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800bf96:	f000 8095 	beq.w	800c0c4 <HAL_UART_Init+0x32c>
 800bf9a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800bf9e:	f000 80cc 	beq.w	800c13a <HAL_UART_Init+0x3a2>
 800bfa2:	e796      	b.n	800bed2 <HAL_UART_Init+0x13a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800bfa4:	f7fc fb32 	bl	800860c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bfa8:	e9d4 3100 	ldrd	r3, r1, [r4]
 800bfac:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 800bfb0:	fbb2 f2f1 	udiv	r2, r2, r1
 800bfb4:	b292      	uxth	r2, r2
 800bfb6:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bfba:	2a00      	cmp	r2, #0
 800bfbc:	f040 8099 	bne.w	800c0f2 <HAL_UART_Init+0x35a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfc0:	685a      	ldr	r2, [r3, #4]
 800bfc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfc8:	689a      	ldr	r2, [r3, #8]
 800bfca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800bfd0:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd2:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 800bfd4:	f042 0201 	orr.w	r2, r2, #1
 800bfd8:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfda:	66e1      	str	r1, [r4, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800bfdc:	f7f9 faa4 	bl	8005528 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800bfe6:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfe8:	d40b      	bmi.n	800c002 <HAL_UART_Init+0x26a>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	0752      	lsls	r2, r2, #29
 800bfee:	d424      	bmi.n	800c03a <HAL_UART_Init+0x2a2>
  huart->gState  = HAL_UART_STATE_READY;
 800bff0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800bff2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800bff4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800bff8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800bffc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800c000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c002:	69dd      	ldr	r5, [r3, #28]
 800c004:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800c008:	d1ef      	bne.n	800bfea <HAL_UART_Init+0x252>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c00a:	f7f9 fa8d 	bl	8005528 <HAL_GetTick>
 800c00e:	1b80      	subs	r0, r0, r6
 800c010:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c014:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c016:	d3f4      	bcc.n	800c002 <HAL_UART_Init+0x26a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c01e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c020:	689a      	ldr	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800c022:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c024:	f022 0201 	bic.w	r2, r2, #1
 800c028:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 800c02a:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800c02c:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800c030:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800c034:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
}
 800c038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c03a:	69dd      	ldr	r5, [r3, #28]
 800c03c:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800c040:	d1d6      	bne.n	800bff0 <HAL_UART_Init+0x258>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c042:	f7f9 fa71 	bl	8005528 <HAL_GetTick>
 800c046:	1b80      	subs	r0, r0, r6
 800c048:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c04c:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c04e:	d3f4      	bcc.n	800c03a <HAL_UART_Init+0x2a2>
 800c050:	e7e2      	b.n	800c018 <HAL_UART_Init+0x280>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c052:	2a00      	cmp	r2, #0
 800c054:	f47f af3d 	bne.w	800bed2 <HAL_UART_Init+0x13a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c058:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c05c:	f000 80a2 	beq.w	800c1a4 <HAL_UART_Init+0x40c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c060:	f7fc fabc 	bl	80085dc <HAL_RCC_GetPCLK1Freq>
 800c064:	e7a0      	b.n	800bfa8 <HAL_UART_Init+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c066:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800c06a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c06c:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800c070:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800c074:	d174      	bne.n	800c160 <HAL_UART_Init+0x3c8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c076:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c07a:	f000 808b 	beq.w	800c194 <HAL_UART_Init+0x3fc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c07e:	f7fc fa79 	bl	8008574 <HAL_RCC_GetSysClockFreq>
 800c082:	e791      	b.n	800bfa8 <HAL_UART_Init+0x210>
 800c084:	40013800 	.word	0x40013800
 800c088:	08015260 	.word	0x08015260
 800c08c:	00895440 	.word	0x00895440
 800c090:	efff69f3 	.word	0xefff69f3
 800c094:	40004400 	.word	0x40004400
 800c098:	40004800 	.word	0x40004800
 800c09c:	40004c00 	.word	0x40004c00
 800c0a0:	40005000 	.word	0x40005000
 800c0a4:	40021000 	.word	0x40021000
 800c0a8:	0801525c 	.word	0x0801525c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0ac:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800c0b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c0b2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800c0b6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c0ba:	d0dc      	beq.n	800c076 <HAL_UART_Init+0x2de>
 800c0bc:	d9c9      	bls.n	800c052 <HAL_UART_Init+0x2ba>
 800c0be:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800c0c2:	d136      	bne.n	800c132 <HAL_UART_Init+0x39a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c0c8:	d067      	beq.n	800c19a <HAL_UART_Init+0x402>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c0ca:	6861      	ldr	r1, [r4, #4]
 800c0cc:	084a      	lsrs	r2, r1, #1
 800c0ce:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c0d2:	fbb2 f2f1 	udiv	r2, r2, r1
 800c0d6:	b292      	uxth	r2, r2
 800c0d8:	60da      	str	r2, [r3, #12]
 800c0da:	e76d      	b.n	800bfb8 <HAL_UART_Init+0x220>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	084a      	lsrs	r2, r1, #1
 800c0e0:	f502 02f4 	add.w	r2, r2, #7995392	; 0x7a0000
 800c0e4:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 800c0e8:	fbb2 f2f1 	udiv	r2, r2, r1
 800c0ec:	b292      	uxth	r2, r2
 800c0ee:	60da      	str	r2, [r3, #12]
 800c0f0:	e762      	b.n	800bfb8 <HAL_UART_Init+0x220>
    UART_AdvFeatureConfig(huart);
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f7ff fd68 	bl	800bbc8 <UART_AdvFeatureConfig>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	e761      	b.n	800bfc0 <HAL_UART_Init+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0fc:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800c100:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c102:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800c106:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800c10a:	d0b4      	beq.n	800c076 <HAL_UART_Init+0x2de>
 800c10c:	d9a1      	bls.n	800c052 <HAL_UART_Init+0x2ba>
 800c10e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800c112:	d0d7      	beq.n	800c0c4 <HAL_UART_Init+0x32c>
 800c114:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 800c118:	d00f      	beq.n	800c13a <HAL_UART_Init+0x3a2>
 800c11a:	e6da      	b.n	800bed2 <HAL_UART_Init+0x13a>
    return HAL_ERROR;
 800c11c:	2001      	movs	r0, #1
}
 800c11e:	4770      	bx	lr
    switch (clocksource)
 800c120:	2a08      	cmp	r2, #8
 800c122:	d842      	bhi.n	800c1aa <HAL_UART_Init+0x412>
 800c124:	e8df f002 	tbb	[pc, r2]
 800c128:	410c253e 	.word	0x410c253e
 800c12c:	41414136 	.word	0x41414136
 800c130:	39          	.byte	0x39
 800c131:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c132:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800c136:	f47f aecc 	bne.w	800bed2 <HAL_UART_Init+0x13a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c13a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c13e:	d1cd      	bne.n	800c0dc <HAL_UART_Init+0x344>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c140:	6861      	ldr	r1, [r4, #4]
 800c142:	084a      	lsrs	r2, r1, #1
 800c144:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 800c148:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c14c:	fbb2 f2f1 	udiv	r2, r2, r1
    brrtemp = usartdiv & 0xFFF0U;
 800c150:	f022 010f 	bic.w	r1, r2, #15
 800c154:	b289      	uxth	r1, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c156:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 800c15a:	430a      	orrs	r2, r1
 800c15c:	60da      	str	r2, [r3, #12]
 800c15e:	e72b      	b.n	800bfb8 <HAL_UART_Init+0x220>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c160:	f67f af77 	bls.w	800c052 <HAL_UART_Init+0x2ba>
 800c164:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800c168:	d0ac      	beq.n	800c0c4 <HAL_UART_Init+0x32c>
 800c16a:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800c16e:	d0e4      	beq.n	800c13a <HAL_UART_Init+0x3a2>
 800c170:	e6af      	b.n	800bed2 <HAL_UART_Init+0x13a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c172:	f7fc fa4b 	bl	800860c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = brrtemp;
 800c176:	e9d4 3100 	ldrd	r3, r1, [r4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c17a:	084a      	lsrs	r2, r1, #1
 800c17c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c180:	fbb0 f0f1 	udiv	r0, r0, r1
    brrtemp = usartdiv & 0xFFF0U;
 800c184:	f020 020f 	bic.w	r2, r0, #15
 800c188:	b292      	uxth	r2, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c18a:	f3c0 0042 	ubfx	r0, r0, #1, #3
    huart->Instance->BRR = brrtemp;
 800c18e:	4310      	orrs	r0, r2
 800c190:	60d8      	str	r0, [r3, #12]
 800c192:	e711      	b.n	800bfb8 <HAL_UART_Init+0x220>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c194:	f7fc f9ee 	bl	8008574 <HAL_RCC_GetSysClockFreq>
 800c198:	e7ed      	b.n	800c176 <HAL_UART_Init+0x3de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c19a:	6861      	ldr	r1, [r4, #4]
 800c19c:	084a      	lsrs	r2, r1, #1
 800c19e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800c1a2:	e7d3      	b.n	800c14c <HAL_UART_Init+0x3b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c1a4:	f7fc fa1a 	bl	80085dc <HAL_RCC_GetPCLK1Freq>
 800c1a8:	e7e5      	b.n	800c176 <HAL_UART_Init+0x3de>
    huart->Instance->BRR = brrtemp;
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	60da      	str	r2, [r3, #12]
    return HAL_ERROR;
 800c1ae:	2001      	movs	r0, #1
}
 800c1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b2:	bf00      	nop

0800c1b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c1b4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800c1b6:	f000 fe8f 	bl	800ced8 <vTaskStartScheduler>
  
  return osOK;
}
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	bd08      	pop	{r3, pc}
 800c1be:	bf00      	nop

0800c1c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c1c0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c1c2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800c1c6:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800c1c8:	2c84      	cmp	r4, #132	; 0x84
{
 800c1ca:	4602      	mov	r2, r0
    fpriority += (priority - osPriorityIdle);
 800c1cc:	bf14      	ite	ne
 800c1ce:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c1d0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c1d2:	ad03      	add	r5, sp, #12
{
 800c1d4:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c1d6:	6840      	ldr	r0, [r0, #4]
 800c1d8:	6811      	ldr	r1, [r2, #0]
 800c1da:	8a12      	ldrh	r2, [r2, #16]
 800c1dc:	e9cd 4500 	strd	r4, r5, [sp]
 800c1e0:	f000 fd38 	bl	800cc54 <xTaskCreate>
 800c1e4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c1e6:	bf0c      	ite	eq
 800c1e8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800c1ea:	2000      	movne	r0, #0
}
 800c1ec:	b005      	add	sp, #20
 800c1ee:	bd30      	pop	{r4, r5, pc}

0800c1f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c1f0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	bf08      	it	eq
 800c1f6:	2001      	moveq	r0, #1
 800c1f8:	f001 f8c6 	bl	800d388 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	bd08      	pop	{r3, pc}

0800c200 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c200:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c204:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c208:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c20a:	6081      	str	r1, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c20c:	e9c0 2300 	strd	r2, r3, [r0]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c210:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop

0800c218 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c218:	2300      	movs	r3, #0
 800c21a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop

0800c220 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800c220:	e9d0 2300 	ldrd	r2, r3, [r0]
{
 800c224:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c226:	689c      	ldr	r4, [r3, #8]
 800c228:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c22a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800c22c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800c22e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c230:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c232:	6099      	str	r1, [r3, #8]
}
 800c234:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c238:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c23a:	6002      	str	r2, [r0, #0]
}
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop

0800c240 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c240:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c242:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c244:	1c6b      	adds	r3, r5, #1
 800c246:	d011      	beq.n	800c26c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c248:	f100 0208 	add.w	r2, r0, #8
 800c24c:	e000      	b.n	800c250 <vListInsert+0x10>
 800c24e:	461a      	mov	r2, r3
 800c250:	6853      	ldr	r3, [r2, #4]
 800c252:	681c      	ldr	r4, [r3, #0]
 800c254:	42ac      	cmp	r4, r5
 800c256:	d9fa      	bls.n	800c24e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800c258:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800c25a:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800c25c:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c25e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c260:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c262:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c264:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c266:	6004      	str	r4, [r0, #0]
}
 800c268:	bc30      	pop	{r4, r5}
 800c26a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c26c:	6902      	ldr	r2, [r0, #16]
 800c26e:	6853      	ldr	r3, [r2, #4]
 800c270:	e7f2      	b.n	800c258 <vListInsert+0x18>
 800c272:	bf00      	nop

0800c274 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c274:	6843      	ldr	r3, [r0, #4]
 800c276:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c278:	6902      	ldr	r2, [r0, #16]
{
 800c27a:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c27c:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c27e:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c280:	6854      	ldr	r4, [r2, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c282:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800c284:	6813      	ldr	r3, [r2, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800c286:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c288:	bf08      	it	eq
 800c28a:	6051      	streq	r1, [r2, #4]
	( pxList->uxNumberOfItems )--;
 800c28c:	3b01      	subs	r3, #1
	pxItemToRemove->pvContainer = NULL;
 800c28e:	2100      	movs	r1, #0
 800c290:	6101      	str	r1, [r0, #16]

	return pxList->uxNumberOfItems;
}
 800c292:	f85d 4b04 	ldr.w	r4, [sp], #4
	( pxList->uxNumberOfItems )--;
 800c296:	6013      	str	r3, [r2, #0]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	4770      	bx	lr

0800c29c <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c29c:	b940      	cbnz	r0, 800c2b0 <xQueueGenericCreate+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	e7fe      	b.n	800c2ae <xQueueGenericCreate+0x12>
	{
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	460d      	mov	r5, r1

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c2b6:	b151      	cbz	r1, 800c2ce <xQueueGenericCreate+0x32>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2b8:	fb01 f000 	mul.w	r0, r1, r0
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c2bc:	3048      	adds	r0, #72	; 0x48
 800c2be:	f001 fc8b 	bl	800dbd8 <pvPortMalloc>

		if( pxNewQueue != NULL )
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	b358      	cbz	r0, 800c31e <xQueueGenericCreate+0x82>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c2c6:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2ca:	6003      	str	r3, [r0, #0]
 800c2cc:	e005      	b.n	800c2da <xQueueGenericCreate+0x3e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c2ce:	2048      	movs	r0, #72	; 0x48
 800c2d0:	f001 fc82 	bl	800dbd8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	b310      	cbz	r0, 800c31e <xQueueGenericCreate+0x82>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2d8:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 800c2da:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 800c2de:	f001 fb19 	bl	800d914 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c2e2:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 800c2e6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2e8:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c2ea:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c2ee:	1acb      	subs	r3, r1, r3
 800c2f0:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c2f2:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c2f4:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c2f6:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c2f8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c2fa:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c2fc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c300:	6062      	str	r2, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 800c302:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c306:	f104 0010 	add.w	r0, r4, #16
 800c30a:	f7ff ff79 	bl	800c200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c30e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c312:	f7ff ff75 	bl	800c200 <vListInitialise>
	taskEXIT_CRITICAL();
 800c316:	f001 fb1f 	bl	800d958 <vPortExitCritical>
	}
 800c31a:	4620      	mov	r0, r4
 800c31c:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c31e:	2400      	movs	r4, #0
	}
 800c320:	4620      	mov	r0, r4
 800c322:	bd70      	pop	{r4, r5, r6, pc}

0800c324 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	b085      	sub	sp, #20
 800c32a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800c32c:	2800      	cmp	r0, #0
 800c32e:	f000 8122 	beq.w	800c576 <xQueueGenericSend+0x252>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c332:	2900      	cmp	r1, #0
 800c334:	f000 8112 	beq.w	800c55c <xQueueGenericSend+0x238>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d10b      	bne.n	800c354 <xQueueGenericSend+0x30>
 800c33c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c33e:	2a01      	cmp	r2, #1
 800c340:	d008      	beq.n	800c354 <xQueueGenericSend+0x30>
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	e7fe      	b.n	800c352 <xQueueGenericSend+0x2e>
 800c354:	4604      	mov	r4, r0
 800c356:	461e      	mov	r6, r3
 800c358:	460f      	mov	r7, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c35a:	f001 f9bf 	bl	800d6dc <xTaskGetSchedulerState>
 800c35e:	2800      	cmp	r0, #0
 800c360:	f040 80f9 	bne.w	800c556 <xQueueGenericSend+0x232>
 800c364:	9b01      	ldr	r3, [sp, #4]
 800c366:	b143      	cbz	r3, 800c37a <xQueueGenericSend+0x56>
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	e7fe      	b.n	800c378 <xQueueGenericSend+0x54>
 800c37a:	469a      	mov	sl, r3
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c37c:	f001 faca 	bl	800d914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c380:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c382:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800c384:	f8df 9314 	ldr.w	r9, [pc, #788]	; 800c69c <xQueueGenericSend+0x378>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c388:	429a      	cmp	r2, r3
		prvLockQueue( pxQueue );
 800c38a:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c38e:	d375      	bcc.n	800c47c <xQueueGenericSend+0x158>
 800c390:	2e02      	cmp	r6, #2
 800c392:	f000 80f9 	beq.w	800c588 <xQueueGenericSend+0x264>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c396:	9d01      	ldr	r5, [sp, #4]
 800c398:	2d00      	cmp	r5, #0
 800c39a:	f000 814c 	beq.w	800c636 <xQueueGenericSend+0x312>
				else if( xEntryTimeSet == pdFALSE )
 800c39e:	f1ba 0f00 	cmp.w	sl, #0
 800c3a2:	d102      	bne.n	800c3aa <xQueueGenericSend+0x86>
					vTaskSetTimeOutState( &xTimeOut );
 800c3a4:	a802      	add	r0, sp, #8
 800c3a6:	f001 f937 	bl	800d618 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800c3aa:	f001 fad5 	bl	800d958 <vPortExitCritical>
		vTaskSuspendAll();
 800c3ae:	f000 fe9f 	bl	800d0f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3b2:	f001 faaf 	bl	800d914 <vPortEnterCritical>
 800c3b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c3ba:	2bff      	cmp	r3, #255	; 0xff
 800c3bc:	bf08      	it	eq
 800c3be:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800c3c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c3c6:	2bff      	cmp	r3, #255	; 0xff
 800c3c8:	bf08      	it	eq
 800c3ca:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800c3ce:	f001 fac3 	bl	800d958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3d2:	a901      	add	r1, sp, #4
 800c3d4:	a802      	add	r0, sp, #8
 800c3d6:	f001 f935 	bl	800d644 <xTaskCheckForTimeOut>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	f040 8111 	bne.w	800c602 <xQueueGenericSend+0x2de>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3e0:	f001 fa98 	bl	800d914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c3e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d067      	beq.n	800c4bc <xQueueGenericSend+0x198>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c3ec:	f001 fab4 	bl	800d958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c3f0:	f001 fa90 	bl	800d914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c3f4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c3f8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3fa:	2d00      	cmp	r5, #0
 800c3fc:	dd11      	ble.n	800c422 <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c400:	b17b      	cbz	r3, 800c422 <xQueueGenericSend+0xfe>
 800c402:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 800c406:	e001      	b.n	800c40c <xQueueGenericSend+0xe8>
 800c408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c40a:	b153      	cbz	r3, 800c422 <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c40c:	4650      	mov	r0, sl
 800c40e:	f001 f8bf 	bl	800d590 <xTaskRemoveFromEventList>
 800c412:	b108      	cbz	r0, 800c418 <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 800c414:	f001 f956 	bl	800d6c4 <vTaskMissedYield>
 800c418:	3d01      	subs	r5, #1
 800c41a:	b2eb      	uxtb	r3, r5
 800c41c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1f2      	bne.n	800c408 <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 800c422:	23ff      	movs	r3, #255	; 0xff
 800c424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c428:	f001 fa96 	bl	800d958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c42c:	f001 fa72 	bl	800d914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c430:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c434:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c436:	2d00      	cmp	r5, #0
 800c438:	dd11      	ble.n	800c45e <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c43a:	6923      	ldr	r3, [r4, #16]
 800c43c:	b17b      	cbz	r3, 800c45e <xQueueGenericSend+0x13a>
 800c43e:	f104 0a10 	add.w	sl, r4, #16
 800c442:	e001      	b.n	800c448 <xQueueGenericSend+0x124>
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	b153      	cbz	r3, 800c45e <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c448:	4650      	mov	r0, sl
 800c44a:	f001 f8a1 	bl	800d590 <xTaskRemoveFromEventList>
 800c44e:	b108      	cbz	r0, 800c454 <xQueueGenericSend+0x130>
					vTaskMissedYield();
 800c450:	f001 f938 	bl	800d6c4 <vTaskMissedYield>
 800c454:	3d01      	subs	r5, #1
 800c456:	b2eb      	uxtb	r3, r5
 800c458:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1f2      	bne.n	800c444 <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 800c45e:	23ff      	movs	r3, #255	; 0xff
 800c460:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c464:	f001 fa78 	bl	800d958 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c468:	f000 ff04 	bl	800d274 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c46c:	f001 fa52 	bl	800d914 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c470:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c474:	429a      	cmp	r2, r3
 800c476:	f04f 0a01 	mov.w	sl, #1
 800c47a:	d289      	bcs.n	800c390 <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c47c:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c47e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c480:	2a00      	cmp	r2, #0
 800c482:	f000 8086 	beq.w	800c592 <xQueueGenericSend+0x26e>
	else if( xPosition == queueSEND_TO_BACK )
 800c486:	2e00      	cmp	r6, #0
 800c488:	f000 80a1 	beq.w	800c5ce <xQueueGenericSend+0x2aa>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c48c:	4639      	mov	r1, r7
 800c48e:	68e0      	ldr	r0, [r4, #12]
 800c490:	f005 fcec 	bl	8011e6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c494:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c496:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c498:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c49a:	425b      	negs	r3, r3
 800c49c:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c49e:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c4a0:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4a2:	d202      	bcs.n	800c4aa <xQueueGenericSend+0x186>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c4a4:	6862      	ldr	r2, [r4, #4]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c4aa:	2e02      	cmp	r6, #2
 800c4ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4ae:	f000 80c6 	beq.w	800c63e <xQueueGenericSend+0x31a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d071      	beq.n	800c59e <xQueueGenericSend+0x27a>
 800c4ba:	e09b      	b.n	800c5f4 <xQueueGenericSend+0x2d0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4bc:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800c4c0:	f001 fa4a 	bl	800d958 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	9901      	ldr	r1, [sp, #4]
 800c4c8:	f001 f812 	bl	800d4f0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800c4cc:	f001 fa22 	bl	800d914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c4d0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c4d4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4d6:	2d00      	cmp	r5, #0
 800c4d8:	dd11      	ble.n	800c4fe <xQueueGenericSend+0x1da>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4dc:	b17b      	cbz	r3, 800c4fe <xQueueGenericSend+0x1da>
 800c4de:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 800c4e2:	e001      	b.n	800c4e8 <xQueueGenericSend+0x1c4>
 800c4e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4e6:	b153      	cbz	r3, 800c4fe <xQueueGenericSend+0x1da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4e8:	4658      	mov	r0, fp
 800c4ea:	f001 f851 	bl	800d590 <xTaskRemoveFromEventList>
 800c4ee:	b108      	cbz	r0, 800c4f4 <xQueueGenericSend+0x1d0>
						vTaskMissedYield();
 800c4f0:	f001 f8e8 	bl	800d6c4 <vTaskMissedYield>
 800c4f4:	3d01      	subs	r5, #1
 800c4f6:	b2eb      	uxtb	r3, r5
 800c4f8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1f2      	bne.n	800c4e4 <xQueueGenericSend+0x1c0>
		pxQueue->cTxLock = queueUNLOCKED;
 800c4fe:	23ff      	movs	r3, #255	; 0xff
 800c500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c504:	f001 fa28 	bl	800d958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c508:	f001 fa04 	bl	800d914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c50c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c510:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c512:	2d00      	cmp	r5, #0
 800c514:	dc0a      	bgt.n	800c52c <xQueueGenericSend+0x208>
 800c516:	e00c      	b.n	800c532 <xQueueGenericSend+0x20e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c518:	4650      	mov	r0, sl
 800c51a:	f001 f839 	bl	800d590 <xTaskRemoveFromEventList>
 800c51e:	b108      	cbz	r0, 800c524 <xQueueGenericSend+0x200>
					vTaskMissedYield();
 800c520:	f001 f8d0 	bl	800d6c4 <vTaskMissedYield>
 800c524:	3d01      	subs	r5, #1
 800c526:	b2eb      	uxtb	r3, r5
 800c528:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c52a:	b113      	cbz	r3, 800c532 <xQueueGenericSend+0x20e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c52c:	6923      	ldr	r3, [r4, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1f2      	bne.n	800c518 <xQueueGenericSend+0x1f4>
		pxQueue->cRxLock = queueUNLOCKED;
 800c532:	23ff      	movs	r3, #255	; 0xff
 800c534:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c538:	f001 fa0e 	bl	800d958 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800c53c:	f000 fe9a 	bl	800d274 <xTaskResumeAll>
 800c540:	2800      	cmp	r0, #0
 800c542:	d193      	bne.n	800c46c <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 800c544:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c548:	f8c9 3000 	str.w	r3, [r9]
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	e78a      	b.n	800c46c <xQueueGenericSend+0x148>
 800c556:	f04f 0a00 	mov.w	sl, #0
 800c55a:	e70f      	b.n	800c37c <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c55c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c55e:	2a00      	cmp	r2, #0
 800c560:	f43f aeea 	beq.w	800c338 <xQueueGenericSend+0x14>
 800c564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	e7fe      	b.n	800c574 <xQueueGenericSend+0x250>
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	e7fe      	b.n	800c586 <xQueueGenericSend+0x262>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c588:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c58a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c58c:	2a00      	cmp	r2, #0
 800c58e:	f47f af7d 	bne.w	800c48c <xQueueGenericSend+0x168>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c592:	6826      	ldr	r6, [r4, #0]
 800c594:	3501      	adds	r5, #1
 800c596:	b146      	cbz	r6, 800c5aa <xQueueGenericSend+0x286>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c598:	6a63      	ldr	r3, [r4, #36]	; 0x24
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c59a:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c59c:	bb53      	cbnz	r3, 800c5f4 <xQueueGenericSend+0x2d0>
				taskEXIT_CRITICAL();
 800c59e:	f001 f9db 	bl	800d958 <vPortExitCritical>
				return pdPASS;
 800c5a2:	2001      	movs	r0, #1
}
 800c5a4:	b005      	add	sp, #20
 800c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c5aa:	6860      	ldr	r0, [r4, #4]
 800c5ac:	f001 f8f0 	bl	800d790 <xTaskPriorityDisinherit>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 800c5b2:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c5b4:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b6:	b9eb      	cbnz	r3, 800c5f4 <xQueueGenericSend+0x2d0>
					else if( xYieldRequired != pdFALSE )
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d0f0      	beq.n	800c59e <xQueueGenericSend+0x27a>
						queueYIELD_IF_USING_PREEMPTION();
 800c5bc:	4b37      	ldr	r3, [pc, #220]	; (800c69c <xQueueGenericSend+0x378>)
 800c5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	e7e7      	b.n	800c59e <xQueueGenericSend+0x27a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	68a0      	ldr	r0, [r4, #8]
 800c5d2:	f005 fc4b 	bl	8011e6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c5d6:	68a3      	ldr	r3, [r4, #8]
 800c5d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5da:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c5dc:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c5e4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5e6:	d3d7      	bcc.n	800c598 <xQueueGenericSend+0x274>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5ea:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c5ec:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5ee:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0d4      	beq.n	800c59e <xQueueGenericSend+0x27a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c5f8:	f000 ffca 	bl	800d590 <xTaskRemoveFromEventList>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d1dd      	bne.n	800c5bc <xQueueGenericSend+0x298>
 800c600:	e7cd      	b.n	800c59e <xQueueGenericSend+0x27a>
	taskENTER_CRITICAL();
 800c602:	f001 f987 	bl	800d914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c606:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c60a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c60c:	2d00      	cmp	r5, #0
 800c60e:	dd1d      	ble.n	800c64c <xQueueGenericSend+0x328>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c612:	b1db      	cbz	r3, 800c64c <xQueueGenericSend+0x328>
 800c614:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800c618:	e005      	b.n	800c626 <xQueueGenericSend+0x302>
 800c61a:	3d01      	subs	r5, #1
 800c61c:	b2eb      	uxtb	r3, r5
 800c61e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c620:	b1a3      	cbz	r3, 800c64c <xQueueGenericSend+0x328>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c624:	b193      	cbz	r3, 800c64c <xQueueGenericSend+0x328>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c626:	4630      	mov	r0, r6
 800c628:	f000 ffb2 	bl	800d590 <xTaskRemoveFromEventList>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d0f4      	beq.n	800c61a <xQueueGenericSend+0x2f6>
						vTaskMissedYield();
 800c630:	f001 f848 	bl	800d6c4 <vTaskMissedYield>
 800c634:	e7f1      	b.n	800c61a <xQueueGenericSend+0x2f6>
					taskEXIT_CRITICAL();
 800c636:	f001 f98f 	bl	800d958 <vPortExitCritical>
					return errQUEUE_FULL;
 800c63a:	4628      	mov	r0, r5
 800c63c:	e7b2      	b.n	800c5a4 <xQueueGenericSend+0x280>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c63e:	2d00      	cmp	r5, #0
 800c640:	d1ab      	bne.n	800c59a <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c642:	2201      	movs	r2, #1
 800c644:	63a2      	str	r2, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c646:	2b00      	cmp	r3, #0
 800c648:	d0a9      	beq.n	800c59e <xQueueGenericSend+0x27a>
 800c64a:	e7d3      	b.n	800c5f4 <xQueueGenericSend+0x2d0>
		pxQueue->cTxLock = queueUNLOCKED;
 800c64c:	23ff      	movs	r3, #255	; 0xff
 800c64e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c652:	f001 f981 	bl	800d958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c656:	f001 f95d 	bl	800d914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c65a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c65e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c660:	2d00      	cmp	r5, #0
 800c662:	dd12      	ble.n	800c68a <xQueueGenericSend+0x366>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c664:	6923      	ldr	r3, [r4, #16]
 800c666:	b183      	cbz	r3, 800c68a <xQueueGenericSend+0x366>
 800c668:	f104 0610 	add.w	r6, r4, #16
 800c66c:	e005      	b.n	800c67a <xQueueGenericSend+0x356>
 800c66e:	3d01      	subs	r5, #1
 800c670:	b2eb      	uxtb	r3, r5
 800c672:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c674:	b14b      	cbz	r3, 800c68a <xQueueGenericSend+0x366>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c676:	6923      	ldr	r3, [r4, #16]
 800c678:	b13b      	cbz	r3, 800c68a <xQueueGenericSend+0x366>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c67a:	4630      	mov	r0, r6
 800c67c:	f000 ff88 	bl	800d590 <xTaskRemoveFromEventList>
 800c680:	2800      	cmp	r0, #0
 800c682:	d0f4      	beq.n	800c66e <xQueueGenericSend+0x34a>
					vTaskMissedYield();
 800c684:	f001 f81e 	bl	800d6c4 <vTaskMissedYield>
 800c688:	e7f1      	b.n	800c66e <xQueueGenericSend+0x34a>
		pxQueue->cRxLock = queueUNLOCKED;
 800c68a:	23ff      	movs	r3, #255	; 0xff
 800c68c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c690:	f001 f962 	bl	800d958 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800c694:	f000 fdee 	bl	800d274 <xTaskResumeAll>
			return errQUEUE_FULL;
 800c698:	2000      	movs	r0, #0
 800c69a:	e783      	b.n	800c5a4 <xQueueGenericSend+0x280>
 800c69c:	e000ed04 	.word	0xe000ed04

0800c6a0 <xQueueCreateMutex>:
	{
 800c6a0:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c6a2:	2048      	movs	r0, #72	; 0x48
 800c6a4:	f001 fa98 	bl	800dbd8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	b350      	cbz	r0, 800c702 <xQueueCreateMutex+0x62>
	pxNewQueue->uxItemSize = uxItemSize;
 800c6ac:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c6ae:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c6b0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800c6b2:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 800c6b6:	f001 f92d 	bl	800d914 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c6ba:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800c6be:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c6c0:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c6c2:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c6c6:	1a9a      	subs	r2, r3, r2
 800c6c8:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c6ca:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 800c6cc:	26ff      	movs	r6, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6ce:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c6d2:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c6d4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c6d8:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800c6dc:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c6e0:	f7ff fd8e 	bl	800c200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c6e8:	f7ff fd8a 	bl	800c200 <vListInitialise>
	taskEXIT_CRITICAL();
 800c6ec:	f001 f934 	bl	800d958 <vPortExitCritical>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c6f0:	e9c4 5500 	strd	r5, r5, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800c6f4:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c6f6:	462b      	mov	r3, r5
 800c6f8:	462a      	mov	r2, r5
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f7ff fe11 	bl	800c324 <xQueueGenericSend>
	}
 800c702:	4620      	mov	r0, r4
 800c704:	bd70      	pop	{r4, r5, r6, pc}
 800c706:	bf00      	nop

0800c708 <xQueueGiveMutexRecursive>:
	{
 800c708:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800c70a:	b138      	cbz	r0, 800c71c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800c70c:	6845      	ldr	r5, [r0, #4]
 800c70e:	4604      	mov	r4, r0
 800c710:	f000 ffde 	bl	800d6d0 <xTaskGetCurrentTaskHandle>
 800c714:	4285      	cmp	r5, r0
 800c716:	d00a      	beq.n	800c72e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800c718:	2000      	movs	r0, #0
	}
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	e7fe      	b.n	800c72c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 800c72e:	68e3      	ldr	r3, [r4, #12]
 800c730:	3b01      	subs	r3, #1
 800c732:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c734:	b10b      	cbz	r3, 800c73a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800c736:	2001      	movs	r0, #1
	}
 800c738:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c73a:	4620      	mov	r0, r4
 800c73c:	461a      	mov	r2, r3
 800c73e:	4619      	mov	r1, r3
 800c740:	f7ff fdf0 	bl	800c324 <xQueueGenericSend>
			xReturn = pdPASS;
 800c744:	2001      	movs	r0, #1
	}
 800c746:	bd38      	pop	{r3, r4, r5, pc}

0800c748 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 800c748:	2800      	cmp	r0, #0
 800c74a:	d037      	beq.n	800c7bc <xQueueGenericSendFromISR+0x74>
{
 800c74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c750:	b341      	cbz	r1, 800c7a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c752:	2b02      	cmp	r3, #2
 800c754:	d10b      	bne.n	800c76e <xQueueGenericSendFromISR+0x26>
 800c756:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c758:	2c01      	cmp	r4, #1
 800c75a:	d008      	beq.n	800c76e <xQueueGenericSendFromISR+0x26>
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	e7fe      	b.n	800c76c <xQueueGenericSendFromISR+0x24>
 800c76e:	4604      	mov	r4, r0
 800c770:	461f      	mov	r7, r3
 800c772:	4691      	mov	r9, r2
 800c774:	468a      	mov	sl, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c776:	f001 f9d9 	bl	800db2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c77a:	f3ef 8811 	mrs	r8, BASEPRI
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c78e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c790:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c792:	429a      	cmp	r2, r3
 800c794:	d31b      	bcc.n	800c7ce <xQueueGenericSendFromISR+0x86>
 800c796:	2f02      	cmp	r7, #2
 800c798:	d034      	beq.n	800c804 <xQueueGenericSendFromISR+0xbc>
			xReturn = errQUEUE_FULL;
 800c79a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c79c:	f388 8811 	msr	BASEPRI, r8
}
 800c7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7a4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c7a6:	2c00      	cmp	r4, #0
 800c7a8:	d0d3      	beq.n	800c752 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	e7fe      	b.n	800c7ba <xQueueGenericSendFromISR+0x72>
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	e7fe      	b.n	800c7cc <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7ce:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7d6:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7d8:	b1da      	cbz	r2, 800c812 <xQueueGenericSendFromISR+0xca>
	else if( xPosition == queueSEND_TO_BACK )
 800c7da:	b36f      	cbz	r7, 800c838 <xQueueGenericSendFromISR+0xf0>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7dc:	4651      	mov	r1, sl
 800c7de:	68e0      	ldr	r0, [r4, #12]
 800c7e0:	f005 fb44 	bl	8011e6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c7e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7e6:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7e8:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c7ea:	425b      	negs	r3, r3
 800c7ec:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7ee:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c7f0:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7f2:	d202      	bcs.n	800c7fa <xQueueGenericSendFromISR+0xb2>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c7f4:	6862      	ldr	r2, [r4, #4]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c7fa:	2f02      	cmp	r7, #2
 800c7fc:	d10f      	bne.n	800c81e <xQueueGenericSendFromISR+0xd6>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7fe:	b176      	cbz	r6, 800c81e <xQueueGenericSendFromISR+0xd6>
				--uxMessagesWaiting;
 800c800:	3e01      	subs	r6, #1
 800c802:	e00c      	b.n	800c81e <xQueueGenericSendFromISR+0xd6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c804:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c808:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c80a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800c80c:	b26d      	sxtb	r5, r5
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c80e:	2a00      	cmp	r2, #0
 800c810:	d1e4      	bne.n	800c7dc <xQueueGenericSendFromISR+0x94>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c812:	6827      	ldr	r7, [r4, #0]
 800c814:	b91f      	cbnz	r7, 800c81e <xQueueGenericSendFromISR+0xd6>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c816:	6860      	ldr	r0, [r4, #4]
 800c818:	f000 ffba 	bl	800d790 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800c81c:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c81e:	3601      	adds	r6, #1
			if( cTxLock == queueUNLOCKED )
 800c820:	1c6b      	adds	r3, r5, #1
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800c822:	63a6      	str	r6, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c824:	d016      	beq.n	800c854 <xQueueGenericSendFromISR+0x10c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c826:	1c6b      	adds	r3, r5, #1
 800c828:	b25b      	sxtb	r3, r3
 800c82a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800c82e:	2001      	movs	r0, #1
	__asm volatile
 800c830:	f388 8811 	msr	BASEPRI, r8
}
 800c834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c838:	4651      	mov	r1, sl
 800c83a:	68a0      	ldr	r0, [r4, #8]
 800c83c:	f005 fb16 	bl	8011e6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c840:	68a3      	ldr	r3, [r4, #8]
 800c842:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c844:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c846:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c848:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c84a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c84c:	d3e7      	bcc.n	800c81e <xQueueGenericSendFromISR+0xd6>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	60a3      	str	r3, [r4, #8]
 800c852:	e7e4      	b.n	800c81e <xQueueGenericSendFromISR+0xd6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0e9      	beq.n	800c82e <xQueueGenericSendFromISR+0xe6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c85a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c85e:	f000 fe97 	bl	800d590 <xTaskRemoveFromEventList>
 800c862:	2800      	cmp	r0, #0
 800c864:	d0e3      	beq.n	800c82e <xQueueGenericSendFromISR+0xe6>
							if( pxHigherPriorityTaskWoken != NULL )
 800c866:	f1b9 0f00 	cmp.w	r9, #0
 800c86a:	d0e0      	beq.n	800c82e <xQueueGenericSendFromISR+0xe6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c86c:	2001      	movs	r0, #1
 800c86e:	f8c9 0000 	str.w	r0, [r9]
 800c872:	e793      	b.n	800c79c <xQueueGenericSendFromISR+0x54>

0800c874 <xQueueGenericReceive>:
{
 800c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c878:	b085      	sub	sp, #20
 800c87a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c87c:	2800      	cmp	r0, #0
 800c87e:	f000 8158 	beq.w	800cb32 <xQueueGenericReceive+0x2be>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c882:	2900      	cmp	r1, #0
 800c884:	f000 8148 	beq.w	800cb18 <xQueueGenericReceive+0x2a4>
 800c888:	4604      	mov	r4, r0
 800c88a:	4698      	mov	r8, r3
 800c88c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c88e:	f000 ff25 	bl	800d6dc <xTaskGetSchedulerState>
 800c892:	b950      	cbnz	r0, 800c8aa <xQueueGenericReceive+0x36>
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	b143      	cbz	r3, 800c8aa <xQueueGenericReceive+0x36>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	e7fe      	b.n	800c8a8 <xQueueGenericReceive+0x34>
		taskENTER_CRITICAL();
 800c8aa:	f001 f833 	bl	800d914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8b0:	2d00      	cmp	r5, #0
 800c8b2:	f040 80ba 	bne.w	800ca2a <xQueueGenericReceive+0x1b6>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8b6:	9b01      	ldr	r3, [sp, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d06a      	beq.n	800c992 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
 800c8bc:	a802      	add	r0, sp, #8
 800c8be:	f000 feab 	bl	800d618 <vTaskSetTimeOutState>
					portYIELD_WITHIN_API();
 800c8c2:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800cb80 <xQueueGenericReceive+0x30c>
		prvLockQueue( pxQueue );
 800c8c6:	46aa      	mov	sl, r5
 800c8c8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 800c8cc:	f001 f844 	bl	800d958 <vPortExitCritical>
		vTaskSuspendAll();
 800c8d0:	f000 fc0e 	bl	800d0f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8d4:	f001 f81e 	bl	800d914 <vPortEnterCritical>
 800c8d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c8dc:	2bff      	cmp	r3, #255	; 0xff
 800c8de:	bf08      	it	eq
 800c8e0:	f884 a044 	strbeq.w	sl, [r4, #68]	; 0x44
 800c8e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c8e8:	2bff      	cmp	r3, #255	; 0xff
 800c8ea:	bf08      	it	eq
 800c8ec:	f884 a045 	strbeq.w	sl, [r4, #69]	; 0x45
 800c8f0:	f001 f832 	bl	800d958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8f4:	a901      	add	r1, sp, #4
 800c8f6:	a802      	add	r0, sp, #8
 800c8f8:	f000 fea4 	bl	800d644 <xTaskCheckForTimeOut>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d14e      	bne.n	800c99e <xQueueGenericReceive+0x12a>
	taskENTER_CRITICAL();
 800c900:	f001 f808 	bl	800d914 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 80b9 	beq.w	800ca7e <xQueueGenericReceive+0x20a>
	taskEXIT_CRITICAL();
 800c90c:	f001 f824 	bl	800d958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c910:	f001 f800 	bl	800d914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c914:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c918:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c91a:	2d00      	cmp	r5, #0
 800c91c:	dc0a      	bgt.n	800c934 <xQueueGenericReceive+0xc0>
 800c91e:	e00c      	b.n	800c93a <xQueueGenericReceive+0xc6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c920:	4630      	mov	r0, r6
 800c922:	f000 fe35 	bl	800d590 <xTaskRemoveFromEventList>
 800c926:	b108      	cbz	r0, 800c92c <xQueueGenericReceive+0xb8>
						vTaskMissedYield();
 800c928:	f000 fecc 	bl	800d6c4 <vTaskMissedYield>
 800c92c:	3d01      	subs	r5, #1
 800c92e:	b2eb      	uxtb	r3, r5
 800c930:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c932:	b113      	cbz	r3, 800c93a <xQueueGenericReceive+0xc6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1f2      	bne.n	800c920 <xQueueGenericReceive+0xac>
		pxQueue->cTxLock = queueUNLOCKED;
 800c93a:	23ff      	movs	r3, #255	; 0xff
 800c93c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c940:	f001 f80a 	bl	800d958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c944:	f000 ffe6 	bl	800d914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c948:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c94c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c94e:	2d00      	cmp	r5, #0
 800c950:	dd10      	ble.n	800c974 <xQueueGenericReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c952:	6923      	ldr	r3, [r4, #16]
 800c954:	b173      	cbz	r3, 800c974 <xQueueGenericReceive+0x100>
 800c956:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c95a:	4648      	mov	r0, r9
 800c95c:	f000 fe18 	bl	800d590 <xTaskRemoveFromEventList>
 800c960:	b108      	cbz	r0, 800c966 <xQueueGenericReceive+0xf2>
					vTaskMissedYield();
 800c962:	f000 feaf 	bl	800d6c4 <vTaskMissedYield>
 800c966:	3d01      	subs	r5, #1
 800c968:	b2eb      	uxtb	r3, r5
 800c96a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c96c:	b113      	cbz	r3, 800c974 <xQueueGenericReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c96e:	6923      	ldr	r3, [r4, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1f2      	bne.n	800c95a <xQueueGenericReceive+0xe6>
		pxQueue->cRxLock = queueUNLOCKED;
 800c974:	23ff      	movs	r3, #255	; 0xff
 800c976:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c97a:	f000 ffed 	bl	800d958 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c97e:	f000 fc79 	bl	800d274 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c982:	f000 ffc7 	bl	800d914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c986:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c988:	2d00      	cmp	r5, #0
 800c98a:	d14e      	bne.n	800ca2a <xQueueGenericReceive+0x1b6>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c98c:	9b01      	ldr	r3, [sp, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d19c      	bne.n	800c8cc <xQueueGenericReceive+0x58>
					taskEXIT_CRITICAL();
 800c992:	f000 ffe1 	bl	800d958 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c996:	2000      	movs	r0, #0
}
 800c998:	b005      	add	sp, #20
 800c99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskENTER_CRITICAL();
 800c99e:	f000 ffb9 	bl	800d914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c9a2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c9a6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9a8:	2d00      	cmp	r5, #0
 800c9aa:	dc0a      	bgt.n	800c9c2 <xQueueGenericReceive+0x14e>
 800c9ac:	e00c      	b.n	800c9c8 <xQueueGenericReceive+0x154>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f000 fdee 	bl	800d590 <xTaskRemoveFromEventList>
 800c9b4:	b108      	cbz	r0, 800c9ba <xQueueGenericReceive+0x146>
						vTaskMissedYield();
 800c9b6:	f000 fe85 	bl	800d6c4 <vTaskMissedYield>
 800c9ba:	3d01      	subs	r5, #1
 800c9bc:	b2eb      	uxtb	r3, r5
 800c9be:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9c0:	b113      	cbz	r3, 800c9c8 <xQueueGenericReceive+0x154>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1f2      	bne.n	800c9ae <xQueueGenericReceive+0x13a>
		pxQueue->cTxLock = queueUNLOCKED;
 800c9c8:	23ff      	movs	r3, #255	; 0xff
 800c9ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c9ce:	f000 ffc3 	bl	800d958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c9d2:	f000 ff9f 	bl	800d914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c9d6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c9da:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9dc:	2d00      	cmp	r5, #0
 800c9de:	dd11      	ble.n	800ca04 <xQueueGenericReceive+0x190>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9e0:	6923      	ldr	r3, [r4, #16]
 800c9e2:	b17b      	cbz	r3, 800ca04 <xQueueGenericReceive+0x190>
 800c9e4:	f104 0910 	add.w	r9, r4, #16
 800c9e8:	e001      	b.n	800c9ee <xQueueGenericReceive+0x17a>
 800c9ea:	6923      	ldr	r3, [r4, #16]
 800c9ec:	b153      	cbz	r3, 800ca04 <xQueueGenericReceive+0x190>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ee:	4648      	mov	r0, r9
 800c9f0:	f000 fdce 	bl	800d590 <xTaskRemoveFromEventList>
 800c9f4:	b108      	cbz	r0, 800c9fa <xQueueGenericReceive+0x186>
					vTaskMissedYield();
 800c9f6:	f000 fe65 	bl	800d6c4 <vTaskMissedYield>
 800c9fa:	3d01      	subs	r5, #1
 800c9fc:	b2eb      	uxtb	r3, r5
 800c9fe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1f2      	bne.n	800c9ea <xQueueGenericReceive+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 800ca04:	23ff      	movs	r3, #255	; 0xff
 800ca06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ca0a:	f000 ffa5 	bl	800d958 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800ca0e:	f000 fc31 	bl	800d274 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800ca12:	f000 ff7f 	bl	800d914 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d0ba      	beq.n	800c992 <xQueueGenericReceive+0x11e>
	taskEXIT_CRITICAL();
 800ca1c:	f000 ff9c 	bl	800d958 <vPortExitCritical>
		taskENTER_CRITICAL();
 800ca20:	f000 ff78 	bl	800d914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca24:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca26:	2d00      	cmp	r5, #0
 800ca28:	d0b0      	beq.n	800c98c <xQueueGenericReceive+0x118>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800ca2c:	68e6      	ldr	r6, [r4, #12]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca2e:	b152      	cbz	r2, 800ca46 <xQueueGenericReceive+0x1d2>
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca30:	6861      	ldr	r1, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ca32:	18b3      	adds	r3, r6, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca34:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ca36:	60e3      	str	r3, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ca38:	bf24      	itt	cs
 800ca3a:	6823      	ldrcs	r3, [r4, #0]
 800ca3c:	60e3      	strcs	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ca3e:	4638      	mov	r0, r7
 800ca40:	68e1      	ldr	r1, [r4, #12]
 800ca42:	f005 fa13 	bl	8011e6c <memcpy>
				if( xJustPeeking == pdFALSE )
 800ca46:	f1b8 0f00 	cmp.w	r8, #0
 800ca4a:	f040 8083 	bne.w	800cb54 <xQueueGenericReceive+0x2e0>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca4e:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800ca50:	3d01      	subs	r5, #1
 800ca52:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 8086 	beq.w	800cb66 <xQueueGenericReceive+0x2f2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca5a:	6923      	ldr	r3, [r4, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d07c      	beq.n	800cb5a <xQueueGenericReceive+0x2e6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca60:	f104 0010 	add.w	r0, r4, #16
 800ca64:	f000 fd94 	bl	800d590 <xTaskRemoveFromEventList>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d076      	beq.n	800cb5a <xQueueGenericReceive+0x2e6>
							queueYIELD_IF_USING_PREEMPTION();
 800ca6c:	4b44      	ldr	r3, [pc, #272]	; (800cb80 <xQueueGenericReceive+0x30c>)
 800ca6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	e06d      	b.n	800cb5a <xQueueGenericReceive+0x2e6>
	taskEXIT_CRITICAL();
 800ca7e:	f000 ff6b 	bl	800d958 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d05d      	beq.n	800cb44 <xQueueGenericReceive+0x2d0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca88:	9901      	ldr	r1, [sp, #4]
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f000 fd30 	bl	800d4f0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800ca90:	f000 ff40 	bl	800d914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ca94:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800ca98:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca9a:	2d00      	cmp	r5, #0
 800ca9c:	dc0a      	bgt.n	800cab4 <xQueueGenericReceive+0x240>
 800ca9e:	e00c      	b.n	800caba <xQueueGenericReceive+0x246>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caa0:	4630      	mov	r0, r6
 800caa2:	f000 fd75 	bl	800d590 <xTaskRemoveFromEventList>
 800caa6:	b108      	cbz	r0, 800caac <xQueueGenericReceive+0x238>
						vTaskMissedYield();
 800caa8:	f000 fe0c 	bl	800d6c4 <vTaskMissedYield>
 800caac:	3d01      	subs	r5, #1
 800caae:	b2eb      	uxtb	r3, r5
 800cab0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cab2:	b113      	cbz	r3, 800caba <xQueueGenericReceive+0x246>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1f2      	bne.n	800caa0 <xQueueGenericReceive+0x22c>
		pxQueue->cTxLock = queueUNLOCKED;
 800caba:	23ff      	movs	r3, #255	; 0xff
 800cabc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cac0:	f000 ff4a 	bl	800d958 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cac4:	f000 ff26 	bl	800d914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cac8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cacc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cace:	2d00      	cmp	r5, #0
 800cad0:	dd10      	ble.n	800caf4 <xQueueGenericReceive+0x280>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	b173      	cbz	r3, 800caf4 <xQueueGenericReceive+0x280>
 800cad6:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cada:	4648      	mov	r0, r9
 800cadc:	f000 fd58 	bl	800d590 <xTaskRemoveFromEventList>
 800cae0:	b108      	cbz	r0, 800cae6 <xQueueGenericReceive+0x272>
					vTaskMissedYield();
 800cae2:	f000 fdef 	bl	800d6c4 <vTaskMissedYield>
 800cae6:	3d01      	subs	r5, #1
 800cae8:	b2eb      	uxtb	r3, r5
 800caea:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caec:	b113      	cbz	r3, 800caf4 <xQueueGenericReceive+0x280>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caee:	6923      	ldr	r3, [r4, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1f2      	bne.n	800cada <xQueueGenericReceive+0x266>
		pxQueue->cRxLock = queueUNLOCKED;
 800caf4:	23ff      	movs	r3, #255	; 0xff
 800caf6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cafa:	f000 ff2d 	bl	800d958 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800cafe:	f000 fbb9 	bl	800d274 <xTaskResumeAll>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d18c      	bne.n	800ca20 <xQueueGenericReceive+0x1ac>
					portYIELD_WITHIN_API();
 800cb06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb0a:	f8cb 3000 	str.w	r3, [fp]
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	e783      	b.n	800ca20 <xQueueGenericReceive+0x1ac>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb18:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cb1a:	2a00      	cmp	r2, #0
 800cb1c:	f43f aeb4 	beq.w	800c888 <xQueueGenericReceive+0x14>
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	e7fe      	b.n	800cb30 <xQueueGenericReceive+0x2bc>
 800cb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	e7fe      	b.n	800cb42 <xQueueGenericReceive+0x2ce>
						taskENTER_CRITICAL();
 800cb44:	f000 fee6 	bl	800d914 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800cb48:	6860      	ldr	r0, [r4, #4]
 800cb4a:	f000 fdd7 	bl	800d6fc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800cb4e:	f000 ff03 	bl	800d958 <vPortExitCritical>
 800cb52:	e799      	b.n	800ca88 <xQueueGenericReceive+0x214>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb54:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800cb56:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb58:	b94b      	cbnz	r3, 800cb6e <xQueueGenericReceive+0x2fa>
				taskEXIT_CRITICAL();
 800cb5a:	f000 fefd 	bl	800d958 <vPortExitCritical>
				return pdPASS;
 800cb5e:	2001      	movs	r0, #1
}
 800cb60:	b005      	add	sp, #20
 800cb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800cb66:	f000 fe6b 	bl	800d840 <pvTaskIncrementMutexHeldCount>
 800cb6a:	6060      	str	r0, [r4, #4]
 800cb6c:	e775      	b.n	800ca5a <xQueueGenericReceive+0x1e6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cb72:	f000 fd0d 	bl	800d590 <xTaskRemoveFromEventList>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	f47f af78 	bne.w	800ca6c <xQueueGenericReceive+0x1f8>
 800cb7c:	e7ed      	b.n	800cb5a <xQueueGenericReceive+0x2e6>
 800cb7e:	bf00      	nop
 800cb80:	e000ed04 	.word	0xe000ed04

0800cb84 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800cb84:	b190      	cbz	r0, 800cbac <xQueueTakeMutexRecursive+0x28>
	{
 800cb86:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800cb88:	6846      	ldr	r6, [r0, #4]
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	460d      	mov	r5, r1
 800cb8e:	f000 fd9f 	bl	800d6d0 <xTaskGetCurrentTaskHandle>
 800cb92:	4286      	cmp	r6, r0
 800cb94:	d013      	beq.n	800cbbe <xQueueTakeMutexRecursive+0x3a>
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 800cb96:	2300      	movs	r3, #0
 800cb98:	462a      	mov	r2, r5
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f7ff fe69 	bl	800c874 <xQueueGenericReceive>
			if( xReturn != pdFAIL )
 800cba2:	b110      	cbz	r0, 800cbaa <xQueueTakeMutexRecursive+0x26>
				( pxMutex->u.uxRecursiveCallCount )++;
 800cba4:	68e3      	ldr	r3, [r4, #12]
 800cba6:	3301      	adds	r3, #1
 800cba8:	60e3      	str	r3, [r4, #12]
	}
 800cbaa:	bd70      	pop	{r4, r5, r6, pc}
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	e7fe      	b.n	800cbbc <xQueueTakeMutexRecursive+0x38>
			( pxMutex->u.uxRecursiveCallCount )++;
 800cbbe:	68e3      	ldr	r3, [r4, #12]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 800cbc4:	2001      	movs	r0, #1
	}
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}

0800cbc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cbca:	4b1b      	ldr	r3, [pc, #108]	; (800cc38 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbcc:	4e1b      	ldr	r6, [pc, #108]	; (800cc3c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800cbce:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbd0:	6833      	ldr	r3, [r6, #0]
{
 800cbd2:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbd4:	1d18      	adds	r0, r3, #4
{
 800cbd6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbd8:	f7ff fb4c 	bl	800c274 <uxListRemove>
 800cbdc:	b940      	cbnz	r0, 800cbf0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800cbde:	6833      	ldr	r3, [r6, #0]
 800cbe0:	4917      	ldr	r1, [pc, #92]	; (800cc40 <prvAddCurrentTaskToDelayedList+0x78>)
 800cbe2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800cbe4:	680b      	ldr	r3, [r1, #0]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	4082      	lsls	r2, r0
 800cbea:	ea23 0302 	bic.w	r3, r3, r2
 800cbee:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cbf0:	1c6b      	adds	r3, r5, #1
 800cbf2:	d017      	beq.n	800cc24 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbf4:	6833      	ldr	r3, [r6, #0]
 800cbf6:	1964      	adds	r4, r4, r5
 800cbf8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800cbfa:	d20b      	bcs.n	800cc14 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbfc:	4b11      	ldr	r3, [pc, #68]	; (800cc44 <prvAddCurrentTaskToDelayedList+0x7c>)
 800cbfe:	6818      	ldr	r0, [r3, #0]
 800cc00:	6831      	ldr	r1, [r6, #0]
 800cc02:	3104      	adds	r1, #4
 800cc04:	f7ff fb1c 	bl	800c240 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc08:	4b0f      	ldr	r3, [pc, #60]	; (800cc48 <prvAddCurrentTaskToDelayedList+0x80>)
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 800cc0e:	bf88      	it	hi
 800cc10:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc14:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <prvAddCurrentTaskToDelayedList+0x84>)
 800cc16:	6818      	ldr	r0, [r3, #0]
 800cc18:	6831      	ldr	r1, [r6, #0]
}
 800cc1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc1e:	3104      	adds	r1, #4
 800cc20:	f7ff bb0e 	b.w	800c240 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc24:	2f00      	cmp	r7, #0
 800cc26:	d0e5      	beq.n	800cbf4 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc28:	6831      	ldr	r1, [r6, #0]
 800cc2a:	4809      	ldr	r0, [pc, #36]	; (800cc50 <prvAddCurrentTaskToDelayedList+0x88>)
 800cc2c:	3104      	adds	r1, #4
}
 800cc2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc32:	f7ff baf5 	b.w	800c220 <vListInsertEnd>
 800cc36:	bf00      	nop
 800cc38:	20000994 	.word	0x20000994
 800cc3c:	20000870 	.word	0x20000870
 800cc40:	2000091c 	.word	0x2000091c
 800cc44:	20000874 	.word	0x20000874
 800cc48:	2000094c 	.word	0x2000094c
 800cc4c:	20000878 	.word	0x20000878
 800cc50:	2000096c 	.word	0x2000096c

0800cc54 <xTaskCreate>:
	{
 800cc54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc58:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800cc5c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc5e:	4650      	mov	r0, sl
	{
 800cc60:	460d      	mov	r5, r1
 800cc62:	4699      	mov	r9, r3
 800cc64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc66:	f000 ffb7 	bl	800dbd8 <pvPortMalloc>
			if( pxStack != NULL )
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	f000 810e 	beq.w	800ce8c <xTaskCreate+0x238>
 800cc70:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800cc72:	20b4      	movs	r0, #180	; 0xb4
 800cc74:	f000 ffb0 	bl	800dbd8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800cc78:	4604      	mov	r4, r0
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	f000 80da 	beq.w	800ce34 <xTaskCreate+0x1e0>
					pxNewTCB->pxStack = pxStack;
 800cc80:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc82:	782b      	ldrb	r3, [r5, #0]
 800cc84:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cc88:	f1aa 0a04 	sub.w	sl, sl, #4
		if( pcName[ x ] == 0x00 )
 800cc8c:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cc8e:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cc90:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d04d      	beq.n	800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc98:	786b      	ldrb	r3, [r5, #1]
 800cc9a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800cc9e:	786b      	ldrb	r3, [r5, #1]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d047      	beq.n	800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cca4:	78ab      	ldrb	r3, [r5, #2]
 800cca6:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800ccaa:	78ab      	ldrb	r3, [r5, #2]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d041      	beq.n	800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccb0:	78eb      	ldrb	r3, [r5, #3]
 800ccb2:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 800ccb6:	78eb      	ldrb	r3, [r5, #3]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d03b      	beq.n	800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccbc:	792b      	ldrb	r3, [r5, #4]
 800ccbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 800ccc2:	792b      	ldrb	r3, [r5, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d035      	beq.n	800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccc8:	796b      	ldrb	r3, [r5, #5]
 800ccca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800ccce:	796b      	ldrb	r3, [r5, #5]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d02f      	beq.n	800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccd4:	79ab      	ldrb	r3, [r5, #6]
 800ccd6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800ccda:	79ab      	ldrb	r3, [r5, #6]
 800ccdc:	b353      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccde:	79eb      	ldrb	r3, [r5, #7]
 800cce0:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 800cce4:	79eb      	ldrb	r3, [r5, #7]
 800cce6:	b32b      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cce8:	7a2b      	ldrb	r3, [r5, #8]
 800ccea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800ccee:	7a2b      	ldrb	r3, [r5, #8]
 800ccf0:	b303      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccf2:	7a6b      	ldrb	r3, [r5, #9]
 800ccf4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 800ccf8:	7a6b      	ldrb	r3, [r5, #9]
 800ccfa:	b1db      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccfc:	7aab      	ldrb	r3, [r5, #10]
 800ccfe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 800cd02:	7aab      	ldrb	r3, [r5, #10]
 800cd04:	b1b3      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd06:	7aeb      	ldrb	r3, [r5, #11]
 800cd08:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800cd0c:	7aeb      	ldrb	r3, [r5, #11]
 800cd0e:	b18b      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd10:	7b2b      	ldrb	r3, [r5, #12]
 800cd12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 800cd16:	7b2b      	ldrb	r3, [r5, #12]
 800cd18:	b163      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd1a:	7b6b      	ldrb	r3, [r5, #13]
 800cd1c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800cd20:	7b6b      	ldrb	r3, [r5, #13]
 800cd22:	b13b      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd24:	7bab      	ldrb	r3, [r5, #14]
 800cd26:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 800cd2a:	7bab      	ldrb	r3, [r5, #14]
 800cd2c:	b113      	cbz	r3, 800cd34 <xTaskCreate+0xe0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd2e:	7beb      	ldrb	r3, [r5, #15]
 800cd30:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800cd34:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cd36:	2d06      	cmp	r5, #6
 800cd38:	bf28      	it	cs
 800cd3a:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd3c:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd40:	f104 0a04 	add.w	sl, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800cd44:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800cd46:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd48:	4650      	mov	r0, sl
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd4a:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800cd4e:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd52:	f7ff fa61 	bl	800c218 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd56:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd5a:	f104 0018 	add.w	r0, r4, #24
 800cd5e:	f7ff fa5b 	bl	800c218 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd62:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800cd64:	f8c4 b0ac 	str.w	fp, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd68:	4659      	mov	r1, fp
 800cd6a:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd6c:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd70:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd72:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd74:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800cd78:	f005 f883 	bl	8011e82 <memset>
 800cd7c:	4d45      	ldr	r5, [pc, #276]	; (800ce94 <xTaskCreate+0x240>)
 800cd7e:	4b46      	ldr	r3, [pc, #280]	; (800ce98 <xTaskCreate+0x244>)
 800cd80:	4a46      	ldr	r2, [pc, #280]	; (800ce9c <xTaskCreate+0x248>)
 800cd82:	6522      	str	r2, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd84:	4641      	mov	r1, r8
 800cd86:	464a      	mov	r2, r9
 800cd88:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd8a:	e9c4 5315 	strd	r5, r3, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd8e:	f000 fd95 	bl	800d8bc <pxPortInitialiseStack>
 800cd92:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800cd94:	b107      	cbz	r7, 800cd98 <xTaskCreate+0x144>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd96:	603c      	str	r4, [r7, #0]
	taskENTER_CRITICAL();
 800cd98:	f000 fdbc 	bl	800d914 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800cd9c:	4a40      	ldr	r2, [pc, #256]	; (800cea0 <xTaskCreate+0x24c>)
		if( pxCurrentTCB == NULL )
 800cd9e:	4e41      	ldr	r6, [pc, #260]	; (800cea4 <xTaskCreate+0x250>)
		uxCurrentNumberOfTasks++;
 800cda0:	6813      	ldr	r3, [r2, #0]
 800cda2:	3301      	adds	r3, #1
 800cda4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cda6:	6833      	ldr	r3, [r6, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d03a      	beq.n	800ce22 <xTaskCreate+0x1ce>
			if( xSchedulerRunning == pdFALSE )
 800cdac:	4f3e      	ldr	r7, [pc, #248]	; (800cea8 <xTaskCreate+0x254>)
 800cdae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	b35a      	cbz	r2, 800ce0c <xTaskCreate+0x1b8>
 800cdb4:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800cecc <xTaskCreate+0x278>
		uxTaskNumber++;
 800cdb8:	4a3c      	ldr	r2, [pc, #240]	; (800ceac <xTaskCreate+0x258>)
		prvAddTaskToReadyList( pxNewTCB );
 800cdba:	f8df c114 	ldr.w	ip, [pc, #276]	; 800ced0 <xTaskCreate+0x27c>
		uxTaskNumber++;
 800cdbe:	6810      	ldr	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800cdc0:	f8dc e000 	ldr.w	lr, [ip]
 800cdc4:	2501      	movs	r5, #1
		uxTaskNumber++;
 800cdc6:	4428      	add	r0, r5
 800cdc8:	6010      	str	r0, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800cdca:	fa05 f203 	lsl.w	r2, r5, r3
 800cdce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cdd2:	ea42 020e 	orr.w	r2, r2, lr
 800cdd6:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 800cdda:	4651      	mov	r1, sl
 800cddc:	f8cc 2000 	str.w	r2, [ip]
 800cde0:	f7ff fa1e 	bl	800c220 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cde4:	f000 fdb8 	bl	800d958 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	b1bb      	cbz	r3, 800ce1c <xTaskCreate+0x1c8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdec:	6832      	ldr	r2, [r6, #0]
 800cdee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cdf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d212      	bcs.n	800ce1c <xTaskCreate+0x1c8>
			taskYIELD_IF_USING_PREEMPTION();
 800cdf6:	4b2e      	ldr	r3, [pc, #184]	; (800ceb0 <xTaskCreate+0x25c>)
 800cdf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800ce06:	4628      	mov	r0, r5
	}
 800ce08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce0c:	6832      	ldr	r2, [r6, #0]
 800ce0e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800cecc <xTaskCreate+0x278>
 800ce12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ce14:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800ce16:	bf98      	it	ls
 800ce18:	6034      	strls	r4, [r6, #0]
 800ce1a:	e7cd      	b.n	800cdb8 <xTaskCreate+0x164>
			xReturn = pdPASS;
 800ce1c:	4628      	mov	r0, r5
	}
 800ce1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 800ce22:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce24:	6813      	ldr	r3, [r2, #0]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d00b      	beq.n	800ce42 <xTaskCreate+0x1ee>
 800ce2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce2c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800cecc <xTaskCreate+0x278>
 800ce30:	4f1d      	ldr	r7, [pc, #116]	; (800cea8 <xTaskCreate+0x254>)
 800ce32:	e7c1      	b.n	800cdb8 <xTaskCreate+0x164>
					vPortFree( pxStack );
 800ce34:	4630      	mov	r0, r6
 800ce36:	f000 ff5b 	bl	800dcf0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce3a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800ce3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce42:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800cecc <xTaskCreate+0x278>
 800ce46:	4645      	mov	r5, r8
 800ce48:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	3514      	adds	r5, #20
 800ce50:	f7ff f9d6 	bl	800c200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce54:	42bd      	cmp	r5, r7
 800ce56:	d1f9      	bne.n	800ce4c <xTaskCreate+0x1f8>
	vListInitialise( &xDelayedTaskList1 );
 800ce58:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800ced4 <xTaskCreate+0x280>
	vListInitialise( &xDelayedTaskList2 );
 800ce5c:	4d15      	ldr	r5, [pc, #84]	; (800ceb4 <xTaskCreate+0x260>)
 800ce5e:	4f12      	ldr	r7, [pc, #72]	; (800cea8 <xTaskCreate+0x254>)
	vListInitialise( &xDelayedTaskList1 );
 800ce60:	4648      	mov	r0, r9
 800ce62:	f7ff f9cd 	bl	800c200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce66:	4628      	mov	r0, r5
 800ce68:	f7ff f9ca 	bl	800c200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce6c:	4812      	ldr	r0, [pc, #72]	; (800ceb8 <xTaskCreate+0x264>)
 800ce6e:	f7ff f9c7 	bl	800c200 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ce72:	4812      	ldr	r0, [pc, #72]	; (800cebc <xTaskCreate+0x268>)
 800ce74:	f7ff f9c4 	bl	800c200 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ce78:	4811      	ldr	r0, [pc, #68]	; (800cec0 <xTaskCreate+0x26c>)
 800ce7a:	f7ff f9c1 	bl	800c200 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce7e:	4b11      	ldr	r3, [pc, #68]	; (800cec4 <xTaskCreate+0x270>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce80:	4a11      	ldr	r2, [pc, #68]	; (800cec8 <xTaskCreate+0x274>)
 800ce82:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce86:	601d      	str	r5, [r3, #0]
 800ce88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce8a:	e795      	b.n	800cdb8 <xTaskCreate+0x164>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce90:	e7ba      	b.n	800ce08 <xTaskCreate+0x1b4>
 800ce92:	bf00      	nop
 800ce94:	08015488 	.word	0x08015488
 800ce98:	08015448 	.word	0x08015448
 800ce9c:	08015468 	.word	0x08015468
 800cea0:	20000908 	.word	0x20000908
 800cea4:	20000870 	.word	0x20000870
 800cea8:	20000968 	.word	0x20000968
 800ceac:	20000918 	.word	0x20000918
 800ceb0:	e000ed04 	.word	0xe000ed04
 800ceb4:	20000934 	.word	0x20000934
 800ceb8:	20000954 	.word	0x20000954
 800cebc:	20000980 	.word	0x20000980
 800cec0:	2000096c 	.word	0x2000096c
 800cec4:	20000878 	.word	0x20000878
 800cec8:	20000874 	.word	0x20000874
 800cecc:	2000087c 	.word	0x2000087c
 800ced0:	2000091c 	.word	0x2000091c
 800ced4:	20000920 	.word	0x20000920

0800ced8 <vTaskStartScheduler>:
{
 800ced8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cedc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cee0:	f000 fe7a 	bl	800dbd8 <pvPortMalloc>
			if( pxStack != NULL )
 800cee4:	2800      	cmp	r0, #0
 800cee6:	f000 80a4 	beq.w	800d032 <vTaskStartScheduler+0x15a>
 800ceea:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ceec:	20b4      	movs	r0, #180	; 0xb4
 800ceee:	f000 fe73 	bl	800dbd8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800cef2:	4604      	mov	r4, r0
 800cef4:	2800      	cmp	r0, #0
 800cef6:	f000 8099 	beq.w	800d02c <vTaskStartScheduler+0x154>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cefa:	2500      	movs	r5, #0
 800cefc:	4b65      	ldr	r3, [pc, #404]	; (800d094 <vTaskStartScheduler+0x1bc>)
 800cefe:	6343      	str	r3, [r0, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf00:	1d07      	adds	r7, r0, #4
					pxNewTCB->pxStack = pxStack;
 800cf02:	6306      	str	r6, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf04:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf08:	f880 5043 	strb.w	r5, [r0, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 800cf0c:	62c5      	str	r5, [r0, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800cf0e:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf12:	4638      	mov	r0, r7
 800cf14:	f7ff f980 	bl	800c218 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf18:	f104 0018 	add.w	r0, r4, #24
 800cf1c:	f7ff f97c 	bl	800c218 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf20:	2307      	movs	r3, #7
		pxNewTCB->ulNotifiedValue = 0;
 800cf22:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf26:	4629      	mov	r1, r5
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf28:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf2a:	2260      	movs	r2, #96	; 0x60
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf2c:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf2e:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf32:	6264      	str	r4, [r4, #36]	; 0x24
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf34:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800cf38:	f004 ffa3 	bl	8011e82 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cf3c:	f506 76fe 	add.w	r6, r6, #508	; 0x1fc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf40:	4b55      	ldr	r3, [pc, #340]	; (800d098 <vTaskStartScheduler+0x1c0>)
 800cf42:	4956      	ldr	r1, [pc, #344]	; (800d09c <vTaskStartScheduler+0x1c4>)
 800cf44:	4a56      	ldr	r2, [pc, #344]	; (800d0a0 <vTaskStartScheduler+0x1c8>)
 800cf46:	6522      	str	r2, [r4, #80]	; 0x50
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cf48:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf4c:	462a      	mov	r2, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf4e:	e9c4 1315 	strd	r1, r3, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf52:	4630      	mov	r0, r6
 800cf54:	4953      	ldr	r1, [pc, #332]	; (800d0a4 <vTaskStartScheduler+0x1cc>)
		if( pxCurrentTCB == NULL )
 800cf56:	4e54      	ldr	r6, [pc, #336]	; (800d0a8 <vTaskStartScheduler+0x1d0>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf58:	f000 fcb0 	bl	800d8bc <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf5c:	4b53      	ldr	r3, [pc, #332]	; (800d0ac <vTaskStartScheduler+0x1d4>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf5e:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf60:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800cf62:	f000 fcd7 	bl	800d914 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800cf66:	4b52      	ldr	r3, [pc, #328]	; (800d0b0 <vTaskStartScheduler+0x1d8>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	3201      	adds	r2, #1
 800cf6c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800cf6e:	6832      	ldr	r2, [r6, #0]
 800cf70:	2a00      	cmp	r2, #0
 800cf72:	d052      	beq.n	800d01a <vTaskStartScheduler+0x142>
			if( xSchedulerRunning == pdFALSE )
 800cf74:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800d0dc <vTaskStartScheduler+0x204>
 800cf78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cf7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d044      	beq.n	800d00c <vTaskStartScheduler+0x134>
 800cf82:	4d4c      	ldr	r5, [pc, #304]	; (800d0b4 <vTaskStartScheduler+0x1dc>)
		uxTaskNumber++;
 800cf84:	f8df e158 	ldr.w	lr, [pc, #344]	; 800d0e0 <vTaskStartScheduler+0x208>
		prvAddTaskToReadyList( pxNewTCB );
 800cf88:	f8df c158 	ldr.w	ip, [pc, #344]	; 800d0e4 <vTaskStartScheduler+0x20c>
		uxTaskNumber++;
 800cf8c:	f8de 3000 	ldr.w	r3, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 800cf90:	f8dc 9000 	ldr.w	r9, [ip]
 800cf94:	2201      	movs	r2, #1
 800cf96:	4082      	lsls	r2, r0
 800cf98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 800cf9c:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800cf9e:	ea42 0209 	orr.w	r2, r2, r9
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
		uxTaskNumber++;
 800cfa8:	f8ce 3000 	str.w	r3, [lr]
		prvAddTaskToReadyList( pxNewTCB );
 800cfac:	f8cc 2000 	str.w	r2, [ip]
 800cfb0:	f7ff f936 	bl	800c220 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cfb4:	f000 fcd0 	bl	800d958 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800cfb8:	f8d8 3000 	ldr.w	r3, [r8]
 800cfbc:	b163      	cbz	r3, 800cfd8 <vTaskStartScheduler+0x100>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cfbe:	6832      	ldr	r2, [r6, #0]
 800cfc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cfc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d207      	bcs.n	800cfd8 <vTaskStartScheduler+0x100>
			taskYIELD_IF_USING_PREEMPTION();
 800cfc8:	4b3b      	ldr	r3, [pc, #236]	; (800d0b8 <vTaskStartScheduler+0x1e0>)
 800cfca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfce:	601a      	str	r2, [r3, #0]
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfe8:	6833      	ldr	r3, [r6, #0]
 800cfea:	4934      	ldr	r1, [pc, #208]	; (800d0bc <vTaskStartScheduler+0x1e4>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800cfec:	4834      	ldr	r0, [pc, #208]	; (800d0c0 <vTaskStartScheduler+0x1e8>)
		xTickCount = ( TickType_t ) 0U;
 800cfee:	4a35      	ldr	r2, [pc, #212]	; (800d0c4 <vTaskStartScheduler+0x1ec>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cff0:	334c      	adds	r3, #76	; 0x4c
		xNextTaskUnblockTime = portMAX_DELAY;
 800cff2:	f04f 34ff 	mov.w	r4, #4294967295
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cff6:	600b      	str	r3, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800cff8:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 800cffa:	6004      	str	r4, [r0, #0]
		xTickCount = ( TickType_t ) 0U;
 800cffc:	2300      	movs	r3, #0
		xSchedulerRunning = pdTRUE;
 800cffe:	f8c8 1000 	str.w	r1, [r8]
}
 800d002:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xTickCount = ( TickType_t ) 0U;
 800d006:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d008:	f000 bd18 	b.w	800da3c <xPortStartScheduler>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d00c:	6833      	ldr	r3, [r6, #0]
 800d00e:	4d29      	ldr	r5, [pc, #164]	; (800d0b4 <vTaskStartScheduler+0x1dc>)
 800d010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d012:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800d014:	bf98      	it	ls
 800d016:	6034      	strls	r4, [r6, #0]
 800d018:	e7b4      	b.n	800cf84 <vTaskStartScheduler+0xac>
			pxCurrentTCB = pxNewTCB;
 800d01a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d010      	beq.n	800d044 <vTaskStartScheduler+0x16c>
 800d022:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d024:	4d23      	ldr	r5, [pc, #140]	; (800d0b4 <vTaskStartScheduler+0x1dc>)
 800d026:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800d0dc <vTaskStartScheduler+0x204>
 800d02a:	e7ab      	b.n	800cf84 <vTaskStartScheduler+0xac>
					vPortFree( pxStack );
 800d02c:	4630      	mov	r0, r6
 800d02e:	f000 fe5f 	bl	800dcf0 <vPortFree>
 800d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	e7fe      	b.n	800d042 <vTaskStartScheduler+0x16a>
 800d044:	4d1b      	ldr	r5, [pc, #108]	; (800d0b4 <vTaskStartScheduler+0x1dc>)
 800d046:	46a8      	mov	r8, r5
 800d048:	f105 098c 	add.w	r9, r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d04c:	4640      	mov	r0, r8
 800d04e:	f108 0814 	add.w	r8, r8, #20
 800d052:	f7ff f8d5 	bl	800c200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d056:	45c1      	cmp	r9, r8
 800d058:	d1f8      	bne.n	800d04c <vTaskStartScheduler+0x174>
	vListInitialise( &xDelayedTaskList1 );
 800d05a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800d0e8 <vTaskStartScheduler+0x210>
	vListInitialise( &xDelayedTaskList2 );
 800d05e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d0ec <vTaskStartScheduler+0x214>
 800d062:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800d0dc <vTaskStartScheduler+0x204>
	vListInitialise( &xDelayedTaskList1 );
 800d066:	4650      	mov	r0, sl
 800d068:	f7ff f8ca 	bl	800c200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d06c:	4648      	mov	r0, r9
 800d06e:	f7ff f8c7 	bl	800c200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d072:	4815      	ldr	r0, [pc, #84]	; (800d0c8 <vTaskStartScheduler+0x1f0>)
 800d074:	f7ff f8c4 	bl	800c200 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d078:	4814      	ldr	r0, [pc, #80]	; (800d0cc <vTaskStartScheduler+0x1f4>)
 800d07a:	f7ff f8c1 	bl	800c200 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d07e:	4814      	ldr	r0, [pc, #80]	; (800d0d0 <vTaskStartScheduler+0x1f8>)
 800d080:	f7ff f8be 	bl	800c200 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d084:	4a13      	ldr	r2, [pc, #76]	; (800d0d4 <vTaskStartScheduler+0x1fc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <vTaskStartScheduler+0x200>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800d088:	f8c2 a000 	str.w	sl, [r2]
 800d08c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d08e:	f8c3 9000 	str.w	r9, [r3]
 800d092:	e777      	b.n	800cf84 <vTaskStartScheduler+0xac>
 800d094:	454c4449 	.word	0x454c4449
 800d098:	08015448 	.word	0x08015448
 800d09c:	08015488 	.word	0x08015488
 800d0a0:	08015468 	.word	0x08015468
 800d0a4:	0800d3d1 	.word	0x0800d3d1
 800d0a8:	20000870 	.word	0x20000870
 800d0ac:	20000948 	.word	0x20000948
 800d0b0:	20000908 	.word	0x20000908
 800d0b4:	2000087c 	.word	0x2000087c
 800d0b8:	e000ed04 	.word	0xe000ed04
 800d0bc:	20000018 	.word	0x20000018
 800d0c0:	2000094c 	.word	0x2000094c
 800d0c4:	20000994 	.word	0x20000994
 800d0c8:	20000954 	.word	0x20000954
 800d0cc:	20000980 	.word	0x20000980
 800d0d0:	2000096c 	.word	0x2000096c
 800d0d4:	20000874 	.word	0x20000874
 800d0d8:	20000878 	.word	0x20000878
 800d0dc:	20000968 	.word	0x20000968
 800d0e0:	20000918 	.word	0x20000918
 800d0e4:	2000091c 	.word	0x2000091c
 800d0e8:	20000920 	.word	0x20000920
 800d0ec:	20000934 	.word	0x20000934

0800d0f0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d0f0:	4a02      	ldr	r2, [pc, #8]	; (800d0fc <vTaskSuspendAll+0xc>)
 800d0f2:	6813      	ldr	r3, [r2, #0]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	6013      	str	r3, [r2, #0]
}
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	20000914 	.word	0x20000914

0800d100 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d100:	4b01      	ldr	r3, [pc, #4]	; (800d108 <xTaskGetTickCount+0x8>)
 800d102:	6818      	ldr	r0, [r3, #0]
}
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	20000994 	.word	0x20000994

0800d10c <xTaskGetTickCountFromISR>:
{
 800d10c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d10e:	f000 fd0d 	bl	800db2c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800d112:	4b01      	ldr	r3, [pc, #4]	; (800d118 <xTaskGetTickCountFromISR+0xc>)
 800d114:	6818      	ldr	r0, [r3, #0]
}
 800d116:	bd08      	pop	{r3, pc}
 800d118:	20000994 	.word	0x20000994

0800d11c <xTaskIncrementTick>:
{
 800d11c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d120:	4b49      	ldr	r3, [pc, #292]	; (800d248 <xTaskIncrementTick+0x12c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	b9cb      	cbnz	r3, 800d15a <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + 1;
 800d126:	4b49      	ldr	r3, [pc, #292]	; (800d24c <xTaskIncrementTick+0x130>)
 800d128:	681e      	ldr	r6, [r3, #0]
 800d12a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800d12c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800d12e:	b30e      	cbz	r6, 800d174 <xTaskIncrementTick+0x58>
 800d130:	f8df b138 	ldr.w	fp, [pc, #312]	; 800d26c <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d134:	f8db 2000 	ldr.w	r2, [fp]
 800d138:	42b2      	cmp	r2, r6
 800d13a:	d929      	bls.n	800d190 <xTaskIncrementTick+0x74>
 800d13c:	4f44      	ldr	r7, [pc, #272]	; (800d250 <xTaskIncrementTick+0x134>)
 800d13e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800d270 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 800d142:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d144:	f8d8 3000 	ldr.w	r3, [r8]
 800d148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d14e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
				xSwitchRequired = pdTRUE;
 800d152:	2b02      	cmp	r3, #2
 800d154:	bf28      	it	cs
 800d156:	2501      	movcs	r5, #1
 800d158:	e004      	b.n	800d164 <xTaskIncrementTick+0x48>
		++uxPendedTicks;
 800d15a:	4a3e      	ldr	r2, [pc, #248]	; (800d254 <xTaskIncrementTick+0x138>)
 800d15c:	6813      	ldr	r3, [r2, #0]
 800d15e:	3301      	adds	r3, #1
 800d160:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d162:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 800d164:	4b3c      	ldr	r3, [pc, #240]	; (800d258 <xTaskIncrementTick+0x13c>)
 800d166:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800d168:	2b00      	cmp	r3, #0
}
 800d16a:	bf0c      	ite	eq
 800d16c:	4628      	moveq	r0, r5
 800d16e:	2001      	movne	r0, #1
 800d170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800d174:	4c39      	ldr	r4, [pc, #228]	; (800d25c <xTaskIncrementTick+0x140>)
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d048      	beq.n	800d210 <xTaskIncrementTick+0xf4>
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	e7fe      	b.n	800d18e <xTaskIncrementTick+0x72>
 800d190:	4c32      	ldr	r4, [pc, #200]	; (800d25c <xTaskIncrementTick+0x140>)
 800d192:	4f2f      	ldr	r7, [pc, #188]	; (800d250 <xTaskIncrementTick+0x134>)
 800d194:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800d270 <xTaskIncrementTick+0x154>
BaseType_t xSwitchRequired = pdFALSE;
 800d198:	2500      	movs	r5, #0
 800d19a:	e02d      	b.n	800d1f8 <xTaskIncrementTick+0xdc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d19c:	6822      	ldr	r2, [r4, #0]
 800d19e:	68d2      	ldr	r2, [r2, #12]
 800d1a0:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1a8:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 800d1ac:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1ae:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800d1b0:	d32b      	bcc.n	800d20a <xTaskIncrementTick+0xee>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1b2:	f7ff f85f 	bl	800c274 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1b6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1ba:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1be:	b109      	cbz	r1, 800d1c4 <xTaskIncrementTick+0xa8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1c0:	f7ff f858 	bl	800c274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d1c4:	4a26      	ldr	r2, [pc, #152]	; (800d260 <xTaskIncrementTick+0x144>)
 800d1c6:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800d1ca:	6813      	ldr	r3, [r2, #0]
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	fa01 fc00 	lsl.w	ip, r1, r0
 800d1d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d1d6:	4651      	mov	r1, sl
 800d1d8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800d1dc:	ea4c 0c03 	orr.w	ip, ip, r3
 800d1e0:	f8c2 c000 	str.w	ip, [r2]
 800d1e4:	f7ff f81c 	bl	800c220 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1e8:	f8d8 0000 	ldr.w	r0, [r8]
 800d1ec:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800d1f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800d1f2:	4291      	cmp	r1, r2
 800d1f4:	bf28      	it	cs
 800d1f6:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1f8:	6822      	ldr	r2, [r4, #0]
 800d1fa:	6812      	ldr	r2, [r2, #0]
 800d1fc:	2a00      	cmp	r2, #0
 800d1fe:	d1cd      	bne.n	800d19c <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d200:	f04f 32ff 	mov.w	r2, #4294967295
 800d204:	f8cb 2000 	str.w	r2, [fp]
					break;
 800d208:	e79c      	b.n	800d144 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 800d20a:	f8cb 1000 	str.w	r1, [fp]
						break;
 800d20e:	e799      	b.n	800d144 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 800d210:	4b14      	ldr	r3, [pc, #80]	; (800d264 <xTaskIncrementTick+0x148>)
 800d212:	6821      	ldr	r1, [r4, #0]
 800d214:	4a14      	ldr	r2, [pc, #80]	; (800d268 <xTaskIncrementTick+0x14c>)
 800d216:	6818      	ldr	r0, [r3, #0]
 800d218:	6020      	str	r0, [r4, #0]
 800d21a:	6019      	str	r1, [r3, #0]
 800d21c:	6813      	ldr	r3, [r2, #0]
 800d21e:	3301      	adds	r3, #1
 800d220:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	b933      	cbnz	r3, 800d236 <xTaskIncrementTick+0x11a>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d228:	f8df b040 	ldr.w	fp, [pc, #64]	; 800d26c <xTaskIncrementTick+0x150>
 800d22c:	f04f 32ff 	mov.w	r2, #4294967295
 800d230:	f8cb 2000 	str.w	r2, [fp]
 800d234:	e77e      	b.n	800d134 <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d236:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d238:	f8df b030 	ldr.w	fp, [pc, #48]	; 800d26c <xTaskIncrementTick+0x150>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d23c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d23e:	68d2      	ldr	r2, [r2, #12]
 800d240:	6852      	ldr	r2, [r2, #4]
 800d242:	f8cb 2000 	str.w	r2, [fp]
 800d246:	e775      	b.n	800d134 <xTaskIncrementTick+0x18>
 800d248:	20000914 	.word	0x20000914
 800d24c:	20000994 	.word	0x20000994
 800d250:	2000087c 	.word	0x2000087c
 800d254:	20000910 	.word	0x20000910
 800d258:	20000998 	.word	0x20000998
 800d25c:	20000874 	.word	0x20000874
 800d260:	2000091c 	.word	0x2000091c
 800d264:	20000878 	.word	0x20000878
 800d268:	20000950 	.word	0x20000950
 800d26c:	2000094c 	.word	0x2000094c
 800d270:	20000870 	.word	0x20000870

0800d274 <xTaskResumeAll>:
{
 800d274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 800d278:	4c38      	ldr	r4, [pc, #224]	; (800d35c <xTaskResumeAll+0xe8>)
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	b943      	cbnz	r3, 800d290 <xTaskResumeAll+0x1c>
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	e7fe      	b.n	800d28e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800d290:	f000 fb40 	bl	800d914 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d294:	6823      	ldr	r3, [r4, #0]
 800d296:	3b01      	subs	r3, #1
 800d298:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d29a:	6824      	ldr	r4, [r4, #0]
 800d29c:	bb7c      	cbnz	r4, 800d2fe <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d29e:	4b30      	ldr	r3, [pc, #192]	; (800d360 <xTaskResumeAll+0xec>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	b363      	cbz	r3, 800d2fe <xTaskResumeAll+0x8a>
 800d2a4:	4d2f      	ldr	r5, [pc, #188]	; (800d364 <xTaskResumeAll+0xf0>)
 800d2a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d37c <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 800d2aa:	4e2f      	ldr	r6, [pc, #188]	; (800d368 <xTaskResumeAll+0xf4>)
 800d2ac:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800d380 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2b0:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800d384 <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2b4:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
 800d2b8:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2ba:	b333      	cbz	r3, 800d30a <xTaskResumeAll+0x96>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d2bc:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d2c0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2c2:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2c6:	f104 0018 	add.w	r0, r4, #24
 800d2ca:	f7fe ffd3 	bl	800c274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	f7fe ffd0 	bl	800c274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d2d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d2d6:	6832      	ldr	r2, [r6, #0]
 800d2d8:	fa07 f300 	lsl.w	r3, r7, r0
 800d2dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	4641      	mov	r1, r8
 800d2e4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d2e8:	6033      	str	r3, [r6, #0]
 800d2ea:	f7fe ff99 	bl	800c220 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2ee:	f8db 3000 	ldr.w	r3, [fp]
 800d2f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d3dc      	bcc.n	800d2b4 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 800d2fa:	602f      	str	r7, [r5, #0]
 800d2fc:	e7da      	b.n	800d2b4 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800d2fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d300:	f000 fb2a 	bl	800d958 <vPortExitCritical>
}
 800d304:	4620      	mov	r0, r4
 800d306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 800d30a:	b13c      	cbz	r4, 800d31c <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d30c:	4b17      	ldr	r3, [pc, #92]	; (800d36c <xTaskResumeAll+0xf8>)
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	6812      	ldr	r2, [r2, #0]
 800d312:	b9da      	cbnz	r2, 800d34c <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d314:	4b16      	ldr	r3, [pc, #88]	; (800d370 <xTaskResumeAll+0xfc>)
 800d316:	f04f 32ff 	mov.w	r2, #4294967295
 800d31a:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d31c:	4e15      	ldr	r6, [pc, #84]	; (800d374 <xTaskResumeAll+0x100>)
 800d31e:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d320:	b13c      	cbz	r4, 800d332 <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 800d322:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d324:	f7ff fefa 	bl	800d11c <xTaskIncrementTick>
 800d328:	b100      	cbz	r0, 800d32c <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800d32a:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d32c:	3c01      	subs	r4, #1
 800d32e:	d1f9      	bne.n	800d324 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800d330:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800d332:	682b      	ldr	r3, [r5, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d0e2      	beq.n	800d2fe <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 800d338:	4b0f      	ldr	r3, [pc, #60]	; (800d378 <xTaskResumeAll+0x104>)
 800d33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d33e:	601a      	str	r2, [r3, #0]
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d348:	2401      	movs	r4, #1
 800d34a:	e7d9      	b.n	800d300 <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d34c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d34e:	4b08      	ldr	r3, [pc, #32]	; (800d370 <xTaskResumeAll+0xfc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d350:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d352:	68d2      	ldr	r2, [r2, #12]
 800d354:	6852      	ldr	r2, [r2, #4]
 800d356:	601a      	str	r2, [r3, #0]
 800d358:	e7e0      	b.n	800d31c <xTaskResumeAll+0xa8>
 800d35a:	bf00      	nop
 800d35c:	20000914 	.word	0x20000914
 800d360:	20000908 	.word	0x20000908
 800d364:	20000998 	.word	0x20000998
 800d368:	2000091c 	.word	0x2000091c
 800d36c:	20000874 	.word	0x20000874
 800d370:	2000094c 	.word	0x2000094c
 800d374:	20000910 	.word	0x20000910
 800d378:	e000ed04 	.word	0xe000ed04
 800d37c:	20000954 	.word	0x20000954
 800d380:	2000087c 	.word	0x2000087c
 800d384:	20000870 	.word	0x20000870

0800d388 <vTaskDelay>:
	{
 800d388:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d38a:	b198      	cbz	r0, 800d3b4 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 800d38c:	4b0e      	ldr	r3, [pc, #56]	; (800d3c8 <vTaskDelay+0x40>)
 800d38e:	6819      	ldr	r1, [r3, #0]
 800d390:	b141      	cbz	r1, 800d3a4 <vTaskDelay+0x1c>
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	e7fe      	b.n	800d3a2 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	3201      	adds	r2, #1
 800d3a8:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d3aa:	f7ff fc0d 	bl	800cbc8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d3ae:	f7ff ff61 	bl	800d274 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d3b2:	b938      	cbnz	r0, 800d3c4 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 800d3b4:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <vTaskDelay+0x44>)
 800d3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	f3bf 8f6f 	isb	sy
	}
 800d3c4:	bd08      	pop	{r3, pc}
 800d3c6:	bf00      	nop
 800d3c8:	20000914 	.word	0x20000914
 800d3cc:	e000ed04 	.word	0xe000ed04

0800d3d0 <prvIdleTask>:
{
 800d3d0:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 800d3d4:	4c1e      	ldr	r4, [pc, #120]	; (800d450 <prvIdleTask+0x80>)
 800d3d6:	4e1f      	ldr	r6, [pc, #124]	; (800d454 <prvIdleTask+0x84>)
 800d3d8:	4d1f      	ldr	r5, [pc, #124]	; (800d458 <prvIdleTask+0x88>)
 800d3da:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800d460 <prvIdleTask+0x90>
				taskYIELD();
 800d3de:	f8df a084 	ldr.w	sl, [pc, #132]	; 800d464 <prvIdleTask+0x94>
 800d3e2:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 800d3e6:	e006      	b.n	800d3f6 <prvIdleTask+0x26>
	++uxSchedulerSuspended;
 800d3e8:	6823      	ldr	r3, [r4, #0]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800d3ea:	6837      	ldr	r7, [r6, #0]
	++uxSchedulerSuspended;
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	6023      	str	r3, [r4, #0]
			( void ) xTaskResumeAll();
 800d3f0:	f7ff ff40 	bl	800d274 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800d3f4:	b96f      	cbnz	r7, 800d412 <prvIdleTask+0x42>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3f6:	682b      	ldr	r3, [r5, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1f5      	bne.n	800d3e8 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d9f8      	bls.n	800d3f6 <prvIdleTask+0x26>
				taskYIELD();
 800d404:	f8ca 9000 	str.w	r9, [sl]
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	e7f1      	b.n	800d3f6 <prvIdleTask+0x26>
				taskENTER_CRITICAL();
 800d412:	f000 fa7f 	bl	800d914 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d416:	68f3      	ldr	r3, [r6, #12]
 800d418:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d41c:	f10b 0004 	add.w	r0, fp, #4
 800d420:	f7fe ff28 	bl	800c274 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800d424:	4a0d      	ldr	r2, [pc, #52]	; (800d45c <prvIdleTask+0x8c>)
 800d426:	6813      	ldr	r3, [r2, #0]
 800d428:	3b01      	subs	r3, #1
 800d42a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800d42c:	682b      	ldr	r3, [r5, #0]
 800d42e:	3b01      	subs	r3, #1
 800d430:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
 800d432:	f000 fa91 	bl	800d958 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d436:	f10b 004c 	add.w	r0, fp, #76	; 0x4c
 800d43a:	f005 f8db 	bl	80125f4 <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800d43e:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 800d442:	f000 fc55 	bl	800dcf0 <vPortFree>
			vPortFree( pxTCB );
 800d446:	4658      	mov	r0, fp
 800d448:	f000 fc52 	bl	800dcf0 <vPortFree>
 800d44c:	e7d3      	b.n	800d3f6 <prvIdleTask+0x26>
 800d44e:	bf00      	nop
 800d450:	20000914 	.word	0x20000914
 800d454:	20000980 	.word	0x20000980
 800d458:	2000090c 	.word	0x2000090c
 800d45c:	20000908 	.word	0x20000908
 800d460:	2000087c 	.word	0x2000087c
 800d464:	e000ed04 	.word	0xe000ed04

0800d468 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d468:	4b1b      	ldr	r3, [pc, #108]	; (800d4d8 <vTaskSwitchContext+0x70>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	bb0b      	cbnz	r3, 800d4b2 <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 800d46e:	491b      	ldr	r1, [pc, #108]	; (800d4dc <vTaskSwitchContext+0x74>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d470:	4a1b      	ldr	r2, [pc, #108]	; (800d4e0 <vTaskSwitchContext+0x78>)
{
 800d472:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 800d474:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d476:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800d478:	fab3 f383 	clz	r3, r3
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	f1c3 031f 	rsb	r3, r3, #31
 800d482:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d486:	0092      	lsls	r2, r2, #2
 800d488:	4816      	ldr	r0, [pc, #88]	; (800d4e4 <vTaskSwitchContext+0x7c>)
 800d48a:	5881      	ldr	r1, [r0, r2]
 800d48c:	1884      	adds	r4, r0, r2
 800d48e:	b1a1      	cbz	r1, 800d4ba <vTaskSwitchContext+0x52>
 800d490:	6861      	ldr	r1, [r4, #4]
 800d492:	3208      	adds	r2, #8
 800d494:	6849      	ldr	r1, [r1, #4]
 800d496:	6061      	str	r1, [r4, #4]
 800d498:	4402      	add	r2, r0
 800d49a:	4291      	cmp	r1, r2
 800d49c:	d016      	beq.n	800d4cc <vTaskSwitchContext+0x64>
 800d49e:	4b12      	ldr	r3, [pc, #72]	; (800d4e8 <vTaskSwitchContext+0x80>)
 800d4a0:	68ca      	ldr	r2, [r1, #12]
 800d4a2:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a11      	ldr	r2, [pc, #68]	; (800d4ec <vTaskSwitchContext+0x84>)
}
 800d4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d4ac:	334c      	adds	r3, #76	; 0x4c
 800d4ae:	6013      	str	r3, [r2, #0]
}
 800d4b0:	4770      	bx	lr
		xYieldPending = pdTRUE;
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <vTaskSwitchContext+0x74>)
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	4770      	bx	lr
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	e7fe      	b.n	800d4ca <vTaskSwitchContext+0x62>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d4cc:	2214      	movs	r2, #20
 800d4ce:	fb02 0303 	mla	r3, r2, r3, r0
 800d4d2:	6849      	ldr	r1, [r1, #4]
 800d4d4:	6059      	str	r1, [r3, #4]
 800d4d6:	e7e2      	b.n	800d49e <vTaskSwitchContext+0x36>
 800d4d8:	20000914 	.word	0x20000914
 800d4dc:	20000998 	.word	0x20000998
 800d4e0:	2000091c 	.word	0x2000091c
 800d4e4:	2000087c 	.word	0x2000087c
 800d4e8:	20000870 	.word	0x20000870
 800d4ec:	20000018 	.word	0x20000018

0800d4f0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d4f0:	b940      	cbnz	r0, 800d504 <vTaskPlaceOnEventList+0x14>
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	e7fe      	b.n	800d502 <vTaskPlaceOnEventList+0x12>
{
 800d504:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d506:	4d1b      	ldr	r5, [pc, #108]	; (800d574 <vTaskPlaceOnEventList+0x84>)
 800d508:	460c      	mov	r4, r1
 800d50a:	6829      	ldr	r1, [r5, #0]
 800d50c:	3118      	adds	r1, #24
 800d50e:	f7fe fe97 	bl	800c240 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800d512:	4b19      	ldr	r3, [pc, #100]	; (800d578 <vTaskPlaceOnEventList+0x88>)
 800d514:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d516:	6828      	ldr	r0, [r5, #0]
 800d518:	3004      	adds	r0, #4
 800d51a:	f7fe feab 	bl	800c274 <uxListRemove>
 800d51e:	b940      	cbnz	r0, 800d532 <vTaskPlaceOnEventList+0x42>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d520:	682b      	ldr	r3, [r5, #0]
 800d522:	4916      	ldr	r1, [pc, #88]	; (800d57c <vTaskPlaceOnEventList+0x8c>)
 800d524:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d526:	680b      	ldr	r3, [r1, #0]
 800d528:	2201      	movs	r2, #1
 800d52a:	4082      	lsls	r2, r0
 800d52c:	ea23 0302 	bic.w	r3, r3, r2
 800d530:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d532:	1c63      	adds	r3, r4, #1
 800d534:	d00f      	beq.n	800d556 <vTaskPlaceOnEventList+0x66>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	19a4      	adds	r4, r4, r6
 800d53a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d53c:	d212      	bcs.n	800d564 <vTaskPlaceOnEventList+0x74>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d53e:	4b10      	ldr	r3, [pc, #64]	; (800d580 <vTaskPlaceOnEventList+0x90>)
 800d540:	6818      	ldr	r0, [r3, #0]
 800d542:	6829      	ldr	r1, [r5, #0]
 800d544:	3104      	adds	r1, #4
 800d546:	f7fe fe7b 	bl	800c240 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d54a:	4b0e      	ldr	r3, [pc, #56]	; (800d584 <vTaskPlaceOnEventList+0x94>)
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800d550:	bf38      	it	cc
 800d552:	601c      	strcc	r4, [r3, #0]
}
 800d554:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d556:	6829      	ldr	r1, [r5, #0]
 800d558:	480b      	ldr	r0, [pc, #44]	; (800d588 <vTaskPlaceOnEventList+0x98>)
 800d55a:	3104      	adds	r1, #4
}
 800d55c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d560:	f7fe be5e 	b.w	800c220 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d564:	4b09      	ldr	r3, [pc, #36]	; (800d58c <vTaskPlaceOnEventList+0x9c>)
 800d566:	6818      	ldr	r0, [r3, #0]
 800d568:	6829      	ldr	r1, [r5, #0]
}
 800d56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d56e:	3104      	adds	r1, #4
 800d570:	f7fe be66 	b.w	800c240 <vListInsert>
 800d574:	20000870 	.word	0x20000870
 800d578:	20000994 	.word	0x20000994
 800d57c:	2000091c 	.word	0x2000091c
 800d580:	20000874 	.word	0x20000874
 800d584:	2000094c 	.word	0x2000094c
 800d588:	2000096c 	.word	0x2000096c
 800d58c:	20000878 	.word	0x20000878

0800d590 <xTaskRemoveFromEventList>:
{
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d592:	68c3      	ldr	r3, [r0, #12]
 800d594:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d596:	b32c      	cbz	r4, 800d5e4 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d598:	f104 0518 	add.w	r5, r4, #24
 800d59c:	4628      	mov	r0, r5
 800d59e:	f7fe fe69 	bl	800c274 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5a2:	4b17      	ldr	r3, [pc, #92]	; (800d600 <xTaskRemoveFromEventList+0x70>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	bb33      	cbnz	r3, 800d5f6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d5a8:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5aa:	4d16      	ldr	r5, [pc, #88]	; (800d604 <xTaskRemoveFromEventList+0x74>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f7fe fe61 	bl	800c274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d5b4:	682f      	ldr	r7, [r5, #0]
 800d5b6:	4814      	ldr	r0, [pc, #80]	; (800d608 <xTaskRemoveFromEventList+0x78>)
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	4093      	lsls	r3, r2
 800d5bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d5c0:	433b      	orrs	r3, r7
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800d5c8:	602b      	str	r3, [r5, #0]
 800d5ca:	f7fe fe29 	bl	800c220 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5ce:	4b0f      	ldr	r3, [pc, #60]	; (800d60c <xTaskRemoveFromEventList+0x7c>)
 800d5d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800d5d8:	bf83      	ittte	hi
 800d5da:	4b0d      	ldrhi	r3, [pc, #52]	; (800d610 <xTaskRemoveFromEventList+0x80>)
 800d5dc:	2001      	movhi	r0, #1
 800d5de:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800d5e0:	2000      	movls	r0, #0
}
 800d5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e8:	f383 8811 	msr	BASEPRI, r3
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	e7fe      	b.n	800d5f4 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	4806      	ldr	r0, [pc, #24]	; (800d614 <xTaskRemoveFromEventList+0x84>)
 800d5fa:	f7fe fe11 	bl	800c220 <vListInsertEnd>
 800d5fe:	e7e6      	b.n	800d5ce <xTaskRemoveFromEventList+0x3e>
 800d600:	20000914 	.word	0x20000914
 800d604:	2000091c 	.word	0x2000091c
 800d608:	2000087c 	.word	0x2000087c
 800d60c:	20000870 	.word	0x20000870
 800d610:	20000998 	.word	0x20000998
 800d614:	20000954 	.word	0x20000954

0800d618 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800d618:	b130      	cbz	r0, 800d628 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d61a:	4a08      	ldr	r2, [pc, #32]	; (800d63c <vTaskSetTimeOutState+0x24>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d61c:	4b08      	ldr	r3, [pc, #32]	; (800d640 <vTaskSetTimeOutState+0x28>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d61e:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	e9c0 2300 	strd	r2, r3, [r0]
}
 800d626:	4770      	bx	lr
 800d628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	e7fe      	b.n	800d638 <vTaskSetTimeOutState+0x20>
 800d63a:	bf00      	nop
 800d63c:	20000950 	.word	0x20000950
 800d640:	20000994 	.word	0x20000994

0800d644 <xTaskCheckForTimeOut>:
{
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800d646:	b360      	cbz	r0, 800d6a2 <xTaskCheckForTimeOut+0x5e>
	configASSERT( pxTicksToWait );
 800d648:	b311      	cbz	r1, 800d690 <xTaskCheckForTimeOut+0x4c>
 800d64a:	460d      	mov	r5, r1
 800d64c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d64e:	f000 f961 	bl	800d914 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800d652:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800d654:	f8df c068 	ldr.w	ip, [pc, #104]	; 800d6c0 <xTaskCheckForTimeOut+0x7c>
			if( *pxTicksToWait == portMAX_DELAY )
 800d658:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800d65a:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800d65e:	d029      	beq.n	800d6b4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d660:	4e16      	ldr	r6, [pc, #88]	; (800d6bc <xTaskCheckForTimeOut+0x78>)
 800d662:	e9d4 0200 	ldrd	r0, r2, [r4]
 800d666:	6837      	ldr	r7, [r6, #0]
 800d668:	42b8      	cmp	r0, r7
 800d66a:	d001      	beq.n	800d670 <xTaskCheckForTimeOut+0x2c>
 800d66c:	4291      	cmp	r1, r2
 800d66e:	d223      	bcs.n	800d6b8 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d670:	1a8f      	subs	r7, r1, r2
 800d672:	42bb      	cmp	r3, r7
 800d674:	d920      	bls.n	800d6b8 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800d676:	1a5b      	subs	r3, r3, r1
 800d678:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d67a:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d67c:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800d680:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d682:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 800d686:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
 800d688:	f000 f966 	bl	800d958 <vPortExitCritical>
}
 800d68c:	4628      	mov	r0, r5
 800d68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	e7fe      	b.n	800d6a0 <xTaskCheckForTimeOut+0x5c>
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	e7fe      	b.n	800d6b2 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800d6b4:	2500      	movs	r5, #0
 800d6b6:	e7e7      	b.n	800d688 <xTaskCheckForTimeOut+0x44>
			xReturn = pdTRUE;
 800d6b8:	2501      	movs	r5, #1
 800d6ba:	e7e5      	b.n	800d688 <xTaskCheckForTimeOut+0x44>
 800d6bc:	20000950 	.word	0x20000950
 800d6c0:	20000994 	.word	0x20000994

0800d6c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d6c4:	4b01      	ldr	r3, [pc, #4]	; (800d6cc <vTaskMissedYield+0x8>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	601a      	str	r2, [r3, #0]
}
 800d6ca:	4770      	bx	lr
 800d6cc:	20000998 	.word	0x20000998

0800d6d0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800d6d0:	4b01      	ldr	r3, [pc, #4]	; (800d6d8 <xTaskGetCurrentTaskHandle+0x8>)
 800d6d2:	6818      	ldr	r0, [r3, #0]
	}
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	20000870 	.word	0x20000870

0800d6dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d6dc:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <xTaskGetSchedulerState+0x18>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	b133      	cbz	r3, 800d6f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6e2:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <xTaskGetSchedulerState+0x1c>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6e8:	bf0c      	ite	eq
 800d6ea:	2002      	moveq	r0, #2
 800d6ec:	2000      	movne	r0, #0
 800d6ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d6f0:	2001      	movs	r0, #1
	}
 800d6f2:	4770      	bx	lr
 800d6f4:	20000968 	.word	0x20000968
 800d6f8:	20000914 	.word	0x20000914

0800d6fc <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800d6fc:	b1d0      	cbz	r0, 800d734 <vTaskPriorityInherit+0x38>
	{
 800d6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d700:	4c20      	ldr	r4, [pc, #128]	; (800d784 <vTaskPriorityInherit+0x88>)
 800d702:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d704:	6822      	ldr	r2, [r4, #0]
 800d706:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d708:	4293      	cmp	r3, r2
 800d70a:	d212      	bcs.n	800d732 <vTaskPriorityInherit+0x36>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d70c:	6982      	ldr	r2, [r0, #24]
 800d70e:	2a00      	cmp	r2, #0
 800d710:	db04      	blt.n	800d71c <vTaskPriorityInherit+0x20>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d712:	6822      	ldr	r2, [r4, #0]
 800d714:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d716:	f1c2 0207 	rsb	r2, r2, #7
 800d71a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d71c:	4d1a      	ldr	r5, [pc, #104]	; (800d788 <vTaskPriorityInherit+0x8c>)
 800d71e:	6942      	ldr	r2, [r0, #20]
 800d720:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d724:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d728:	429a      	cmp	r2, r3
 800d72a:	d004      	beq.n	800d736 <vTaskPriorityInherit+0x3a>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d730:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 800d732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d734:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d736:	1d07      	adds	r7, r0, #4
 800d738:	4606      	mov	r6, r0
 800d73a:	4638      	mov	r0, r7
 800d73c:	f7fe fd9a 	bl	800c274 <uxListRemove>
 800d740:	b970      	cbnz	r0, 800d760 <vTaskPriorityInherit+0x64>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d742:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d744:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d748:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d74c:	b942      	cbnz	r2, 800d760 <vTaskPriorityInherit+0x64>
 800d74e:	4a0f      	ldr	r2, [pc, #60]	; (800d78c <vTaskPriorityInherit+0x90>)
 800d750:	2001      	movs	r0, #1
 800d752:	6811      	ldr	r1, [r2, #0]
 800d754:	fa00 f303 	lsl.w	r3, r0, r3
 800d758:	ea21 0303 	bic.w	r3, r1, r3
 800d75c:	6013      	str	r3, [r2, #0]
 800d75e:	e000      	b.n	800d762 <vTaskPriorityInherit+0x66>
 800d760:	4a0a      	ldr	r2, [pc, #40]	; (800d78c <vTaskPriorityInherit+0x90>)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d762:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 800d764:	6814      	ldr	r4, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d766:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d768:	62f0      	str	r0, [r6, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800d76a:	2301      	movs	r3, #1
 800d76c:	4083      	lsls	r3, r0
 800d76e:	4323      	orrs	r3, r4
 800d770:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d774:	4639      	mov	r1, r7
 800d776:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800d77a:	6013      	str	r3, [r2, #0]
	}
 800d77c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
					prvAddTaskToReadyList( pxTCB );
 800d780:	f7fe bd4e 	b.w	800c220 <vListInsertEnd>
 800d784:	20000870 	.word	0x20000870
 800d788:	2000087c 	.word	0x2000087c
 800d78c:	2000091c 	.word	0x2000091c

0800d790 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800d790:	b168      	cbz	r0, 800d7ae <xTaskPriorityDisinherit+0x1e>
	{
 800d792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800d794:	4b27      	ldr	r3, [pc, #156]	; (800d834 <xTaskPriorityDisinherit+0xa4>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4283      	cmp	r3, r0
 800d79a:	d00a      	beq.n	800d7b2 <xTaskPriorityDisinherit+0x22>
 800d79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a0:	f383 8811 	msr	BASEPRI, r3
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	e7fe      	b.n	800d7ac <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800d7ae:	2000      	movs	r0, #0
	}
 800d7b0:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 800d7b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7b4:	b943      	cbnz	r3, 800d7c8 <xTaskPriorityDisinherit+0x38>
 800d7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ba:	f383 8811 	msr	BASEPRI, r3
 800d7be:	f3bf 8f6f 	isb	sy
 800d7c2:	f3bf 8f4f 	dsb	sy
 800d7c6:	e7fe      	b.n	800d7c6 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d7ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800d7cc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7ce:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800d7d0:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7d2:	d000      	beq.n	800d7d6 <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7d4:	b10b      	cbz	r3, 800d7da <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800d7d6:	2000      	movs	r0, #0
	}
 800d7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7da:	1d06      	adds	r6, r0, #4
 800d7dc:	4604      	mov	r4, r0
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f7fe fd48 	bl	800c274 <uxListRemove>
 800d7e4:	b1a8      	cbz	r0, 800d812 <xTaskPriorityDisinherit+0x82>
 800d7e6:	4814      	ldr	r0, [pc, #80]	; (800d838 <xTaskPriorityDisinherit+0xa8>)
 800d7e8:	4b14      	ldr	r3, [pc, #80]	; (800d83c <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800d7ec:	681f      	ldr	r7, [r3, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7ee:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800d7f0:	2501      	movs	r5, #1
 800d7f2:	f04f 0c14 	mov.w	ip, #20
 800d7f6:	fb0c 0002 	mla	r0, ip, r2, r0
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	fa05 f602 	lsl.w	r6, r5, r2
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d800:	f1c2 0207 	rsb	r2, r2, #7
 800d804:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d806:	433e      	orrs	r6, r7
 800d808:	601e      	str	r6, [r3, #0]
 800d80a:	f7fe fd09 	bl	800c220 <vListInsertEnd>
					xReturn = pdTRUE;
 800d80e:	4628      	mov	r0, r5
	}
 800d810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d812:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d814:	4808      	ldr	r0, [pc, #32]	; (800d838 <xTaskPriorityDisinherit+0xa8>)
 800d816:	2314      	movs	r3, #20
 800d818:	fb03 f301 	mul.w	r3, r3, r1
 800d81c:	58c3      	ldr	r3, [r0, r3]
 800d81e:	b10b      	cbz	r3, 800d824 <xTaskPriorityDisinherit+0x94>
 800d820:	4b06      	ldr	r3, [pc, #24]	; (800d83c <xTaskPriorityDisinherit+0xac>)
 800d822:	e7e2      	b.n	800d7ea <xTaskPriorityDisinherit+0x5a>
 800d824:	4b05      	ldr	r3, [pc, #20]	; (800d83c <xTaskPriorityDisinherit+0xac>)
 800d826:	2501      	movs	r5, #1
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	408d      	lsls	r5, r1
 800d82c:	ea22 0205 	bic.w	r2, r2, r5
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	e7da      	b.n	800d7ea <xTaskPriorityDisinherit+0x5a>
 800d834:	20000870 	.word	0x20000870
 800d838:	2000087c 	.word	0x2000087c
 800d83c:	2000091c 	.word	0x2000091c

0800d840 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d840:	4b04      	ldr	r3, [pc, #16]	; (800d854 <pvTaskIncrementMutexHeldCount+0x14>)
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	b11a      	cbz	r2, 800d84e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d846:	6819      	ldr	r1, [r3, #0]
 800d848:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800d84a:	3201      	adds	r2, #1
 800d84c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800d84e:	6818      	ldr	r0, [r3, #0]
	}
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	20000870 	.word	0x20000870

0800d858 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d858:	4b0a      	ldr	r3, [pc, #40]	; (800d884 <prvTaskExitError+0x2c>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3301      	adds	r3, #1
 800d85e:	d008      	beq.n	800d872 <prvTaskExitError+0x1a>
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	e7fe      	b.n	800d870 <prvTaskExitError+0x18>
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	e7fe      	b.n	800d882 <prvTaskExitError+0x2a>
 800d884:	20000008 	.word	0x20000008

0800d888 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d888:	4806      	ldr	r0, [pc, #24]	; (800d8a4 <prvPortStartFirstTask+0x1c>)
 800d88a:	6800      	ldr	r0, [r0, #0]
 800d88c:	6800      	ldr	r0, [r0, #0]
 800d88e:	f380 8808 	msr	MSP, r0
 800d892:	b662      	cpsie	i
 800d894:	b661      	cpsie	f
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	f3bf 8f6f 	isb	sy
 800d89e:	df00      	svc	0
 800d8a0:	bf00      	nop
 800d8a2:	0000      	.short	0x0000
 800d8a4:	e000ed08 	.word	0xe000ed08

0800d8a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8b8 <vPortEnableVFP+0x10>
 800d8ac:	6801      	ldr	r1, [r0, #0]
 800d8ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8b2:	6001      	str	r1, [r0, #0]
 800d8b4:	4770      	bx	lr
 800d8b6:	0000      	.short	0x0000
 800d8b8:	e000ed88 	.word	0xe000ed88

0800d8bc <pxPortInitialiseStack>:
{
 800d8bc:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d8be:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d8c2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d8c6:	4c07      	ldr	r4, [pc, #28]	; (800d8e4 <pxPortInitialiseStack+0x28>)
 800d8c8:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800d8cc:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d8d0:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d8d4:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800d8d8:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800d8dc:	bc30      	pop	{r4, r5}
 800d8de:	3844      	subs	r0, #68	; 0x44
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop
 800d8e4:	0800d859 	.word	0x0800d859
	...

0800d8f0 <SVC_Handler>:
	__asm volatile (
 800d8f0:	4b07      	ldr	r3, [pc, #28]	; (800d910 <pxCurrentTCBConst2>)
 800d8f2:	6819      	ldr	r1, [r3, #0]
 800d8f4:	6808      	ldr	r0, [r1, #0]
 800d8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fa:	f380 8809 	msr	PSP, r0
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f04f 0000 	mov.w	r0, #0
 800d906:	f380 8811 	msr	BASEPRI, r0
 800d90a:	4770      	bx	lr
 800d90c:	f3af 8000 	nop.w

0800d910 <pxCurrentTCBConst2>:
 800d910:	20000870 	.word	0x20000870

0800d914 <vPortEnterCritical>:
 800d914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800d924:	4a0a      	ldr	r2, [pc, #40]	; (800d950 <vPortEnterCritical+0x3c>)
 800d926:	6813      	ldr	r3, [r2, #0]
 800d928:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d92a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d92c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d92e:	d000      	beq.n	800d932 <vPortEnterCritical+0x1e>
}
 800d930:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d932:	4b08      	ldr	r3, [pc, #32]	; (800d954 <vPortEnterCritical+0x40>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d93a:	d0f9      	beq.n	800d930 <vPortEnterCritical+0x1c>
 800d93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	e7fe      	b.n	800d94c <vPortEnterCritical+0x38>
 800d94e:	bf00      	nop
 800d950:	20000008 	.word	0x20000008
 800d954:	e000ed04 	.word	0xe000ed04

0800d958 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d958:	4a08      	ldr	r2, [pc, #32]	; (800d97c <vPortExitCritical+0x24>)
 800d95a:	6813      	ldr	r3, [r2, #0]
 800d95c:	b943      	cbnz	r3, 800d970 <vPortExitCritical+0x18>
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	e7fe      	b.n	800d96e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800d970:	3b01      	subs	r3, #1
 800d972:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d974:	b90b      	cbnz	r3, 800d97a <vPortExitCritical+0x22>
	__asm volatile
 800d976:	f383 8811 	msr	BASEPRI, r3
}
 800d97a:	4770      	bx	lr
 800d97c:	20000008 	.word	0x20000008

0800d980 <PendSV_Handler>:
	__asm volatile
 800d980:	f3ef 8009 	mrs	r0, PSP
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	4b15      	ldr	r3, [pc, #84]	; (800d9e0 <pxCurrentTCBConst>)
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	f01e 0f10 	tst.w	lr, #16
 800d990:	bf08      	it	eq
 800d992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99a:	6010      	str	r0, [r2, #0]
 800d99c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800d9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9a4:	f380 8811 	msr	BASEPRI, r0
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	f3bf 8f6f 	isb	sy
 800d9b0:	f7ff fd5a 	bl	800d468 <vTaskSwitchContext>
 800d9b4:	f04f 0000 	mov.w	r0, #0
 800d9b8:	f380 8811 	msr	BASEPRI, r0
 800d9bc:	bc08      	pop	{r3}
 800d9be:	6819      	ldr	r1, [r3, #0]
 800d9c0:	6808      	ldr	r0, [r1, #0]
 800d9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c6:	f01e 0f10 	tst.w	lr, #16
 800d9ca:	bf08      	it	eq
 800d9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d9d0:	f380 8809 	msr	PSP, r0
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	f3af 8000 	nop.w

0800d9e0 <pxCurrentTCBConst>:
 800d9e0:	20000870 	.word	0x20000870

0800d9e4 <SysTick_Handler>:
{
 800d9e4:	b508      	push	{r3, lr}
	__asm volatile
 800d9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ea:	f383 8811 	msr	BASEPRI, r3
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d9f6:	f7ff fb91 	bl	800d11c <xTaskIncrementTick>
 800d9fa:	b118      	cbz	r0, 800da04 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9fc:	4b03      	ldr	r3, [pc, #12]	; (800da0c <SysTick_Handler+0x28>)
 800d9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da02:	601a      	str	r2, [r3, #0]
	__asm volatile
 800da04:	2300      	movs	r3, #0
 800da06:	f383 8811 	msr	BASEPRI, r3
}
 800da0a:	bd08      	pop	{r3, pc}
 800da0c:	e000ed04 	.word	0xe000ed04

0800da10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da10:	4b06      	ldr	r3, [pc, #24]	; (800da2c <vPortSetupTimerInterrupt+0x1c>)
 800da12:	4907      	ldr	r1, [pc, #28]	; (800da30 <vPortSetupTimerInterrupt+0x20>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4807      	ldr	r0, [pc, #28]	; (800da34 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da18:	4a07      	ldr	r2, [pc, #28]	; (800da38 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da1a:	fba1 1303 	umull	r1, r3, r1, r3
 800da1e:	099b      	lsrs	r3, r3, #6
 800da20:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da22:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da24:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da26:	6011      	str	r1, [r2, #0]
}
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	2000000c 	.word	0x2000000c
 800da30:	10624dd3 	.word	0x10624dd3
 800da34:	e000e014 	.word	0xe000e014
 800da38:	e000e010 	.word	0xe000e010

0800da3c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da3c:	4b32      	ldr	r3, [pc, #200]	; (800db08 <xPortStartScheduler+0xcc>)
 800da3e:	4a33      	ldr	r2, [pc, #204]	; (800db0c <xPortStartScheduler+0xd0>)
 800da40:	6819      	ldr	r1, [r3, #0]
 800da42:	4291      	cmp	r1, r2
 800da44:	d04e      	beq.n	800dae4 <xPortStartScheduler+0xa8>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	4b31      	ldr	r3, [pc, #196]	; (800db10 <xPortStartScheduler+0xd4>)
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d053      	beq.n	800daf6 <xPortStartScheduler+0xba>
{
 800da4e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da50:	4b30      	ldr	r3, [pc, #192]	; (800db14 <xPortStartScheduler+0xd8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da52:	4c31      	ldr	r4, [pc, #196]	; (800db18 <xPortStartScheduler+0xdc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da54:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da56:	4931      	ldr	r1, [pc, #196]	; (800db1c <xPortStartScheduler+0xe0>)
{
 800da58:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da5a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da5c:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da5e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da60:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da6e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da72:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da76:	2007      	movs	r0, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da78:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da7a:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da7c:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da7e:	d50f      	bpl.n	800daa0 <xPortStartScheduler+0x64>
 800da80:	2206      	movs	r2, #6
 800da82:	e000      	b.n	800da86 <xPortStartScheduler+0x4a>
 800da84:	4602      	mov	r2, r0
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da92:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800da96:	061b      	lsls	r3, r3, #24
 800da98:	f102 30ff 	add.w	r0, r2, #4294967295
 800da9c:	d4f2      	bmi.n	800da84 <xPortStartScheduler+0x48>
 800da9e:	600a      	str	r2, [r1, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800daa0:	680b      	ldr	r3, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800daa2:	9801      	ldr	r0, [sp, #4]
 800daa4:	4c1b      	ldr	r4, [pc, #108]	; (800db14 <xPortStartScheduler+0xd8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800daa6:	4a1e      	ldr	r2, [pc, #120]	; (800db20 <xPortStartScheduler+0xe4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800daa8:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800daaa:	b2c0      	uxtb	r0, r0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800daac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dab0:	600b      	str	r3, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dab2:	7020      	strb	r0, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dab4:	6813      	ldr	r3, [r2, #0]
 800dab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800daba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dabc:	6813      	ldr	r3, [r2, #0]
 800dabe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dac2:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800dac4:	f7ff ffa4 	bl	800da10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800dac8:	4b16      	ldr	r3, [pc, #88]	; (800db24 <xPortStartScheduler+0xe8>)
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800dace:	f7ff feeb 	bl	800d8a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dad2:	4a15      	ldr	r2, [pc, #84]	; (800db28 <xPortStartScheduler+0xec>)
 800dad4:	6813      	ldr	r3, [r2, #0]
 800dad6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dada:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800dadc:	f7ff fed4 	bl	800d888 <prvPortStartFirstTask>
	prvTaskExitError();
 800dae0:	f7ff feba 	bl	800d858 <prvTaskExitError>
	__asm volatile
 800dae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	e7fe      	b.n	800daf4 <xPortStartScheduler+0xb8>
 800daf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	e7fe      	b.n	800db06 <xPortStartScheduler+0xca>
 800db08:	e000ed00 	.word	0xe000ed00
 800db0c:	410fc271 	.word	0x410fc271
 800db10:	410fc270 	.word	0x410fc270
 800db14:	e000e400 	.word	0xe000e400
 800db18:	2000099c 	.word	0x2000099c
 800db1c:	200009a0 	.word	0x200009a0
 800db20:	e000ed20 	.word	0xe000ed20
 800db24:	20000008 	.word	0x20000008
 800db28:	e000ef34 	.word	0xe000ef34

0800db2c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800db2c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db30:	2b0f      	cmp	r3, #15
 800db32:	d90e      	bls.n	800db52 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db34:	4910      	ldr	r1, [pc, #64]	; (800db78 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db36:	4a11      	ldr	r2, [pc, #68]	; (800db7c <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db38:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db3a:	7812      	ldrb	r2, [r2, #0]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d908      	bls.n	800db52 <vPortValidateInterruptPriority+0x26>
 800db40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db44:	f383 8811 	msr	BASEPRI, r3
 800db48:	f3bf 8f6f 	isb	sy
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	e7fe      	b.n	800db50 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db52:	4b0b      	ldr	r3, [pc, #44]	; (800db80 <vPortValidateInterruptPriority+0x54>)
 800db54:	4a0b      	ldr	r2, [pc, #44]	; (800db84 <vPortValidateInterruptPriority+0x58>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db5e:	4293      	cmp	r3, r2
 800db60:	d908      	bls.n	800db74 <vPortValidateInterruptPriority+0x48>
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	e7fe      	b.n	800db72 <vPortValidateInterruptPriority+0x46>
	}
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	e000e3f0 	.word	0xe000e3f0
 800db7c:	2000099c 	.word	0x2000099c
 800db80:	e000ed0c 	.word	0xe000ed0c
 800db84:	200009a0 	.word	0x200009a0

0800db88 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db88:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db8a:	4b11      	ldr	r3, [pc, #68]	; (800dbd0 <prvInsertBlockIntoFreeList+0x48>)
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	4282      	cmp	r2, r0
 800db90:	d201      	bcs.n	800db96 <prvInsertBlockIntoFreeList+0xe>
 800db92:	4613      	mov	r3, r2
 800db94:	e7fa      	b.n	800db8c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db96:	685c      	ldr	r4, [r3, #4]
 800db98:	1919      	adds	r1, r3, r4
 800db9a:	4288      	cmp	r0, r1
 800db9c:	d103      	bne.n	800dba6 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db9e:	6841      	ldr	r1, [r0, #4]
 800dba0:	4421      	add	r1, r4
 800dba2:	6059      	str	r1, [r3, #4]
 800dba4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dba6:	6844      	ldr	r4, [r0, #4]
 800dba8:	1901      	adds	r1, r0, r4
 800dbaa:	428a      	cmp	r2, r1
 800dbac:	d109      	bne.n	800dbc2 <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dbae:	4909      	ldr	r1, [pc, #36]	; (800dbd4 <prvInsertBlockIntoFreeList+0x4c>)
 800dbb0:	6809      	ldr	r1, [r1, #0]
 800dbb2:	428a      	cmp	r2, r1
 800dbb4:	d005      	beq.n	800dbc2 <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dbb6:	e9d2 2100 	ldrd	r2, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbba:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dbbc:	6002      	str	r2, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbbe:	6041      	str	r1, [r0, #4]
 800dbc0:	e000      	b.n	800dbc4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dbc2:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dbc4:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dbc6:	bf18      	it	ne
 800dbc8:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	20004c80 	.word	0x20004c80
 800dbd4:	200009a4 	.word	0x200009a4

0800dbd8 <pvPortMalloc>:
{
 800dbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxEnd == NULL )
 800dbda:	4d3e      	ldr	r5, [pc, #248]	; (800dcd4 <pvPortMalloc+0xfc>)
{
 800dbdc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800dbde:	f7ff fa87 	bl	800d0f0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800dbe2:	682a      	ldr	r2, [r5, #0]
 800dbe4:	2a00      	cmp	r2, #0
 800dbe6:	d056      	beq.n	800dc96 <pvPortMalloc+0xbe>
 800dbe8:	4b3b      	ldr	r3, [pc, #236]	; (800dcd8 <pvPortMalloc+0x100>)
 800dbea:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbec:	422c      	tst	r4, r5
 800dbee:	d14d      	bne.n	800dc8c <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800dbf0:	2c00      	cmp	r4, #0
 800dbf2:	d04b      	beq.n	800dc8c <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 800dbf4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dbf8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dbfa:	bf1c      	itt	ne
 800dbfc:	f023 0307 	bicne.w	r3, r3, #7
 800dc00:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d042      	beq.n	800dc8c <pvPortMalloc+0xb4>
 800dc06:	4f35      	ldr	r7, [pc, #212]	; (800dcdc <pvPortMalloc+0x104>)
 800dc08:	683e      	ldr	r6, [r7, #0]
 800dc0a:	429e      	cmp	r6, r3
 800dc0c:	d33e      	bcc.n	800dc8c <pvPortMalloc+0xb4>
				pxBlock = xStart.pxNextFreeBlock;
 800dc0e:	4834      	ldr	r0, [pc, #208]	; (800dce0 <pvPortMalloc+0x108>)
 800dc10:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc12:	e006      	b.n	800dc22 <pvPortMalloc+0x4a>
 800dc14:	f8d4 c000 	ldr.w	ip, [r4]
 800dc18:	f1bc 0f00 	cmp.w	ip, #0
 800dc1c:	d004      	beq.n	800dc28 <pvPortMalloc+0x50>
 800dc1e:	4620      	mov	r0, r4
 800dc20:	4664      	mov	r4, ip
 800dc22:	6861      	ldr	r1, [r4, #4]
 800dc24:	4299      	cmp	r1, r3
 800dc26:	d3f5      	bcc.n	800dc14 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 800dc28:	4294      	cmp	r4, r2
 800dc2a:	d02f      	beq.n	800dc8c <pvPortMalloc+0xb4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc2c:	6822      	ldr	r2, [r4, #0]
 800dc2e:	6002      	str	r2, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc30:	1aca      	subs	r2, r1, r3
 800dc32:	2a10      	cmp	r2, #16
 800dc34:	d910      	bls.n	800dc58 <pvPortMalloc+0x80>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc36:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc38:	0741      	lsls	r1, r0, #29
 800dc3a:	d008      	beq.n	800dc4e <pvPortMalloc+0x76>
 800dc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc40:	f383 8811 	msr	BASEPRI, r3
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	e7fe      	b.n	800dc4c <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc4e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc50:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc52:	f7ff ff99 	bl	800db88 <prvInsertBlockIntoFreeList>
 800dc56:	6861      	ldr	r1, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc58:	4a22      	ldr	r2, [pc, #136]	; (800dce4 <pvPortMalloc+0x10c>)
 800dc5a:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc5c:	1a76      	subs	r6, r6, r1
					pxBlock->pxNextFreeBlock = NULL;
 800dc5e:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc60:	4329      	orrs	r1, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc62:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800dc64:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc68:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc6c:	bf38      	it	cc
 800dc6e:	6016      	strcc	r6, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc70:	603e      	str	r6, [r7, #0]
	( void ) xTaskResumeAll();
 800dc72:	f7ff faff 	bl	800d274 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc76:	0763      	lsls	r3, r4, #29
 800dc78:	d00b      	beq.n	800dc92 <pvPortMalloc+0xba>
 800dc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7e:	f383 8811 	msr	BASEPRI, r3
 800dc82:	f3bf 8f6f 	isb	sy
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	e7fe      	b.n	800dc8a <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800dc8c:	f7ff faf2 	bl	800d274 <xTaskResumeAll>
 800dc90:	2400      	movs	r4, #0
}
 800dc92:	4620      	mov	r0, r4
 800dc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uxAddress = ( size_t ) ucHeap;
 800dc96:	4b14      	ldr	r3, [pc, #80]	; (800dce8 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800dc98:	4a14      	ldr	r2, [pc, #80]	; (800dcec <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc9a:	4911      	ldr	r1, [pc, #68]	; (800dce0 <pvPortMalloc+0x108>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc9c:	4f11      	ldr	r7, [pc, #68]	; (800dce4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc9e:	075e      	lsls	r6, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dca0:	bf18      	it	ne
 800dca2:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dca4:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dca8:	bf18      	it	ne
 800dcaa:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcae:	4e0b      	ldr	r6, [pc, #44]	; (800dcdc <pvPortMalloc+0x104>)
	pxEnd = ( void * ) uxAddress;
 800dcb0:	602a      	str	r2, [r5, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dcb2:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcb4:	1ad3      	subs	r3, r2, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dcb6:	4d08      	ldr	r5, [pc, #32]	; (800dcd8 <pvPortMalloc+0x100>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcb8:	6033      	str	r3, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcba:	2600      	movs	r6, #0
 800dcbc:	e9c1 0600 	strd	r0, r6, [r1]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dcc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 800dcc4:	e9c2 6600 	strd	r6, r6, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dcc8:	6029      	str	r1, [r5, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcca:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dccc:	e9c0 2300 	strd	r2, r3, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	e78b      	b.n	800dbec <pvPortMalloc+0x14>
 800dcd4:	200009a4 	.word	0x200009a4
 800dcd8:	20004c74 	.word	0x20004c74
 800dcdc:	20004c78 	.word	0x20004c78
 800dce0:	20004c80 	.word	0x20004c80
 800dce4:	20004c7c 	.word	0x20004c7c
 800dce8:	200009a8 	.word	0x200009a8
 800dcec:	20004c6c 	.word	0x20004c6c

0800dcf0 <vPortFree>:
	if( pv != NULL )
 800dcf0:	b1d0      	cbz	r0, 800dd28 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dcf2:	4a19      	ldr	r2, [pc, #100]	; (800dd58 <vPortFree+0x68>)
 800dcf4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800dcf8:	6812      	ldr	r2, [r2, #0]
 800dcfa:	4213      	tst	r3, r2
 800dcfc:	d108      	bne.n	800dd10 <vPortFree+0x20>
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	e7fe      	b.n	800dd0e <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd10:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800dd14:	b149      	cbz	r1, 800dd2a <vPortFree+0x3a>
 800dd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1a:	f383 8811 	msr	BASEPRI, r3
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f3bf 8f4f 	dsb	sy
 800dd26:	e7fe      	b.n	800dd26 <vPortFree+0x36>
 800dd28:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd2a:	ea23 0302 	bic.w	r3, r3, r2
{
 800dd2e:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd30:	f840 3c04 	str.w	r3, [r0, #-4]
 800dd34:	4604      	mov	r4, r0
				vTaskSuspendAll();
 800dd36:	f7ff f9db 	bl	800d0f0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd3a:	4a08      	ldr	r2, [pc, #32]	; (800dd5c <vPortFree+0x6c>)
 800dd3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800dd40:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd42:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd46:	440b      	add	r3, r1
 800dd48:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd4a:	f7ff ff1d 	bl	800db88 <prvInsertBlockIntoFreeList>
}
 800dd4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800dd52:	f7ff ba8f 	b.w	800d274 <xTaskResumeAll>
 800dd56:	bf00      	nop
 800dd58:	20004c74 	.word	0x20004c74
 800dd5c:	20004c78 	.word	0x20004c78

0800dd60 <MX_ADC1_Init>:
uint8_t ADCInterleaved = 0;
uint8_t ADCChannel[MAX_ADC_CHANNELS]={0};

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800dd60:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc1.Init.Resolution = ADCResolution;
 800dd62:	4b1b      	ldr	r3, [pc, #108]	; (800ddd0 <MX_ADC1_Init+0x70>)
  hadc1.Instance = ADC1;
 800dd64:	4c1b      	ldr	r4, [pc, #108]	; (800ddd4 <MX_ADC1_Init+0x74>)
  hadc1.Init.Resolution = ADCResolution;
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60a3      	str	r3, [r4, #8]
  hadc1.Instance = ADC1;
 800dd6a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dd6e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800dd72:	b086      	sub	sp, #24
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 800dd74:	2601      	movs	r6, #1
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dd76:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800dd7a:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dd7e:	2304      	movs	r3, #4
  hadc1.Instance = ADC1;
 800dd80:	6020      	str	r0, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dd82:	6065      	str	r5, [r4, #4]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc1);
 800dd84:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800dd86:	2500      	movs	r5, #0
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dd88:	6321      	str	r1, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800dd8a:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800dd8c:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800dd90:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800dd92:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dd94:	60e5      	str	r5, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800dd96:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800dd98:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 800dd9a:	6226      	str	r6, [r4, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800dd9c:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc1);
 800dd9e:	f7f7 fc07 	bl	80055b0 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800dda2:	4b0d      	ldr	r3, [pc, #52]	; (800ddd8 <MX_ADC1_Init+0x78>)
 800dda4:	4a0d      	ldr	r2, [pc, #52]	; (800dddc <MX_ADC1_Init+0x7c>)
 800dda6:	7819      	ldrb	r1, [r3, #0]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800dda8:	4b0d      	ldr	r3, [pc, #52]	; (800dde0 <MX_ADC1_Init+0x80>)
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800ddaa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800ddae:	681b      	ldr	r3, [r3, #0]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800ddb0:	9200      	str	r2, [sp, #0]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800ddb2:	4669      	mov	r1, sp
 800ddb4:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADCSamplingTime;
 800ddb6:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800ddb8:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800ddba:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800ddbe:	9505      	str	r5, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800ddc0:	f7f8 fc48 	bl	8006654 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f7f8 fab2 	bl	8006330 <HAL_ADCEx_Calibration_Start>

}
 800ddcc:	b006      	add	sp, #24
 800ddce:	bd70      	pop	{r4, r5, r6, pc}
 800ddd0:	20004c98 	.word	0x20004c98
 800ddd4:	2000e820 	.word	0x2000e820
 800ddd8:	20004c90 	.word	0x20004c90
 800dddc:	080152ac 	.word	0x080152ac
 800dde0:	20004c9c 	.word	0x20004c9c

0800dde4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800dde4:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc2.Init.Resolution = ADCResolution;
 800dde6:	4b1b      	ldr	r3, [pc, #108]	; (800de54 <MX_ADC2_Init+0x70>)
  hadc2.Instance = ADC2;
 800dde8:	4c1b      	ldr	r4, [pc, #108]	; (800de58 <MX_ADC2_Init+0x74>)
  hadc2.Init.Resolution = ADCResolution;
 800ddea:	681b      	ldr	r3, [r3, #0]
  hadc2.Instance = ADC2;
 800ddec:	481b      	ldr	r0, [pc, #108]	; (800de5c <MX_ADC2_Init+0x78>)
  hadc2.Init.Resolution = ADCResolution;
 800ddee:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ddf0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800ddf4:	b086      	sub	sp, #24
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 800ddf6:	2601      	movs	r6, #1
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ddf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800ddfc:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800de00:	2304      	movs	r3, #4
  hadc2.Instance = ADC2;
 800de02:	6020      	str	r0, [r4, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800de04:	6065      	str	r5, [r4, #4]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc2);
 800de06:	4620      	mov	r0, r4
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800de08:	2500      	movs	r5, #0
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800de0a:	6321      	str	r1, [r4, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800de0c:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800de0e:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800de12:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800de14:	6265      	str	r5, [r4, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800de16:	60e5      	str	r5, [r4, #12]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800de18:	61a5      	str	r5, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800de1a:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc2.Init.NbrOfConversion = 1;
 800de1c:	6226      	str	r6, [r4, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800de1e:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc2);
 800de20:	f7f7 fbc6 	bl	80055b0 <HAL_ADC_Init>
	
	

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800de24:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <MX_ADC2_Init+0x7c>)
 800de26:	4a0f      	ldr	r2, [pc, #60]	; (800de64 <MX_ADC2_Init+0x80>)
 800de28:	7859      	ldrb	r1, [r3, #1]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800de2a:	4b0f      	ldr	r3, [pc, #60]	; (800de68 <MX_ADC2_Init+0x84>)
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800de2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800de30:	681b      	ldr	r3, [r3, #0]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800de32:	9200      	str	r2, [sp, #0]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800de34:	4669      	mov	r1, sp
 800de36:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADCSamplingTime;
 800de38:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800de3a:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800de3c:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800de40:	9505      	str	r5, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800de42:	f7f8 fc07 	bl	8006654 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800de46:	4629      	mov	r1, r5
 800de48:	4620      	mov	r0, r4
 800de4a:	f7f8 fa71 	bl	8006330 <HAL_ADCEx_Calibration_Start>

}
 800de4e:	b006      	add	sp, #24
 800de50:	bd70      	pop	{r4, r5, r6, pc}
 800de52:	bf00      	nop
 800de54:	20004c98 	.word	0x20004c98
 800de58:	2000e788 	.word	0x2000e788
 800de5c:	50000100 	.word	0x50000100
 800de60:	20004c90 	.word	0x20004c90
 800de64:	080152d0 	.word	0x080152d0
 800de68:	20004c9c 	.word	0x20004c9c

0800de6c <MX_ADC3_Init>:

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800de6c:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc3.Init.Resolution = ADCResolution;
 800de6e:	4b1b      	ldr	r3, [pc, #108]	; (800dedc <MX_ADC3_Init+0x70>)
  hadc3.Instance = ADC3;
 800de70:	4c1b      	ldr	r4, [pc, #108]	; (800dee0 <MX_ADC3_Init+0x74>)
  hadc3.Init.Resolution = ADCResolution;
 800de72:	681b      	ldr	r3, [r3, #0]
  hadc3.Instance = ADC3;
 800de74:	481b      	ldr	r0, [pc, #108]	; (800dee4 <MX_ADC3_Init+0x78>)
  hadc3.Init.Resolution = ADCResolution;
 800de76:	60a3      	str	r3, [r4, #8]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800de78:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800de7c:	b086      	sub	sp, #24
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 800de7e:	2601      	movs	r6, #1
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800de80:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800de84:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800de88:	2304      	movs	r3, #4
  hadc3.Instance = ADC3;
 800de8a:	6020      	str	r0, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800de8c:	6065      	str	r5, [r4, #4]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc3);
 800de8e:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800de90:	2500      	movs	r5, #0
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800de92:	6321      	str	r1, [r4, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800de94:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800de96:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800de9a:	61e5      	str	r5, [r4, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800de9c:	6265      	str	r5, [r4, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800de9e:	60e5      	str	r5, [r4, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800dea0:	61a5      	str	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800dea2:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc3.Init.NbrOfConversion = 1;
 800dea4:	6226      	str	r6, [r4, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800dea6:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc3);
 800dea8:	f7f7 fb82 	bl	80055b0 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800deac:	4b0e      	ldr	r3, [pc, #56]	; (800dee8 <MX_ADC3_Init+0x7c>)
 800deae:	4a0f      	ldr	r2, [pc, #60]	; (800deec <MX_ADC3_Init+0x80>)
 800deb0:	7899      	ldrb	r1, [r3, #2]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800deb2:	4b0f      	ldr	r3, [pc, #60]	; (800def0 <MX_ADC3_Init+0x84>)
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800deb4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800deb8:	681b      	ldr	r3, [r3, #0]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800deba:	9200      	str	r2, [sp, #0]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800debc:	4669      	mov	r1, sp
 800debe:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADCSamplingTime;
 800dec0:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800dec2:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800dec4:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800dec8:	9505      	str	r5, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800deca:	f7f8 fbc3 	bl	8006654 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800dece:	4629      	mov	r1, r5
 800ded0:	4620      	mov	r0, r4
 800ded2:	f7f8 fa2d 	bl	8006330 <HAL_ADCEx_Calibration_Start>

}
 800ded6:	b006      	add	sp, #24
 800ded8:	bd70      	pop	{r4, r5, r6, pc}
 800deda:	bf00      	nop
 800dedc:	20004c98 	.word	0x20004c98
 800dee0:	2000e874 	.word	0x2000e874
 800dee4:	50000400 	.word	0x50000400
 800dee8:	20004c90 	.word	0x20004c90
 800deec:	080152f8 	.word	0x080152f8
 800def0:	20004c9c 	.word	0x20004c9c

0800def4 <MX_ADC4_Init>:

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800def4:	b570      	push	{r4, r5, r6, lr}

    /**Common config 
    */
  hadc4.Instance = ADC4;
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
  hadc4.Init.Resolution = ADCResolution;
 800def6:	4b1b      	ldr	r3, [pc, #108]	; (800df64 <MX_ADC4_Init+0x70>)
  hadc4.Instance = ADC4;
 800def8:	4c1b      	ldr	r4, [pc, #108]	; (800df68 <MX_ADC4_Init+0x74>)
  hadc4.Init.Resolution = ADCResolution;
 800defa:	681b      	ldr	r3, [r3, #0]
  hadc4.Instance = ADC4;
 800defc:	481b      	ldr	r0, [pc, #108]	; (800df6c <MX_ADC4_Init+0x78>)
  hadc4.Init.Resolution = ADCResolution;
 800defe:	60a3      	str	r3, [r4, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800df00:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800df04:	b086      	sub	sp, #24
  hadc4.Init.ContinuousConvMode = DISABLE;
  hadc4.Init.DiscontinuousConvMode = DISABLE;
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc4.Init.NbrOfConversion = 1;
 800df06:	2601      	movs	r6, #1
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800df08:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800df0c:	f44f 7260 	mov.w	r2, #896	; 0x380
  hadc4.Init.DMAContinuousRequests = ENABLE;
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800df10:	2304      	movs	r3, #4
  hadc4.Instance = ADC4;
 800df12:	6020      	str	r0, [r4, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800df14:	6065      	str	r5, [r4, #4]
  hadc4.Init.LowPowerAutoWait = DISABLE;
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  HAL_ADC_Init(&hadc4);
 800df16:	4620      	mov	r0, r4
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800df18:	2500      	movs	r5, #0
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800df1a:	6321      	str	r1, [r4, #48]	; 0x30
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800df1c:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800df1e:	e9c4 5304 	strd	r5, r3, [r4, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800df22:	61e5      	str	r5, [r4, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800df24:	6265      	str	r5, [r4, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800df26:	60e5      	str	r5, [r4, #12]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800df28:	61a5      	str	r5, [r4, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800df2a:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc4.Init.NbrOfConversion = 1;
 800df2c:	6226      	str	r6, [r4, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800df2e:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_ADC_Init(&hadc4);
 800df30:	f7f7 fb3e 	bl	80055b0 <HAL_ADC_Init>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800df34:	4b0e      	ldr	r3, [pc, #56]	; (800df70 <MX_ADC4_Init+0x7c>)
 800df36:	4a0f      	ldr	r2, [pc, #60]	; (800df74 <MX_ADC4_Init+0x80>)
 800df38:	78d9      	ldrb	r1, [r3, #3]
  sConfig.Rank = 1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADCSamplingTime;
 800df3a:	4b0f      	ldr	r3, [pc, #60]	; (800df78 <MX_ADC4_Init+0x84>)
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800df3c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800df40:	681b      	ldr	r3, [r3, #0]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800df42:	9200      	str	r2, [sp, #0]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800df44:	4669      	mov	r1, sp
 800df46:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADCSamplingTime;
 800df48:	9302      	str	r3, [sp, #8]
  sConfig.Rank = 1;
 800df4a:	9601      	str	r6, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800df4c:	e9cd 5503 	strd	r5, r5, [sp, #12]
  sConfig.Offset = 0;
 800df50:	9505      	str	r5, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800df52:	f7f8 fb7f 	bl	8006654 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800df56:	4629      	mov	r1, r5
 800df58:	4620      	mov	r0, r4
 800df5a:	f7f8 f9e9 	bl	8006330 <HAL_ADCEx_Calibration_Start>

}
 800df5e:	b006      	add	sp, #24
 800df60:	bd70      	pop	{r4, r5, r6, pc}
 800df62:	bf00      	nop
 800df64:	20004c98 	.word	0x20004c98
 800df68:	2000e90c 	.word	0x2000e90c
 800df6c:	50000500 	.word	0x50000500
 800df70:	20004c90 	.word	0x20004c90
 800df74:	08015308 	.word	0x08015308
 800df78:	20004c9c 	.word	0x20004c9c

0800df7c <MX_ADC12_Interleaved_Init>:


void MX_ADC12_Interleaved_Init(){
 800df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc2.Instance = ADC2;
 800df80:	4e38      	ldr	r6, [pc, #224]	; (800e064 <MX_ADC12_Interleaved_Init+0xe8>)
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc2.Init.Resolution = ADCResolution;
 800df82:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800e078 <MX_ADC12_Interleaved_Init+0xfc>
	  hadc2.Instance = ADC2;
 800df86:	4b38      	ldr	r3, [pc, #224]	; (800e068 <MX_ADC12_Interleaved_Init+0xec>)
	  hadc2.Init.Resolution = ADCResolution;
 800df88:	f8d8 2000 	ldr.w	r2, [r8]
 800df8c:	60b2      	str	r2, [r6, #8]
void MX_ADC12_Interleaved_Init(){
 800df8e:	b08b      	sub	sp, #44	; 0x2c
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc2.Init.ContinuousConvMode = DISABLE;
 800df90:	2400      	movs	r4, #0
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800df92:	2701      	movs	r7, #1
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc2.Init.NbrOfConversion =1;
	  hadc2.Init.DMAContinuousRequests = ENABLE;
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800df94:	f04f 0904 	mov.w	r9, #4
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800df98:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800df9c:	f44f 7a60 	mov.w	sl, #896	; 0x380
	  hadc2.Init.LowPowerAutoWait = DISABLE;
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc2);
 800dfa0:	4630      	mov	r0, r6
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800dfa2:	6137      	str	r7, [r6, #16]
	  hadc2.Init.NbrOfConversion =1;
 800dfa4:	6237      	str	r7, [r6, #32]
	  hadc2.Init.DMAContinuousRequests = ENABLE;
 800dfa6:	6377      	str	r7, [r6, #52]	; 0x34
	  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dfa8:	e9c6 3b00 	strd	r3, fp, [r6]
	  hadc2.Init.ContinuousConvMode = DISABLE;
 800dfac:	61f4      	str	r4, [r6, #28]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800dfae:	6274      	str	r4, [r6, #36]	; 0x24
	  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800dfb0:	6334      	str	r4, [r6, #48]	; 0x30
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dfb2:	60f4      	str	r4, [r6, #12]
	  hadc2.Init.LowPowerAutoWait = DISABLE;
 800dfb4:	61b4      	str	r4, [r6, #24]
	  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800dfb6:	63b4      	str	r4, [r6, #56]	; 0x38
	  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800dfb8:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
	  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dfbc:	f8c6 9014 	str.w	r9, [r6, #20]
	  HAL_ADC_Init(&hadc2);
 800dfc0:	f7f7 faf6 	bl	80055b0 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800dfc4:	4a29      	ldr	r2, [pc, #164]	; (800e06c <MX_ADC12_Interleaved_Init+0xf0>)
 800dfc6:	4b2a      	ldr	r3, [pc, #168]	; (800e070 <MX_ADC12_Interleaved_Init+0xf4>)
 800dfc8:	7812      	ldrb	r2, [r2, #0]
	  sConfig.Offset = 0;
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);

	    /**Common config
	    */
	  hadc1.Instance = ADC1;
 800dfca:	4d2a      	ldr	r5, [pc, #168]	; (800e074 <MX_ADC12_Interleaved_Init+0xf8>)
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800dfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	  sConfig.Rank = 1;
 800dfd0:	9705      	str	r7, [sp, #20]
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800dfd2:	a904      	add	r1, sp, #16
 800dfd4:	4630      	mov	r0, r6
	  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800dfd6:	9304      	str	r3, [sp, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800dfd8:	e9cd 4406 	strd	r4, r4, [sp, #24]
	  sConfig.Offset = 0;
 800dfdc:	e9cd 4408 	strd	r4, r4, [sp, #32]
	  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800dfe0:	f7f8 fb38 	bl	8006654 <HAL_ADC_ConfigChannel>
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc1.Init.Resolution = ADCResolution;
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
	  hadc1.Init.ContinuousConvMode = DISABLE;
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dfe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
	  hadc1.Init.Resolution = ADCResolution;
 800dfe8:	f8d8 3000 	ldr.w	r3, [r8]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dfec:	632a      	str	r2, [r5, #48]	; 0x30
	  hadc1.Instance = ADC1;
 800dfee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	  hadc1.Init.NbrOfConversion = 1;
	  hadc1.Init.DMAContinuousRequests = ENABLE;
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  hadc1.Init.LowPowerAutoWait = DISABLE;
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc1);
 800dff2:	4628      	mov	r0, r5
	  hadc1.Init.NbrOfConversion = 1;
 800dff4:	622f      	str	r7, [r5, #32]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 800dff6:	636f      	str	r7, [r5, #52]	; 0x34
	  hadc1.Init.Resolution = ADCResolution;
 800dff8:	60ab      	str	r3, [r5, #8]
	  hadc1.Instance = ADC1;
 800dffa:	6029      	str	r1, [r5, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800dffc:	f8c5 b004 	str.w	fp, [r5, #4]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e000:	612c      	str	r4, [r5, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 800e002:	61ec      	str	r4, [r5, #28]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e004:	626c      	str	r4, [r5, #36]	; 0x24
	  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e006:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e00a:	60ec      	str	r4, [r5, #12]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e00c:	e9c5 9405 	strd	r9, r4, [r5, #20]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e010:	63ac      	str	r4, [r5, #56]	; 0x38
	  HAL_ADC_Init(&hadc1);
 800e012:	f7f7 facd 	bl	80055b0 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800e016:	a904      	add	r1, sp, #16
 800e018:	4628      	mov	r0, r5
 800e01a:	f7f8 fb1b 	bl	8006654 <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e01e:	f8d8 3000 	ldr.w	r3, [r8]
 800e022:	f023 0308 	bic.w	r3, r3, #8
 800e026:	2b10      	cmp	r3, #16
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800e028:	bf0b      	itete	eq
 800e02a:	f44f 7740 	moveq.w	r7, #768	; 0x300
 800e02e:	f44f 67a0 	movne.w	r7, #1280	; 0x500
 800e032:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
 800e036:	f44f 4200 	movne.w	r2, #32768	; 0x8000
	  mode.Mode = ADC_DUALMODE_INTERL;
 800e03a:	2307      	movs	r3, #7
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 800e03c:	eb0d 0109 	add.w	r1, sp, r9
 800e040:	4628      	mov	r0, r5
 800e042:	e9cd 2702 	strd	r2, r7, [sp, #8]
	  mode.Mode = ADC_DUALMODE_INTERL;
 800e046:	9301      	str	r3, [sp, #4]
	  HAL_ADCEx_MultiModeConfigChannel(&hadc1, &mode);
 800e048:	f7f8 fd3a 	bl	8006ac0 <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800e04c:	4621      	mov	r1, r4
 800e04e:	4628      	mov	r0, r5
 800e050:	f7f8 f96e 	bl	8006330 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800e054:	4621      	mov	r1, r4
 800e056:	4630      	mov	r0, r6
 800e058:	f7f8 f96a 	bl	8006330 <HAL_ADCEx_Calibration_Start>

}
 800e05c:	b00b      	add	sp, #44	; 0x2c
 800e05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e062:	bf00      	nop
 800e064:	2000e788 	.word	0x2000e788
 800e068:	50000100 	.word	0x50000100
 800e06c:	20004c90 	.word	0x20004c90
 800e070:	080152ac 	.word	0x080152ac
 800e074:	2000e820 	.word	0x2000e820
 800e078:	20004c98 	.word	0x20004c98

0800e07c <MX_ADC34_Interleaved_Init>:
void MX_ADC34_Interleaved_Init(){
 800e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	  ADC_ChannelConfTypeDef sConfig;
	  ADC_MultiModeTypeDef   mode;

	  hadc4.Instance = ADC4;
 800e080:	4e37      	ldr	r6, [pc, #220]	; (800e160 <MX_ADC34_Interleaved_Init+0xe4>)
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc4.Init.Resolution = ADCResolution;
 800e082:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800e178 <MX_ADC34_Interleaved_Init+0xfc>
	  hadc4.Instance = ADC4;
 800e086:	4b37      	ldr	r3, [pc, #220]	; (800e164 <MX_ADC34_Interleaved_Init+0xe8>)
	  hadc4.Init.Resolution = ADCResolution;
 800e088:	f8d8 2000 	ldr.w	r2, [r8]
 800e08c:	60b2      	str	r2, [r6, #8]
void MX_ADC34_Interleaved_Init(){
 800e08e:	b08b      	sub	sp, #44	; 0x2c
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
	  hadc4.Init.ContinuousConvMode = DISABLE;
 800e090:	2400      	movs	r4, #0
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800e092:	2701      	movs	r7, #1
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	  hadc4.Init.NbrOfConversion =1;
	  hadc4.Init.DMAContinuousRequests = ENABLE;
	  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e094:	f04f 0904 	mov.w	r9, #4
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e098:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e09c:	f44f 7a60 	mov.w	sl, #896	; 0x380
	  hadc4.Init.LowPowerAutoWait = DISABLE;
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc4);
 800e0a0:	4630      	mov	r0, r6
	  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800e0a2:	6137      	str	r7, [r6, #16]
	  hadc4.Init.NbrOfConversion =1;
 800e0a4:	6237      	str	r7, [r6, #32]
	  hadc4.Init.DMAContinuousRequests = ENABLE;
 800e0a6:	6377      	str	r7, [r6, #52]	; 0x34
	  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e0a8:	e9c6 3b00 	strd	r3, fp, [r6]
	  hadc4.Init.ContinuousConvMode = DISABLE;
 800e0ac:	61f4      	str	r4, [r6, #28]
	  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800e0ae:	6274      	str	r4, [r6, #36]	; 0x24
	  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e0b0:	6334      	str	r4, [r6, #48]	; 0x30
	  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e0b2:	60f4      	str	r4, [r6, #12]
	  hadc4.Init.LowPowerAutoWait = DISABLE;
 800e0b4:	61b4      	str	r4, [r6, #24]
	  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e0b6:	63b4      	str	r4, [r6, #56]	; 0x38
	  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e0b8:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
	  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e0bc:	f8c6 9014 	str.w	r9, [r6, #20]
	  HAL_ADC_Init(&hadc4);
 800e0c0:	f7f7 fa76 	bl	80055b0 <HAL_ADC_Init>

	    /**Configure Regular Channel
	    */
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e0c4:	4a28      	ldr	r2, [pc, #160]	; (800e168 <MX_ADC34_Interleaved_Init+0xec>)
 800e0c6:	4b29      	ldr	r3, [pc, #164]	; (800e16c <MX_ADC34_Interleaved_Init+0xf0>)
 800e0c8:	7892      	ldrb	r2, [r2, #2]
	  sConfig.Offset = 0;
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);

	    /**Common config
	    */
	  hadc3.Instance = ADC3;
 800e0ca:	4d29      	ldr	r5, [pc, #164]	; (800e170 <MX_ADC34_Interleaved_Init+0xf4>)
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	  sConfig.Rank = 1;
 800e0d0:	9705      	str	r7, [sp, #20]
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800e0d2:	a904      	add	r1, sp, #16
 800e0d4:	4630      	mov	r0, r6
	  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e0d6:	9304      	str	r3, [sp, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800e0d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
	  sConfig.Offset = 0;
 800e0dc:	e9cd 4408 	strd	r4, r4, [sp, #32]
	  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800e0e0:	f7f8 fab8 	bl	8006654 <HAL_ADC_ConfigChannel>
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
	  hadc3.Init.Resolution = ADCResolution;
	  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
	  hadc3.Init.ContinuousConvMode = DISABLE;
	  hadc3.Init.DiscontinuousConvMode = DISABLE;
	  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e0e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
	  hadc3.Init.Resolution = ADCResolution;
 800e0e8:	f8d8 3000 	ldr.w	r3, [r8]
	  hadc3.Instance = ADC3;
 800e0ec:	4921      	ldr	r1, [pc, #132]	; (800e174 <MX_ADC34_Interleaved_Init+0xf8>)
	  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e0ee:	632a      	str	r2, [r5, #48]	; 0x30
	  hadc3.Init.NbrOfConversion = 1;
	  hadc3.Init.DMAContinuousRequests = ENABLE;
	  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	  hadc3.Init.LowPowerAutoWait = DISABLE;
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
	  HAL_ADC_Init(&hadc3);
 800e0f0:	4628      	mov	r0, r5
	  hadc3.Init.NbrOfConversion = 1;
 800e0f2:	622f      	str	r7, [r5, #32]
	  hadc3.Init.DMAContinuousRequests = ENABLE;
 800e0f4:	636f      	str	r7, [r5, #52]	; 0x34
	  hadc3.Init.Resolution = ADCResolution;
 800e0f6:	60ab      	str	r3, [r5, #8]
	  hadc3.Instance = ADC3;
 800e0f8:	6029      	str	r1, [r5, #0]
	  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e0fa:	f8c5 b004 	str.w	fp, [r5, #4]
	  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e0fe:	612c      	str	r4, [r5, #16]
	  hadc3.Init.ContinuousConvMode = DISABLE;
 800e100:	61ec      	str	r4, [r5, #28]
	  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e102:	626c      	str	r4, [r5, #36]	; 0x24
	  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e104:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
	  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e108:	60ec      	str	r4, [r5, #12]
	  hadc3.Init.LowPowerAutoWait = DISABLE;
 800e10a:	e9c5 9405 	strd	r9, r4, [r5, #20]
	  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e10e:	63ac      	str	r4, [r5, #56]	; 0x38
	  HAL_ADC_Init(&hadc3);
 800e110:	f7f7 fa4e 	bl	80055b0 <HAL_ADC_Init>

	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800e114:	a904      	add	r1, sp, #16
 800e116:	4628      	mov	r0, r5
 800e118:	f7f8 fa9c 	bl	8006654 <HAL_ADC_ConfigChannel>

	  mode.Mode = ADC_DUALMODE_INTERL;
	  if(ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e11c:	f8d8 3000 	ldr.w	r3, [r8]
 800e120:	f023 0308 	bic.w	r3, r3, #8
 800e124:	2b10      	cmp	r3, #16
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_8_6_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
	  }else{
		  mode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
		  mode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_6CYCLES;
 800e126:	bf0b      	itete	eq
 800e128:	f44f 7740 	moveq.w	r7, #768	; 0x300
 800e12c:	f44f 67a0 	movne.w	r7, #1280	; 0x500
 800e130:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
 800e134:	f44f 4200 	movne.w	r2, #32768	; 0x8000
	  mode.Mode = ADC_DUALMODE_INTERL;
 800e138:	2307      	movs	r3, #7
	  }
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 800e13a:	eb0d 0109 	add.w	r1, sp, r9
 800e13e:	4628      	mov	r0, r5
 800e140:	e9cd 2702 	strd	r2, r7, [sp, #8]
	  mode.Mode = ADC_DUALMODE_INTERL;
 800e144:	9301      	str	r3, [sp, #4]
	  HAL_ADCEx_MultiModeConfigChannel(&hadc3, &mode);
 800e146:	f7f8 fcbb 	bl	8006ac0 <HAL_ADCEx_MultiModeConfigChannel>

	  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800e14a:	4621      	mov	r1, r4
 800e14c:	4628      	mov	r0, r5
 800e14e:	f7f8 f8ef 	bl	8006330 <HAL_ADCEx_Calibration_Start>
	  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800e152:	4621      	mov	r1, r4
 800e154:	4630      	mov	r0, r6
 800e156:	f7f8 f8eb 	bl	8006330 <HAL_ADCEx_Calibration_Start>

}
 800e15a:	b00b      	add	sp, #44	; 0x2c
 800e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e160:	2000e90c 	.word	0x2000e90c
 800e164:	50000500 	.word	0x50000500
 800e168:	20004c90 	.word	0x20004c90
 800e16c:	080152f8 	.word	0x080152f8
 800e170:	2000e874 	.word	0x2000e874
 800e174:	50000400 	.word	0x50000400
 800e178:	20004c98 	.word	0x20004c98

0800e17c <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e17c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800e17e:	6803      	ldr	r3, [r0, #0]
 800e180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800e184:	b08a      	sub	sp, #40	; 0x28
 800e186:	4604      	mov	r4, r0
  if(hadc->Instance==ADC1)
 800e188:	d03b      	beq.n	800e202 <HAL_ADC_MspInit+0x86>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800e18a:	4aa4      	ldr	r2, [pc, #656]	; (800e41c <HAL_ADC_MspInit+0x2a0>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d009      	beq.n	800e1a4 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 800e190:	4aa3      	ldr	r2, [pc, #652]	; (800e420 <HAL_ADC_MspInit+0x2a4>)
 800e192:	4293      	cmp	r3, r2
 800e194:	f000 809d 	beq.w	800e2d2 <HAL_ADC_MspInit+0x156>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 800e198:	4aa2      	ldr	r2, [pc, #648]	; (800e424 <HAL_ADC_MspInit+0x2a8>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	f000 80db 	beq.w	800e356 <HAL_ADC_MspInit+0x1da>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800e1a0:	b00a      	add	sp, #40	; 0x28
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}
    ADC12_CLK_ENABLED++;
 800e1a4:	4aa0      	ldr	r2, [pc, #640]	; (800e428 <HAL_ADC_MspInit+0x2ac>)
 800e1a6:	6813      	ldr	r3, [r2, #0]
 800e1a8:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800e1aa:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800e1ac:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800e1ae:	d073      	beq.n	800e298 <HAL_ADC_MspInit+0x11c>
    if(ANALOG_PIN_ADC2[ADCChannel[1]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800e1b0:	4b9e      	ldr	r3, [pc, #632]	; (800e42c <HAL_ADC_MspInit+0x2b0>)
 800e1b2:	4a9f      	ldr	r2, [pc, #636]	; (800e430 <HAL_ADC_MspInit+0x2b4>)
 800e1b4:	785b      	ldrb	r3, [r3, #1]
 800e1b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e1ba:	2a00      	cmp	r2, #0
 800e1bc:	d17d      	bne.n	800e2ba <HAL_ADC_MspInit+0x13e>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e1be:	4b9d      	ldr	r3, [pc, #628]	; (800e434 <HAL_ADC_MspInit+0x2b8>)
    hdma_adc2.Instance = DMA2_Channel1;
 800e1c0:	4d9d      	ldr	r5, [pc, #628]	; (800e438 <HAL_ADC_MspInit+0x2bc>)
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e1c2:	681a      	ldr	r2, [r3, #0]
    hdma_adc2.Instance = DMA2_Channel1;
 800e1c4:	4b9d      	ldr	r3, [pc, #628]	; (800e43c <HAL_ADC_MspInit+0x2c0>)
 800e1c6:	602b      	str	r3, [r5, #0]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e1c8:	f022 0208 	bic.w	r2, r2, #8
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e1cc:	2300      	movs	r3, #0
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e1ce:	2a10      	cmp	r2, #16
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e1d0:	f04f 0180 	mov.w	r1, #128	; 0x80
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e1d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
    HAL_DMA_Init(&hdma_adc2);
 800e1d8:	4897      	ldr	r0, [pc, #604]	; (800e438 <HAL_ADC_MspInit+0x2bc>)
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e1da:	60e9      	str	r1, [r5, #12]
			hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e1dc:	bf16      	itet	ne
 800e1de:	f44f 7380 	movne.w	r3, #256	; 0x100
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800e1e2:	461e      	moveq	r6, r3
			hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e1e4:	f44f 6680 	movne.w	r6, #1024	; 0x400
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e1e8:	2120      	movs	r1, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800e1ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e1ee:	612b      	str	r3, [r5, #16]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800e1f0:	e9c5 6105 	strd	r6, r1, [r5, #20]
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800e1f4:	61ea      	str	r2, [r5, #28]
    HAL_DMA_Init(&hdma_adc4);
 800e1f6:	f7f8 ffc5 	bl	8007184 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800e1fa:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e1fc:	626c      	str	r4, [r5, #36]	; 0x24
}
 800e1fe:	b00a      	add	sp, #40	; 0x28
 800e200:	bd70      	pop	{r4, r5, r6, pc}
    ADC12_CLK_ENABLED++;
 800e202:	4a89      	ldr	r2, [pc, #548]	; (800e428 <HAL_ADC_MspInit+0x2ac>)
 800e204:	6813      	ldr	r3, [r2, #0]
 800e206:	3301      	adds	r3, #1
    if(ADC12_CLK_ENABLED==1){
 800e208:	2b01      	cmp	r3, #1
    ADC12_CLK_ENABLED++;
 800e20a:	6013      	str	r3, [r2, #0]
    if(ADC12_CLK_ENABLED==1){
 800e20c:	d033      	beq.n	800e276 <HAL_ADC_MspInit+0xfa>
    if(ANALOG_PIN_ADC1[ADCChannel[0]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800e20e:	4b87      	ldr	r3, [pc, #540]	; (800e42c <HAL_ADC_MspInit+0x2b0>)
 800e210:	4a8b      	ldr	r2, [pc, #556]	; (800e440 <HAL_ADC_MspInit+0x2c4>)
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e218:	2a00      	cmp	r2, #0
 800e21a:	f040 80d4 	bne.w	800e3c6 <HAL_ADC_MspInit+0x24a>
	if(ADCInterleaved){
 800e21e:	4a89      	ldr	r2, [pc, #548]	; (800e444 <HAL_ADC_MspInit+0x2c8>)
 800e220:	4b84      	ldr	r3, [pc, #528]	; (800e434 <HAL_ADC_MspInit+0x2b8>)
    hdma_adc1.Instance = DMA1_Channel1;
 800e222:	4d89      	ldr	r5, [pc, #548]	; (800e448 <HAL_ADC_MspInit+0x2cc>)
 800e224:	681b      	ldr	r3, [r3, #0]
	if(ADCInterleaved){
 800e226:	7811      	ldrb	r1, [r2, #0]
    hdma_adc1.Instance = DMA1_Channel1;
 800e228:	4a88      	ldr	r2, [pc, #544]	; (800e44c <HAL_ADC_MspInit+0x2d0>)
 800e22a:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e22c:	2080      	movs	r0, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e22e:	2200      	movs	r2, #0
 800e230:	f023 0308 	bic.w	r3, r3, #8
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e234:	60e8      	str	r0, [r5, #12]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e236:	e9c5 2201 	strd	r2, r2, [r5, #4]
	if(ADCInterleaved){
 800e23a:	b999      	cbnz	r1, 800e264 <HAL_ADC_MspInit+0xe8>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e23c:	2b10      	cmp	r3, #16
 800e23e:	f000 80ce 	beq.w	800e3de <HAL_ADC_MspInit+0x262>
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e242:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e24a:	e9c5 3204 	strd	r3, r2, [r5, #16]
    HAL_DMA_Init(&hdma_adc1);
 800e24e:	487e      	ldr	r0, [pc, #504]	; (800e448 <HAL_ADC_MspInit+0x2cc>)
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e250:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e252:	2300      	movs	r3, #0
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800e254:	e9c5 2306 	strd	r2, r3, [r5, #24]
    HAL_DMA_Init(&hdma_adc3);
 800e258:	f7f8 ff94 	bl	8007184 <HAL_DMA_Init>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800e25c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e25e:	626c      	str	r4, [r5, #36]	; 0x24
}
 800e260:	b00a      	add	sp, #40	; 0x28
 800e262:	bd70      	pop	{r4, r5, r6, pc}
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e264:	2b10      	cmp	r3, #16
 800e266:	d0ec      	beq.n	800e242 <HAL_ADC_MspInit+0xc6>
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e26c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e270:	e9c5 3204 	strd	r3, r2, [r5, #16]
 800e274:	e7eb      	b.n	800e24e <HAL_ADC_MspInit+0xd2>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 800e276:	4b76      	ldr	r3, [pc, #472]	; (800e450 <HAL_ADC_MspInit+0x2d4>)
 800e278:	695a      	ldr	r2, [r3, #20]
 800e27a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e27e:	615a      	str	r2, [r3, #20]
 800e280:	695a      	ldr	r2, [r3, #20]
 800e282:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800e286:	9201      	str	r2, [sp, #4]
 800e288:	9a01      	ldr	r2, [sp, #4]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800e28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e28c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800e290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e294:	62da      	str	r2, [r3, #44]	; 0x2c
 800e296:	e7ba      	b.n	800e20e <HAL_ADC_MspInit+0x92>
    	__HAL_RCC_ADC12_CLK_ENABLE();
 800e298:	4b6d      	ldr	r3, [pc, #436]	; (800e450 <HAL_ADC_MspInit+0x2d4>)
 800e29a:	695a      	ldr	r2, [r3, #20]
 800e29c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e2a0:	615a      	str	r2, [r3, #20]
 800e2a2:	695a      	ldr	r2, [r3, #20]
 800e2a4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800e2a8:	9202      	str	r2, [sp, #8]
 800e2aa:	9a02      	ldr	r2, [sp, #8]
			__HAL_RCC_ADC12_CONFIG(RCC_ADC12PLLCLK_DIV1);
 800e2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ae:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800e2b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2b6:	62da      	str	r2, [r3, #44]	; 0x2c
 800e2b8:	e77a      	b.n	800e1b0 <HAL_ADC_MspInit+0x34>
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800e2ba:	4966      	ldr	r1, [pc, #408]	; (800e454 <HAL_ADC_MspInit+0x2d8>)
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC2[ADCChannel[1]];
 800e2bc:	9205      	str	r2, [sp, #20]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800e2be:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e2c2:	2203      	movs	r2, #3
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c4:	2300      	movs	r3, #0
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800e2c6:	a905      	add	r1, sp, #20
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC2[ADCChannel[1]], &GPIO_InitStruct);
 800e2cc:	f7f9 fa36 	bl	800773c <HAL_GPIO_Init>
 800e2d0:	e775      	b.n	800e1be <HAL_ADC_MspInit+0x42>
    ADC34_CLK_ENABLED++;
 800e2d2:	4a61      	ldr	r2, [pc, #388]	; (800e458 <HAL_ADC_MspInit+0x2dc>)
 800e2d4:	6813      	ldr	r3, [r2, #0]
 800e2d6:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800e2d8:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800e2da:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800e2dc:	d10f      	bne.n	800e2fe <HAL_ADC_MspInit+0x182>
    	__HAL_RCC_ADC34_CLK_ENABLE();
 800e2de:	4b5c      	ldr	r3, [pc, #368]	; (800e450 <HAL_ADC_MspInit+0x2d4>)
 800e2e0:	695a      	ldr	r2, [r3, #20]
 800e2e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e2e6:	615a      	str	r2, [r3, #20]
 800e2e8:	695a      	ldr	r2, [r3, #20]
 800e2ea:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800e2ee:	9203      	str	r2, [sp, #12]
 800e2f0:	9a03      	ldr	r2, [sp, #12]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800e2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f4:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800e2f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e2fc:	62da      	str	r2, [r3, #44]	; 0x2c
    if(ANALOG_PIN_ADC3[ADCChannel[2]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800e2fe:	4b4b      	ldr	r3, [pc, #300]	; (800e42c <HAL_ADC_MspInit+0x2b0>)
 800e300:	4a56      	ldr	r2, [pc, #344]	; (800e45c <HAL_ADC_MspInit+0x2e0>)
 800e302:	789b      	ldrb	r3, [r3, #2]
 800e304:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e308:	2a00      	cmp	r2, #0
 800e30a:	d16e      	bne.n	800e3ea <HAL_ADC_MspInit+0x26e>
	if(ADCInterleaved){
 800e30c:	4a4d      	ldr	r2, [pc, #308]	; (800e444 <HAL_ADC_MspInit+0x2c8>)
 800e30e:	4b49      	ldr	r3, [pc, #292]	; (800e434 <HAL_ADC_MspInit+0x2b8>)
    hdma_adc3.Instance = DMA2_Channel5;
 800e310:	4d53      	ldr	r5, [pc, #332]	; (800e460 <HAL_ADC_MspInit+0x2e4>)
 800e312:	681b      	ldr	r3, [r3, #0]
	if(ADCInterleaved){
 800e314:	7811      	ldrb	r1, [r2, #0]
    hdma_adc3.Instance = DMA2_Channel5;
 800e316:	4a53      	ldr	r2, [pc, #332]	; (800e464 <HAL_ADC_MspInit+0x2e8>)
 800e318:	602a      	str	r2, [r5, #0]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800e31a:	2080      	movs	r0, #128	; 0x80
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e31c:	2200      	movs	r2, #0
 800e31e:	f023 0308 	bic.w	r3, r3, #8
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800e322:	60e8      	str	r0, [r5, #12]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800e324:	e9c5 2201 	strd	r2, r2, [r5, #4]
	if(ADCInterleaved){
 800e328:	b141      	cbz	r1, 800e33c <HAL_ADC_MspInit+0x1c0>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e32a:	2b10      	cmp	r3, #16
 800e32c:	d008      	beq.n	800e340 <HAL_ADC_MspInit+0x1c4>
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e32e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e336:	e9c5 3204 	strd	r3, r2, [r5, #16]
 800e33a:	e007      	b.n	800e34c <HAL_ADC_MspInit+0x1d0>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e33c:	2b10      	cmp	r3, #16
 800e33e:	d051      	beq.n	800e3e4 <HAL_ADC_MspInit+0x268>
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e340:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e348:	e9c5 3204 	strd	r3, r2, [r5, #16]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800e34c:	2220      	movs	r2, #32
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800e34e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_DMA_Init(&hdma_adc3);
 800e352:	4843      	ldr	r0, [pc, #268]	; (800e460 <HAL_ADC_MspInit+0x2e4>)
 800e354:	e77e      	b.n	800e254 <HAL_ADC_MspInit+0xd8>
    ADC34_CLK_ENABLED++;
 800e356:	4a40      	ldr	r2, [pc, #256]	; (800e458 <HAL_ADC_MspInit+0x2dc>)
 800e358:	6813      	ldr	r3, [r2, #0]
 800e35a:	3301      	adds	r3, #1
    if(ADC34_CLK_ENABLED==1){
 800e35c:	2b01      	cmp	r3, #1
    ADC34_CLK_ENABLED++;
 800e35e:	6013      	str	r3, [r2, #0]
    if(ADC34_CLK_ENABLED==1){
 800e360:	d10f      	bne.n	800e382 <HAL_ADC_MspInit+0x206>
    	__HAL_RCC_ADC34_CLK_ENABLE();
 800e362:	4b3b      	ldr	r3, [pc, #236]	; (800e450 <HAL_ADC_MspInit+0x2d4>)
 800e364:	695a      	ldr	r2, [r3, #20]
 800e366:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e36a:	615a      	str	r2, [r3, #20]
 800e36c:	695a      	ldr	r2, [r3, #20]
 800e36e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800e372:	9204      	str	r2, [sp, #16]
 800e374:	9a04      	ldr	r2, [sp, #16]
			__HAL_RCC_ADC34_CONFIG(RCC_ADC34PLLCLK_DIV1);
 800e376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e378:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800e37c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e380:	62da      	str	r2, [r3, #44]	; 0x2c
    if(ANALOG_PIN_ADC4[ADCChannel[3]]!=0){  //skip pin setting when pin is not set (when measuring Vref or Temp) --> otherwise full assert triggerd
 800e382:	4b2a      	ldr	r3, [pc, #168]	; (800e42c <HAL_ADC_MspInit+0x2b0>)
 800e384:	4a38      	ldr	r2, [pc, #224]	; (800e468 <HAL_ADC_MspInit+0x2ec>)
 800e386:	78db      	ldrb	r3, [r3, #3]
 800e388:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e38c:	2a00      	cmp	r2, #0
 800e38e:	d138      	bne.n	800e402 <HAL_ADC_MspInit+0x286>
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e390:	4b28      	ldr	r3, [pc, #160]	; (800e434 <HAL_ADC_MspInit+0x2b8>)
    hdma_adc4.Instance = DMA2_Channel2;
 800e392:	4d36      	ldr	r5, [pc, #216]	; (800e46c <HAL_ADC_MspInit+0x2f0>)
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e394:	681a      	ldr	r2, [r3, #0]
    hdma_adc4.Instance = DMA2_Channel2;
 800e396:	4b36      	ldr	r3, [pc, #216]	; (800e470 <HAL_ADC_MspInit+0x2f4>)
 800e398:	602b      	str	r3, [r5, #0]
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e39a:	f022 0208 	bic.w	r2, r2, #8
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e39e:	2300      	movs	r3, #0
		if (ADCResolution==ADC_RESOLUTION_8B || ADCResolution==ADC_RESOLUTION_6B){
 800e3a0:	2a10      	cmp	r2, #16
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800e3a2:	f04f 0180 	mov.w	r1, #128	; 0x80
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800e3a6:	e9c5 3301 	strd	r3, r3, [r5, #4]
			hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e3aa:	bf18      	it	ne
 800e3ac:	f44f 7380 	movne.w	r3, #256	; 0x100
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800e3b0:	60e9      	str	r1, [r5, #12]
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;	
 800e3b2:	bf0c      	ite	eq
 800e3b4:	461e      	moveq	r6, r3
			hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e3b6:	f44f 6680 	movne.w	r6, #1024	; 0x400
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800e3ba:	2120      	movs	r1, #32
    hdma_adc4.Init.Priority = DMA_PRIORITY_HIGH;
 800e3bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e3c0:	612b      	str	r3, [r5, #16]
    HAL_DMA_Init(&hdma_adc4);
 800e3c2:	482a      	ldr	r0, [pc, #168]	; (800e46c <HAL_ADC_MspInit+0x2f0>)
 800e3c4:	e714      	b.n	800e1f0 <HAL_ADC_MspInit+0x74>
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800e3c6:	492b      	ldr	r1, [pc, #172]	; (800e474 <HAL_ADC_MspInit+0x2f8>)
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC1[ADCChannel[0]];
 800e3c8:	9205      	str	r2, [sp, #20]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800e3ca:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e3ce:	2203      	movs	r2, #3
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3d0:	2300      	movs	r3, #0
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800e3d2:	a905      	add	r1, sp, #20
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC1[ADCChannel[0]], &GPIO_InitStruct);
 800e3d8:	f7f9 f9b0 	bl	800773c <HAL_GPIO_Init>
 800e3dc:	e71f      	b.n	800e21e <HAL_ADC_MspInit+0xa2>
			hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e3de:	e9c5 1104 	strd	r1, r1, [r5, #16]
 800e3e2:	e734      	b.n	800e24e <HAL_ADC_MspInit+0xd2>
			hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e3e4:	e9c5 1104 	strd	r1, r1, [r5, #16]
 800e3e8:	e7b0      	b.n	800e34c <HAL_ADC_MspInit+0x1d0>
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800e3ea:	4923      	ldr	r1, [pc, #140]	; (800e478 <HAL_ADC_MspInit+0x2fc>)
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC3[ADCChannel[2]];
 800e3ec:	9205      	str	r2, [sp, #20]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800e3ee:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e3f2:	2203      	movs	r2, #3
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3f4:	2300      	movs	r3, #0
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800e3f6:	a905      	add	r1, sp, #20
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC3[ADCChannel[2]], &GPIO_InitStruct);
 800e3fc:	f7f9 f99e 	bl	800773c <HAL_GPIO_Init>
 800e400:	e784      	b.n	800e30c <HAL_ADC_MspInit+0x190>
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800e402:	491e      	ldr	r1, [pc, #120]	; (800e47c <HAL_ADC_MspInit+0x300>)
    	GPIO_InitStruct.Pin = ANALOG_PIN_ADC4[ADCChannel[3]];
 800e404:	9205      	str	r2, [sp, #20]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800e406:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e40a:	2203      	movs	r2, #3
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e40c:	2300      	movs	r3, #0
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800e40e:	a905      	add	r1, sp, #20
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e410:	e9cd 2306 	strd	r2, r3, [sp, #24]
    	HAL_GPIO_Init(ANALOG_GPIO_ADC4[ADCChannel[3]], &GPIO_InitStruct);
 800e414:	f7f9 f992 	bl	800773c <HAL_GPIO_Init>
 800e418:	e7ba      	b.n	800e390 <HAL_ADC_MspInit+0x214>
 800e41a:	bf00      	nop
 800e41c:	50000100 	.word	0x50000100
 800e420:	50000400 	.word	0x50000400
 800e424:	50000500 	.word	0x50000500
 800e428:	20004c88 	.word	0x20004c88
 800e42c:	20004c90 	.word	0x20004c90
 800e430:	08015388 	.word	0x08015388
 800e434:	20004c98 	.word	0x20004c98
 800e438:	2000e960 	.word	0x2000e960
 800e43c:	40020408 	.word	0x40020408
 800e440:	08015374 	.word	0x08015374
 800e444:	20004c94 	.word	0x20004c94
 800e448:	2000e8c8 	.word	0x2000e8c8
 800e44c:	40020008 	.word	0x40020008
 800e450:	40021000 	.word	0x40021000
 800e454:	0801533c 	.word	0x0801533c
 800e458:	20004c8c 	.word	0x20004c8c
 800e45c:	0801539c 	.word	0x0801539c
 800e460:	2000e7dc 	.word	0x2000e7dc
 800e464:	40020458 	.word	0x40020458
 800e468:	080153a4 	.word	0x080153a4
 800e46c:	2000e744 	.word	0x2000e744
 800e470:	4002041c 	.word	0x4002041c
 800e474:	08015318 	.word	0x08015318
 800e478:	08015364 	.word	0x08015364
 800e47c:	08015364 	.word	0x08015364

0800e480 <ADC_DMA_Reconfig>:
//  }

//} 

/* USER CODE BEGIN 1 */
void ADC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800e480:	b530      	push	{r4, r5, lr}
 800e482:	460c      	mov	r4, r1
 800e484:	b097      	sub	sp, #92	; 0x5c
 800e486:	4615      	mov	r5, r2
	ADC_HandleTypeDef adcHandler;
	switch(chan){
 800e488:	2803      	cmp	r0, #3
 800e48a:	d808      	bhi.n	800e49e <ADC_DMA_Reconfig+0x1e>
 800e48c:	e8df f000 	tbb	[pc, r0]
 800e490:	0212181e 	.word	0x0212181e
		break;
		case 2:
			adcHandler=hadc3;
		break;
		case 3:
			adcHandler=hadc4;
 800e494:	2254      	movs	r2, #84	; 0x54
 800e496:	4910      	ldr	r1, [pc, #64]	; (800e4d8 <ADC_DMA_Reconfig+0x58>)
 800e498:	a801      	add	r0, sp, #4
 800e49a:	f003 fce7 	bl	8011e6c <memcpy>
		break;
	}
	
	if(buff!=NULL && len!=0){
 800e49e:	b104      	cbz	r4, 800e4a2 <ADC_DMA_Reconfig+0x22>
 800e4a0:	b90d      	cbnz	r5, 800e4a6 <ADC_DMA_Reconfig+0x26>
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
	}
}
 800e4a2:	b017      	add	sp, #92	; 0x5c
 800e4a4:	bd30      	pop	{r4, r5, pc}
		HAL_ADC_Start_DMA(&adcHandler, buff, len);
 800e4a6:	462a      	mov	r2, r5
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	a801      	add	r0, sp, #4
 800e4ac:	f7f7 fd5a 	bl	8005f64 <HAL_ADC_Start_DMA>
}
 800e4b0:	b017      	add	sp, #92	; 0x5c
 800e4b2:	bd30      	pop	{r4, r5, pc}
			adcHandler=hadc3;
 800e4b4:	2254      	movs	r2, #84	; 0x54
 800e4b6:	4909      	ldr	r1, [pc, #36]	; (800e4dc <ADC_DMA_Reconfig+0x5c>)
 800e4b8:	a801      	add	r0, sp, #4
 800e4ba:	f003 fcd7 	bl	8011e6c <memcpy>
		break;
 800e4be:	e7ee      	b.n	800e49e <ADC_DMA_Reconfig+0x1e>
			adcHandler=hadc2;
 800e4c0:	2254      	movs	r2, #84	; 0x54
 800e4c2:	4907      	ldr	r1, [pc, #28]	; (800e4e0 <ADC_DMA_Reconfig+0x60>)
 800e4c4:	a801      	add	r0, sp, #4
 800e4c6:	f003 fcd1 	bl	8011e6c <memcpy>
		break;
 800e4ca:	e7e8      	b.n	800e49e <ADC_DMA_Reconfig+0x1e>
			adcHandler=hadc1;
 800e4cc:	2254      	movs	r2, #84	; 0x54
 800e4ce:	4905      	ldr	r1, [pc, #20]	; (800e4e4 <ADC_DMA_Reconfig+0x64>)
 800e4d0:	a801      	add	r0, sp, #4
 800e4d2:	f003 fccb 	bl	8011e6c <memcpy>
		break;
 800e4d6:	e7e2      	b.n	800e49e <ADC_DMA_Reconfig+0x1e>
 800e4d8:	2000e90c 	.word	0x2000e90c
 800e4dc:	2000e874 	.word	0x2000e874
 800e4e0:	2000e788 	.word	0x2000e788
 800e4e4:	2000e820 	.word	0x2000e820

0800e4e8 <ADC_DMA_Reconfig_Interleave>:

void ADC_DMA_Reconfig_Interleave(uint8_t chan, uint32_t *buff, uint32_t len){
 800e4e8:	b530      	push	{r4, r5, lr}
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	b0ab      	sub	sp, #172	; 0xac
 800e4ee:	4615      	mov	r5, r2
	ADC_HandleTypeDef adcHandlerMaster;
	ADC_HandleTypeDef adcHandlerSlave;
	switch(chan){
 800e4f0:	b1d8      	cbz	r0, 800e52a <ADC_DMA_Reconfig_Interleave+0x42>
 800e4f2:	2801      	cmp	r0, #1
 800e4f4:	d003      	beq.n	800e4fe <ADC_DMA_Reconfig_Interleave+0x16>
			adcHandlerMaster=hadc3;
			adcHandlerSlave=hadc4;
		break;
	}

	if(buff!=NULL && len!=0){
 800e4f6:	b104      	cbz	r4, 800e4fa <ADC_DMA_Reconfig_Interleave+0x12>
 800e4f8:	b96d      	cbnz	r5, 800e516 <ADC_DMA_Reconfig_Interleave+0x2e>
		HAL_ADC_Start(&adcHandlerSlave);
		HAL_ADCEx_MultiModeStart_DMA(&adcHandlerMaster, buff,len);
	}

}
 800e4fa:	b02b      	add	sp, #172	; 0xac
 800e4fc:	bd30      	pop	{r4, r5, pc}
			adcHandlerMaster=hadc3;
 800e4fe:	2254      	movs	r2, #84	; 0x54
 800e500:	4910      	ldr	r1, [pc, #64]	; (800e544 <ADC_DMA_Reconfig_Interleave+0x5c>)
 800e502:	4668      	mov	r0, sp
 800e504:	f003 fcb2 	bl	8011e6c <memcpy>
			adcHandlerSlave=hadc4;
 800e508:	2254      	movs	r2, #84	; 0x54
 800e50a:	490f      	ldr	r1, [pc, #60]	; (800e548 <ADC_DMA_Reconfig_Interleave+0x60>)
 800e50c:	eb0d 0002 	add.w	r0, sp, r2
 800e510:	f003 fcac 	bl	8011e6c <memcpy>
		break;
 800e514:	e7ef      	b.n	800e4f6 <ADC_DMA_Reconfig_Interleave+0xe>
		HAL_ADC_Start(&adcHandlerSlave);
 800e516:	a815      	add	r0, sp, #84	; 0x54
 800e518:	f7f7 fc46 	bl	8005da8 <HAL_ADC_Start>
		HAL_ADCEx_MultiModeStart_DMA(&adcHandlerMaster, buff,len);
 800e51c:	462a      	mov	r2, r5
 800e51e:	4621      	mov	r1, r4
 800e520:	4668      	mov	r0, sp
 800e522:	f7f7 ff99 	bl	8006458 <HAL_ADCEx_MultiModeStart_DMA>
}
 800e526:	b02b      	add	sp, #172	; 0xac
 800e528:	bd30      	pop	{r4, r5, pc}
			adcHandlerMaster=hadc1;
 800e52a:	2254      	movs	r2, #84	; 0x54
 800e52c:	4907      	ldr	r1, [pc, #28]	; (800e54c <ADC_DMA_Reconfig_Interleave+0x64>)
 800e52e:	4668      	mov	r0, sp
 800e530:	f003 fc9c 	bl	8011e6c <memcpy>
			adcHandlerSlave=hadc2;
 800e534:	2254      	movs	r2, #84	; 0x54
 800e536:	4906      	ldr	r1, [pc, #24]	; (800e550 <ADC_DMA_Reconfig_Interleave+0x68>)
 800e538:	eb0d 0002 	add.w	r0, sp, r2
 800e53c:	f003 fc96 	bl	8011e6c <memcpy>
		break;
 800e540:	e7d9      	b.n	800e4f6 <ADC_DMA_Reconfig_Interleave+0xe>
 800e542:	bf00      	nop
 800e544:	2000e874 	.word	0x2000e874
 800e548:	2000e90c 	.word	0x2000e90c
 800e54c:	2000e820 	.word	0x2000e820
 800e550:	2000e788 	.word	0x2000e788

0800e554 <ADC_DMA_Stop>:

void ADC_DMA_Stop(void){
 800e554:	b508      	push	{r3, lr}
	HAL_ADC_Stop_DMA(&hadc1);
 800e556:	4807      	ldr	r0, [pc, #28]	; (800e574 <ADC_DMA_Stop+0x20>)
 800e558:	f7f7 fde4 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e55c:	4806      	ldr	r0, [pc, #24]	; (800e578 <ADC_DMA_Stop+0x24>)
 800e55e:	f7f7 fde1 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e562:	4806      	ldr	r0, [pc, #24]	; (800e57c <ADC_DMA_Stop+0x28>)
 800e564:	f7f7 fdde 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800e568:	4805      	ldr	r0, [pc, #20]	; (800e580 <ADC_DMA_Stop+0x2c>)
	
	//CalibrateADC();
}
 800e56a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_Stop_DMA(&hadc4);
 800e56e:	f7f7 bdd9 	b.w	8006124 <HAL_ADC_Stop_DMA>
 800e572:	bf00      	nop
 800e574:	2000e820 	.word	0x2000e820
 800e578:	2000e788 	.word	0x2000e788
 800e57c:	2000e874 	.word	0x2000e874
 800e580:	2000e90c 	.word	0x2000e90c

0800e584 <DMA_GetCurrDataCounter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800e584:	b500      	push	{lr}
  /* Return the number of remaining data units for DMAy Streamx */
		ADC_HandleTypeDef adcHandler;
	switch(channel){
 800e586:	3801      	subs	r0, #1
uint16_t DMA_GetCurrDataCounter(uint8_t channel){
 800e588:	b097      	sub	sp, #92	; 0x5c
	switch(channel){
 800e58a:	2803      	cmp	r0, #3
 800e58c:	d808      	bhi.n	800e5a0 <DMA_GetCurrDataCounter+0x1c>
 800e58e:	e8df f000 	tbb	[pc, r0]
 800e592:	191f      	.short	0x191f
 800e594:	0213      	.short	0x0213
		break;
		case 3:
			adcHandler=hadc3;
		break;
		case 4:
			adcHandler=hadc4;
 800e596:	2254      	movs	r2, #84	; 0x54
 800e598:	4910      	ldr	r1, [pc, #64]	; (800e5dc <DMA_GetCurrDataCounter+0x58>)
 800e59a:	a801      	add	r0, sp, #4
 800e59c:	f003 fc66 	bl	8011e6c <memcpy>
 800e5a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
		break;
	}

	if(ADCInterleaved==1){
 800e5a2:	4a0f      	ldr	r2, [pc, #60]	; (800e5e0 <DMA_GetCurrDataCounter+0x5c>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	7812      	ldrb	r2, [r2, #0]
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 800e5a8:	6858      	ldr	r0, [r3, #4]
	if(ADCInterleaved==1){
 800e5aa:	2a01      	cmp	r2, #1
		return (adcHandler.DMA_Handle->Instance->CNDTR)*2;
 800e5ac:	bf08      	it	eq
 800e5ae:	0040      	lsleq	r0, r0, #1
	}else{
		return adcHandler.DMA_Handle->Instance->CNDTR;
 800e5b0:	b280      	uxth	r0, r0
	}


}
 800e5b2:	b017      	add	sp, #92	; 0x5c
 800e5b4:	f85d fb04 	ldr.w	pc, [sp], #4
			adcHandler=hadc3;
 800e5b8:	2254      	movs	r2, #84	; 0x54
 800e5ba:	490a      	ldr	r1, [pc, #40]	; (800e5e4 <DMA_GetCurrDataCounter+0x60>)
 800e5bc:	a801      	add	r0, sp, #4
 800e5be:	f003 fc55 	bl	8011e6c <memcpy>
		break;
 800e5c2:	e7ed      	b.n	800e5a0 <DMA_GetCurrDataCounter+0x1c>
			adcHandler=hadc2;
 800e5c4:	2254      	movs	r2, #84	; 0x54
 800e5c6:	4908      	ldr	r1, [pc, #32]	; (800e5e8 <DMA_GetCurrDataCounter+0x64>)
 800e5c8:	a801      	add	r0, sp, #4
 800e5ca:	f003 fc4f 	bl	8011e6c <memcpy>
		break;
 800e5ce:	e7e7      	b.n	800e5a0 <DMA_GetCurrDataCounter+0x1c>
			adcHandler=hadc1;
 800e5d0:	2254      	movs	r2, #84	; 0x54
 800e5d2:	4906      	ldr	r1, [pc, #24]	; (800e5ec <DMA_GetCurrDataCounter+0x68>)
 800e5d4:	a801      	add	r0, sp, #4
 800e5d6:	f003 fc49 	bl	8011e6c <memcpy>
		break;
 800e5da:	e7e1      	b.n	800e5a0 <DMA_GetCurrDataCounter+0x1c>
 800e5dc:	2000e90c 	.word	0x2000e90c
 800e5e0:	20004c94 	.word	0x20004c94
 800e5e4:	2000e874 	.word	0x2000e874
 800e5e8:	2000e788 	.word	0x2000e788
 800e5ec:	2000e820 	.word	0x2000e820

0800e5f0 <ADC_set_sampling_time>:
/**
  * @brief  This function will estimate maximum time to connect sampling capacitor to reduce equivalen current
  * @param  None
  * @retval None
  */
void ADC_set_sampling_time(uint32_t realfreq){
 800e5f0:	b538      	push	{r3, r4, r5, lr}
	uint8_t ADCRes;
	uint32_t cyclesForConversion;
	switch(ADCResolution){
 800e5f2:	4b24      	ldr	r3, [pc, #144]	; (800e684 <ADC_set_sampling_time+0x94>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
void ADC_set_sampling_time(uint32_t realfreq){
 800e5f6:	4604      	mov	r4, r0
	switch(ADCResolution){
 800e5f8:	2b18      	cmp	r3, #24
 800e5fa:	d82f      	bhi.n	800e65c <ADC_set_sampling_time+0x6c>
 800e5fc:	e8df f003 	tbb	[pc, r3]
 800e600:	2e2e2e0d 	.word	0x2e2e2e0d
 800e604:	2e2e2e2e 	.word	0x2e2e2e2e
 800e608:	2e2e2e2c 	.word	0x2e2e2e2c
 800e60c:	2e2e2e2e 	.word	0x2e2e2e2e
 800e610:	2e2e2e2a 	.word	0x2e2e2e2a
 800e614:	2e2e2e2e 	.word	0x2e2e2e2e
 800e618:	28          	.byte	0x28
 800e619:	00          	.byte	0x00
 800e61a:	250c      	movs	r5, #12
		case ADC_RESOLUTION_6B:
			ADCRes=6;
			break;
	}
	
	cyclesForConversion=HAL_RCC_GetPCLK2Freq()/realfreq-ADCRes-1;
 800e61c:	f7f9 fff6 	bl	800860c <HAL_RCC_GetPCLK2Freq>
 800e620:	fbb0 f0f4 	udiv	r0, r0, r4
 800e624:	1b40      	subs	r0, r0, r5
 800e626:	3801      	subs	r0, #1
	if(cyclesForConversion>=601){
 800e628:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800e62c:	4b16      	ldr	r3, [pc, #88]	; (800e688 <ADC_set_sampling_time+0x98>)
	if(cyclesForConversion>=601){
 800e62e:	d817      	bhi.n	800e660 <ADC_set_sampling_time+0x70>
	}else if(cyclesForConversion>=181){
 800e630:	28b4      	cmp	r0, #180	; 0xb4
 800e632:	d818      	bhi.n	800e666 <ADC_set_sampling_time+0x76>
		ADCSamplingTime=ADC_SAMPLETIME_181CYCLES_5;
	}else if(cyclesForConversion>=61){
 800e634:	283c      	cmp	r0, #60	; 0x3c
 800e636:	d819      	bhi.n	800e66c <ADC_set_sampling_time+0x7c>
		ADCSamplingTime=ADC_SAMPLETIME_61CYCLES_5;
	}else if(cyclesForConversion>=19){
 800e638:	2812      	cmp	r0, #18
 800e63a:	d81a      	bhi.n	800e672 <ADC_set_sampling_time+0x82>
		ADCSamplingTime=ADC_SAMPLETIME_19CYCLES_5;
	}else if(cyclesForConversion>=7){
 800e63c:	2806      	cmp	r0, #6
 800e63e:	d81b      	bhi.n	800e678 <ADC_set_sampling_time+0x88>
		ADCSamplingTime=ADC_SAMPLETIME_7CYCLES_5;
	}else if(cyclesForConversion>=4){
 800e640:	2803      	cmp	r0, #3
 800e642:	d81c      	bhi.n	800e67e <ADC_set_sampling_time+0x8e>
		ADCSamplingTime=ADC_SAMPLETIME_4CYCLES_5;
	}else if(cyclesForConversion>=2){
 800e644:	2801      	cmp	r0, #1
		ADCSamplingTime=ADC_SAMPLETIME_2CYCLES_5;
 800e646:	bf8c      	ite	hi
 800e648:	2201      	movhi	r2, #1
	}else {
		ADCSamplingTime=ADC_SAMPLETIME_1CYCLE_5;
 800e64a:	2200      	movls	r2, #0
 800e64c:	601a      	str	r2, [r3, #0]
	}	
}
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
			break;
 800e650:	2506      	movs	r5, #6
 800e652:	e7e3      	b.n	800e61c <ADC_set_sampling_time+0x2c>
			break;
 800e654:	2508      	movs	r5, #8
 800e656:	e7e1      	b.n	800e61c <ADC_set_sampling_time+0x2c>
	switch(ADCResolution){
 800e658:	250a      	movs	r5, #10
 800e65a:	e7df      	b.n	800e61c <ADC_set_sampling_time+0x2c>
 800e65c:	2500      	movs	r5, #0
 800e65e:	e7dd      	b.n	800e61c <ADC_set_sampling_time+0x2c>
		ADCSamplingTime=ADC_SAMPLETIME_601CYCLES_5;
 800e660:	2207      	movs	r2, #7
 800e662:	601a      	str	r2, [r3, #0]
}
 800e664:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_181CYCLES_5;
 800e666:	2206      	movs	r2, #6
 800e668:	601a      	str	r2, [r3, #0]
}
 800e66a:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_61CYCLES_5;
 800e66c:	2205      	movs	r2, #5
 800e66e:	601a      	str	r2, [r3, #0]
}
 800e670:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_19CYCLES_5;
 800e672:	2204      	movs	r2, #4
 800e674:	601a      	str	r2, [r3, #0]
}
 800e676:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_7CYCLES_5;
 800e678:	2203      	movs	r2, #3
 800e67a:	601a      	str	r2, [r3, #0]
}
 800e67c:	bd38      	pop	{r3, r4, r5, pc}
		ADCSamplingTime=ADC_SAMPLETIME_4CYCLES_5;
 800e67e:	2202      	movs	r2, #2
 800e680:	601a      	str	r2, [r3, #0]
}
 800e682:	bd38      	pop	{r3, r4, r5, pc}
 800e684:	20004c98 	.word	0x20004c98
 800e688:	20004c9c 	.word	0x20004c9c

0800e68c <samplingEnable>:
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void samplingEnable (void){
	TIMScopeEnable();
 800e68c:	f003 b80c 	b.w	80116a8 <TIMScopeEnable>

0800e690 <samplingDisable>:
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void samplingDisable (void){
	TIMScopeDisable();
 800e690:	f003 b810 	b.w	80116b4 <TIMScopeDisable>

0800e694 <adcSetInputChannel>:
}

void adcSetInputChannel(uint8_t adc, uint8_t chann){
 800e694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ADCChannel[adc]=chann;
 800e696:	4b17      	ldr	r3, [pc, #92]	; (800e6f4 <adcSetInputChannel+0x60>)
	samplingDisable();
	HAL_ADC_Stop_DMA(&hadc1);
 800e698:	4f17      	ldr	r7, [pc, #92]	; (800e6f8 <adcSetInputChannel+0x64>)
	HAL_ADC_Stop_DMA(&hadc2);
 800e69a:	4e18      	ldr	r6, [pc, #96]	; (800e6fc <adcSetInputChannel+0x68>)
	ADCChannel[adc]=chann;
 800e69c:	5419      	strb	r1, [r3, r0]
	HAL_ADC_Stop_DMA(&hadc3);
 800e69e:	4d18      	ldr	r5, [pc, #96]	; (800e700 <adcSetInputChannel+0x6c>)
	HAL_ADC_Stop_DMA(&hadc4);
 800e6a0:	4c18      	ldr	r4, [pc, #96]	; (800e704 <adcSetInputChannel+0x70>)
	TIMScopeDisable();
 800e6a2:	f003 f807 	bl	80116b4 <TIMScopeDisable>
	HAL_ADC_Stop_DMA(&hadc1);
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	f7f7 fd3c 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	f7f7 fd39 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f7f7 fd36 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	f7f7 fd33 	bl	8006124 <HAL_ADC_Stop_DMA>
	
	HAL_ADC_DeInit(&hadc1);
 800e6be:	4638      	mov	r0, r7
 800e6c0:	f7f7 f9ea 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7f7 f9e7 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	f7f7 f9e4 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f7f7 f9e1 	bl	8005a98 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 800e6d6:	480c      	ldr	r0, [pc, #48]	; (800e708 <adcSetInputChannel+0x74>)
 800e6d8:	f7f8 fe22 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800e6dc:	480b      	ldr	r0, [pc, #44]	; (800e70c <adcSetInputChannel+0x78>)
 800e6de:	f7f8 fe1f 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800e6e2:	480b      	ldr	r0, [pc, #44]	; (800e710 <adcSetInputChannel+0x7c>)
 800e6e4:	f7f8 fe1c 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800e6e8:	480a      	ldr	r0, [pc, #40]	; (800e714 <adcSetInputChannel+0x80>)
}
 800e6ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_DMA_DeInit(&hdma_adc4);
 800e6ee:	f7f8 be17 	b.w	8007320 <HAL_DMA_DeInit>
 800e6f2:	bf00      	nop
 800e6f4:	20004c90 	.word	0x20004c90
 800e6f8:	2000e820 	.word	0x2000e820
 800e6fc:	2000e788 	.word	0x2000e788
 800e700:	2000e874 	.word	0x2000e874
 800e704:	2000e90c 	.word	0x2000e90c
 800e708:	2000e8c8 	.word	0x2000e8c8
 800e70c:	2000e960 	.word	0x2000e960
 800e710:	2000e7dc 	.word	0x2000e7dc
 800e714:	2000e744 	.word	0x2000e744

0800e718 <adcSetDefaultInputs>:

void adcSetDefaultInputs(void){
	uint8_t i;
	for(i=0;i<MAX_ADC_CHANNELS;i++){
		ADCChannel[i]=ANALOG_DEFAULT_INPUTS[i];
 800e718:	4b01      	ldr	r3, [pc, #4]	; (800e720 <adcSetDefaultInputs+0x8>)
 800e71a:	4a02      	ldr	r2, [pc, #8]	; (800e724 <adcSetDefaultInputs+0xc>)
 800e71c:	601a      	str	r2, [r3, #0]
	}
}
 800e71e:	4770      	bx	lr
 800e720:	20004c90 	.word	0x20004c90
 800e724:	01020402 	.word	0x01020402

0800e728 <adcSetResolution>:


void adcSetResolution (uint8_t res){
 800e728:	b510      	push	{r4, lr}
 800e72a:	4604      	mov	r4, r0
	TIMScopeDisable();
 800e72c:	f002 ffc2 	bl	80116b4 <TIMScopeDisable>
	samplingDisable();
	HAL_ADC_Stop_DMA(&hadc1);
 800e730:	481f      	ldr	r0, [pc, #124]	; (800e7b0 <adcSetResolution+0x88>)
 800e732:	f7f7 fcf7 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800e736:	481f      	ldr	r0, [pc, #124]	; (800e7b4 <adcSetResolution+0x8c>)
 800e738:	f7f7 fcf4 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800e73c:	481e      	ldr	r0, [pc, #120]	; (800e7b8 <adcSetResolution+0x90>)
 800e73e:	f7f7 fcf1 	bl	8006124 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800e742:	481e      	ldr	r0, [pc, #120]	; (800e7bc <adcSetResolution+0x94>)
 800e744:	f7f7 fcee 	bl	8006124 <HAL_ADC_Stop_DMA>

	switch(res){
 800e748:	1fa0      	subs	r0, r4, #6
 800e74a:	2806      	cmp	r0, #6
 800e74c:	d82e      	bhi.n	800e7ac <adcSetResolution+0x84>
 800e74e:	e8df f000 	tbb	[pc, r0]
 800e752:	2d29      	.short	0x2d29
 800e754:	2d212d25 	.word	0x2d212d25
 800e758:	04          	.byte	0x04
 800e759:	00          	.byte	0x00
		break;
	case 10:
		ADCResolution = ADC_RESOLUTION_10B;
		break;
	case 12:
		ADCResolution = ADC_RESOLUTION_12B;
 800e75a:	4b19      	ldr	r3, [pc, #100]	; (800e7c0 <adcSetResolution+0x98>)
 800e75c:	2200      	movs	r2, #0
 800e75e:	601a      	str	r2, [r3, #0]
		break;
	default:
		return;
	}

	HAL_ADC_DeInit(&hadc1);
 800e760:	4813      	ldr	r0, [pc, #76]	; (800e7b0 <adcSetResolution+0x88>)
 800e762:	f7f7 f999 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e766:	4813      	ldr	r0, [pc, #76]	; (800e7b4 <adcSetResolution+0x8c>)
 800e768:	f7f7 f996 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e76c:	4812      	ldr	r0, [pc, #72]	; (800e7b8 <adcSetResolution+0x90>)
 800e76e:	f7f7 f993 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800e772:	4812      	ldr	r0, [pc, #72]	; (800e7bc <adcSetResolution+0x94>)
 800e774:	f7f7 f990 	bl	8005a98 <HAL_ADC_DeInit>
	
	HAL_DMA_DeInit(&hdma_adc1);
 800e778:	4812      	ldr	r0, [pc, #72]	; (800e7c4 <adcSetResolution+0x9c>)
 800e77a:	f7f8 fdd1 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800e77e:	4812      	ldr	r0, [pc, #72]	; (800e7c8 <adcSetResolution+0xa0>)
 800e780:	f7f8 fdce 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc3);
 800e784:	4811      	ldr	r0, [pc, #68]	; (800e7cc <adcSetResolution+0xa4>)
 800e786:	f7f8 fdcb 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc4);
 800e78a:	4811      	ldr	r0, [pc, #68]	; (800e7d0 <adcSetResolution+0xa8>)
	

}
 800e78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_DeInit(&hdma_adc4);
 800e790:	f7f8 bdc6 	b.w	8007320 <HAL_DMA_DeInit>
		ADCResolution = ADC_RESOLUTION_10B;
 800e794:	4b0a      	ldr	r3, [pc, #40]	; (800e7c0 <adcSetResolution+0x98>)
 800e796:	2208      	movs	r2, #8
 800e798:	601a      	str	r2, [r3, #0]
		break;
 800e79a:	e7e1      	b.n	800e760 <adcSetResolution+0x38>
		ADCResolution = ADC_RESOLUTION_8B;
 800e79c:	4b08      	ldr	r3, [pc, #32]	; (800e7c0 <adcSetResolution+0x98>)
 800e79e:	2210      	movs	r2, #16
 800e7a0:	601a      	str	r2, [r3, #0]
		break;
 800e7a2:	e7dd      	b.n	800e760 <adcSetResolution+0x38>
		ADCResolution = ADC_RESOLUTION_6B;
 800e7a4:	4b06      	ldr	r3, [pc, #24]	; (800e7c0 <adcSetResolution+0x98>)
 800e7a6:	2218      	movs	r2, #24
 800e7a8:	601a      	str	r2, [r3, #0]
		break;
 800e7aa:	e7d9      	b.n	800e760 <adcSetResolution+0x38>
}
 800e7ac:	bd10      	pop	{r4, pc}
 800e7ae:	bf00      	nop
 800e7b0:	2000e820 	.word	0x2000e820
 800e7b4:	2000e788 	.word	0x2000e788
 800e7b8:	2000e874 	.word	0x2000e874
 800e7bc:	2000e90c 	.word	0x2000e90c
 800e7c0:	20004c98 	.word	0x20004c98
 800e7c4:	2000e8c8 	.word	0x2000e8c8
 800e7c8:	2000e960 	.word	0x2000e960
 800e7cc:	2000e7dc 	.word	0x2000e7dc
 800e7d0:	2000e744 	.word	0x2000e744

0800e7d4 <CalibrateADC>:


void CalibrateADC (void){
 800e7d4:	b508      	push	{r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	4808      	ldr	r0, [pc, #32]	; (800e7fc <CalibrateADC+0x28>)
 800e7da:	f7f7 fda9 	bl	8006330 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800e7de:	2100      	movs	r1, #0
 800e7e0:	4807      	ldr	r0, [pc, #28]	; (800e800 <CalibrateADC+0x2c>)
 800e7e2:	f7f7 fda5 	bl	8006330 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	4806      	ldr	r0, [pc, #24]	; (800e804 <CalibrateADC+0x30>)
 800e7ea:	f7f7 fda1 	bl	8006330 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	4805      	ldr	r0, [pc, #20]	; (800e808 <CalibrateADC+0x34>)
}
 800e7f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800e7f6:	f7f7 bd9b 	b.w	8006330 <HAL_ADCEx_Calibration_Start>
 800e7fa:	bf00      	nop
 800e7fc:	2000e820 	.word	0x2000e820
 800e800:	2000e788 	.word	0x2000e788
 800e804:	2000e874 	.word	0x2000e874
 800e808:	2000e90c 	.word	0x2000e90c

0800e80c <ADCInitNormalMode>:

void ADCInitNormalMode(void){
 800e80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_ADC_DeInit(&hadc1);
 800e810:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800ea28 <ADCInitNormalMode+0x21c>
	HAL_ADC_DeInit(&hadc2);
 800e814:	4f78      	ldr	r7, [pc, #480]	; (800e9f8 <ADCInitNormalMode+0x1ec>)
	HAL_ADC_DeInit(&hadc3);
 800e816:	4e79      	ldr	r6, [pc, #484]	; (800e9fc <ADCInitNormalMode+0x1f0>)
	HAL_ADC_DeInit(&hadc4);
 800e818:	4d79      	ldr	r5, [pc, #484]	; (800ea00 <ADCInitNormalMode+0x1f4>)
  hadc1.Init.Resolution = ADCResolution;
 800e81a:	f8df b210 	ldr.w	fp, [pc, #528]	; 800ea2c <ADCInitNormalMode+0x220>
  sConfig.SamplingTime = ADCSamplingTime;
 800e81e:	f8df a210 	ldr.w	sl, [pc, #528]	; 800ea30 <ADCInitNormalMode+0x224>
void ADCInitNormalMode(void){
 800e822:	b087      	sub	sp, #28
	HAL_ADC_DeInit(&hadc1);
 800e824:	4640      	mov	r0, r8
 800e826:	f7f7 f937 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800e82a:	4638      	mov	r0, r7
 800e82c:	f7f7 f934 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800e830:	4630      	mov	r0, r6
 800e832:	f7f7 f931 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800e836:	4628      	mov	r0, r5
 800e838:	f7f7 f92e 	bl	8005a98 <HAL_ADC_DeInit>
  hadc1.Instance = ADC1;
 800e83c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800e840:	f8c8 3000 	str.w	r3, [r8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.Resolution = ADCResolution;
 800e848:	f8db 0000 	ldr.w	r0, [fp]

	ADCInterleaved=0;
 800e84c:	496d      	ldr	r1, [pc, #436]	; (800ea04 <ADCInitNormalMode+0x1f8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e84e:	f8c8 3004 	str.w	r3, [r8, #4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e856:	f44f 7360 	mov.w	r3, #896	; 0x380
	ADCInterleaved=0;
 800e85a:	2400      	movs	r4, #0
  hadc1.Init.NbrOfConversion = 1;
 800e85c:	f04f 0901 	mov.w	r9, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e860:	e9c8 320b 	strd	r3, r2, [r8, #44]	; 0x2c
  hadc1.Init.Resolution = ADCResolution;
 800e864:	f8c8 0008 	str.w	r0, [r8, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e868:	2304      	movs	r3, #4
  HAL_ADC_Init(&hadc1);
 800e86a:	4640      	mov	r0, r8
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e86c:	f8c8 4010 	str.w	r4, [r8, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e870:	f8c8 401c 	str.w	r4, [r8, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e874:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e878:	f8c8 400c 	str.w	r4, [r8, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e87c:	f8c8 4018 	str.w	r4, [r8, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e880:	f8c8 4038 	str.w	r4, [r8, #56]	; 0x38
	ADCInterleaved=0;
 800e884:	700c      	strb	r4, [r1, #0]
  hadc1.Init.NbrOfConversion = 1;
 800e886:	f8c8 9020 	str.w	r9, [r8, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800e88a:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e88e:	f8c8 3014 	str.w	r3, [r8, #20]
  HAL_ADC_Init(&hadc1);
 800e892:	f7f6 fe8d 	bl	80055b0 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800e896:	4b5c      	ldr	r3, [pc, #368]	; (800ea08 <ADCInitNormalMode+0x1fc>)
 800e898:	495c      	ldr	r1, [pc, #368]	; (800ea0c <ADCInitNormalMode+0x200>)
 800e89a:	7818      	ldrb	r0, [r3, #0]
  sConfig.SamplingTime = ADCSamplingTime;
 800e89c:	f8da 2000 	ldr.w	r2, [sl]
  sConfig.Channel = ANALOG_CHANNEL_ADC1[ADCChannel[0]];
 800e8a0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e8a4:	9100      	str	r1, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADCSamplingTime;
 800e8aa:	9202      	str	r2, [sp, #8]
  sConfig.Rank = 1;
 800e8ac:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e8b0:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800e8b4:	9405      	str	r4, [sp, #20]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800e8b6:	f7f7 fecd 	bl	8006654 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800e8ba:	4621      	mov	r1, r4
 800e8bc:	4640      	mov	r0, r8
 800e8be:	f7f7 fd37 	bl	8006330 <HAL_ADCEx_Calibration_Start>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e8c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e8c6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e8ca:	607a      	str	r2, [r7, #4]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e8cc:	f44f 7260 	mov.w	r2, #896	; 0x380
 800e8d0:	e9c7 2c0b 	strd	r2, ip, [r7, #44]	; 0x2c
  hadc2.Init.Resolution = ADCResolution;
 800e8d4:	f8db 1000 	ldr.w	r1, [fp]
  hadc2.Instance = ADC2;
 800e8d8:	4b4d      	ldr	r3, [pc, #308]	; (800ea10 <ADCInitNormalMode+0x204>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e8da:	613c      	str	r4, [r7, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e8dc:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc2);
 800e8de:	4638      	mov	r0, r7
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800e8e0:	e9c7 2405 	strd	r2, r4, [r7, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800e8e4:	61fc      	str	r4, [r7, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800e8e6:	627c      	str	r4, [r7, #36]	; 0x24
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e8e8:	60fc      	str	r4, [r7, #12]
  hadc2.Init.NbrOfConversion = 1;
 800e8ea:	f8c7 9020 	str.w	r9, [r7, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800e8ee:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e8f2:	63bc      	str	r4, [r7, #56]	; 0x38
  hadc2.Instance = ADC2;
 800e8f4:	603b      	str	r3, [r7, #0]
  hadc2.Init.Resolution = ADCResolution;
 800e8f6:	60b9      	str	r1, [r7, #8]
  HAL_ADC_Init(&hadc2);
 800e8f8:	f7f6 fe5a 	bl	80055b0 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800e8fc:	4b42      	ldr	r3, [pc, #264]	; (800ea08 <ADCInitNormalMode+0x1fc>)
 800e8fe:	4945      	ldr	r1, [pc, #276]	; (800ea14 <ADCInitNormalMode+0x208>)
 800e900:	7858      	ldrb	r0, [r3, #1]
  sConfig.Offset = 0;
 800e902:	9405      	str	r4, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC2[ADCChannel[1]];
 800e904:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800e908:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 800e90a:	e9cd 2900 	strd	r2, r9, [sp]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800e90e:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADCSamplingTime;
 800e910:	f8da 2000 	ldr.w	r2, [sl]
 800e914:	9202      	str	r2, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e916:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800e91a:	f7f7 fe9b 	bl	8006654 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800e91e:	4621      	mov	r1, r4
 800e920:	4638      	mov	r0, r7
 800e922:	f7f7 fd05 	bl	8006330 <HAL_ADCEx_Calibration_Start>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e92a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e92e:	6072      	str	r2, [r6, #4]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e930:	f44f 7260 	mov.w	r2, #896	; 0x380
 800e934:	e9c6 2e0b 	strd	r2, lr, [r6, #44]	; 0x2c
  hadc3.Init.Resolution = ADCResolution;
 800e938:	f8db 1000 	ldr.w	r1, [fp]
  hadc3.Instance = ADC3;
 800e93c:	4f36      	ldr	r7, [pc, #216]	; (800ea18 <ADCInitNormalMode+0x20c>)
 800e93e:	6037      	str	r7, [r6, #0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e940:	2204      	movs	r2, #4
  HAL_ADC_Init(&hadc3);
 800e942:	4630      	mov	r0, r6
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800e944:	e9c6 2405 	strd	r2, r4, [r6, #20]
  hadc3.Init.Resolution = ADCResolution;
 800e948:	60b1      	str	r1, [r6, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e94a:	6134      	str	r4, [r6, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800e94c:	61f4      	str	r4, [r6, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e94e:	6274      	str	r4, [r6, #36]	; 0x24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e950:	60f4      	str	r4, [r6, #12]
  hadc3.Init.NbrOfConversion = 1;
 800e952:	f8c6 9020 	str.w	r9, [r6, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800e956:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e95a:	63b4      	str	r4, [r6, #56]	; 0x38
  HAL_ADC_Init(&hadc3);
 800e95c:	f7f6 fe28 	bl	80055b0 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e960:	4b29      	ldr	r3, [pc, #164]	; (800ea08 <ADCInitNormalMode+0x1fc>)
 800e962:	492e      	ldr	r1, [pc, #184]	; (800ea1c <ADCInitNormalMode+0x210>)
 800e964:	7898      	ldrb	r0, [r3, #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800e966:	f8da 2000 	ldr.w	r2, [sl]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e96a:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
  sConfig.SamplingTime = ADCSamplingTime;
 800e96e:	9202      	str	r2, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800e970:	4669      	mov	r1, sp
 800e972:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 800e974:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e978:	e9cd 4403 	strd	r4, r4, [sp, #12]
  sConfig.Offset = 0;
 800e97c:	9405      	str	r4, [sp, #20]
  sConfig.Channel = ANALOG_CHANNEL_ADC3[ADCChannel[2]];
 800e97e:	9700      	str	r7, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800e980:	f7f7 fe68 	bl	8006654 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800e984:	4621      	mov	r1, r4
 800e986:	4630      	mov	r0, r6
 800e988:	f7f7 fcd2 	bl	8006330 <HAL_ADCEx_Calibration_Start>
  hadc4.Init.Resolution = ADCResolution;
 800e98c:	f8db 1000 	ldr.w	r1, [fp]
 800e990:	60a9      	str	r1, [r5, #8]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800e992:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e996:	6069      	str	r1, [r5, #4]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e998:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800e99c:	f44f 7160 	mov.w	r1, #896	; 0x380
  hadc4.Instance = ADC4;
 800e9a0:	4a1f      	ldr	r2, [pc, #124]	; (800ea20 <ADCInitNormalMode+0x214>)
 800e9a2:	602a      	str	r2, [r5, #0]
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 800e9a4:	e9c5 180b 	strd	r1, r8, [r5, #44]	; 0x2c
  HAL_ADC_Init(&hadc4);
 800e9a8:	4628      	mov	r0, r5
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e9aa:	2104      	movs	r1, #4
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800e9ac:	e9c5 1405 	strd	r1, r4, [r5, #20]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e9b0:	612c      	str	r4, [r5, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800e9b2:	61ec      	str	r4, [r5, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800e9b4:	626c      	str	r4, [r5, #36]	; 0x24
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e9b6:	60ec      	str	r4, [r5, #12]
  hadc4.Init.NbrOfConversion = 1;
 800e9b8:	f8c5 9020 	str.w	r9, [r5, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800e9bc:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e9c0:	63ac      	str	r4, [r5, #56]	; 0x38
  HAL_ADC_Init(&hadc4);
 800e9c2:	f7f6 fdf5 	bl	80055b0 <HAL_ADC_Init>
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800e9c6:	4b10      	ldr	r3, [pc, #64]	; (800ea08 <ADCInitNormalMode+0x1fc>)
 800e9c8:	4916      	ldr	r1, [pc, #88]	; (800ea24 <ADCInitNormalMode+0x218>)
 800e9ca:	78d8      	ldrb	r0, [r3, #3]
  sConfig.SamplingTime = ADCSamplingTime;
 800e9cc:	f8da 2000 	ldr.w	r2, [sl]
  sConfig.Channel = ANALOG_CHANNEL_ADC4[ADCChannel[3]];
 800e9d0:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e9d4:	9300      	str	r3, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800e9d6:	4669      	mov	r1, sp
 800e9d8:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e9da:	e9cd 2402 	strd	r2, r4, [sp, #8]
  sConfig.Rank = 1;
 800e9de:	f8cd 9004 	str.w	r9, [sp, #4]
  sConfig.Offset = 0;
 800e9e2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_ADC_ConfigChannel(&hadc4, &sConfig);
 800e9e6:	f7f7 fe35 	bl	8006654 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 800e9ea:	4621      	mov	r1, r4
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	f7f7 fc9f 	bl	8006330 <HAL_ADCEx_Calibration_Start>
	MX_ADC1_Init();
	MX_ADC2_Init();
	MX_ADC3_Init();
	MX_ADC4_Init();
}
 800e9f2:	b007      	add	sp, #28
 800e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f8:	2000e788 	.word	0x2000e788
 800e9fc:	2000e874 	.word	0x2000e874
 800ea00:	2000e90c 	.word	0x2000e90c
 800ea04:	20004c94 	.word	0x20004c94
 800ea08:	20004c90 	.word	0x20004c90
 800ea0c:	080152ac 	.word	0x080152ac
 800ea10:	50000100 	.word	0x50000100
 800ea14:	080152d0 	.word	0x080152d0
 800ea18:	50000400 	.word	0x50000400
 800ea1c:	080152f8 	.word	0x080152f8
 800ea20:	50000500 	.word	0x50000500
 800ea24:	08015308 	.word	0x08015308
 800ea28:	2000e820 	.word	0x2000e820
 800ea2c:	20004c98 	.word	0x20004c98
 800ea30:	20004c9c 	.word	0x20004c9c

0800ea34 <ADCInitInterleavedMode>:

void ADCInitInterleavedMode(void){
 800ea34:	b508      	push	{r3, lr}
	HAL_ADC_DeInit(&hadc1);
 800ea36:	480a      	ldr	r0, [pc, #40]	; (800ea60 <ADCInitInterleavedMode+0x2c>)
 800ea38:	f7f7 f82e 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc2);
 800ea3c:	4809      	ldr	r0, [pc, #36]	; (800ea64 <ADCInitInterleavedMode+0x30>)
 800ea3e:	f7f7 f82b 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc3);
 800ea42:	4809      	ldr	r0, [pc, #36]	; (800ea68 <ADCInitInterleavedMode+0x34>)
 800ea44:	f7f7 f828 	bl	8005a98 <HAL_ADC_DeInit>
	HAL_ADC_DeInit(&hadc4);
 800ea48:	4808      	ldr	r0, [pc, #32]	; (800ea6c <ADCInitInterleavedMode+0x38>)
 800ea4a:	f7f7 f825 	bl	8005a98 <HAL_ADC_DeInit>

	ADCInterleaved=1;
 800ea4e:	4b08      	ldr	r3, [pc, #32]	; (800ea70 <ADCInitInterleavedMode+0x3c>)
 800ea50:	2201      	movs	r2, #1
 800ea52:	701a      	strb	r2, [r3, #0]
	MX_ADC12_Interleaved_Init();
 800ea54:	f7ff fa92 	bl	800df7c <MX_ADC12_Interleaved_Init>
	MX_ADC34_Interleaved_Init();

}
 800ea58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_ADC34_Interleaved_Init();
 800ea5c:	f7ff bb0e 	b.w	800e07c <MX_ADC34_Interleaved_Init>
 800ea60:	2000e820 	.word	0x2000e820
 800ea64:	2000e788 	.word	0x2000e788
 800ea68:	2000e874 	.word	0x2000e874
 800ea6c:	2000e90c 	.word	0x2000e90c
 800ea70:	20004c94 	.word	0x20004c94

0800ea74 <ADCInitMultiMode>:

void ADCInitMultiMode(void){
//todo
}
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop

0800ea78 <SystemClock_Config>:
/* USER CODE END 1 */

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800ea78:	b530      	push	{r4, r5, lr}
 800ea7a:	b0a7      	sub	sp, #156	; 0x9c

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
 800ea7c:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800ea7e:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ea80:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ea82:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ea86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800ea8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;  //RCC_HSE_BYPASS
 800ea8e:	9006      	str	r0, [sp, #24]
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800ea90:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ea92:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ea96:	9107      	str	r1, [sp, #28]
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800ea98:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800ea9c:	f7f9 f8d6 	bl	8007c4c <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;		// RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1; (before PWM generator implementation)
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800eaa0:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800eaa2:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800eaa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800eaa8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800eaaa:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800eaae:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800eab0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800eab2:	9405      	str	r4, [sp, #20]

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800eab4:	4d13      	ldr	r5, [pc, #76]	; (800eb04 <SystemClock_Config+0x8c>)
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800eab6:	f7f9 fc1f 	bl	80082f8 <HAL_RCC_ClockConfig>
																			 RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34| \
																			 RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15| \
																			 RCC_PERIPHCLK_TIM8; 
																			 // RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \ RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34; (before gen. implem.)
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800eaba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	#endif //USE_GEN_PWM || USE_LOG_ANLYS	
	#ifdef USE_SYNC_PWM		
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
	#endif //USE_SYNC_PWM	
	#ifdef USE_COUNTER	
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800eabe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800eac2:	f44f 7380 	mov.w	r3, #256	; 0x100
		PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;		
	#endif //USE_COUNTER	
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800eac6:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800eac8:	911b      	str	r1, [sp, #108]	; 0x6c
		PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 800eaca:	921e      	str	r2, [sp, #120]	; 0x78
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800eacc:	931a      	str	r3, [sp, #104]	; 0x68
		PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800eace:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800ead0:	9421      	str	r4, [sp, #132]	; 0x84
		PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800ead2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34| \
 800ead6:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800ead8:	f7f9 fdb0 	bl	800863c <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800eadc:	f7f9 fd78 	bl	80085d0 <HAL_RCC_GetHCLKFreq>
 800eae0:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <SystemClock_Config+0x90>)
 800eae2:	fba3 3000 	umull	r3, r0, r3, r0
 800eae6:	0980      	lsrs	r0, r0, #6
 800eae8:	f7f8 f942 	bl	8006d70 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800eaec:	2004      	movs	r0, #4
 800eaee:	f7f8 f969 	bl	8006dc4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	f04f 30ff 	mov.w	r0, #4294967295
 800eafa:	f7f8 f8c5 	bl	8006c88 <HAL_NVIC_SetPriority>
}
 800eafe:	b027      	add	sp, #156	; 0x9c
 800eb00:	bd30      	pop	{r4, r5, pc}
 800eb02:	bf00      	nop
 800eb04:	00703180 	.word	0x00703180
 800eb08:	10624dd3 	.word	0x10624dd3

0800eb0c <resetDevice>:

void resetDevice(void){
	SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
 800eb0c:	4b01      	ldr	r3, [pc, #4]	; (800eb14 <resetDevice+0x8>)
 800eb0e:	4a02      	ldr	r2, [pc, #8]	; (800eb18 <resetDevice+0xc>)
 800eb10:	60da      	str	r2, [r3, #12]
 800eb12:	e7fe      	b.n	800eb12 <resetDevice+0x6>
 800eb14:	e000ed00 	.word	0xe000ed00
 800eb18:	05fa0004 	.word	0x05fa0004

0800eb1c <commsSend>:
		}
	}else{
		UARTsendChar(chr);
	}
	#else
	UARTsendChar(chr);
 800eb1c:	f003 b948 	b.w	8011db0 <UARTsendChar>

0800eb20 <commsSendUint32>:

void commsSendInt32(int32_t num){
	commsSendUint32(num);
}

void commsSendUint32(uint32_t num){
 800eb20:	b530      	push	{r4, r5, lr}
 800eb22:	b083      	sub	sp, #12
	uint8_t buff[4];
	buff[3]=(uint8_t)(num);
	buff[2]=(uint8_t)(num>>8);
	buff[1]=(uint8_t)(num>>16);
	buff[0]=(uint8_t)(num>>24);
 800eb24:	a902      	add	r1, sp, #8
 800eb26:	0e03      	lsrs	r3, r0, #24
 800eb28:	f801 3d04 	strb.w	r3, [r1, #-4]!
	buff[2]=(uint8_t)(num>>8);
 800eb2c:	0a05      	lsrs	r5, r0, #8
	buff[1]=(uint8_t)(num>>16);
 800eb2e:	0c04      	lsrs	r4, r0, #16
	buff[3]=(uint8_t)(num);
 800eb30:	f88d 0007 	strb.w	r0, [sp, #7]
	}else{
		UARTsendBuff((char *)buff,len);
	}
	#else
	//UARTsendBuff((char *)buff,len);
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb34:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb38:	2204      	movs	r2, #4
 800eb3a:	4804      	ldr	r0, [pc, #16]	; (800eb4c <commsSendUint32+0x2c>)
	buff[2]=(uint8_t)(num>>8);
 800eb3c:	f88d 5006 	strb.w	r5, [sp, #6]
	buff[1]=(uint8_t)(num>>16);
 800eb40:	f88d 4005 	strb.w	r4, [sp, #5]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb44:	f7fc ffc6 	bl	800bad4 <HAL_UART_Transmit>
}
 800eb48:	b003      	add	sp, #12
 800eb4a:	bd30      	pop	{r4, r5, pc}
 800eb4c:	2000efb4 	.word	0x2000efb4

0800eb50 <commsSendBuff>:
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800eb50:	460a      	mov	r2, r1
 800eb52:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb56:	4601      	mov	r1, r0
 800eb58:	4801      	ldr	r0, [pc, #4]	; (800eb60 <commsSendBuff+0x10>)
 800eb5a:	f7fc bfbb 	b.w	800bad4 <HAL_UART_Transmit>
 800eb5e:	bf00      	nop
 800eb60:	2000efb4 	.word	0x2000efb4

0800eb64 <commsSendString>:
	#endif
}
void commsSendString(char *chr){
	uint32_t i = 0;
	char * tmp=chr;
	while(*(tmp++)){i++;}
 800eb64:	7802      	ldrb	r2, [r0, #0]
void commsSendString(char *chr){
 800eb66:	4601      	mov	r1, r0
	while(*(tmp++)){i++;}
 800eb68:	b172      	cbz	r2, 800eb88 <commsSendString+0x24>
void commsSendString(char *chr){
 800eb6a:	b410      	push	{r4}
 800eb6c:	1c43      	adds	r3, r0, #1
 800eb6e:	1a5a      	subs	r2, r3, r1
	while(*(tmp++)){i++;}
 800eb70:	f813 4b01 	ldrb.w	r4, [r3], #1
 800eb74:	2c00      	cmp	r4, #0
 800eb76:	d1fa      	bne.n	800eb6e <commsSendString+0xa>
 800eb78:	b292      	uxth	r2, r2
	}else{
		UARTsendBuff(chr,i);
	}
	#else
//	UARTsendBuff(chr,i);
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800eb7a:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb7e:	4805      	ldr	r0, [pc, #20]	; (800eb94 <commsSendString+0x30>)
	#endif

}
 800eb80:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_UART_Transmit(&huart2, (uint8_t *)chr, i, 5000);
 800eb84:	f7fc bfa6 	b.w	800bad4 <HAL_UART_Transmit>
 800eb88:	f241 3388 	movw	r3, #5000	; 0x1388
 800eb8c:	4801      	ldr	r0, [pc, #4]	; (800eb94 <commsSendString+0x30>)
 800eb8e:	f7fc bfa1 	b.w	800bad4 <HAL_UART_Transmit>
 800eb92:	bf00      	nop
 800eb94:	2000efb4 	.word	0x2000efb4

0800eb98 <commsSendDouble>:

void commsSendDouble(double value){
 800eb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	ab04      	add	r3, sp, #16
 800eb9e:	ed03 0b04 	vstr	d0, [r3, #-16]
 800eba2:	466b      	mov	r3, sp
	memcpy(intAlias, &value, sizeof(value));
 800eba4:	e893 0003 	ldmia.w	r3, {r0, r1}
	buff[0]=(uint8_t)(num>>24);
 800eba8:	ad04      	add	r5, sp, #16
 800ebaa:	0e02      	lsrs	r2, r0, #24
 800ebac:	f805 2d04 	strb.w	r2, [r5, #-4]!
	memcpy(intAlias, &value, sizeof(value));
 800ebb0:	4e14      	ldr	r6, [pc, #80]	; (800ec04 <commsSendDouble+0x6c>)
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ebb2:	4f15      	ldr	r7, [pc, #84]	; (800ec08 <commsSendDouble+0x70>)
	buff[3]=(uint8_t)(num);
 800ebb4:	f88d 000f 	strb.w	r0, [sp, #15]
	buff[2]=(uint8_t)(num>>8);
 800ebb8:	0a02      	lsrs	r2, r0, #8
	memcpy(intAlias, &value, sizeof(value));
 800ebba:	e886 0003 	stmia.w	r6, {r0, r1}
	buff[1]=(uint8_t)(num>>16);
 800ebbe:	0c04      	lsrs	r4, r0, #16
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ebc0:	4629      	mov	r1, r5
	buff[2]=(uint8_t)(num>>8);
 800ebc2:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	f241 3388 	movw	r3, #5000	; 0x1388
 800ebcc:	2204      	movs	r2, #4
	buff[1]=(uint8_t)(num>>16);
 800ebce:	f88d 400d 	strb.w	r4, [sp, #13]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ebd2:	f7fc ff7f 	bl	800bad4 <HAL_UART_Transmit>
	commsSendUint32(intAlias[0]);
	commsSendUint32(intAlias[1]);
 800ebd6:	6873      	ldr	r3, [r6, #4]
	buff[0]=(uint8_t)(num>>24);
 800ebd8:	2400      	movs	r4, #0
 800ebda:	0e1a      	lsrs	r2, r3, #24
 800ebdc:	f362 0407 	bfi	r4, r2, #0, #8
	buff[1]=(uint8_t)(num>>16);
 800ebe0:	0c1a      	lsrs	r2, r3, #16
	buff[0]=(uint8_t)(num>>24);
 800ebe2:	f362 240f 	bfi	r4, r2, #8, #8
	buff[2]=(uint8_t)(num>>8);
 800ebe6:	0a1a      	lsrs	r2, r3, #8
	buff[0]=(uint8_t)(num>>24);
 800ebe8:	f362 4417 	bfi	r4, r2, #16, #8
 800ebec:	f363 641f 	bfi	r4, r3, #24, #8
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	f241 3388 	movw	r3, #5000	; 0x1388
 800ebf8:	2204      	movs	r2, #4
	buff[0]=(uint8_t)(num>>24);
 800ebfa:	9403      	str	r4, [sp, #12]
	HAL_UART_Transmit(&huart2, buff, len, 5000);
 800ebfc:	f7fc ff6a 	bl	800bad4 <HAL_UART_Transmit>
}
 800ec00:	b005      	add	sp, #20
 800ec02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec04:	20004cb8 	.word	0x20004cb8
 800ec08:	2000efb4 	.word	0x2000efb4

0800ec0c <commsRecieveUART>:
	#ifdef USE_USB
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){	
		commInputByte(chr);
	}
	#else
	commInputByte(chr);
 800ec0c:	f7f3 bc42 	b.w	8002494 <commInputByte>

0800ec10 <MX_DAC_Init>:

uint32_t outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;

/* DAC init function */
void MX_DAC_Init(void)
{
 800ec10:	b510      	push	{r4, lr}

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
 800ec12:	4c0d      	ldr	r4, [pc, #52]	; (800ec48 <MX_DAC_Init+0x38>)
 800ec14:	4b0d      	ldr	r3, [pc, #52]	; (800ec4c <MX_DAC_Init+0x3c>)
 800ec16:	6023      	str	r3, [r4, #0]
{
 800ec18:	b084      	sub	sp, #16
  HAL_DAC_Init(&hdac);
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f7f8 f8f2 	bl	8006e04 <HAL_DAC_Init>

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800ec20:	4b0b      	ldr	r3, [pc, #44]	; (800ec50 <MX_DAC_Init+0x40>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ec26:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ec28:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ec2e:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ec30:	f7f8 fa38 	bl	80070a4 <HAL_DAC_ConfigChannel>

    /**DAC channel OUT2 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800ec34:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800ec36:	a901      	add	r1, sp, #4
 800ec38:	4620      	mov	r0, r4
 800ec3a:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800ec3c:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800ec3e:	f7f8 fa31 	bl	80070a4 <HAL_DAC_ConfigChannel>

}
 800ec42:	b004      	add	sp, #16
 800ec44:	bd10      	pop	{r4, pc}
 800ec46:	bf00      	nop
 800ec48:	2000ea2c 	.word	0x2000ea2c
 800ec4c:	40007400 	.word	0x40007400
 800ec50:	20004ca0 	.word	0x20004ca0

0800ec54 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 800ec54:	4b30      	ldr	r3, [pc, #192]	; (800ed18 <HAL_DAC_MspInit+0xc4>)
 800ec56:	6802      	ldr	r2, [r0, #0]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d000      	beq.n	800ec5e <HAL_DAC_MspInit+0xa>
 800ec5c:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec5e:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
{
 800ec62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec66:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800ec68:	4d2c      	ldr	r5, [pc, #176]	; (800ed1c <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch1);
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800ec6a:	4f2d      	ldr	r7, [pc, #180]	; (800ed20 <HAL_DAC_MspInit+0xcc>)
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec6c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ec70:	61da      	str	r2, [r3, #28]
 800ec72:	69db      	ldr	r3, [r3, #28]
{
 800ec74:	b08b      	sub	sp, #44	; 0x2c
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec7a:	4606      	mov	r6, r0
 800ec7c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec7e:	f04f 0800 	mov.w	r8, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ec82:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec84:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec86:	a905      	add	r1, sp, #20
 800ec88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ec90:	f44f 5900 	mov.w	r9, #8192	; 0x2000
	  __HAL_RCC_DAC1_CLK_ENABLE();
 800ec94:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec96:	f8cd 801c 	str.w	r8, [sp, #28]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ec9a:	f04f 0b10 	mov.w	fp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec9e:	f7f8 fd4d 	bl	800773c <HAL_GPIO_Init>
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800eca2:	f04f 0a20 	mov.w	sl, #32
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800eca6:	2180      	movs	r1, #128	; 0x80
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800eca8:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ecac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800ecb0:	4c1c      	ldr	r4, [pc, #112]	; (800ed24 <HAL_DAC_MspInit+0xd0>)
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ecb2:	f8c5 8008 	str.w	r8, [r5, #8]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800ecb6:	4628      	mov	r0, r5
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800ecb8:	602c      	str	r4, [r5, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ecba:	f8c5 b004 	str.w	fp, [r5, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ecbe:	60e9      	str	r1, [r5, #12]
 800ecc0:	9103      	str	r1, [sp, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ecc2:	612a      	str	r2, [r5, #16]
 800ecc4:	9202      	str	r2, [sp, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ecc6:	616b      	str	r3, [r5, #20]
 800ecc8:	9301      	str	r3, [sp, #4]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800ecca:	e9c5 a906 	strd	sl, r9, [r5, #24]
		HAL_DMA_Init(&hdma_dac1_ch1);
 800ecce:	f7f8 fa59 	bl	8007184 <HAL_DMA_Init>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800ecd2:	6838      	ldr	r0, [r7, #0]


		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800ecd4:	4c14      	ldr	r4, [pc, #80]	; (800ed28 <HAL_DAC_MspInit+0xd4>)
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ecd6:	9b01      	ldr	r3, [sp, #4]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800ecd8:	60b5      	str	r5, [r6, #8]
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800ecda:	ea40 0009 	orr.w	r0, r0, r9
 800ecde:	6038      	str	r0, [r7, #0]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ece0:	9903      	ldr	r1, [sp, #12]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800ece2:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ece4:	9a02      	ldr	r2, [sp, #8]
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800ece6:	4d11      	ldr	r5, [pc, #68]	; (800ed2c <HAL_DAC_MspInit+0xd8>)
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ece8:	f8c4 8008 	str.w	r8, [r4, #8]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
		HAL_DMA_Init(&hdma_dac1_ch2);
 800ecec:	4620      	mov	r0, r4
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800ecee:	e9c4 3a05 	strd	r3, sl, [r4, #20]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ecf2:	f8c4 b004 	str.w	fp, [r4, #4]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ecf6:	60e1      	str	r1, [r4, #12]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ecf8:	6122      	str	r2, [r4, #16]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800ecfa:	f8c4 901c 	str.w	r9, [r4, #28]
		hdma_dac1_ch2.Instance = DMA1_Channel4;
 800ecfe:	6025      	str	r5, [r4, #0]
		HAL_DMA_Init(&hdma_dac1_ch2);
 800ed00:	f7f8 fa40 	bl	8007184 <HAL_DMA_Init>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800ed04:	683b      	ldr	r3, [r7, #0]
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800ed06:	60f4      	str	r4, [r6, #12]
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800ed08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800ed0c:	6266      	str	r6, [r4, #36]	; 0x24
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 800ed0e:	603b      	str	r3, [r7, #0]
		
  /* USER CODE END DAC_MspInit 1 */
  }
}
 800ed10:	b00b      	add	sp, #44	; 0x2c
 800ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed16:	bf00      	nop
 800ed18:	40007400 	.word	0x40007400
 800ed1c:	2000e9e8 	.word	0x2000e9e8
 800ed20:	40010000 	.word	0x40010000
 800ed24:	40020030 	.word	0x40020030
 800ed28:	2000e9a4 	.word	0x2000e9a4
 800ed2c:	40020044 	.word	0x40020044

0800ed30 <DAC_DMA_Reconfig>:
  /* USER CODE END DAC_MspDeInit 1 */

} 

/* USER CODE BEGIN 1 */
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800ed30:	b570      	push	{r4, r5, r6, lr}
	uint32_t dacChannel=0;
 800ed32:	2801      	cmp	r0, #1
 800ed34:	bf0c      	ite	eq
 800ed36:	2410      	moveq	r4, #16
 800ed38:	2400      	movne	r4, #0
void DAC_DMA_Reconfig(uint8_t chan, uint32_t *buff, uint32_t len){
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	460e      	mov	r6, r1
 800ed3e:	4615      	mov	r5, r2
		break;
		case 1:
			dacChannel=DAC_CHANNEL_2;
		break;
	}
	HAL_DAC_Stop_DMA(&hdac,dacChannel);
 800ed40:	4621      	mov	r1, r4
 800ed42:	4807      	ldr	r0, [pc, #28]	; (800ed60 <DAC_DMA_Reconfig+0x30>)
 800ed44:	f7f8 f8a2 	bl	8006e8c <HAL_DAC_Stop_DMA>
	if(len>0){  //dont start DMA with length zero
 800ed48:	b13d      	cbz	r5, 800ed5a <DAC_DMA_Reconfig+0x2a>
		HAL_DAC_Start_DMA(&hdac, dacChannel, buff, len, DAC_ALIGN_12B_R);
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	9000      	str	r0, [sp, #0]
 800ed4e:	462b      	mov	r3, r5
 800ed50:	4632      	mov	r2, r6
 800ed52:	4621      	mov	r1, r4
 800ed54:	4802      	ldr	r0, [pc, #8]	; (800ed60 <DAC_DMA_Reconfig+0x30>)
 800ed56:	f7f8 f919 	bl	8006f8c <HAL_DAC_Start_DMA>
	}
}
 800ed5a:	b002      	add	sp, #8
 800ed5c:	bd70      	pop	{r4, r5, r6, pc}
 800ed5e:	bf00      	nop
 800ed60:	2000ea2c 	.word	0x2000ea2c

0800ed64 <DACSetOutputBuffer>:
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void DACSetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_ENABLE;
 800ed64:	4b01      	ldr	r3, [pc, #4]	; (800ed6c <DACSetOutputBuffer+0x8>)
 800ed66:	2200      	movs	r2, #0
 800ed68:	601a      	str	r2, [r3, #0]
}
 800ed6a:	4770      	bx	lr
 800ed6c:	20004ca0 	.word	0x20004ca0

0800ed70 <DACUnsetOutputBuffer>:

void DACUnsetOutputBuffer(void){
	outputBuffEn=DAC_OUTPUTBUFFER_DISABLE;
 800ed70:	4b01      	ldr	r3, [pc, #4]	; (800ed78 <DACUnsetOutputBuffer+0x8>)
 800ed72:	2202      	movs	r2, #2
 800ed74:	601a      	str	r2, [r3, #0]
}
 800ed76:	4770      	bx	lr
 800ed78:	20004ca0 	.word	0x20004ca0

0800ed7c <GeneratingEnable>:
/**
  * @brief  Enable sampling
  * @param  None
  * @retval None
  */
void GeneratingEnable(void){
 800ed7c:	b510      	push	{r4, lr}
  hdac.Instance = DAC;
 800ed7e:	4c13      	ldr	r4, [pc, #76]	; (800edcc <GeneratingEnable+0x50>)
 800ed80:	4b13      	ldr	r3, [pc, #76]	; (800edd0 <GeneratingEnable+0x54>)
 800ed82:	6023      	str	r3, [r4, #0]
void GeneratingEnable(void){
 800ed84:	b086      	sub	sp, #24
  HAL_DAC_Init(&hdac);
 800ed86:	4620      	mov	r0, r4
 800ed88:	f7f8 f83c 	bl	8006e04 <HAL_DAC_Init>
  sConfig.DAC_OutputBuffer = outputBuffEn;
 800ed8c:	4b11      	ldr	r3, [pc, #68]	; (800edd4 <GeneratingEnable+0x58>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	9302      	str	r3, [sp, #8]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ed92:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ed94:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ed96:	4620      	mov	r0, r4
 800ed98:	2200      	movs	r2, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800ed9a:	9301      	str	r3, [sp, #4]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 800ed9c:	f7f8 f982 	bl	80070a4 <HAL_DAC_ConfigChannel>
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800eda0:	a901      	add	r1, sp, #4
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800eda2:	2314      	movs	r3, #20
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800eda4:	4620      	mov	r0, r4
 800eda6:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800eda8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800edaa:	2430      	movs	r4, #48	; 0x30
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800edac:	f7f8 f97a 	bl	80070a4 <HAL_DAC_ConfigChannel>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800edb0:	2203      	movs	r2, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edb2:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edb4:	a901      	add	r1, sp, #4
 800edb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800edba:	e9cd 4201 	strd	r4, r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edbe:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edc0:	f7f8 fcbc 	bl	800773c <HAL_GPIO_Init>
	MX_DAC_Init();
	DACEnableOutput();
	TIMGenEnable();
 800edc4:	f001 ffa8 	bl	8010d18 <TIMGenEnable>
}
 800edc8:	b006      	add	sp, #24
 800edca:	bd10      	pop	{r4, pc}
 800edcc:	2000ea2c 	.word	0x2000ea2c
 800edd0:	40007400 	.word	0x40007400
 800edd4:	20004ca0 	.word	0x20004ca0

0800edd8 <GeneratingDisable>:
/**
  * @brief  Disable sampling
  * @param  None
  * @retval None
  */
void GeneratingDisable(void){
 800edd8:	b510      	push	{r4, lr}
	TIMGenDisable();
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800edda:	4c0c      	ldr	r4, [pc, #48]	; (800ee0c <GeneratingDisable+0x34>)
void GeneratingDisable(void){
 800eddc:	b086      	sub	sp, #24
	TIMGenDisable();
 800edde:	f001 ffa9 	bl	8010d34 <TIMGenDisable>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_1);
 800ede2:	4620      	mov	r0, r4
 800ede4:	2100      	movs	r1, #0
 800ede6:	f7f8 f831 	bl	8006e4c <HAL_DAC_Stop>
	HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 800edea:	4620      	mov	r0, r4
 800edec:	2110      	movs	r1, #16
 800edee:	f7f8 f82d 	bl	8006e4c <HAL_DAC_Stop>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800edf2:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800edf4:	2230      	movs	r2, #48	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edf6:	a901      	add	r1, sp, #4
 800edf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800edfc:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee00:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee02:	f7f8 fc9b 	bl	800773c <HAL_GPIO_Init>
	DACDisableOutput();	
}
 800ee06:	b006      	add	sp, #24
 800ee08:	bd10      	pop	{r4, pc}
 800ee0a:	bf00      	nop
 800ee0c:	2000ea2c 	.word	0x2000ea2c

0800ee10 <MX_DMA_Init>:
#include "dma.h"

void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800ee10:	4b0a      	ldr	r3, [pc, #40]	; (800ee3c <MX_DMA_Init+0x2c>)
 800ee12:	695a      	ldr	r2, [r3, #20]
 800ee14:	f042 0202 	orr.w	r2, r2, #2
 800ee18:	615a      	str	r2, [r3, #20]
 800ee1a:	695a      	ldr	r2, [r3, #20]
{
 800ee1c:	b082      	sub	sp, #8
	__HAL_RCC_DMA2_CLK_ENABLE();
 800ee1e:	f002 0202 	and.w	r2, r2, #2
 800ee22:	9200      	str	r2, [sp, #0]
 800ee24:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800ee26:	695a      	ldr	r2, [r3, #20]
 800ee28:	f042 0201 	orr.w	r2, r2, #1
 800ee2c:	615a      	str	r2, [r3, #20]
 800ee2e:	695b      	ldr	r3, [r3, #20]
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	9301      	str	r3, [sp, #4]
 800ee36:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
}
 800ee38:	b002      	add	sp, #8
 800ee3a:	4770      	bx	lr
 800ee3c:	40021000 	.word	0x40021000

0800ee40 <MX_GPIO_Init>:
//	BSP_LED_Init(LED2);

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee40:	4b2b      	ldr	r3, [pc, #172]	; (800eef0 <MX_GPIO_Init+0xb0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ee42:	492c      	ldr	r1, [pc, #176]	; (800eef4 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee44:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ee46:	482c      	ldr	r0, [pc, #176]	; (800eef8 <MX_GPIO_Init+0xb8>)
{
 800ee48:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee4a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800ee4e:	615a      	str	r2, [r3, #20]
 800ee50:	695a      	ldr	r2, [r3, #20]
{
 800ee52:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee54:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800ee58:	9201      	str	r2, [sp, #4]
 800ee5a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ee5c:	695a      	ldr	r2, [r3, #20]
 800ee5e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ee62:	615a      	str	r2, [r3, #20]
 800ee64:	695a      	ldr	r2, [r3, #20]
 800ee66:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800ee6a:	9202      	str	r2, [sp, #8]
 800ee6c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee6e:	695a      	ldr	r2, [r3, #20]
 800ee70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ee74:	615a      	str	r2, [r3, #20]
 800ee76:	695a      	ldr	r2, [r3, #20]
 800ee78:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800ee7c:	9203      	str	r2, [sp, #12]
 800ee7e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee80:	695a      	ldr	r2, [r3, #20]
 800ee82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ee86:	615a      	str	r2, [r3, #20]
 800ee88:	695b      	ldr	r3, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ee8a:	9106      	str	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee90:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee92:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800ee94:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 800ee96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee9a:	9a04      	ldr	r2, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 800ee9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee9e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800eea0:	f7f8 fc4c 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800eea4:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eea6:	2202      	movs	r2, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800eea8:	2501      	movs	r5, #1
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800eeaa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800eeac:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800eeae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800eeb2:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eeb4:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800eeb6:	e9cd 5308 	strd	r5, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eeba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 800eebc:	f7f8 fc3e 	bl	800773c <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800eec0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = D7_PIN;
 800eec2:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800eec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = D7_PIN;
 800eeca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eecc:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(D7_GPIO, &GPIO_InitStruct);
 800eed0:	f7f8 fc34 	bl	800773c <HAL_GPIO_Init>
	
	/*Configure GPIO pin : D7_Pin */
  
	GPIO_InitStruct.Pin = D8_PIN;
 800eed4:	f44f 7200 	mov.w	r2, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800eed8:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800eeda:	a905      	add	r1, sp, #20
 800eedc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eee0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800eee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(D8_GPIO, &GPIO_InitStruct);
 800eee6:	f7f8 fc29 	bl	800773c <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
	
}
 800eeea:	b00b      	add	sp, #44	; 0x2c
 800eeec:	bd30      	pop	{r4, r5, pc}
 800eeee:	bf00      	nop
 800eef0:	40021000 	.word	0x40021000
 800eef4:	10120000 	.word	0x10120000
 800eef8:	48000800 	.word	0x48000800

0800eefc <LED_On>:

void LED_On(void){
//	BSP_LED_On(LED2);
}
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop

0800ef00 <LED_Off>:
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop

0800ef04 <StartThread>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

static void StartThread(void const * argument)
{
 800ef04:	b508      	push	{r3, lr}
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		//xQueueSendToBack(messageQueue, MSG_COMMS_FLUSH, portMAX_DELAY);
		osDelay(10);
 800ef06:	200a      	movs	r0, #10
 800ef08:	f7fd f972 	bl	800c1f0 <osDelay>
 800ef0c:	e7fb      	b.n	800ef06 <StartThread+0x2>
 800ef0e:	bf00      	nop

0800ef10 <main>:
{
 800ef10:	b580      	push	{r7, lr}
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef12:	4c4b      	ldr	r4, [pc, #300]	; (800f040 <main+0x130>)
{
 800ef14:	b0ae      	sub	sp, #184	; 0xb8
	HAL_Init();
 800ef16:	f7f6 faf5 	bl	8005504 <HAL_Init>
	SystemClock_Config();
 800ef1a:	f7ff fdad 	bl	800ea78 <SystemClock_Config>
	MX_GPIO_Init();
 800ef1e:	f7ff ff8f 	bl	800ee40 <MX_GPIO_Init>
	MX_DMA_Init();
 800ef22:	f7ff ff75 	bl	800ee10 <MX_DMA_Init>
	LED_On();
 800ef26:	f7ff ffe9 	bl	800eefc <LED_On>
	MX_ADC1_Init();
 800ef2a:	f7fe ff19 	bl	800dd60 <MX_ADC1_Init>
	MX_ADC2_Init();
 800ef2e:	f7fe ff59 	bl	800dde4 <MX_ADC2_Init>
	MX_ADC3_Init();
 800ef32:	f7fe ff9b 	bl	800de6c <MX_ADC3_Init>
	MX_ADC4_Init();
 800ef36:	f7fe ffdd 	bl	800def4 <MX_ADC4_Init>
	MX_TIM15_Init();
 800ef3a:	f002 fb7b 	bl	8011634 <MX_TIM15_Init>
	CalibrateADC();
 800ef3e:	f7ff fc49 	bl	800e7d4 <CalibrateADC>
	adcSetDefaultInputs();
 800ef42:	f7ff fbe9 	bl	800e718 <adcSetDefaultInputs>
	MX_DAC_Init();
 800ef46:	f7ff fe63 	bl	800ec10 <MX_DAC_Init>
	MX_TIM6_Init();
 800ef4a:	f001 fd51 	bl	80109f0 <MX_TIM6_Init>
	MX_TIM7_Init();
 800ef4e:	f001 fd6b 	bl	8010a28 <MX_TIM7_Init>
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef54:	4625      	mov	r5, r4
 800ef56:	f10d 0c04 	add.w	ip, sp, #4
 800ef5a:	f855 8b04 	ldr.w	r8, [r5], #4
 800ef5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ef62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef64:	f104 0e18 	add.w	lr, r4, #24
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ef68:	af06      	add	r7, sp, #24
 800ef6a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef70:	ae0b      	add	r6, sp, #44	; 0x2c
 800ef72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef74:	f104 092c 	add.w	r9, r4, #44	; 0x2c
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ef78:	682a      	ldr	r2, [r5, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef7a:	f8de 3000 	ldr.w	r3, [lr]
	osThreadDef(CMD_PARSER_TASK, CmdParserTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef7e:	f8cc 8000 	str.w	r8, [ip]
	osThreadDef(USER_TASK, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800ef82:	603a      	str	r2, [r7, #0]
	osThreadDef(COMM_TASK, CommTask, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef84:	6033      	str	r3, [r6, #0]
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef86:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef8a:	f104 0640 	add.w	r6, r4, #64	; 0x40
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef8e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800ef92:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef98:	f104 0554 	add.w	r5, r4, #84	; 0x54
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800ef9c:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800efa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efa6:	af1a      	add	r7, sp, #104	; 0x68
 800efa8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efaa:	f104 0e68 	add.w	lr, r4, #104	; 0x68
	osThreadDef(SCOPE_TASK, ScopeTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efae:	f8d9 3000 	ldr.w	r3, [r9]
 800efb2:	f8c8 3000 	str.w	r3, [r8]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efba:	6836      	ldr	r6, [r6, #0]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efbc:	682d      	ldr	r5, [r5, #0]
	osThreadDef(SCOPE_TRIG_TASK, ScopeTriggerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efbe:	f8cc 6000 	str.w	r6, [ip]
	osThreadDef(COUNTER_TASK, CounterTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efc2:	603d      	str	r5, [r7, #0]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efc4:	f104 0c7c 	add.w	ip, r4, #124	; 0x7c
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efc8:	af1f      	add	r7, sp, #124	; 0x7c
 800efca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efd0:	3490      	adds	r4, #144	; 0x90
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efd2:	ae24      	add	r6, sp, #144	; 0x90
 800efd4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efd8:	ad29      	add	r5, sp, #164	; 0xa4
 800efda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efdc:	f8de 1000 	ldr.w	r1, [lr]
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efe0:	f8dc 2000 	ldr.w	r2, [ip]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efe4:	6823      	ldr	r3, [r4, #0]
	osThreadDef(GENERATOR_TASK, GeneratorTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efe6:	6039      	str	r1, [r7, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800efe8:	a801      	add	r0, sp, #4
 800efea:	2100      	movs	r1, #0
	osThreadDef(SYNC_PWM_TASK, SyncPwmTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efec:	6032      	str	r2, [r6, #0]
	osThreadDef(LOG_ANLYS_TASK, LogAnlysTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2);
 800efee:	602b      	str	r3, [r5, #0]
	osThreadCreate (osThread(CMD_PARSER_TASK), NULL);
 800eff0:	f7fd f8e6 	bl	800c1c0 <osThreadCreate>
	osThreadCreate (osThread(USER_TASK), NULL);
 800eff4:	2100      	movs	r1, #0
 800eff6:	a806      	add	r0, sp, #24
 800eff8:	f7fd f8e2 	bl	800c1c0 <osThreadCreate>
	osThreadCreate (osThread(COMM_TASK), NULL);
 800effc:	2100      	movs	r1, #0
 800effe:	a80b      	add	r0, sp, #44	; 0x2c
 800f000:	f7fd f8de 	bl	800c1c0 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TASK), NULL);
 800f004:	2100      	movs	r1, #0
 800f006:	a810      	add	r0, sp, #64	; 0x40
 800f008:	f7fd f8da 	bl	800c1c0 <osThreadCreate>
	osThreadCreate (osThread(SCOPE_TRIG_TASK), NULL);
 800f00c:	2100      	movs	r1, #0
 800f00e:	a815      	add	r0, sp, #84	; 0x54
 800f010:	f7fd f8d6 	bl	800c1c0 <osThreadCreate>
	osThreadCreate (osThread(COUNTER_TASK), NULL);
 800f014:	2100      	movs	r1, #0
 800f016:	a81a      	add	r0, sp, #104	; 0x68
 800f018:	f7fd f8d2 	bl	800c1c0 <osThreadCreate>
	osThreadCreate (osThread(GENERATOR_TASK), NULL);
 800f01c:	2100      	movs	r1, #0
 800f01e:	a81f      	add	r0, sp, #124	; 0x7c
 800f020:	f7fd f8ce 	bl	800c1c0 <osThreadCreate>
	osThreadCreate (osThread(SYNC_PWM_TASK), NULL);
 800f024:	2100      	movs	r1, #0
 800f026:	a824      	add	r0, sp, #144	; 0x90
 800f028:	f7fd f8ca 	bl	800c1c0 <osThreadCreate>
	osThreadCreate (osThread(LOG_ANLYS_TASK), NULL);
 800f02c:	2100      	movs	r1, #0
 800f02e:	a829      	add	r0, sp, #164	; 0xa4
 800f030:	f7fd f8c6 	bl	800c1c0 <osThreadCreate>
	LED_Off();
 800f034:	f7ff ff64 	bl	800ef00 <LED_Off>
	osKernelStart();
 800f038:	f7fd f8bc 	bl	800c1b4 <osKernelStart>
 800f03c:	e7fe      	b.n	800f03c <main+0x12c>
 800f03e:	bf00      	nop
 800f040:	08014b34 	.word	0x08014b34

0800f044 <assert_failed>:
 * @param file: pointer to the source file name
 * @param line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t* file, uint32_t line)
{
 800f044:	e7fe      	b.n	800f044 <assert_failed>
 800f046:	bf00      	nop

0800f048 <HAL_MspInit>:
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  /* USER CODE BEGIN MspInit 0 */
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800f048:	4b0b      	ldr	r3, [pc, #44]	; (800f078 <HAL_MspInit+0x30>)
{
 800f04a:	b500      	push	{lr}
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800f04c:	699a      	ldr	r2, [r3, #24]
 800f04e:	f042 0201 	orr.w	r2, r2, #1
 800f052:	619a      	str	r2, [r3, #24]
 800f054:	699b      	ldr	r3, [r3, #24]
{
 800f056:	b083      	sub	sp, #12
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800f058:	f003 0301 	and.w	r3, r3, #1
 800f05c:	9301      	str	r3, [sp, #4]
  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f05e:	2003      	movs	r0, #3
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800f060:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f062:	f7f7 fdf5 	bl	8006c50 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
/* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800f066:	2200      	movs	r2, #0
 800f068:	4611      	mov	r1, r2
 800f06a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f06e:	b003      	add	sp, #12
 800f070:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800f074:	f7f7 be08 	b.w	8006c88 <HAL_NVIC_SetPriority>
 800f078:	40021000 	.word	0x40021000

0800f07c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800f07c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	char c = (uint16_t)(USART2->RDR & (uint16_t)0x01FF);
 800f07e:	4b05      	ldr	r3, [pc, #20]	; (800f094 <USART2_IRQHandler+0x18>)
 800f080:	8c98      	ldrh	r0, [r3, #36]	; 0x24
	commsRecieveUART(c);
 800f082:	b2c0      	uxtb	r0, r0
 800f084:	f7ff fdc2 	bl	800ec0c <commsRecieveUART>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800f088:	2026      	movs	r0, #38	; 0x26
  /* USER CODE END USART2_IRQn 0 */
  
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800f08a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800f08e:	f7f7 be89 	b.w	8006da4 <HAL_NVIC_ClearPendingIRQ>
 800f092:	bf00      	nop
 800f094:	40004400 	.word	0x40004400

0800f098 <DMA1_Channel6_IRQHandler>:

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop

0800f09c <DMA1_Channel2_IRQHandler>:
/**
* @brief This function handles DMA1 channel2 global interrupt.
*/
void DMA1_Channel2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800f09c:	4801      	ldr	r0, [pc, #4]	; (800f0a4 <DMA1_Channel2_IRQHandler+0x8>)
 800f09e:	f7f8 baa7 	b.w	80075f0 <HAL_DMA_IRQHandler>
 800f0a2:	bf00      	nop
 800f0a4:	2000eac4 	.word	0x2000eac4

0800f0a8 <DMA1_Channel7_IRQHandler>:
*	Saves DMA CNDTR pointer state to find out later where the trigger occured.
* NOT USED ANYMORE !!!
*/
void DMA1_Channel7_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800f0a8:	4801      	ldr	r0, [pc, #4]	; (800f0b0 <DMA1_Channel7_IRQHandler+0x8>)
 800f0aa:	f7f8 baa1 	b.w	80075f0 <HAL_DMA_IRQHandler>
 800f0ae:	bf00      	nop
 800f0b0:	2000ed58 	.word	0x2000ed58

0800f0b4 <EXTI15_10_IRQHandler>:

/**
  * @brief  Logic Analyzer ISR triggered by an incoming signal edge on GPIO.
	*					Stores time of trigger and starts posttrigger time (TIM4) in order to sample the rest.
  */
void EXTI15_10_IRQHandler(void){
 800f0b4:	b570      	push	{r4, r5, r6, lr}
	TIM_PostTrigger_SoftwareStart();
 800f0b6:	f002 fa4d 	bl	8011554 <TIM_PostTrigger_SoftwareStart>
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800f0ba:	4b45      	ldr	r3, [pc, #276]	; (800f1d0 <EXTI15_10_IRQHandler+0x11c>)
 800f0bc:	4d45      	ldr	r5, [pc, #276]	; (800f1d4 <EXTI15_10_IRQHandler+0x120>)
 800f0be:	681a      	ldr	r2, [r3, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800f0c0:	4b45      	ldr	r3, [pc, #276]	; (800f1d8 <EXTI15_10_IRQHandler+0x124>)
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;	
 800f0c2:	6852      	ldr	r2, [r2, #4]
 800f0c4:	602a      	str	r2, [r5, #0]
	LOG_ANLYS_handle_interrupt(EXTI->PR & 0x3fc0);
 800f0c6:	695c      	ldr	r4, [r3, #20]
	*					Distinguishes the source of the trigger.
  */
void LOG_ANLYS_handle_interrupt(uint32_t pr){
	uint8_t isRightPin = 0;
	
	if(pr & (1 << 6) ){ 	//pending request on pin 6
 800f0c8:	0660      	lsls	r0, r4, #25
 800f0ca:	d504      	bpl.n	800f0d6 <EXTI15_10_IRQHandler+0x22>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800f0cc:	2240      	movs	r2, #64	; 0x40
 800f0ce:	615a      	str	r2, [r3, #20]
		if(logAnlys.trigConfig == TRIG_CHAN1){
 800f0d0:	7d6b      	ldrb	r3, [r5, #21]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d051      	beq.n	800f17a <EXTI15_10_IRQHandler+0xc6>
	uint8_t isRightPin = 0;
 800f0d6:	2300      	movs	r3, #0
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 7) ){ 	//pending request on pin 7
 800f0d8:	0621      	lsls	r1, r4, #24
 800f0da:	d506      	bpl.n	800f0ea <EXTI15_10_IRQHandler+0x36>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 800f0dc:	4a3e      	ldr	r2, [pc, #248]	; (800f1d8 <EXTI15_10_IRQHandler+0x124>)
 800f0de:	2180      	movs	r1, #128	; 0x80
 800f0e0:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN2){
 800f0e2:	7d6e      	ldrb	r6, [r5, #21]
 800f0e4:	b2f6      	uxtb	r6, r6
 800f0e6:	2e01      	cmp	r6, #1
 800f0e8:	d067      	beq.n	800f1ba <EXTI15_10_IRQHandler+0x106>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 8) ){ 	//pending request on pin 8
 800f0ea:	05e2      	lsls	r2, r4, #23
 800f0ec:	d506      	bpl.n	800f0fc <EXTI15_10_IRQHandler+0x48>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 800f0ee:	4a3a      	ldr	r2, [pc, #232]	; (800f1d8 <EXTI15_10_IRQHandler+0x124>)
 800f0f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f0f4:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN3){
 800f0f6:	7d6a      	ldrb	r2, [r5, #21]
 800f0f8:	2a02      	cmp	r2, #2
 800f0fa:	d063      	beq.n	800f1c4 <EXTI15_10_IRQHandler+0x110>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 9) ){ 	//pending request on pin 9
 800f0fc:	05a6      	lsls	r6, r4, #22
 800f0fe:	d506      	bpl.n	800f10e <EXTI15_10_IRQHandler+0x5a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 800f100:	4a35      	ldr	r2, [pc, #212]	; (800f1d8 <EXTI15_10_IRQHandler+0x124>)
 800f102:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f106:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN4){
 800f108:	7d6a      	ldrb	r2, [r5, #21]
 800f10a:	2a03      	cmp	r2, #3
 800f10c:	d03a      	beq.n	800f184 <EXTI15_10_IRQHandler+0xd0>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 10) ){ 	//pending request on pin 10
 800f10e:	0560      	lsls	r0, r4, #21
 800f110:	d506      	bpl.n	800f120 <EXTI15_10_IRQHandler+0x6c>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 800f112:	4a31      	ldr	r2, [pc, #196]	; (800f1d8 <EXTI15_10_IRQHandler+0x124>)
 800f114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f118:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN5){
 800f11a:	7d6a      	ldrb	r2, [r5, #21]
 800f11c:	2a04      	cmp	r2, #4
 800f11e:	d036      	beq.n	800f18e <EXTI15_10_IRQHandler+0xda>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 11) ){ 	//pending request on pin 11
 800f120:	0521      	lsls	r1, r4, #20
 800f122:	d506      	bpl.n	800f132 <EXTI15_10_IRQHandler+0x7e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 800f124:	4a2c      	ldr	r2, [pc, #176]	; (800f1d8 <EXTI15_10_IRQHandler+0x124>)
 800f126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f12a:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN6){
 800f12c:	7d6a      	ldrb	r2, [r5, #21]
 800f12e:	2a05      	cmp	r2, #5
 800f130:	d032      	beq.n	800f198 <EXTI15_10_IRQHandler+0xe4>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 12) ){ 	//pending request on pin 12
 800f132:	04e2      	lsls	r2, r4, #19
 800f134:	f404 5600 	and.w	r6, r4, #8192	; 0x2000
 800f138:	d506      	bpl.n	800f148 <EXTI15_10_IRQHandler+0x94>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 800f13a:	4c27      	ldr	r4, [pc, #156]	; (800f1d8 <EXTI15_10_IRQHandler+0x124>)
 800f13c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f140:	6162      	str	r2, [r4, #20]
		if(logAnlys.trigConfig == TRIG_CHAN7){
 800f142:	7d6a      	ldrb	r2, [r5, #21]
 800f144:	2a06      	cmp	r2, #6
 800f146:	d02c      	beq.n	800f1a2 <EXTI15_10_IRQHandler+0xee>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800f148:	b956      	cbnz	r6, 800f160 <EXTI15_10_IRQHandler+0xac>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			isRightPin = 1;
		}
	}
	
	if(isRightPin == 1){		
 800f14a:	b99b      	cbnz	r3, 800f174 <EXTI15_10_IRQHandler+0xc0>
//		TIM_PostTrigger_SoftwareStart();
	}
	else{
		//stop TIM4 and reset		
		//HAL_TIM_Base_Stop(&htim4);
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800f14c:	4a23      	ldr	r2, [pc, #140]	; (800f1dc <EXTI15_10_IRQHandler+0x128>)
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800f14e:	4924      	ldr	r1, [pc, #144]	; (800f1e0 <EXTI15_10_IRQHandler+0x12c>)
		TIM4->CR1 &= ~(TIM_CR1_CEN);
 800f150:	6813      	ldr	r3, [r2, #0]
 800f152:	f023 0301 	bic.w	r3, r3, #1
 800f156:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0x00);		
 800f158:	680b      	ldr	r3, [r1, #0]
 800f15a:	2200      	movs	r2, #0
 800f15c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f15e:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800f160:	4a1d      	ldr	r2, [pc, #116]	; (800f1d8 <EXTI15_10_IRQHandler+0x124>)
 800f162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f166:	6151      	str	r1, [r2, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800f168:	7d6a      	ldrb	r2, [r5, #21]
 800f16a:	2a07      	cmp	r2, #7
 800f16c:	d1ed      	bne.n	800f14a <EXTI15_10_IRQHandler+0x96>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800f16e:	2028      	movs	r0, #40	; 0x28
 800f170:	f7f7 fde4 	bl	8006d3c <HAL_NVIC_DisableIRQ>
		logAnlys.trigOccur = TRIG_OCCURRED;
 800f174:	2300      	movs	r3, #0
 800f176:	75eb      	strb	r3, [r5, #23]
}
 800f178:	bd70      	pop	{r4, r5, r6, pc}
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800f17a:	2017      	movs	r0, #23
 800f17c:	f7f7 fdde 	bl	8006d3c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f180:	2301      	movs	r3, #1
 800f182:	e7a9      	b.n	800f0d8 <EXTI15_10_IRQHandler+0x24>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800f184:	2017      	movs	r0, #23
 800f186:	f7f7 fdd9 	bl	8006d3c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f18a:	2301      	movs	r3, #1
 800f18c:	e7bf      	b.n	800f10e <EXTI15_10_IRQHandler+0x5a>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800f18e:	2028      	movs	r0, #40	; 0x28
 800f190:	f7f7 fdd4 	bl	8006d3c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f194:	2301      	movs	r3, #1
 800f196:	e7c3      	b.n	800f120 <EXTI15_10_IRQHandler+0x6c>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800f198:	2028      	movs	r0, #40	; 0x28
 800f19a:	f7f7 fdcf 	bl	8006d3c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e7c7      	b.n	800f132 <EXTI15_10_IRQHandler+0x7e>
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800f1a2:	2028      	movs	r0, #40	; 0x28
 800f1a4:	f7f7 fdca 	bl	8006d3c <HAL_NVIC_DisableIRQ>
	if(pr & (1 << 13) ){ 	//pending request on pin 13
 800f1a8:	2e00      	cmp	r6, #0
 800f1aa:	d0e3      	beq.n	800f174 <EXTI15_10_IRQHandler+0xc0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 800f1ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f1b0:	6163      	str	r3, [r4, #20]
		if(logAnlys.trigConfig == TRIG_CHAN8){
 800f1b2:	7d6b      	ldrb	r3, [r5, #21]
 800f1b4:	2b07      	cmp	r3, #7
 800f1b6:	d1dd      	bne.n	800f174 <EXTI15_10_IRQHandler+0xc0>
 800f1b8:	e7d9      	b.n	800f16e <EXTI15_10_IRQHandler+0xba>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800f1ba:	2017      	movs	r0, #23
 800f1bc:	f7f7 fdbe 	bl	8006d3c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f1c0:	4633      	mov	r3, r6
 800f1c2:	e792      	b.n	800f0ea <EXTI15_10_IRQHandler+0x36>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800f1c4:	2017      	movs	r0, #23
 800f1c6:	f7f7 fdb9 	bl	8006d3c <HAL_NVIC_DisableIRQ>
			isRightPin = 1;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e796      	b.n	800f0fc <EXTI15_10_IRQHandler+0x48>
 800f1ce:	bf00      	nop
 800f1d0:	2000ed14 	.word	0x2000ed14
 800f1d4:	20007028 	.word	0x20007028
 800f1d8:	40010400 	.word	0x40010400
 800f1dc:	40000800 	.word	0x40000800
 800f1e0:	2000ea84 	.word	0x2000ea84

0800f1e4 <EXTI9_5_IRQHandler>:
 800f1e4:	b570      	push	{r4, r5, r6, lr}
 800f1e6:	f002 f9b5 	bl	8011554 <TIM_PostTrigger_SoftwareStart>
 800f1ea:	4b45      	ldr	r3, [pc, #276]	; (800f300 <EXTI9_5_IRQHandler+0x11c>)
 800f1ec:	4d45      	ldr	r5, [pc, #276]	; (800f304 <EXTI9_5_IRQHandler+0x120>)
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	4b45      	ldr	r3, [pc, #276]	; (800f308 <EXTI9_5_IRQHandler+0x124>)
 800f1f2:	6852      	ldr	r2, [r2, #4]
 800f1f4:	602a      	str	r2, [r5, #0]
 800f1f6:	695c      	ldr	r4, [r3, #20]
 800f1f8:	0660      	lsls	r0, r4, #25
 800f1fa:	d504      	bpl.n	800f206 <EXTI9_5_IRQHandler+0x22>
 800f1fc:	2240      	movs	r2, #64	; 0x40
 800f1fe:	615a      	str	r2, [r3, #20]
 800f200:	7d6b      	ldrb	r3, [r5, #21]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d051      	beq.n	800f2aa <EXTI9_5_IRQHandler+0xc6>
 800f206:	2300      	movs	r3, #0
 800f208:	0621      	lsls	r1, r4, #24
 800f20a:	d506      	bpl.n	800f21a <EXTI9_5_IRQHandler+0x36>
 800f20c:	4a3e      	ldr	r2, [pc, #248]	; (800f308 <EXTI9_5_IRQHandler+0x124>)
 800f20e:	2180      	movs	r1, #128	; 0x80
 800f210:	6151      	str	r1, [r2, #20]
 800f212:	7d6e      	ldrb	r6, [r5, #21]
 800f214:	b2f6      	uxtb	r6, r6
 800f216:	2e01      	cmp	r6, #1
 800f218:	d067      	beq.n	800f2ea <EXTI9_5_IRQHandler+0x106>
 800f21a:	05e2      	lsls	r2, r4, #23
 800f21c:	d506      	bpl.n	800f22c <EXTI9_5_IRQHandler+0x48>
 800f21e:	4a3a      	ldr	r2, [pc, #232]	; (800f308 <EXTI9_5_IRQHandler+0x124>)
 800f220:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f224:	6151      	str	r1, [r2, #20]
 800f226:	7d6a      	ldrb	r2, [r5, #21]
 800f228:	2a02      	cmp	r2, #2
 800f22a:	d063      	beq.n	800f2f4 <EXTI9_5_IRQHandler+0x110>
 800f22c:	05a6      	lsls	r6, r4, #22
 800f22e:	d506      	bpl.n	800f23e <EXTI9_5_IRQHandler+0x5a>
 800f230:	4a35      	ldr	r2, [pc, #212]	; (800f308 <EXTI9_5_IRQHandler+0x124>)
 800f232:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f236:	6151      	str	r1, [r2, #20]
 800f238:	7d6a      	ldrb	r2, [r5, #21]
 800f23a:	2a03      	cmp	r2, #3
 800f23c:	d03a      	beq.n	800f2b4 <EXTI9_5_IRQHandler+0xd0>
 800f23e:	0560      	lsls	r0, r4, #21
 800f240:	d506      	bpl.n	800f250 <EXTI9_5_IRQHandler+0x6c>
 800f242:	4a31      	ldr	r2, [pc, #196]	; (800f308 <EXTI9_5_IRQHandler+0x124>)
 800f244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f248:	6151      	str	r1, [r2, #20]
 800f24a:	7d6a      	ldrb	r2, [r5, #21]
 800f24c:	2a04      	cmp	r2, #4
 800f24e:	d036      	beq.n	800f2be <EXTI9_5_IRQHandler+0xda>
 800f250:	0521      	lsls	r1, r4, #20
 800f252:	d506      	bpl.n	800f262 <EXTI9_5_IRQHandler+0x7e>
 800f254:	4a2c      	ldr	r2, [pc, #176]	; (800f308 <EXTI9_5_IRQHandler+0x124>)
 800f256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f25a:	6151      	str	r1, [r2, #20]
 800f25c:	7d6a      	ldrb	r2, [r5, #21]
 800f25e:	2a05      	cmp	r2, #5
 800f260:	d032      	beq.n	800f2c8 <EXTI9_5_IRQHandler+0xe4>
 800f262:	04e2      	lsls	r2, r4, #19
 800f264:	f404 5600 	and.w	r6, r4, #8192	; 0x2000
 800f268:	d506      	bpl.n	800f278 <EXTI9_5_IRQHandler+0x94>
 800f26a:	4c27      	ldr	r4, [pc, #156]	; (800f308 <EXTI9_5_IRQHandler+0x124>)
 800f26c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f270:	6162      	str	r2, [r4, #20]
 800f272:	7d6a      	ldrb	r2, [r5, #21]
 800f274:	2a06      	cmp	r2, #6
 800f276:	d02c      	beq.n	800f2d2 <EXTI9_5_IRQHandler+0xee>
 800f278:	b956      	cbnz	r6, 800f290 <EXTI9_5_IRQHandler+0xac>
 800f27a:	b99b      	cbnz	r3, 800f2a4 <EXTI9_5_IRQHandler+0xc0>
 800f27c:	4a23      	ldr	r2, [pc, #140]	; (800f30c <EXTI9_5_IRQHandler+0x128>)
 800f27e:	4924      	ldr	r1, [pc, #144]	; (800f310 <EXTI9_5_IRQHandler+0x12c>)
 800f280:	6813      	ldr	r3, [r2, #0]
 800f282:	f023 0301 	bic.w	r3, r3, #1
 800f286:	6013      	str	r3, [r2, #0]
 800f288:	680b      	ldr	r3, [r1, #0]
 800f28a:	2200      	movs	r2, #0
 800f28c:	625a      	str	r2, [r3, #36]	; 0x24
 800f28e:	bd70      	pop	{r4, r5, r6, pc}
 800f290:	4a1d      	ldr	r2, [pc, #116]	; (800f308 <EXTI9_5_IRQHandler+0x124>)
 800f292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f296:	6151      	str	r1, [r2, #20]
 800f298:	7d6a      	ldrb	r2, [r5, #21]
 800f29a:	2a07      	cmp	r2, #7
 800f29c:	d1ed      	bne.n	800f27a <EXTI9_5_IRQHandler+0x96>
 800f29e:	2028      	movs	r0, #40	; 0x28
 800f2a0:	f7f7 fd4c 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	75eb      	strb	r3, [r5, #23]
 800f2a8:	bd70      	pop	{r4, r5, r6, pc}
 800f2aa:	2017      	movs	r0, #23
 800f2ac:	f7f7 fd46 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e7a9      	b.n	800f208 <EXTI9_5_IRQHandler+0x24>
 800f2b4:	2017      	movs	r0, #23
 800f2b6:	f7f7 fd41 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	e7bf      	b.n	800f23e <EXTI9_5_IRQHandler+0x5a>
 800f2be:	2028      	movs	r0, #40	; 0x28
 800f2c0:	f7f7 fd3c 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e7c3      	b.n	800f250 <EXTI9_5_IRQHandler+0x6c>
 800f2c8:	2028      	movs	r0, #40	; 0x28
 800f2ca:	f7f7 fd37 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e7c7      	b.n	800f262 <EXTI9_5_IRQHandler+0x7e>
 800f2d2:	2028      	movs	r0, #40	; 0x28
 800f2d4:	f7f7 fd32 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800f2d8:	2e00      	cmp	r6, #0
 800f2da:	d0e3      	beq.n	800f2a4 <EXTI9_5_IRQHandler+0xc0>
 800f2dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f2e0:	6163      	str	r3, [r4, #20]
 800f2e2:	7d6b      	ldrb	r3, [r5, #21]
 800f2e4:	2b07      	cmp	r3, #7
 800f2e6:	d1dd      	bne.n	800f2a4 <EXTI9_5_IRQHandler+0xc0>
 800f2e8:	e7d9      	b.n	800f29e <EXTI9_5_IRQHandler+0xba>
 800f2ea:	2017      	movs	r0, #23
 800f2ec:	f7f7 fd26 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800f2f0:	4633      	mov	r3, r6
 800f2f2:	e792      	b.n	800f21a <EXTI9_5_IRQHandler+0x36>
 800f2f4:	2017      	movs	r0, #23
 800f2f6:	f7f7 fd21 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e796      	b.n	800f22c <EXTI9_5_IRQHandler+0x48>
 800f2fe:	bf00      	nop
 800f300:	2000ed14 	.word	0x2000ed14
 800f304:	20007028 	.word	0x20007028
 800f308:	40010400 	.word	0x40010400
 800f30c:	40000800 	.word	0x40000800
 800f310:	2000ea84 	.word	0x2000ea84

0800f314 <TIM4_IRQHandler>:
*/
void TIM4_IRQHandler(void)
{
//  HAL_TIM_IRQHandler(&htim4);
#ifdef USE_LOG_ANLYS
	if(logAnlys.enable == LOGA_ENABLED){
 800f314:	4b04      	ldr	r3, [pc, #16]	; (800f328 <TIM4_IRQHandler+0x14>)
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800f316:	4805      	ldr	r0, [pc, #20]	; (800f32c <TIM4_IRQHandler+0x18>)
	if(logAnlys.enable == LOGA_ENABLED){
 800f318:	7cdb      	ldrb	r3, [r3, #19]
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d001      	beq.n	800f322 <TIM4_IRQHandler+0xe>
	}else{
#endif //USE_LOG_ANLYS
		COUNTER_PeriodElapsedCallback(&htim4);
 800f31e:	f000 bc1f 	b.w	800fb60 <COUNTER_PeriodElapsedCallback>
		LOG_ANLYS_PeriodElapsedCallback(&htim4);		
 800f322:	f001 bfc9 	b.w	80112b8 <LOG_ANLYS_PeriodElapsedCallback>
 800f326:	bf00      	nop
 800f328:	20007028 	.word	0x20007028
 800f32c:	2000ea84 	.word	0x2000ea84

0800f330 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800f330:	4a0c      	ldr	r2, [pc, #48]	; (800f364 <_sbrk+0x34>)
{
 800f332:	b508      	push	{r3, lr}
	if (heap_end == 0)
 800f334:	6813      	ldr	r3, [r2, #0]
 800f336:	b133      	cbz	r3, 800f346 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800f338:	4418      	add	r0, r3
 800f33a:	4669      	mov	r1, sp
 800f33c:	4288      	cmp	r0, r1
 800f33e:	d808      	bhi.n	800f352 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800f340:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800f342:	4618      	mov	r0, r3
 800f344:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800f346:	4b08      	ldr	r3, [pc, #32]	; (800f368 <_sbrk+0x38>)
 800f348:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800f34a:	4418      	add	r0, r3
 800f34c:	4669      	mov	r1, sp
 800f34e:	4288      	cmp	r0, r1
 800f350:	d9f6      	bls.n	800f340 <_sbrk+0x10>
		errno = ENOMEM;
 800f352:	f002 fd61 	bl	8011e18 <__errno>
 800f356:	230c      	movs	r3, #12
 800f358:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800f35a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f35e:	4618      	mov	r0, r3
 800f360:	bd08      	pop	{r3, pc}
 800f362:	bf00      	nop
 800f364:	20004ca4 	.word	0x20004ca4
 800f368:	2000f028 	.word	0x2000f028

0800f36c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f36c:	4917      	ldr	r1, [pc, #92]	; (800f3cc <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800f36e:	4b18      	ldr	r3, [pc, #96]	; (800f3d0 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800f370:	4a18      	ldr	r2, [pc, #96]	; (800f3d4 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800f372:	4819      	ldr	r0, [pc, #100]	; (800f3d8 <SystemInit+0x6c>)
{
 800f374:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f376:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800f37a:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800f37e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 800f382:	681c      	ldr	r4, [r3, #0]
 800f384:	f044 0401 	orr.w	r4, r4, #1
 800f388:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 800f38a:	685c      	ldr	r4, [r3, #4]
 800f38c:	4022      	ands	r2, r4
 800f38e:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800f396:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f39a:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f3a2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800f3a4:	685a      	ldr	r2, [r3, #4]
 800f3a6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800f3aa:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800f3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ae:	f022 020f 	bic.w	r2, r2, #15
 800f3b2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 800f3b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800f3b6:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 800f3b8:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f3ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 800f3be:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 800f3c0:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f3c2:	608a      	str	r2, [r1, #8]
#endif
}
 800f3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	e000ed00 	.word	0xe000ed00
 800f3d0:	40021000 	.word	0x40021000
 800f3d4:	f87fc00c 	.word	0xf87fc00c
 800f3d8:	ff00fccc 	.word	0xff00fccc

0800f3dc <HAL_TIM_Base_MspInit>:
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {

	/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 800f3dc:	4a45      	ldr	r2, [pc, #276]	; (800f4f4 <HAL_TIM_Base_MspInit+0x118>)
 800f3de:	6803      	ldr	r3, [r0, #0]
 800f3e0:	4293      	cmp	r3, r2
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 800f3e2:	b510      	push	{r4, lr}
 800f3e4:	4604      	mov	r4, r0
	if (htim_base->Instance == TIM15) {
 800f3e6:	d072      	beq.n	800f4ce <HAL_TIM_Base_MspInit+0xf2>
	/* Note: PC app must send the mode first even if only one 
	 generator is implemented in device */
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	/* DAC generator mode TIM decision */
	if (htim_base->Instance == TIM6) {
 800f3e8:	4a43      	ldr	r2, [pc, #268]	; (800f4f8 <HAL_TIM_Base_MspInit+0x11c>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d065      	beq.n	800f4ba <HAL_TIM_Base_MspInit+0xde>
		TIM6_GEN_DAC_MspInit(htim_base);
	}
	if (htim_base->Instance == TIM7) {
 800f3ee:	4a43      	ldr	r2, [pc, #268]	; (800f4fc <HAL_TIM_Base_MspInit+0x120>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d05d      	beq.n	800f4b0 <HAL_TIM_Base_MspInit+0xd4>
#endif //USE_GEN

	/***************************** GEN PWM ***********************************/
#ifdef USE_GEN_PWM
	/* PWM generator mode TIM decision */
	if (generator.modeState == GENERATOR_PWM) {
 800f3f4:	4a42      	ldr	r2, [pc, #264]	; (800f500 <HAL_TIM_Base_MspInit+0x124>)
 800f3f6:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800f3fa:	2a01      	cmp	r2, #1
 800f3fc:	d035      	beq.n	800f46a <HAL_TIM_Base_MspInit+0x8e>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

	/***************************** SYNC PWM ********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800f3fe:	4a41      	ldr	r2, [pc, #260]	; (800f504 <HAL_TIM_Base_MspInit+0x128>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d05f      	beq.n	800f4c4 <HAL_TIM_Base_MspInit+0xe8>
	}
#endif //USE_SYNC_PWM¨

	/***************************** LOG ANLYS  **********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 800f404:	4a40      	ldr	r2, [pc, #256]	; (800f508 <HAL_TIM_Base_MspInit+0x12c>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d040      	beq.n	800f48c <HAL_TIM_Base_MspInit+0xb0>
		if (logAnlys.enable == LOGA_ENABLED) {
			TIM1_LOG_ANLYS_MspInit(htim_base);
		}
	}
	if(htim_base->Instance == TIM4) {
 800f40a:	4a40      	ldr	r2, [pc, #256]	; (800f50c <HAL_TIM_Base_MspInit+0x130>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d003      	beq.n	800f418 <HAL_TIM_Base_MspInit+0x3c>
	}
#endif //USE_LOG_ANLYS

	/****************************** COUNTER ***********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 800f410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f414:	d013      	beq.n	800f43e <HAL_TIM_Base_MspInit+0x62>
#ifdef USE_LOG_ANLYS
		}
#endif //USE_LOG_ANLYS
	}
#endif //USE_COUNTER
}
 800f416:	bd10      	pop	{r4, pc}
		if (logAnlys.enable == LOGA_ENABLED) {
 800f418:	4b3d      	ldr	r3, [pc, #244]	; (800f510 <HAL_TIM_Base_MspInit+0x134>)
 800f41a:	7cda      	ldrb	r2, [r3, #19]
 800f41c:	2a01      	cmp	r2, #1
 800f41e:	d007      	beq.n	800f430 <HAL_TIM_Base_MspInit+0x54>
		if (logAnlys.enable == LOGA_DISABLED) {
 800f420:	7cdb      	ldrb	r3, [r3, #19]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1f7      	bne.n	800f416 <HAL_TIM_Base_MspInit+0x3a>
			TIM4_REForICorTI_MspInit(htim_base);
 800f426:	4620      	mov	r0, r4
}
 800f428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			TIM4_REForICorTI_MspInit(htim_base);
 800f42c:	f000 bae2 	b.w	800f9f4 <TIM4_REForICorTI_MspInit>
			TIM4_LOG_ANLYS_MspInit(htim_base);
 800f430:	4620      	mov	r0, r4
 800f432:	f001 ff01 	bl	8011238 <TIM4_LOG_ANLYS_MspInit>
 800f436:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM2) {
 800f438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f43c:	d133      	bne.n	800f4a6 <HAL_TIM_Base_MspInit+0xca>
		if (counter.state == COUNTER_ETR || counter.state == COUNTER_REF) {
 800f43e:	4b35      	ldr	r3, [pc, #212]	; (800f514 <HAL_TIM_Base_MspInit+0x138>)
 800f440:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800f444:	2a01      	cmp	r2, #1
 800f446:	d02a      	beq.n	800f49e <HAL_TIM_Base_MspInit+0xc2>
 800f448:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800f44c:	2a04      	cmp	r2, #4
 800f44e:	d026      	beq.n	800f49e <HAL_TIM_Base_MspInit+0xc2>
		} else if (counter.state == COUNTER_IC || counter.state == COUNTER_TI) {
 800f450:	f893 23b8 	ldrb.w	r2, [r3, #952]	; 0x3b8
 800f454:	2a02      	cmp	r2, #2
 800f456:	d003      	beq.n	800f460 <HAL_TIM_Base_MspInit+0x84>
 800f458:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800f45c:	2b03      	cmp	r3, #3
 800f45e:	d1da      	bne.n	800f416 <HAL_TIM_Base_MspInit+0x3a>
			TIM2_ICorTI_MspInit(htim_base);
 800f460:	4620      	mov	r0, r4
 800f462:	f000 fa63 	bl	800f92c <TIM2_ICorTI_MspInit>
 800f466:	6823      	ldr	r3, [r4, #0]
 800f468:	e01d      	b.n	800f4a6 <HAL_TIM_Base_MspInit+0xca>
		if (htim_base->Instance == TIM1) {
 800f46a:	4a27      	ldr	r2, [pc, #156]	; (800f508 <HAL_TIM_Base_MspInit+0x12c>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d03c      	beq.n	800f4ea <HAL_TIM_Base_MspInit+0x10e>
		if (htim_base->Instance == TIM3) {
 800f470:	4a29      	ldr	r2, [pc, #164]	; (800f518 <HAL_TIM_Base_MspInit+0x13c>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d034      	beq.n	800f4e0 <HAL_TIM_Base_MspInit+0x104>
		if (htim_base->Instance == TIM6) {
 800f476:	4a20      	ldr	r2, [pc, #128]	; (800f4f8 <HAL_TIM_Base_MspInit+0x11c>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d02c      	beq.n	800f4d6 <HAL_TIM_Base_MspInit+0xfa>
		if (htim_base->Instance == TIM7) {
 800f47c:	4a1f      	ldr	r2, [pc, #124]	; (800f4fc <HAL_TIM_Base_MspInit+0x120>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d1bd      	bne.n	800f3fe <HAL_TIM_Base_MspInit+0x22>
			TIM7_GEN_PWM_MspInit(htim_base);
 800f482:	4620      	mov	r0, r4
 800f484:	f001 fb92 	bl	8010bac <TIM7_GEN_PWM_MspInit>
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	e7b8      	b.n	800f3fe <HAL_TIM_Base_MspInit+0x22>
		if (logAnlys.enable == LOGA_ENABLED) {
 800f48c:	4b20      	ldr	r3, [pc, #128]	; (800f510 <HAL_TIM_Base_MspInit+0x134>)
 800f48e:	7cdb      	ldrb	r3, [r3, #19]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d1c0      	bne.n	800f416 <HAL_TIM_Base_MspInit+0x3a>
			TIM1_LOG_ANLYS_MspInit(htim_base);
 800f494:	4620      	mov	r0, r4
 800f496:	f001 fe81 	bl	801119c <TIM1_LOG_ANLYS_MspInit>
 800f49a:	6823      	ldr	r3, [r4, #0]
 800f49c:	e7b5      	b.n	800f40a <HAL_TIM_Base_MspInit+0x2e>
			TIM2_ETRorREF_MspInit(htim_base);
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f000 f9fa 	bl	800f898 <TIM2_ETRorREF_MspInit>
 800f4a4:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM4) {
 800f4a6:	4a19      	ldr	r2, [pc, #100]	; (800f50c <HAL_TIM_Base_MspInit+0x130>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d1b4      	bne.n	800f416 <HAL_TIM_Base_MspInit+0x3a>
 800f4ac:	4b18      	ldr	r3, [pc, #96]	; (800f510 <HAL_TIM_Base_MspInit+0x134>)
 800f4ae:	e7b7      	b.n	800f420 <HAL_TIM_Base_MspInit+0x44>
		TIM7_GEN_DAC_MspInit(htim_base);
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f001 fae5 	bl	8010a80 <TIM7_GEN_DAC_MspInit>
 800f4b6:	6823      	ldr	r3, [r4, #0]
 800f4b8:	e79c      	b.n	800f3f4 <HAL_TIM_Base_MspInit+0x18>
		TIM6_GEN_DAC_MspInit(htim_base);
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f001 fad0 	bl	8010a60 <TIM6_GEN_DAC_MspInit>
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	e794      	b.n	800f3ee <HAL_TIM_Base_MspInit+0x12>
		TIM8_SYNC_PWM_MspInit(htim_base);
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	f002 f99d 	bl	8011804 <TIM8_SYNC_PWM_MspInit>
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	e79a      	b.n	800f404 <HAL_TIM_Base_MspInit+0x28>
		TIM15_SCOPE_MspInit(htim_base);
 800f4ce:	f002 f8d3 	bl	8011678 <TIM15_SCOPE_MspInit>
 800f4d2:	6823      	ldr	r3, [r4, #0]
 800f4d4:	e788      	b.n	800f3e8 <HAL_TIM_Base_MspInit+0xc>
			TIM6_GEN_PWM_MspInit(htim_base);
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f001 fb32 	bl	8010b40 <TIM6_GEN_PWM_MspInit>
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	e7cd      	b.n	800f47c <HAL_TIM_Base_MspInit+0xa0>
			TIM3_GEN_PWM_MspInit(htim_base);
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f001 fb0d 	bl	8010b00 <TIM3_GEN_PWM_MspInit>
 800f4e6:	6823      	ldr	r3, [r4, #0]
 800f4e8:	e7c5      	b.n	800f476 <HAL_TIM_Base_MspInit+0x9a>
			TIM1_GEN_PWM_MspInit(htim_base);
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f001 fae8 	bl	8010ac0 <TIM1_GEN_PWM_MspInit>
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	e7bd      	b.n	800f470 <HAL_TIM_Base_MspInit+0x94>
 800f4f4:	40014000 	.word	0x40014000
 800f4f8:	40001000 	.word	0x40001000
 800f4fc:	40001400 	.word	0x40001400
 800f500:	200050a0 	.word	0x200050a0
 800f504:	40013400 	.word	0x40013400
 800f508:	40012c00 	.word	0x40012c00
 800f50c:	40000800 	.word	0x40000800
 800f510:	20007028 	.word	0x20007028
 800f514:	20004cc8 	.word	0x20004cc8
 800f518:	40000400 	.word	0x40000400

0800f51c <HAL_TIM_Base_MspDeInit>:
/**             
 * @brief  This function deinitializes GPIOs and DMAs used by the functionalities.
 * @param  htim_base: pointer to timer's handler
 * @retval None
 */
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 800f51c:	b538      	push	{r3, r4, r5, lr}

/***************************** SCOPE **********************************/
#ifdef USE_SCOPE
	if (htim_base->Instance == TIM15) {
 800f51e:	4a39      	ldr	r2, [pc, #228]	; (800f604 <HAL_TIM_Base_MspDeInit+0xe8>)
 800f520:	6803      	ldr	r3, [r0, #0]
 800f522:	4293      	cmp	r3, r2
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base) {
 800f524:	4604      	mov	r4, r0
	if (htim_base->Instance == TIM15) {
 800f526:	d04d      	beq.n	800f5c4 <HAL_TIM_Base_MspDeInit+0xa8>
#endif //USE_SCOPE

/**************************** GEN DAC  *********************************/
#if defined(USE_GEN) || defined(USE_GEN_PWM)
#ifdef USE_GEN
	if (generator.modeState == GENERATOR_DAC) {
 800f528:	4d37      	ldr	r5, [pc, #220]	; (800f608 <HAL_TIM_Base_MspDeInit+0xec>)
 800f52a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800f52e:	b92a      	cbnz	r2, 800f53c <HAL_TIM_Base_MspDeInit+0x20>
		if (htim_base->Instance == TIM6) {
 800f530:	4a36      	ldr	r2, [pc, #216]	; (800f60c <HAL_TIM_Base_MspDeInit+0xf0>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d03c      	beq.n	800f5b0 <HAL_TIM_Base_MspDeInit+0x94>
			TIM6_GEN_DAC_MspDeinit(htim_base);
		}
		if (htim_base->Instance == TIM7) {
 800f536:	4a36      	ldr	r2, [pc, #216]	; (800f610 <HAL_TIM_Base_MspDeInit+0xf4>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d03e      	beq.n	800f5ba <HAL_TIM_Base_MspDeInit+0x9e>
	}
#endif //USE_GEN

/**************************** GEN PWM  *********************************/
#ifdef USE_GEN_PWM
	if (generator.modeState == GENERATOR_PWM) {
 800f53c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800f540:	2a01      	cmp	r2, #1
 800f542:	d00c      	beq.n	800f55e <HAL_TIM_Base_MspDeInit+0x42>
#endif //USE_GEN_PWM
#endif //USE_GEN || USE_GEN_PWM

/**************************** SYNC PWM  *********************************/
#ifdef USE_SYNC_PWM
	if (htim_base->Instance == TIM8) {
 800f544:	4a33      	ldr	r2, [pc, #204]	; (800f614 <HAL_TIM_Base_MspDeInit+0xf8>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d040      	beq.n	800f5cc <HAL_TIM_Base_MspDeInit+0xb0>
	}
#endif //USE_SYNC_PWM

/**************************** LOG ANLYS  *********************************/
#ifdef USE_LOG_ANLYS
	if (htim_base->Instance == TIM1) {
 800f54a:	4a33      	ldr	r2, [pc, #204]	; (800f618 <HAL_TIM_Base_MspDeInit+0xfc>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d044      	beq.n	800f5da <HAL_TIM_Base_MspDeInit+0xbe>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
	}
	if (htim_base->Instance == TIM4) {
 800f550:	4a32      	ldr	r2, [pc, #200]	; (800f61c <HAL_TIM_Base_MspDeInit+0x100>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d014      	beq.n	800f580 <HAL_TIM_Base_MspDeInit+0x64>
	}
#endif //USE_LOG_ANLYS

/***************************** COUNTER  *********************************/
#ifdef USE_COUNTER
	if (htim_base->Instance == TIM2) {
 800f556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f55a:	d021      	beq.n	800f5a0 <HAL_TIM_Base_MspDeInit+0x84>
	}
	if (htim_base->Instance == TIM4) {
		TIM4_CNT_MspDeinit(htim_base);
	}
#endif //USE_COUNTER
}
 800f55c:	bd38      	pop	{r3, r4, r5, pc}
		if (htim_base->Instance == TIM1) {
 800f55e:	4a2e      	ldr	r2, [pc, #184]	; (800f618 <HAL_TIM_Base_MspDeInit+0xfc>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d049      	beq.n	800f5f8 <HAL_TIM_Base_MspDeInit+0xdc>
		if (htim_base->Instance == TIM3) {
 800f564:	4a2e      	ldr	r2, [pc, #184]	; (800f620 <HAL_TIM_Base_MspDeInit+0x104>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d041      	beq.n	800f5ee <HAL_TIM_Base_MspDeInit+0xd2>
		if (htim_base->Instance == TIM6) {
 800f56a:	4a28      	ldr	r2, [pc, #160]	; (800f60c <HAL_TIM_Base_MspDeInit+0xf0>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d039      	beq.n	800f5e4 <HAL_TIM_Base_MspDeInit+0xc8>
		if (htim_base->Instance == TIM7) {
 800f570:	4a27      	ldr	r2, [pc, #156]	; (800f610 <HAL_TIM_Base_MspDeInit+0xf4>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d1e6      	bne.n	800f544 <HAL_TIM_Base_MspDeInit+0x28>
			TIM7_GEN_PWM_MspDeinit(htim_base);
 800f576:	4620      	mov	r0, r4
 800f578:	f001 fb68 	bl	8010c4c <TIM7_GEN_PWM_MspDeinit>
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	e7e1      	b.n	800f544 <HAL_TIM_Base_MspDeInit+0x28>
		if (logAnlys.enable == LOGA_ENABLED) {
 800f580:	4b28      	ldr	r3, [pc, #160]	; (800f624 <HAL_TIM_Base_MspDeInit+0x108>)
 800f582:	7cdb      	ldrb	r3, [r3, #19]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d004      	beq.n	800f592 <HAL_TIM_Base_MspDeInit+0x76>
		TIM4_CNT_MspDeinit(htim_base);
 800f588:	4620      	mov	r0, r4
}
 800f58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TIM4_CNT_MspDeinit(htim_base);
 800f58e:	f000 bab1 	b.w	800faf4 <TIM4_CNT_MspDeinit>
			TIM4_LOG_ANLYS_MspDeinit(htim_base);
 800f592:	4620      	mov	r0, r4
 800f594:	f001 fe72 	bl	801127c <TIM4_LOG_ANLYS_MspDeinit>
	if (htim_base->Instance == TIM2) {
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f59e:	d103      	bne.n	800f5a8 <HAL_TIM_Base_MspDeInit+0x8c>
		TIM2_CNT_MspDeinit(htim_base);
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f000 fa63 	bl	800fa6c <TIM2_CNT_MspDeinit>
 800f5a6:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM4) {
 800f5a8:	4a1c      	ldr	r2, [pc, #112]	; (800f61c <HAL_TIM_Base_MspDeInit+0x100>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d0ec      	beq.n	800f588 <HAL_TIM_Base_MspDeInit+0x6c>
}
 800f5ae:	bd38      	pop	{r3, r4, r5, pc}
			TIM6_GEN_DAC_MspDeinit(htim_base);
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f001 fa75 	bl	8010aa0 <TIM6_GEN_DAC_MspDeinit>
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	e7bd      	b.n	800f536 <HAL_TIM_Base_MspDeInit+0x1a>
			TIM7_GEN_DAC_MspDeinit(htim_base);
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f001 fa78 	bl	8010ab0 <TIM7_GEN_DAC_MspDeinit>
 800f5c0:	6823      	ldr	r3, [r4, #0]
 800f5c2:	e7bb      	b.n	800f53c <HAL_TIM_Base_MspDeInit+0x20>
		TIM15_SCOPE_MspDeinit(htim_base);
 800f5c4:	f002 f868 	bl	8011698 <TIM15_SCOPE_MspDeinit>
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	e7ad      	b.n	800f528 <HAL_TIM_Base_MspDeInit+0xc>
		TIM8_SYNC_PWM_MspDeinit(htim_base);
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f002 f9c7 	bl	8011960 <TIM8_SYNC_PWM_MspDeinit>
 800f5d2:	6823      	ldr	r3, [r4, #0]
	if (htim_base->Instance == TIM1) {
 800f5d4:	4a10      	ldr	r2, [pc, #64]	; (800f618 <HAL_TIM_Base_MspDeInit+0xfc>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d1ba      	bne.n	800f550 <HAL_TIM_Base_MspDeInit+0x34>
		TIM1_LOG_ANLYS_MspDeinit(htim_base);
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f001 fe62 	bl	80112a4 <TIM1_LOG_ANLYS_MspDeinit>
 800f5e0:	6823      	ldr	r3, [r4, #0]
 800f5e2:	e7b5      	b.n	800f550 <HAL_TIM_Base_MspDeInit+0x34>
			TIM6_GEN_PWM_MspDeinit(htim_base);
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f001 fb27 	bl	8010c38 <TIM6_GEN_PWM_MspDeinit>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	e7c0      	b.n	800f570 <HAL_TIM_Base_MspDeInit+0x54>
			TIM3_GEN_PWM_MspDeinit(htim_base);
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f001 fb1a 	bl	8010c28 <TIM3_GEN_PWM_MspDeinit>
 800f5f4:	6823      	ldr	r3, [r4, #0]
 800f5f6:	e7b8      	b.n	800f56a <HAL_TIM_Base_MspDeInit+0x4e>
			TIM1_GEN_PWM_MspDeinit(htim_base);
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f001 fb0d 	bl	8010c18 <TIM1_GEN_PWM_MspDeinit>
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	e7b0      	b.n	800f564 <HAL_TIM_Base_MspDeInit+0x48>
 800f602:	bf00      	nop
 800f604:	40014000 	.word	0x40014000
 800f608:	200050a0 	.word	0x200050a0
 800f60c:	40001000 	.word	0x40001000
 800f610:	40001400 	.word	0x40001400
 800f614:	40013400 	.word	0x40013400
 800f618:	40012c00 	.word	0x40012c00
 800f61c:	40000800 	.word	0x40000800
 800f620:	40000400 	.word	0x40000400
 800f624:	20007028 	.word	0x20007028

0800f628 <TIM_Reconfig>:
 * @param  isFreqPassed: tell whether a required frequency is passed
 * 						or whether (ARR*PSC) is passed to samplingFreq parameter
 * @retval None
 */
uint8_t TIM_Reconfig(TIM_HandleTypeDef* htim_base, uint32_t periphClock,
		uint32_t samplingFreq, uint32_t* realFreq, _Bool isFreqPassed) {
 800f628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62c:	f89d 4018 	ldrb.w	r4, [sp, #24]
	uint16_t prescaler;
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	uint8_t result = UNKNOW_ERROR;

	if (isFreqPassed == true) {
 800f630:	b124      	cbz	r4, 800f63c <TIM_Reconfig+0x14>
		clkDiv = ((2 * periphClock / samplingFreq) + 1) / 2; //to minimize rounding error
 800f632:	004c      	lsls	r4, r1, #1
 800f634:	fbb4 f2f2 	udiv	r2, r4, r2
 800f638:	3201      	adds	r2, #1
 800f63a:	0852      	lsrs	r2, r2, #1
	} else {
		clkDiv = samplingFreq;
	}

	if (clkDiv == 0) { //error
 800f63c:	2a00      	cmp	r2, #0
 800f63e:	d03d      	beq.n	800f6bc <TIM_Reconfig+0x94>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800f640:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f644:	db34      	blt.n	800f6b0 <TIM_Reconfig+0x88>
		autoReloadReg = clkDiv - 1;
		result = 0;
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
		uint32_t errMin = 0xFFFFFFFF;
		uint16_t ratio = clkDiv >> 16;
 800f646:	1415      	asrs	r5, r2, #16
 800f648:	3501      	adds	r5, #1
 800f64a:	b2ad      	uxth	r5, r5
		uint32_t errMin = 0xFFFFFFFF;
 800f64c:	f04f 3cff 	mov.w	ip, #4294967295
	uint32_t errMinRatio = 0;
 800f650:	f04f 0800 	mov.w	r8, #0
			if (errVal < errMin) {
				errMin = errVal;
				errMinRatio = ratio;
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800f654:	f64f 7eff 	movw	lr, #65535	; 0xffff
			div = clkDiv / ratio;
 800f658:	fb92 f6f5 	sdiv	r6, r2, r5
			errVal = clkDiv - (div * ratio);
 800f65c:	b2b4      	uxth	r4, r6
 800f65e:	fb05 2414 	mls	r4, r5, r4, r2
			if (errVal < errMin) {
 800f662:	4564      	cmp	r4, ip
			ratio++;
 800f664:	b2af      	uxth	r7, r5
 800f666:	bf3c      	itt	cc
 800f668:	46a4      	movcc	ip, r4
				errMinRatio = ratio;
 800f66a:	46a8      	movcc	r8, r5
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800f66c:	4577      	cmp	r7, lr
 800f66e:	d02a      	beq.n	800f6c6 <TIM_Reconfig+0x9e>
 800f670:	3501      	adds	r5, #1
		while (errVal != 0) {
 800f672:	2c00      	cmp	r4, #0
 800f674:	d1f0      	bne.n	800f658 <TIM_Reconfig+0x30>
			div = clkDiv / ratio;
 800f676:	b2b6      	uxth	r6, r6
 800f678:	1e75      	subs	r5, r6, #1
 800f67a:	1e7a      	subs	r2, r7, #1
				ratio = errMinRatio;
				break;
			}
		}

		if (ratio > div) {
 800f67c:	42b7      	cmp	r7, r6
 800f67e:	b2ad      	uxth	r5, r5
 800f680:	fa1f fc82 	uxth.w	ip, r2
 800f684:	d934      	bls.n	800f6f0 <TIM_Reconfig+0xc8>
 800f686:	4662      	mov	r2, ip
 800f688:	462e      	mov	r6, r5
 800f68a:	46ac      	mov	ip, r5
 800f68c:	4615      	mov	r5, r2
		} else {
			result = 0;
		}
	}

	if (realFreq != 0) {
 800f68e:	b12b      	cbz	r3, 800f69c <TIM_Reconfig+0x74>
		*realFreq = periphClock / ((prescaler + 1) * (autoReloadReg + 1));
 800f690:	1c6a      	adds	r2, r5, #1
 800f692:	fb0c 2202 	mla	r2, ip, r2, r2
 800f696:	fbb1 f1f2 	udiv	r1, r1, r2
 800f69a:	6019      	str	r1, [r3, #0]

//	htim_base->Init.Period = autoReloadReg;
//	htim_base->Init.Prescaler = prescaler;
//	HAL_TIM_Base_Init(htim_base);

	htim_base->Instance->ARR = autoReloadReg;
 800f69c:	6803      	ldr	r3, [r0, #0]
 800f69e:	62dd      	str	r5, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800f6a0:	629e      	str	r6, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800f6a2:	695a      	ldr	r2, [r3, #20]
 800f6a4:	f042 0201 	orr.w	r2, r2, #1
 800f6a8:	615a      	str	r2, [r3, #20]
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);

	return result;
}
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b0:	2600      	movs	r6, #0
		autoReloadReg = clkDiv - 1;
 800f6b2:	3a01      	subs	r2, #1
 800f6b4:	b295      	uxth	r5, r2
		result = 0;
 800f6b6:	4634      	mov	r4, r6
		prescaler = 0;
 800f6b8:	46b4      	mov	ip, r6
 800f6ba:	e7e8      	b.n	800f68e <TIM_Reconfig+0x66>
 800f6bc:	f04f 0c00 	mov.w	ip, #0
 800f6c0:	4666      	mov	r6, ip
		result = GEN_FREQ_MISMATCH;
 800f6c2:	246c      	movs	r4, #108	; 0x6c
 800f6c4:	e7e3      	b.n	800f68e <TIM_Reconfig+0x66>
				div = clkDiv / errMinRatio;
 800f6c6:	fbb2 f2f8 	udiv	r2, r2, r8
				ratio = errMinRatio;
 800f6ca:	fa1f f888 	uxth.w	r8, r8
				div = clkDiv / errMinRatio;
 800f6ce:	b292      	uxth	r2, r2
 800f6d0:	f102 3cff 	add.w	ip, r2, #4294967295
 800f6d4:	f108 35ff 	add.w	r5, r8, #4294967295
		if (ratio > div) {
 800f6d8:	4542      	cmp	r2, r8
 800f6da:	fa1f fc8c 	uxth.w	ip, ip
 800f6de:	b2ad      	uxth	r5, r5
 800f6e0:	d302      	bcc.n	800f6e8 <TIM_Reconfig+0xc0>
 800f6e2:	4662      	mov	r2, ip
 800f6e4:	46ac      	mov	ip, r5
 800f6e6:	4615      	mov	r5, r2
 800f6e8:	4666      	mov	r6, ip
		if (errVal) {
 800f6ea:	b114      	cbz	r4, 800f6f2 <TIM_Reconfig+0xca>
			result = GEN_FREQ_IS_INACCURATE;
 800f6ec:	246b      	movs	r4, #107	; 0x6b
 800f6ee:	e7ce      	b.n	800f68e <TIM_Reconfig+0x66>
 800f6f0:	4666      	mov	r6, ip
			result = 0;
 800f6f2:	2400      	movs	r4, #0
 800f6f4:	e7cb      	b.n	800f68e <TIM_Reconfig+0x66>
 800f6f6:	bf00      	nop

0800f6f8 <TIM_ReconfigPrecise>:

/**
 * @brief  Common Timer reconfiguration function working with double.
 * @retval result: real frequency
 */
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800f6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fc:	ec53 2b10 	vmov	r2, r3, d0
 800f700:	b082      	sub	sp, #8
 800f702:	4605      	mov	r5, r0
	uint16_t autoReloadReg;
	uint32_t errMinRatio = 0;
	double realFreq;
	uint8_t result = UNKNOW_ERROR;

	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800f704:	0048      	lsls	r0, r1, #1
double TIM_ReconfigPrecise(TIM_HandleTypeDef* htim_base, uint32_t periphClock, double reqFreq) {
 800f706:	e9cd 2300 	strd	r2, r3, [sp]
 800f70a:	460c      	mov	r4, r1
	clkDiv = ((2 * periphClock / reqFreq) + 1) / 2; //to minimize rounding error
 800f70c:	f7f0 feb2 	bl	8000474 <__aeabi_ui2d>
 800f710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f714:	f7f1 f852 	bl	80007bc <__aeabi_ddiv>
 800f718:	2200      	movs	r2, #0
 800f71a:	4b32      	ldr	r3, [pc, #200]	; (800f7e4 <TIM_ReconfigPrecise+0xec>)
 800f71c:	f7f0 fd6e 	bl	80001fc <__adddf3>
 800f720:	2200      	movs	r2, #0
 800f722:	4b31      	ldr	r3, [pc, #196]	; (800f7e8 <TIM_ReconfigPrecise+0xf0>)
 800f724:	f7f0 ff20 	bl	8000568 <__aeabi_dmul>
 800f728:	f7f1 f9ce 	bl	8000ac8 <__aeabi_d2iz>

	if (clkDiv == 0) { //error
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d04d      	beq.n	800f7cc <TIM_ReconfigPrecise+0xd4>
		result = GEN_FREQ_MISMATCH;
	} else if (clkDiv <= 0x0FFFF) { //Sampling frequency is high enough so no prescaler needed
 800f730:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800f734:	db29      	blt.n	800f78a <TIM_ReconfigPrecise+0x92>
		autoReloadReg = clkDiv - 1;
		result = 0;
	} else {	// finding prescaler and autoReload value
		uint32_t errVal = 0xFFFFFFFF;
		uint32_t errMin = 0xFFFFFFFF;
		uint16_t ratio = clkDiv >> 16;
 800f736:	1403      	asrs	r3, r0, #16
 800f738:	3301      	adds	r3, #1
 800f73a:	b29b      	uxth	r3, r3
		uint32_t errMin = 0xFFFFFFFF;
 800f73c:	f04f 37ff 	mov.w	r7, #4294967295
	uint32_t errMinRatio = 0;
 800f740:	f04f 0e00 	mov.w	lr, #0
			if (errVal < errMin) {
				errMin = errVal;
				errMinRatio = ratio;
			}

			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800f744:	f64f 7cff 	movw	ip, #65535	; 0xffff
			div = clkDiv / ratio;
 800f748:	fb90 f1f3 	sdiv	r1, r0, r3
			errVal = clkDiv - (div * ratio);
 800f74c:	b28a      	uxth	r2, r1
 800f74e:	fb03 0212 	mls	r2, r3, r2, r0
			if (errVal < errMin) {
 800f752:	42ba      	cmp	r2, r7
			ratio++;
 800f754:	b29e      	uxth	r6, r3
 800f756:	bf3c      	itt	cc
 800f758:	4617      	movcc	r7, r2
				errMinRatio = ratio;
 800f75a:	469e      	movcc	lr, r3
			if (ratio == 0xFFFF) { //exact combination wasnt found. we use best found
 800f75c:	4566      	cmp	r6, ip
 800f75e:	d03b      	beq.n	800f7d8 <TIM_ReconfigPrecise+0xe0>
 800f760:	3301      	adds	r3, #1
		while (errVal != 0) {
 800f762:	2a00      	cmp	r2, #0
 800f764:	d1f0      	bne.n	800f748 <TIM_ReconfigPrecise+0x50>
			div = clkDiv / ratio;
 800f766:	b289      	uxth	r1, r1
 800f768:	1e70      	subs	r0, r6, #1
 800f76a:	1e4b      	subs	r3, r1, #1
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	b280      	uxth	r0, r0
				ratio = errMinRatio;
				break;
			}
		}

		if (ratio > div) {
 800f770:	428e      	cmp	r6, r1
 800f772:	f100 0701 	add.w	r7, r0, #1
 800f776:	f103 0801 	add.w	r8, r3, #1
 800f77a:	461a      	mov	r2, r3
 800f77c:	d80b      	bhi.n	800f796 <TIM_ReconfigPrecise+0x9e>
 800f77e:	4641      	mov	r1, r8
 800f780:	4602      	mov	r2, r0
 800f782:	46b8      	mov	r8, r7
 800f784:	4618      	mov	r0, r3
 800f786:	460f      	mov	r7, r1
 800f788:	e005      	b.n	800f796 <TIM_ReconfigPrecise+0x9e>
		autoReloadReg = clkDiv - 1;
 800f78a:	3801      	subs	r0, #1
 800f78c:	b280      	uxth	r0, r0
 800f78e:	1c47      	adds	r7, r0, #1
 800f790:	2200      	movs	r2, #0
 800f792:	f04f 0801 	mov.w	r8, #1
		}
	}

	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));

	htim_base->Instance->ARR = autoReloadReg;
 800f796:	682b      	ldr	r3, [r5, #0]
 800f798:	62d8      	str	r0, [r3, #44]	; 0x2c
	htim_base->Instance->PSC = prescaler;
 800f79a:	629a      	str	r2, [r3, #40]	; 0x28
 800f79c:	695a      	ldr	r2, [r3, #20]
 800f79e:	f042 0201 	orr.w	r2, r2, #1
 800f7a2:	615a      	str	r2, [r3, #20]
	realFreq = periphClock / (double)((prescaler + 1) * (autoReloadReg + 1));
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f7f0 fe65 	bl	8000474 <__aeabi_ui2d>
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	fb07 f008 	mul.w	r0, r7, r8
 800f7b0:	460d      	mov	r5, r1
 800f7b2:	f7f0 fe6f 	bl	8000494 <__aeabi_i2d>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	4629      	mov	r1, r5
 800f7be:	f7f0 fffd 	bl	80007bc <__aeabi_ddiv>
	LL_TIM_GenerateEvent_UPDATE(htim_base->Instance);

	return realFreq;
}
 800f7c2:	ec41 0b10 	vmov	d0, r0, r1
 800f7c6:	b002      	add	sp, #8
 800f7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f102 0801 	add.w	r8, r2, #1
 800f7d2:	4610      	mov	r0, r2
 800f7d4:	4647      	mov	r7, r8
 800f7d6:	e7de      	b.n	800f796 <TIM_ReconfigPrecise+0x9e>
				div = clkDiv / errMinRatio;
 800f7d8:	fbb0 f0fe 	udiv	r0, r0, lr
				ratio = errMinRatio;
 800f7dc:	fa1f f68e 	uxth.w	r6, lr
				div = clkDiv / errMinRatio;
 800f7e0:	b281      	uxth	r1, r0
				break;
 800f7e2:	e7c1      	b.n	800f768 <TIM_ReconfigPrecise+0x70>
 800f7e4:	3ff00000 	.word	0x3ff00000
 800f7e8:	3fe00000 	.word	0x3fe00000

0800f7ec <MX_TIM4_Init>:
 * @note   Time Interval (TI): used for periodical check whether all the data was already transfered.
 * @param  None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800f7ec:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim4.Instance = TIM4;
	if(counter.state == COUNTER_REF){
 800f7ee:	4c27      	ldr	r4, [pc, #156]	; (800f88c <MX_TIM4_Init+0xa0>)
	htim4.Instance = TIM4;
 800f7f0:	4b27      	ldr	r3, [pc, #156]	; (800f890 <MX_TIM4_Init+0xa4>)
	if(counter.state == COUNTER_REF){
 800f7f2:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
	htim4.Instance = TIM4;
 800f7f6:	4927      	ldr	r1, [pc, #156]	; (800f894 <MX_TIM4_Init+0xa8>)
 800f7f8:	6019      	str	r1, [r3, #0]
	if(counter.state == COUNTER_REF){
 800f7fa:	2a04      	cmp	r2, #4
{
 800f7fc:	b089      	sub	sp, #36	; 0x24
	if(counter.state == COUNTER_REF){
 800f7fe:	d03d      	beq.n	800f87c <MX_TIM4_Init+0x90>
		/* REF mode - 3.6B samples (60000 * 60000) */
		htim4.Init.Prescaler = 59999;
		htim4.Init.Period = 59999;
	}else if(counter.state == COUNTER_ETR){
 800f800:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800f804:	2a01      	cmp	r2, #1
 800f806:	d007      	beq.n	800f818 <MX_TIM4_Init+0x2c>
		/* ETR mode - 100 ms gate time by default */
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 800f808:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800f80c:	2a02      	cmp	r2, #2
 800f80e:	d003      	beq.n	800f818 <MX_TIM4_Init+0x2c>
 800f810:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800f814:	2a03      	cmp	r2, #3
 800f816:	d105      	bne.n	800f824 <MX_TIM4_Init+0x38>
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800f818:	f641 411f 	movw	r1, #7199	; 0x1c1f
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800f81c:	f240 32e7 	movw	r2, #999	; 0x3e7
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800f820:	6059      	str	r1, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800f822:	60da      	str	r2, [r3, #12]
		/* IC mode - 100 ms interrupt event to send data */
		htim4.Init.Prescaler = TIM4_PSC;
		htim4.Init.Period = TIM4_ARR;
	}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f824:	2500      	movs	r5, #0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim4);
 800f826:	481a      	ldr	r0, [pc, #104]	; (800f890 <MX_TIM4_Init+0xa4>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f828:	609d      	str	r5, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f82a:	611d      	str	r5, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f82c:	619d      	str	r5, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 800f82e:	f7f9 fb5b 	bl	8008ee8 <HAL_TIM_Base_Init>

	if(counter.state == COUNTER_REF){
 800f832:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
		sClockSourceConfig.ClockFilter = 0;
	}else{
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	}
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800f836:	4816      	ldr	r0, [pc, #88]	; (800f890 <MX_TIM4_Init+0xa4>)
	if(counter.state == COUNTER_REF){
 800f838:	2b04      	cmp	r3, #4
 800f83a:	a908      	add	r1, sp, #32
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800f83c:	bf0c      	ite	eq
 800f83e:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f842:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800f846:	f841 3d10 	str.w	r3, [r1, #-16]!
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800f84a:	bf04      	itt	eq
 800f84c:	e9cd 5505 	strdeq	r5, r5, [sp, #20]
		sClockSourceConfig.ClockFilter = 0;
 800f850:	9507      	streq	r5, [sp, #28]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800f852:	f7fa fccb 	bl	800a1ec <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800f856:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f85a:	2220      	movs	r2, #32
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800f85c:	2b02      	cmp	r3, #2
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f85e:	9201      	str	r2, [sp, #4]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800f860:	d011      	beq.n	800f886 <MX_TIM4_Init+0x9a>
 800f862:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	}else{
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800f866:	2b03      	cmp	r3, #3
 800f868:	bf0c      	ite	eq
 800f86a:	2300      	moveq	r3, #0
 800f86c:	2380      	movne	r3, #128	; 0x80
	}
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800f86e:	a901      	add	r1, sp, #4
 800f870:	4807      	ldr	r0, [pc, #28]	; (800f890 <MX_TIM4_Init+0xa4>)
 800f872:	9303      	str	r3, [sp, #12]
 800f874:	f7fb ffc4 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
}
 800f878:	b009      	add	sp, #36	; 0x24
 800f87a:	bd30      	pop	{r4, r5, pc}
		htim4.Init.Prescaler = 59999;
 800f87c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800f880:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 800f882:	60da      	str	r2, [r3, #12]
 800f884:	e7ce      	b.n	800f824 <MX_TIM4_Init+0x38>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f886:	2300      	movs	r3, #0
 800f888:	e7f1      	b.n	800f86e <MX_TIM4_Init+0x82>
 800f88a:	bf00      	nop
 800f88c:	20004cc8 	.word	0x20004cc8
 800f890:	2000ea84 	.word	0x2000ea84
 800f894:	40000800 	.word	0x40000800

0800f898 <TIM2_ETRorREF_MspInit>:
 */
void TIM2_ETRorREF_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800f898:	4b20      	ldr	r3, [pc, #128]	; (800f91c <TIM2_ETRorREF_MspInit+0x84>)
{
 800f89a:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f89c:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* Peripheral DMA init*/

	hdma_tim2_up.Instance = DMA1_Channel2;
 800f89e:	4c20      	ldr	r4, [pc, #128]	; (800f920 <TIM2_ETRorREF_MspInit+0x88>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8a0:	f042 0201 	orr.w	r2, r2, #1
 800f8a4:	61da      	str	r2, [r3, #28]
 800f8a6:	69db      	ldr	r3, [r3, #28]
{
 800f8a8:	b086      	sub	sp, #24
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8aa:	f003 0301 	and.w	r3, r3, #1
{
 800f8ae:	4606      	mov	r6, r0
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8b0:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8b2:	2002      	movs	r0, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8b4:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f8b6:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f8b8:	2203      	movs	r2, #3
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f8ba:	9900      	ldr	r1, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8bc:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8be:	a901      	add	r1, sp, #4
 800f8c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f8c4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f8c6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f8c8:	e9cd 5203 	strd	r5, r2, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8cc:	f7f7 ff36 	bl	800773c <HAL_GPIO_Init>
	hdma_tim2_up.Instance = DMA1_Channel2;
 800f8d0:	4a14      	ldr	r2, [pc, #80]	; (800f924 <TIM2_ETRorREF_MspInit+0x8c>)
 800f8d2:	6022      	str	r2, [r4, #0]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f8d4:	f44f 7300 	mov.w	r3, #512	; 0x200
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f8d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
	hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 800f8dc:	2220      	movs	r2, #32
	hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f8de:	6123      	str	r3, [r4, #16]
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_up);
 800f8e0:	4620      	mov	r0, r4
	hdma_tim2_up.Init.Priority = DMA_PRIORITY_HIGH;
 800f8e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f8e6:	e9c4 2306 	strd	r2, r3, [r4, #24]
	hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f8ea:	6161      	str	r1, [r4, #20]
	hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f8ec:	6065      	str	r5, [r4, #4]
	hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 800f8ee:	e9c4 5502 	strd	r5, r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim2_up);
 800f8f2:	f7f7 fc47 	bl	8007184 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800f8f6:	6234      	str	r4, [r6, #32]
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	4a0a      	ldr	r2, [pc, #40]	; (800f928 <TIM2_ETRorREF_MspInit+0x90>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 800f8fe:	6266      	str	r6, [r4, #36]	; 0x24
	HAL_DMA_RegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID, COUNTER_ETR_DMA_CpltCallback);
 800f900:	f7f7 fec4 	bl	800768c <HAL_DMA_RegisterCallback>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 9, 0);
 800f904:	462a      	mov	r2, r5
 800f906:	2109      	movs	r1, #9
 800f908:	200c      	movs	r0, #12
 800f90a:	f7f7 f9bd 	bl	8006c88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800f90e:	200c      	movs	r0, #12
 800f910:	f7f7 fa00 	bl	8006d14 <HAL_NVIC_EnableIRQ>

	counterEtrRefSetDefault();
 800f914:	f7f4 f8f4 	bl	8003b00 <counterEtrRefSetDefault>
}
 800f918:	b006      	add	sp, #24
 800f91a:	bd70      	pop	{r4, r5, r6, pc}
 800f91c:	40021000 	.word	0x40021000
 800f920:	2000eac4 	.word	0x2000eac4
 800f924:	4002001c 	.word	0x4002001c
 800f928:	0800363d 	.word	0x0800363d

0800f92c <TIM2_ICorTI_MspInit>:

void TIM2_ICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM2_CLK_ENABLE();
 800f92c:	4b2b      	ldr	r3, [pc, #172]	; (800f9dc <TIM2_ICorTI_MspInit+0xb0>)
{
 800f92e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f932:	69da      	ldr	r2, [r3, #28]
	/* Peripheral DMA init*/

	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
	if(counter.state==COUNTER_IC){
 800f934:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800f9f0 <TIM2_ICorTI_MspInit+0xc4>
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800f938:	4d29      	ldr	r5, [pc, #164]	; (800f9e0 <TIM2_ICorTI_MspInit+0xb4>)
	/* Several peripheral DMA handle pointers point to the same DMA handle.
	 Be aware that there is only one channel to perform all the requested DMAs. */
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
	//			__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);

	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800f93a:	4c2a      	ldr	r4, [pc, #168]	; (800f9e4 <TIM2_ICorTI_MspInit+0xb8>)
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f93c:	f042 0201 	orr.w	r2, r2, #1
 800f940:	61da      	str	r2, [r3, #28]
 800f942:	69db      	ldr	r3, [r3, #28]
{
 800f944:	b087      	sub	sp, #28
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f946:	f003 0301 	and.w	r3, r3, #1
 800f94a:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f94c:	2600      	movs	r6, #0
{
 800f94e:	4607      	mov	r7, r0
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f950:	f04f 0c02 	mov.w	ip, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f954:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f956:	2303      	movs	r3, #3
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f958:	2201      	movs	r2, #1
	__HAL_RCC_TIM2_CLK_ENABLE();
 800f95a:	9800      	ldr	r0, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f95c:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f95e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f962:	e9cd c602 	strd	ip, r6, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f966:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f968:	9205      	str	r2, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f96a:	f7f7 fee7 	bl	800773c <HAL_GPIO_Init>
	if(counter.state==COUNTER_IC){
 800f96e:	f898 23b8 	ldrb.w	r2, [r8, #952]	; 0x3b8
	hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800f972:	4b1d      	ldr	r3, [pc, #116]	; (800f9e8 <TIM2_ICorTI_MspInit+0xbc>)
 800f974:	602b      	str	r3, [r5, #0]
	if(counter.state==COUNTER_IC){
 800f976:	2a02      	cmp	r2, #2
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_DISABLE;
 800f978:	bf14      	ite	ne
 800f97a:	4632      	movne	r2, r6
 800f97c:	2280      	moveq	r2, #128	; 0x80
	hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f97e:	f44f 7b00 	mov.w	fp, #512	; 0x200
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f982:	f44f 6a00 	mov.w	sl, #2048	; 0x800
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800f986:	f44f 5900 	mov.w	r9, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800f98a:	4628      	mov	r0, r5
 800f98c:	60ea      	str	r2, [r5, #12]
	hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f98e:	606e      	str	r6, [r5, #4]
	hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800f990:	60ae      	str	r6, [r5, #8]
	hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800f992:	61ae      	str	r6, [r5, #24]
	hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f994:	e9c5 ba04 	strd	fp, sl, [r5, #16]
	hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800f998:	f8c5 901c 	str.w	r9, [r5, #28]
	HAL_DMA_Init(&hdma_tim2_ch2_ch4);
 800f99c:	f7f7 fbf2 	bl	8007184 <HAL_DMA_Init>
	hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
	if(counter.state==COUNTER_IC){
 800f9a0:	f898 33b8 	ldrb.w	r3, [r8, #952]	; 0x3b8
	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800f9a4:	4a11      	ldr	r2, [pc, #68]	; (800f9ec <TIM2_ICorTI_MspInit+0xc0>)
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800f9a6:	62bd      	str	r5, [r7, #40]	; 0x28
	if(counter.state==COUNTER_IC){
 800f9a8:	2b02      	cmp	r3, #2
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
	}else{
		hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 800f9aa:	bf0c      	ite	eq
 800f9ac:	2380      	moveq	r3, #128	; 0x80
 800f9ae:	4633      	movne	r3, r6
	}
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
	hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim2_ch1);
 800f9b0:	4620      	mov	r0, r4
	hdma_tim2_ch1.Instance = DMA1_Channel5;
 800f9b2:	6022      	str	r2, [r4, #0]
 800f9b4:	60e3      	str	r3, [r4, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800f9b6:	626f      	str	r7, [r5, #36]	; 0x24
	hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800f9b8:	f8c4 b010 	str.w	fp, [r4, #16]
	hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f9bc:	e9c4 6601 	strd	r6, r6, [r4, #4]
	hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800f9c0:	e9c4 a605 	strd	sl, r6, [r4, #20]
	hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800f9c4:	f8c4 901c 	str.w	r9, [r4, #28]
	HAL_DMA_Init(&hdma_tim2_ch1);
 800f9c8:	f7f7 fbdc 	bl	8007184 <HAL_DMA_Init>

	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800f9cc:	627c      	str	r4, [r7, #36]	; 0x24
 800f9ce:	6267      	str	r7, [r4, #36]	; 0x24

	counterIcTiSetDefault();
 800f9d0:	f7f4 f8c2 	bl	8003b58 <counterIcTiSetDefault>
}
 800f9d4:	b007      	add	sp, #28
 800f9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9da:	bf00      	nop
 800f9dc:	40021000 	.word	0x40021000
 800f9e0:	2000eb08 	.word	0x2000eb08
 800f9e4:	2000ea40 	.word	0x2000ea40
 800f9e8:	40020080 	.word	0x40020080
 800f9ec:	40020058 	.word	0x40020058
 800f9f0:	20004cc8 	.word	0x20004cc8

0800f9f4 <TIM4_REForICorTI_MspInit>:

void TIM4_REForICorTI_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM4_CLK_ENABLE();
 800f9f4:	4b1b      	ldr	r3, [pc, #108]	; (800fa64 <TIM4_REForICorTI_MspInit+0x70>)

	if(counter.state==COUNTER_REF){
 800f9f6:	491c      	ldr	r1, [pc, #112]	; (800fa68 <TIM4_REForICorTI_MspInit+0x74>)
	__HAL_RCC_TIM4_CLK_ENABLE();
 800f9f8:	69da      	ldr	r2, [r3, #28]
{
 800f9fa:	b530      	push	{r4, r5, lr}
	__HAL_RCC_TIM4_CLK_ENABLE();
 800f9fc:	f042 0204 	orr.w	r2, r2, #4
 800fa00:	61da      	str	r2, [r3, #28]
 800fa02:	69db      	ldr	r3, [r3, #28]
{
 800fa04:	b087      	sub	sp, #28
	__HAL_RCC_TIM4_CLK_ENABLE();
 800fa06:	f003 0304 	and.w	r3, r3, #4
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	9b00      	ldr	r3, [sp, #0]
	if(counter.state==COUNTER_REF){
 800fa0e:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800fa12:	2b04      	cmp	r3, #4
 800fa14:	d013      	beq.n	800fa3e <TIM4_REForICorTI_MspInit+0x4a>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	}else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800fa16:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d005      	beq.n	800fa2a <TIM4_REForICorTI_MspInit+0x36>
 800fa1e:	f891 33b8 	ldrb.w	r3, [r1, #952]	; 0x3b8
 800fa22:	2b03      	cmp	r3, #3
 800fa24:	d001      	beq.n	800fa2a <TIM4_REForICorTI_MspInit+0x36>

		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 800fa26:	b007      	add	sp, #28
 800fa28:	bd30      	pop	{r4, r5, pc}
		HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	2109      	movs	r1, #9
 800fa2e:	201e      	movs	r0, #30
 800fa30:	f7f7 f92a 	bl	8006c88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800fa34:	201e      	movs	r0, #30
 800fa36:	f7f7 f96d 	bl	8006d14 <HAL_NVIC_EnableIRQ>
}
 800fa3a:	b007      	add	sp, #28
 800fa3c:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800fa3e:	f44f 7080 	mov.w	r0, #256	; 0x100
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800fa42:	2203      	movs	r2, #3
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800fa44:	230a      	movs	r3, #10
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 800fa46:	9001      	str	r0, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa48:	2502      	movs	r5, #2
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa4a:	2400      	movs	r4, #0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa4c:	a901      	add	r1, sp, #4
 800fa4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa52:	e9cd 5402 	strd	r5, r4, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800fa56:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa5a:	f7f7 fe6f 	bl	800773c <HAL_GPIO_Init>
}
 800fa5e:	b007      	add	sp, #28
 800fa60:	bd30      	pop	{r4, r5, pc}
 800fa62:	bf00      	nop
 800fa64:	40021000 	.word	0x40021000
 800fa68:	20004cc8 	.word	0x20004cc8

0800fa6c <TIM2_CNT_MspDeinit>:

void TIM2_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM2_CLK_DISABLE();
 800fa6c:	491e      	ldr	r1, [pc, #120]	; (800fae8 <TIM2_CNT_MspDeinit+0x7c>)

	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800fa6e:	4a1f      	ldr	r2, [pc, #124]	; (800faec <TIM2_CNT_MspDeinit+0x80>)
	__HAL_RCC_TIM2_CLK_DISABLE();
 800fa70:	69cb      	ldr	r3, [r1, #28]
 800fa72:	f023 0301 	bic.w	r3, r3, #1
{
 800fa76:	b510      	push	{r4, lr}
	__HAL_RCC_TIM2_CLK_DISABLE();
 800fa78:	61cb      	str	r3, [r1, #28]
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800fa7a:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fa7e:	2b01      	cmp	r3, #1
{
 800fa80:	4604      	mov	r4, r0
	if(counter.state==COUNTER_ETR||counter.state==COUNTER_REF){
 800fa82:	d021      	beq.n	800fac8 <TIM2_CNT_MspDeinit+0x5c>
 800fa84:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fa88:	2b04      	cmp	r3, #4
 800fa8a:	d01d      	beq.n	800fac8 <TIM2_CNT_MspDeinit+0x5c>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);

	}else if(counter.state==COUNTER_IC||counter.state == COUNTER_TI){
 800fa8c:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	d00d      	beq.n	800fab0 <TIM2_CNT_MspDeinit+0x44>
 800fa94:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fa98:	2b03      	cmp	r3, #3
 800fa9a:	d009      	beq.n	800fab0 <TIM2_CNT_MspDeinit+0x44>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
	}

	__HAL_RCC_TIM2_FORCE_RESET();
 800fa9c:	4b12      	ldr	r3, [pc, #72]	; (800fae8 <TIM2_CNT_MspDeinit+0x7c>)
 800fa9e:	691a      	ldr	r2, [r3, #16]
 800faa0:	f042 0201 	orr.w	r2, r2, #1
 800faa4:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM2_RELEASE_RESET();
 800faa6:	691a      	ldr	r2, [r3, #16]
 800faa8:	f022 0201 	bic.w	r2, r2, #1
 800faac:	611a      	str	r2, [r3, #16]
}
 800faae:	bd10      	pop	{r4, pc}
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800fab0:	2103      	movs	r1, #3
 800fab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fab6:	f7f7 ffef 	bl	8007a98 <HAL_GPIO_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 800faba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fabc:	f7f7 fc30 	bl	8007320 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 800fac0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fac2:	f7f7 fc2d 	bl	8007320 <HAL_DMA_DeInit>
 800fac6:	e7e9      	b.n	800fa9c <TIM2_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);		/* TIM2 GPIO Configuration PA0 -> TIM2_ETR */
 800fac8:	2101      	movs	r1, #1
 800faca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800face:	f7f7 ffe3 	bl	8007a98 <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(DMA1_Channel2_IRQn);
 800fad2:	200c      	movs	r0, #12
 800fad4:	f7f7 f932 	bl	8006d3c <HAL_NVIC_DisableIRQ>
		HAL_DMA_UnRegisterCallback(&hdma_tim2_up, HAL_DMA_XFER_CPLT_CB_ID);
 800fad8:	2100      	movs	r1, #0
 800fada:	4805      	ldr	r0, [pc, #20]	; (800faf0 <TIM2_CNT_MspDeinit+0x84>)
 800fadc:	f7f7 fe00 	bl	80076e0 <HAL_DMA_UnRegisterCallback>
		HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 800fae0:	6a20      	ldr	r0, [r4, #32]
 800fae2:	f7f7 fc1d 	bl	8007320 <HAL_DMA_DeInit>
 800fae6:	e7d9      	b.n	800fa9c <TIM2_CNT_MspDeinit+0x30>
 800fae8:	40021000 	.word	0x40021000
 800faec:	20004cc8 	.word	0x20004cc8
 800faf0:	2000eac4 	.word	0x2000eac4

0800faf4 <TIM4_CNT_MspDeinit>:

void TIM4_CNT_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM4_CLK_DISABLE();
 800faf4:	4918      	ldr	r1, [pc, #96]	; (800fb58 <TIM4_CNT_MspDeinit+0x64>)

	if(counter.state==COUNTER_REF){
 800faf6:	4a19      	ldr	r2, [pc, #100]	; (800fb5c <TIM4_CNT_MspDeinit+0x68>)
{
 800faf8:	b508      	push	{r3, lr}
	__HAL_RCC_TIM4_CLK_DISABLE();
 800fafa:	69cb      	ldr	r3, [r1, #28]
 800fafc:	f023 0304 	bic.w	r3, r3, #4
 800fb00:	61cb      	str	r3, [r1, #28]
	if(counter.state==COUNTER_REF){
 800fb02:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fb06:	2b04      	cmp	r3, #4
 800fb08:	d01a      	beq.n	800fb40 <TIM4_CNT_MspDeinit+0x4c>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);

	} else if(counter.state==COUNTER_IC||counter.state==COUNTER_TI){
 800fb0a:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fb0e:	2b02      	cmp	r3, #2
 800fb10:	d012      	beq.n	800fb38 <TIM4_CNT_MspDeinit+0x44>
 800fb12:	f892 33b8 	ldrb.w	r3, [r2, #952]	; 0x3b8
 800fb16:	2b03      	cmp	r3, #3
 800fb18:	d00e      	beq.n	800fb38 <TIM4_CNT_MspDeinit+0x44>
		HAL_NVIC_DisableIRQ(TIM4_IRQn);

	}	else if(counter.state==COUNTER_ETR){
 800fb1a:	f892 13b8 	ldrb.w	r1, [r2, #952]	; 0x3b8
 800fb1e:	b2c9      	uxtb	r1, r1
 800fb20:	2901      	cmp	r1, #1
 800fb22:	d014      	beq.n	800fb4e <TIM4_CNT_MspDeinit+0x5a>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
	}

	__HAL_RCC_TIM4_FORCE_RESET();
 800fb24:	4b0c      	ldr	r3, [pc, #48]	; (800fb58 <TIM4_CNT_MspDeinit+0x64>)
 800fb26:	691a      	ldr	r2, [r3, #16]
 800fb28:	f042 0204 	orr.w	r2, r2, #4
 800fb2c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800fb2e:	691a      	ldr	r2, [r3, #16]
 800fb30:	f022 0204 	bic.w	r2, r2, #4
 800fb34:	611a      	str	r2, [r3, #16]
}
 800fb36:	bd08      	pop	{r3, pc}
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800fb38:	201e      	movs	r0, #30
 800fb3a:	f7f7 f8ff 	bl	8006d3c <HAL_NVIC_DisableIRQ>
 800fb3e:	e7f1      	b.n	800fb24 <TIM4_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800fb40:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fb44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fb48:	f7f7 ffa6 	bl	8007a98 <HAL_GPIO_DeInit>
 800fb4c:	e7ea      	b.n	800fb24 <TIM4_CNT_MspDeinit+0x30>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 800fb4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fb52:	f7f7 ffa1 	bl	8007a98 <HAL_GPIO_DeInit>
 800fb56:	e7e5      	b.n	800fb24 <TIM4_CNT_MspDeinit+0x30>
 800fb58:	40021000 	.word	0x40021000
 800fb5c:	20004cc8 	.word	0x20004cc8

0800fb60 <COUNTER_PeriodElapsedCallback>:
 * @params htim:	TIM handler
 * @retval None
 */
void COUNTER_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb60:	6803      	ldr	r3, [r0, #0]
 800fb62:	691a      	ldr	r2, [r3, #16]
 800fb64:	07d1      	lsls	r1, r2, #31
 800fb66:	d502      	bpl.n	800fb6e <COUNTER_PeriodElapsedCallback+0xe>
	{
		if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800fb68:	68da      	ldr	r2, [r3, #12]
 800fb6a:	07d2      	lsls	r2, r2, #31
 800fb6c:	d400      	bmi.n	800fb70 <COUNTER_PeriodElapsedCallback+0x10>
		{
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
			counterPeriodElapsedCallback(htim);
		}
	}
}
 800fb6e:	4770      	bx	lr
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fb70:	f06f 0201 	mvn.w	r2, #1
 800fb74:	611a      	str	r2, [r3, #16]
			counterPeriodElapsedCallback(htim);
 800fb76:	f7f3 bebd 	b.w	80038f4 <counterPeriodElapsedCallback>
 800fb7a:	bf00      	nop

0800fb7c <TIM_counter_etr_init>:
 * @params None
 * @retval None
 */
void TIM_counter_etr_init(void){
	/* Initialized as a first mode */
	__HAL_RCC_TIM2_FORCE_RESET();
 800fb7c:	4b32      	ldr	r3, [pc, #200]	; (800fc48 <TIM_counter_etr_init+0xcc>)
 800fb7e:	691a      	ldr	r2, [r3, #16]
 800fb80:	f042 0201 	orr.w	r2, r2, #1
void TIM_counter_etr_init(void){
 800fb84:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM2_FORCE_RESET();
 800fb86:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM2_RELEASE_RESET();
 800fb88:	691a      	ldr	r2, [r3, #16]
 800fb8a:	f022 0201 	bic.w	r2, r2, #1
 800fb8e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_FORCE_RESET();
 800fb90:	691a      	ldr	r2, [r3, #16]
 800fb92:	f042 0204 	orr.w	r2, r2, #4
 800fb96:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 800fb98:	691a      	ldr	r2, [r3, #16]
 800fb9a:	f022 0204 	bic.w	r2, r2, #4
 800fb9e:	611a      	str	r2, [r3, #16]
 * @note		HAL function for overclocking TIM2 does not work.
 * @params None
 * @retval None
 */
void TIM_doubleClockVal(void){
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fba2:	01db      	lsls	r3, r3, #7
void TIM_counter_etr_init(void){
 800fba4:	b08c      	sub	sp, #48	; 0x30
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fba6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fbaa:	d445      	bmi.n	800fc38 <TIM_counter_etr_init+0xbc>
	}	else {
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800fbac:	f7f8 ffa4 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fbb0:	4e26      	ldr	r6, [pc, #152]	; (800fc4c <TIM_counter_etr_init+0xd0>)
 800fbb2:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800fbb6:	4c26      	ldr	r4, [pc, #152]	; (800fc50 <TIM_counter_etr_init+0xd4>)
	MX_TIM4_Init();
 800fbb8:	f7ff fe18 	bl	800f7ec <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800fbbc:	2500      	movs	r5, #0
	htim2.Instance = TIM2;
 800fbbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800fbc2:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_TIM_Base_Init(&htim2);
 800fbc6:	4620      	mov	r0, r4
	htim2.Instance = TIM2;
 800fbc8:	6022      	str	r2, [r4, #0]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800fbca:	60e3      	str	r3, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fbcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fbd0:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fbd2:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim2);
 800fbd4:	f7f9 f988 	bl	8008ee8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fbd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fbdc:	a903      	add	r1, sp, #12
 800fbde:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fbe0:	9303      	str	r3, [sp, #12]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800fbe2:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sClockSourceConfig.ClockFilter = 0;
 800fbe6:	9506      	str	r5, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fbe8:	f7fa fb00 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800fbec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800fbf0:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800fbf2:	a907      	add	r1, sp, #28
 800fbf4:	4620      	mov	r0, r4
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800fbf6:	9207      	str	r2, [sp, #28]
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800fbf8:	9308      	str	r3, [sp, #32]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800fbfa:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800fbfe:	f7fa fdc1 	bl	800a784 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fc02:	4669      	mov	r1, sp
 800fc04:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fc06:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fc08:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fc0a:	f7fb fdf9 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	68da      	ldr	r2, [r3, #12]
 800fc12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fc16:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800fc18:	699a      	ldr	r2, [r3, #24]
 800fc1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fc1e:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 800fc20:	699a      	ldr	r2, [r3, #24]
 800fc22:	f042 0203 	orr.w	r2, r2, #3
 800fc26:	619a      	str	r2, [r3, #24]
	counter.tim4PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 800fc28:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800fc2c:	f7f8 ff64 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fc30:	f8c6 03bc 	str.w	r0, [r6, #956]	; 0x3bc
}
 800fc34:	b00c      	add	sp, #48	; 0x30
 800fc36:	bd70      	pop	{r4, r5, r6, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fc38:	f7f8 ff5e 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fc3c:	4e03      	ldr	r6, [pc, #12]	; (800fc4c <TIM_counter_etr_init+0xd0>)
 800fc3e:	0040      	lsls	r0, r0, #1
 800fc40:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
 800fc44:	e7b7      	b.n	800fbb6 <TIM_counter_etr_init+0x3a>
 800fc46:	bf00      	nop
 800fc48:	40021000 	.word	0x40021000
 800fc4c:	20004cc8 	.word	0x20004cc8
 800fc50:	2000eb4c 	.word	0x2000eb4c

0800fc54 <TIM_counter_ref_init>:
void TIM_counter_ref_init(void){
 800fc54:	b530      	push	{r4, r5, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fc56:	4b27      	ldr	r3, [pc, #156]	; (800fcf4 <TIM_counter_ref_init+0xa0>)
 800fc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc5a:	01db      	lsls	r3, r3, #7
void TIM_counter_ref_init(void){
 800fc5c:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fc5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fc62:	d43f      	bmi.n	800fce4 <TIM_counter_ref_init+0x90>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800fc64:	f7f8 ff48 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fc68:	4b23      	ldr	r3, [pc, #140]	; (800fcf8 <TIM_counter_ref_init+0xa4>)
 800fc6a:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800fc6e:	4c23      	ldr	r4, [pc, #140]	; (800fcfc <TIM_counter_ref_init+0xa8>)
	MX_TIM4_Init();
 800fc70:	f7ff fdbc 	bl	800f7ec <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800fc74:	2500      	movs	r5, #0
	htim2.Instance = TIM2;
 800fc76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800fc7a:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_TIM_Base_Init(&htim2);
 800fc7e:	4620      	mov	r0, r4
	htim2.Instance = TIM2;
 800fc80:	6022      	str	r2, [r4, #0]
	htim2.Init.Period = 0xFFFFFFFF;		// full 32 bit 4 294 967 295
 800fc82:	60e3      	str	r3, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fc84:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fc88:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fc8a:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&htim2);
 800fc8c:	f7f9 f92c 	bl	8008ee8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fc90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fc94:	a903      	add	r1, sp, #12
 800fc96:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fc98:	9303      	str	r3, [sp, #12]
	sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800fc9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sClockSourceConfig.ClockFilter = 0;
 800fc9e:	9506      	str	r5, [sp, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fca0:	f7fa faa4 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800fca4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800fca8:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800fcaa:	a907      	add	r1, sp, #28
 800fcac:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800fcae:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800fcb2:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig);
 800fcb6:	f7fa fd65 	bl	800a784 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fcba:	4620      	mov	r0, r4
 800fcbc:	4669      	mov	r1, sp
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fcbe:	9500      	str	r5, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fcc0:	9502      	str	r5, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fcc2:	f7fb fd9d 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 800fcc6:	6823      	ldr	r3, [r4, #0]
 800fcc8:	68da      	ldr	r2, [r3, #12]
 800fcca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fcce:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 800fcd0:	699a      	ldr	r2, [r3, #24]
 800fcd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fcd6:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S;     /* Capture/Compare 1 Selection - CC1 channel is configured as input, IC1 is mapped on TRC */
 800fcd8:	699a      	ldr	r2, [r3, #24]
 800fcda:	f042 0203 	orr.w	r2, r2, #3
 800fcde:	619a      	str	r2, [r3, #24]
}
 800fce0:	b00d      	add	sp, #52	; 0x34
 800fce2:	bd30      	pop	{r4, r5, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fce4:	f7f8 ff08 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fce8:	4b03      	ldr	r3, [pc, #12]	; (800fcf8 <TIM_counter_ref_init+0xa4>)
 800fcea:	0040      	lsls	r0, r0, #1
 800fcec:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
 800fcf0:	e7bd      	b.n	800fc6e <TIM_counter_ref_init+0x1a>
 800fcf2:	bf00      	nop
 800fcf4:	40021000 	.word	0x40021000
 800fcf8:	20004cc8 	.word	0x20004cc8
 800fcfc:	2000eb4c 	.word	0x2000eb4c

0800fd00 <TIM_counter_ic_init>:
void TIM_counter_ic_init(void){
 800fd00:	b530      	push	{r4, r5, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fd02:	4b2d      	ldr	r3, [pc, #180]	; (800fdb8 <TIM_counter_ic_init+0xb8>)
 800fd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd06:	01db      	lsls	r3, r3, #7
void TIM_counter_ic_init(void){
 800fd08:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fd0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fd0e:	d44b      	bmi.n	800fda8 <TIM_counter_ic_init+0xa8>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800fd10:	f7f8 fef2 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fd14:	4b29      	ldr	r3, [pc, #164]	; (800fdbc <TIM_counter_ic_init+0xbc>)
 800fd16:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
	htim2.Instance = TIM2;
 800fd1a:	4c29      	ldr	r4, [pc, #164]	; (800fdc0 <TIM_counter_ic_init+0xc0>)
	MX_TIM4_Init();
 800fd1c:	f7ff fd66 	bl	800f7ec <MX_TIM4_Init>
	htim2.Init.Prescaler = 0;
 800fd20:	2500      	movs	r5, #0
	htim2.Init.Period = 0xFFFFFFFF;
 800fd22:	f04f 32ff 	mov.w	r2, #4294967295
	htim2.Instance = TIM2;
 800fd26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fd2a:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim2);
 800fd2c:	4620      	mov	r0, r4
	htim2.Init.Period = 0xFFFFFFFF;
 800fd2e:	60e2      	str	r2, [r4, #12]
	htim2.Instance = TIM2;
 800fd30:	6021      	str	r1, [r4, #0]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fd32:	61a3      	str	r3, [r4, #24]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fd34:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fd38:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim2);
 800fd3a:	f7f9 f8d5 	bl	8008ee8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fd3e:	a90c      	add	r1, sp, #48	; 0x30
 800fd40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd44:	f841 3d20 	str.w	r3, [r1, #-32]!
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f7fa fa4f 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim2);
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f7f9 fec2 	bl	8009ad8 <HAL_TIM_IC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fd54:	a901      	add	r1, sp, #4
 800fd56:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fd58:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fd5a:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fd5c:	f7fb fd50 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800fd60:	2301      	movs	r3, #1
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800fd62:	462a      	mov	r2, r5
 800fd64:	a908      	add	r1, sp, #32
 800fd66:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800fd68:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800fd6a:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800fd6c:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800fd70:	f7fa f8c4 	bl	8009efc <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800fd74:	a908      	add	r1, sp, #32
 800fd76:	4620      	mov	r0, r4
 800fd78:	2204      	movs	r2, #4
 800fd7a:	f7fa f8bf 	bl	8009efc <HAL_TIM_IC_ConfigChannel>
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	699a      	ldr	r2, [r3, #24]
 800fd82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fd86:	f042 0201 	orr.w	r2, r2, #1
 800fd8a:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800fd8c:	6a1a      	ldr	r2, [r3, #32]
 800fd8e:	f042 0211 	orr.w	r2, r2, #17
 800fd92:	621a      	str	r2, [r3, #32]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 800fd94:	68da      	ldr	r2, [r3, #12]
 800fd96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd9a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 800fd9c:	68da      	ldr	r2, [r3, #12]
 800fd9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fda2:	60da      	str	r2, [r3, #12]
}
 800fda4:	b00d      	add	sp, #52	; 0x34
 800fda6:	bd30      	pop	{r4, r5, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fda8:	f7f8 fea6 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fdac:	4b03      	ldr	r3, [pc, #12]	; (800fdbc <TIM_counter_ic_init+0xbc>)
 800fdae:	0040      	lsls	r0, r0, #1
 800fdb0:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
 800fdb4:	e7b1      	b.n	800fd1a <TIM_counter_ic_init+0x1a>
 800fdb6:	bf00      	nop
 800fdb8:	40021000 	.word	0x40021000
 800fdbc:	20004cc8 	.word	0x20004cc8
 800fdc0:	2000eb4c 	.word	0x2000eb4c

0800fdc4 <TIM_counter_ti_init>:
void TIM_counter_ti_init(void){
 800fdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fdc6:	4b69      	ldr	r3, [pc, #420]	; (800ff6c <TIM_counter_ti_init+0x1a8>)
 800fdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdca:	01db      	lsls	r3, r3, #7
void TIM_counter_ti_init(void){
 800fdcc:	b08d      	sub	sp, #52	; 0x34
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800fdce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	if (RCC->CFGR3&RCC_TIM2CLK_PLLCLK){
 800fdd2:	f100 80bd 	bmi.w	800ff50 <TIM_counter_ti_init+0x18c>
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2);
 800fdd6:	f7f8 fe8f 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fdda:	4e65      	ldr	r6, [pc, #404]	; (800ff70 <TIM_counter_ti_init+0x1ac>)
 800fddc:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
	if(counter.state == COUNTER_REF){
 800fde0:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
	htim4.Instance = TIM4;
 800fde4:	4b63      	ldr	r3, [pc, #396]	; (800ff74 <TIM_counter_ti_init+0x1b0>)
 800fde6:	4964      	ldr	r1, [pc, #400]	; (800ff78 <TIM_counter_ti_init+0x1b4>)
 800fde8:	6019      	str	r1, [r3, #0]
	if(counter.state == COUNTER_REF){
 800fdea:	2a04      	cmp	r2, #4
 800fdec:	f000 80b7 	beq.w	800ff5e <TIM_counter_ti_init+0x19a>
	}else if(counter.state == COUNTER_ETR){
 800fdf0:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800fdf4:	2a01      	cmp	r2, #1
 800fdf6:	d007      	beq.n	800fe08 <TIM_counter_ti_init+0x44>
	}else if((counter.state == COUNTER_IC) || counter.state == COUNTER_TI){
 800fdf8:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800fdfc:	2a02      	cmp	r2, #2
 800fdfe:	d003      	beq.n	800fe08 <TIM_counter_ti_init+0x44>
 800fe00:	f896 23b8 	ldrb.w	r2, [r6, #952]	; 0x3b8
 800fe04:	2a03      	cmp	r2, #3
 800fe06:	d105      	bne.n	800fe14 <TIM_counter_ti_init+0x50>
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800fe08:	f641 411f 	movw	r1, #7199	; 0x1c1f
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800fe0c:	f240 32e7 	movw	r2, #999	; 0x3e7
		htim4.Init.Prescaler = TIM4_PSC;			// by default 7199 for ETR mode
 800fe10:	6059      	str	r1, [r3, #4]
		htim4.Init.Period = TIM4_ARR;					// by default 999 for ETR mode
 800fe12:	60da      	str	r2, [r3, #12]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe14:	2400      	movs	r4, #0
	HAL_TIM_Base_Init(&htim4);
 800fe16:	4857      	ldr	r0, [pc, #348]	; (800ff74 <TIM_counter_ti_init+0x1b0>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe18:	609c      	str	r4, [r3, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe1a:	611c      	str	r4, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe1c:	619c      	str	r4, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 800fe1e:	f7f9 f863 	bl	8008ee8 <HAL_TIM_Base_Init>
	if(counter.state == COUNTER_REF){
 800fe22:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800fe26:	4853      	ldr	r0, [pc, #332]	; (800ff74 <TIM_counter_ti_init+0x1b0>)
	if(counter.state == COUNTER_REF){
 800fe28:	2b04      	cmp	r3, #4
 800fe2a:	af0c      	add	r7, sp, #48	; 0x30
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800fe2c:	bf0c      	ite	eq
 800fe2e:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe32:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800fe36:	f847 3d10 	str.w	r3, [r7, #-16]!
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800fe3a:	4639      	mov	r1, r7
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800fe3c:	bf04      	itt	eq
 800fe3e:	e9cd 4409 	strdeq	r4, r4, [sp, #36]	; 0x24
		sClockSourceConfig.ClockFilter = 0;
 800fe42:	940b      	streq	r4, [sp, #44]	; 0x2c
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800fe44:	f7fa f9d2 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800fe48:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800fe4c:	2220      	movs	r2, #32
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800fe4e:	2b02      	cmp	r3, #2
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800fe50:	9204      	str	r2, [sp, #16]
	if((counter.state == COUNTER_IC) || (counter.state == COUNTER_TI)){
 800fe52:	f000 8089 	beq.w	800ff68 <TIM_counter_ti_init+0x1a4>
 800fe56:	f896 33b8 	ldrb.w	r3, [r6, #952]	; 0x3b8
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800fe5a:	2b03      	cmp	r3, #3
 800fe5c:	bf0c      	ite	eq
 800fe5e:	2300      	moveq	r3, #0
 800fe60:	2380      	movne	r3, #128	; 0x80
	htim2.Instance = TIM2;
 800fe62:	4c46      	ldr	r4, [pc, #280]	; (800ff7c <TIM_counter_ti_init+0x1b8>)
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800fe64:	4843      	ldr	r0, [pc, #268]	; (800ff74 <TIM_counter_ti_init+0x1b0>)
 800fe66:	9306      	str	r3, [sp, #24]
 800fe68:	a904      	add	r1, sp, #16
 800fe6a:	f7fb fcc9 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	htim2.Init.Prescaler = 0;
 800fe6e:	2500      	movs	r5, #0
	htim2.Init.Period = 0xFFFFFFFF;
 800fe70:	f04f 32ff 	mov.w	r2, #4294967295
	htim2.Instance = TIM2;
 800fe74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fe78:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim2);
 800fe7a:	4620      	mov	r0, r4
	htim2.Init.Period = 0xFFFFFFFF;
 800fe7c:	60e2      	str	r2, [r4, #12]
	htim2.Instance = TIM2;
 800fe7e:	6021      	str	r1, [r4, #0]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800fe80:	61a3      	str	r3, [r4, #24]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe82:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe86:	6125      	str	r5, [r4, #16]
	HAL_TIM_Base_Init(&htim2);
 800fe88:	f7f9 f82e 	bl	8008ee8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fe90:	a904      	add	r1, sp, #16
 800fe92:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fe94:	9304      	str	r3, [sp, #16]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800fe96:	f7fa f9a9 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(&htim2);
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f7f9 fe1c 	bl	8009ad8 <HAL_TIM_IC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fea0:	a901      	add	r1, sp, #4
 800fea2:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fea4:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fea6:	9503      	str	r5, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800fea8:	f7fb fcaa 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800feac:	2301      	movs	r3, #1
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800feae:	462a      	mov	r2, r5
 800feb0:	4639      	mov	r1, r7
 800feb2:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800feb4:	9309      	str	r3, [sp, #36]	; 0x24
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800feb6:	9508      	str	r5, [sp, #32]
	sConfigIC.ICFilter = 0;
 800feb8:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800febc:	f7fa f81e 	bl	8009efc <HAL_TIM_IC_ConfigChannel>
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 800fec0:	4639      	mov	r1, r7
 800fec2:	4620      	mov	r0, r4
 800fec4:	2204      	movs	r2, #4
 800fec6:	f7fa f819 	bl	8009efc <HAL_TIM_IC_ConfigChannel>
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800feca:	6823      	ldr	r3, [r4, #0]
void TIM_TI_Init(void)
{
	/* Do not run timer after initialization, wait for start command */
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
	/* Disable time elapse interrupt */
	HAL_TIM_Base_Stop_IT(&htim4);
 800fecc:	4829      	ldr	r0, [pc, #164]	; (800ff74 <TIM_counter_ti_init+0x1b0>)
	htim2.Instance->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 800fece:	699a      	ldr	r2, [r3, #24]
 800fed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fed4:	f042 0201 	orr.w	r2, r2, #1
 800fed8:	619a      	str	r2, [r3, #24]
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 800feda:	6a1a      	ldr	r2, [r3, #32]
 800fedc:	f042 0211 	orr.w	r2, r2, #17
 800fee0:	621a      	str	r2, [r3, #32]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1); /* Capture/Compare 1 DMA request */
 800fee2:	68da      	ldr	r2, [r3, #12]
 800fee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fee8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2); /* Capture/Compare 1 DMA request */
 800feea:	68da      	ldr	r2, [r3, #12]
 800feec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fef0:	60da      	str	r2, [r3, #12]
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	f022 0201 	bic.w	r2, r2, #1
 800fef8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 800fefa:	f7f9 fa0d 	bl	8009318 <HAL_TIM_Base_Stop_IT>
	/* Disable capturing */
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	6a1a      	ldr	r2, [r3, #32]
 800ff02:	f022 0201 	bic.w	r2, r2, #1
 800ff06:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800ff08:	6a1a      	ldr	r2, [r3, #32]
 800ff0a:	f022 0210 	bic.w	r2, r2, #16
 800ff0e:	621a      	str	r2, [r3, #32]
	/* Set IC1 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ff10:	699a      	ldr	r2, [r3, #24]
 800ff12:	f022 020c 	bic.w	r2, r2, #12
 800ff16:	619a      	str	r2, [r3, #24]
	/* Set IC2 prescaler to 1 */
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ff18:	699a      	ldr	r2, [r3, #24]
 800ff1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ff1e:	619a      	str	r2, [r3, #24]
	/* Select the valid trigger input TI1FP1 */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 800ff20:	689a      	ldr	r2, [r3, #8]
 800ff22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ff26:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 800ff28:	689a      	ldr	r2, [r3, #8]
 800ff2a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800ff2e:	609a      	str	r2, [r3, #8]
	/* Configure the slave mode controller in Combined reset + trigger mode */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 800ff30:	689a      	ldr	r2, [r3, #8]
 800ff32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ff36:	f022 0207 	bic.w	r2, r2, #7
 800ff3a:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 800ff3c:	689a      	ldr	r2, [r3, #8]
 800ff3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ff42:	609a      	str	r2, [r3, #8]

	/* The very first number transfered by DMA on first event (timer triggered)
		 is random number -> throw away */
	counter.bin = BIN0;
 800ff44:	f886 53cd 	strb.w	r5, [r6, #973]	; 0x3cd
	/* AB event sequence first */
	counter.abba = BIN0;
 800ff48:	f886 53ce 	strb.w	r5, [r6, #974]	; 0x3ce
}
 800ff4c:	b00d      	add	sp, #52	; 0x34
 800ff4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		counter.tim2PrphClk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM2) * 2;
 800ff50:	f7f8 fdd2 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800ff54:	4e06      	ldr	r6, [pc, #24]	; (800ff70 <TIM_counter_ti_init+0x1ac>)
 800ff56:	0040      	lsls	r0, r0, #1
 800ff58:	f8c6 03c0 	str.w	r0, [r6, #960]	; 0x3c0
 800ff5c:	e740      	b.n	800fde0 <TIM_counter_ti_init+0x1c>
		htim4.Init.Prescaler = 59999;
 800ff5e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800ff62:	605a      	str	r2, [r3, #4]
		htim4.Init.Period = 59999;
 800ff64:	60da      	str	r2, [r3, #12]
 800ff66:	e755      	b.n	800fe14 <TIM_counter_ti_init+0x50>
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	e77a      	b.n	800fe62 <TIM_counter_ti_init+0x9e>
 800ff6c:	40021000 	.word	0x40021000
 800ff70:	20004cc8 	.word	0x20004cc8
 800ff74:	2000ea84 	.word	0x2000ea84
 800ff78:	40000800 	.word	0x40000800
 800ff7c:	2000eb4c 	.word	0x2000eb4c

0800ff80 <TIM_etr_deinit>:
void TIM_etr_deinit(void){
 800ff80:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800ff82:	4804      	ldr	r0, [pc, #16]	; (800ff94 <TIM_etr_deinit+0x14>)
 800ff84:	f7f9 f8a6 	bl	80090d4 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800ff88:	4803      	ldr	r0, [pc, #12]	; (800ff98 <TIM_etr_deinit+0x18>)
}
 800ff8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_DeInit(&htim4);
 800ff8e:	f7f9 b8a1 	b.w	80090d4 <HAL_TIM_Base_DeInit>
 800ff92:	bf00      	nop
 800ff94:	2000eb4c 	.word	0x2000eb4c
 800ff98:	2000ea84 	.word	0x2000ea84

0800ff9c <TIM_ref_deinit>:
 800ff9c:	b508      	push	{r3, lr}
 800ff9e:	4804      	ldr	r0, [pc, #16]	; (800ffb0 <TIM_ref_deinit+0x14>)
 800ffa0:	f7f9 f898 	bl	80090d4 <HAL_TIM_Base_DeInit>
 800ffa4:	4803      	ldr	r0, [pc, #12]	; (800ffb4 <TIM_ref_deinit+0x18>)
 800ffa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ffaa:	f7f9 b893 	b.w	80090d4 <HAL_TIM_Base_DeInit>
 800ffae:	bf00      	nop
 800ffb0:	2000eb4c 	.word	0x2000eb4c
 800ffb4:	2000ea84 	.word	0x2000ea84

0800ffb8 <TIM_ic_deinit>:
 800ffb8:	b508      	push	{r3, lr}
 800ffba:	4804      	ldr	r0, [pc, #16]	; (800ffcc <TIM_ic_deinit+0x14>)
 800ffbc:	f7f9 f88a 	bl	80090d4 <HAL_TIM_Base_DeInit>
 800ffc0:	4803      	ldr	r0, [pc, #12]	; (800ffd0 <TIM_ic_deinit+0x18>)
 800ffc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ffc6:	f7f9 b885 	b.w	80090d4 <HAL_TIM_Base_DeInit>
 800ffca:	bf00      	nop
 800ffcc:	2000eb4c 	.word	0x2000eb4c
 800ffd0:	2000ea84 	.word	0x2000ea84

0800ffd4 <TIM_ti_deinit>:
void TIM_ti_deinit(void){
 800ffd4:	b510      	push	{r4, lr}
	HAL_TIM_Base_DeInit(&htim2);
 800ffd6:	4c11      	ldr	r4, [pc, #68]	; (801001c <TIM_ti_deinit+0x48>)
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f7f9 f87b 	bl	80090d4 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim4);
 800ffde:	4810      	ldr	r0, [pc, #64]	; (8010020 <TIM_ti_deinit+0x4c>)
 800ffe0:	f7f9 f878 	bl	80090d4 <HAL_TIM_Base_DeInit>
 * @retval None
 */
void TIM_TI_Deinit(void)
{
	/* Disable capturing*/
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	6a1a      	ldr	r2, [r3, #32]
 800ffe8:	f022 0201 	bic.w	r2, r2, #1
 800ffec:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 800ffee:	6a1a      	ldr	r2, [r3, #32]
 800fff0:	f022 0210 	bic.w	r2, r2, #16
 800fff4:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP1 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fff6:	6a1a      	ldr	r2, [r3, #32]
 800fff8:	f022 020a 	bic.w	r2, r2, #10
 800fffc:	621a      	str	r2, [r3, #32]
	/* Select the active polarity for TI1FP2 (rising edge) */
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fffe:	6a1a      	ldr	r2, [r3, #32]
 8010000:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010004:	621a      	str	r2, [r3, #32]
	/* Unselect the trigger input */
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 8010006:	689a      	ldr	r2, [r3, #8]
 8010008:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801000c:	609a      	str	r2, [r3, #8]
	/* Disable the slave mode controller */
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 801000e:	689a      	ldr	r2, [r3, #8]
 8010010:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010014:	f022 0207 	bic.w	r2, r2, #7
 8010018:	609a      	str	r2, [r3, #8]
}
 801001a:	bd10      	pop	{r4, pc}
 801001c:	2000eb4c 	.word	0x2000eb4c
 8010020:	2000ea84 	.word	0x2000ea84

08010024 <TIM_ETR_Start>:
{
 8010024:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim2);
 8010026:	4d11      	ldr	r5, [pc, #68]	; (801006c <TIM_ETR_Start+0x48>)
	HAL_TIM_Base_Start(&htim4);
 8010028:	4e11      	ldr	r6, [pc, #68]	; (8010070 <TIM_ETR_Start+0x4c>)
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 801002a:	4c12      	ldr	r4, [pc, #72]	; (8010074 <TIM_ETR_Start+0x50>)
	HAL_TIM_Base_Start(&htim2);
 801002c:	4628      	mov	r0, r5
 801002e:	f7f9 f8a1 	bl	8009174 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8010032:	4630      	mov	r0, r6
 8010034:	f7f9 f89e 	bl	8009174 <HAL_TIM_Base_Start>
	HAL_DMA_Start_IT(&hdma_tim2_up, (uint32_t)&htim2.Instance->CCR1, (uint32_t)&counter.counterEtr.buffer, 1);
 8010038:	6829      	ldr	r1, [r5, #0]
 801003a:	480f      	ldr	r0, [pc, #60]	; (8010078 <TIM_ETR_Start+0x54>)
 801003c:	3134      	adds	r1, #52	; 0x34
 801003e:	4622      	mov	r2, r4
 8010040:	2301      	movs	r3, #1
 8010042:	f7f7 fa3d 	bl	80074c0 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8010046:	6828      	ldr	r0, [r5, #0]
 8010048:	68c3      	ldr	r3, [r0, #12]
 801004a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801004e:	60c3      	str	r3, [r0, #12]
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010050:	2201      	movs	r2, #1
 8010052:	2100      	movs	r1, #0
 8010054:	f7fa ffe6 	bl	800b024 <TIM_CCxChannelCmd>
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
 8010058:	6832      	ldr	r2, [r6, #0]
 801005a:	6953      	ldr	r3, [r2, #20]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801005c:	2100      	movs	r1, #0
 801005e:	f043 0301 	orr.w	r3, r3, #1
 8010062:	6153      	str	r3, [r2, #20]
 8010064:	f884 1020 	strb.w	r1, [r4, #32]
}
 8010068:	bd70      	pop	{r4, r5, r6, pc}
 801006a:	bf00      	nop
 801006c:	2000eb4c 	.word	0x2000eb4c
 8010070:	2000ea84 	.word	0x2000ea84
 8010074:	2000506c 	.word	0x2000506c
 8010078:	2000eac4 	.word	0x2000eac4

0801007c <TIM_ETR_Stop>:
{
 801007c:	b508      	push	{r3, lr}
	HAL_DMA_Abort_IT(&hdma_tim2_up);
 801007e:	4808      	ldr	r0, [pc, #32]	; (80100a0 <TIM_ETR_Stop+0x24>)
 8010080:	f7f7 fa92 	bl	80075a8 <HAL_DMA_Abort_IT>
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8010084:	4807      	ldr	r0, [pc, #28]	; (80100a4 <TIM_ETR_Stop+0x28>)
 8010086:	6802      	ldr	r2, [r0, #0]
 8010088:	68d3      	ldr	r3, [r2, #12]
 801008a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801008e:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Stop(&htim2);
 8010090:	f7f9 f8b2 	bl	80091f8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim4);
 8010094:	4804      	ldr	r0, [pc, #16]	; (80100a8 <TIM_ETR_Stop+0x2c>)
}
 8010096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim4);
 801009a:	f7f9 b8ad 	b.w	80091f8 <HAL_TIM_Base_Stop>
 801009e:	bf00      	nop
 80100a0:	2000eac4 	.word	0x2000eac4
 80100a4:	2000eb4c 	.word	0x2000eb4c
 80100a8:	2000ea84 	.word	0x2000ea84

080100ac <TIM_IC_Start>:
{
 80100ac:	b538      	push	{r3, r4, r5, lr}
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80100ae:	4c13      	ldr	r4, [pc, #76]	; (80100fc <TIM_IC_Start+0x50>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 80100b0:	4d13      	ldr	r5, [pc, #76]	; (8010100 <TIM_IC_Start+0x54>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80100b2:	6821      	ldr	r1, [r4, #0]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 80100b4:	4813      	ldr	r0, [pc, #76]	; (8010104 <TIM_IC_Start+0x58>)
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80100b6:	68cb      	ldr	r3, [r1, #12]
 80100b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80100bc:	60cb      	str	r3, [r1, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 80100be:	68cb      	ldr	r3, [r1, #12]
 80100c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80100c4:	60cb      	str	r3, [r1, #12]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 80100c6:	88eb      	ldrh	r3, [r5, #6]
 80100c8:	3134      	adds	r1, #52	; 0x34
 80100ca:	f105 0210 	add.w	r2, r5, #16
 80100ce:	f7f7 f9ad 	bl	800742c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 80100d2:	6821      	ldr	r1, [r4, #0]
 80100d4:	892b      	ldrh	r3, [r5, #8]
 80100d6:	480c      	ldr	r0, [pc, #48]	; (8010108 <TIM_IC_Start+0x5c>)
 80100d8:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 80100dc:	3138      	adds	r1, #56	; 0x38
 80100de:	f7f7 f9a5 	bl	800742c <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim2);
 80100e2:	4620      	mov	r0, r4
 80100e4:	f7f9 f846 	bl	8009174 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 80100e8:	4808      	ldr	r0, [pc, #32]	; (801010c <TIM_IC_Start+0x60>)
 80100ea:	f7f9 f8d3 	bl	8009294 <HAL_TIM_Base_Start_IT>
	htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 80100ee:	6822      	ldr	r2, [r4, #0]
 80100f0:	6a13      	ldr	r3, [r2, #32]
 80100f2:	f043 0311 	orr.w	r3, r3, #17
 80100f6:	6213      	str	r3, [r2, #32]
}
 80100f8:	bd38      	pop	{r3, r4, r5, pc}
 80100fa:	bf00      	nop
 80100fc:	2000eb4c 	.word	0x2000eb4c
 8010100:	20004cc8 	.word	0x20004cc8
 8010104:	2000ea40 	.word	0x2000ea40
 8010108:	2000eb08 	.word	0x2000eb08
 801010c:	2000ea84 	.word	0x2000ea84

08010110 <TIM_IC_Stop>:
{
 8010110:	b510      	push	{r4, lr}
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8010112:	4c0e      	ldr	r4, [pc, #56]	; (801014c <TIM_IC_Stop+0x3c>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8010114:	480e      	ldr	r0, [pc, #56]	; (8010150 <TIM_IC_Stop+0x40>)
	htim2.Instance->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);
 8010116:	6822      	ldr	r2, [r4, #0]
 8010118:	6a13      	ldr	r3, [r2, #32]
 801011a:	f023 0311 	bic.w	r3, r3, #17
 801011e:	6213      	str	r3, [r2, #32]
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8010120:	f7f7 fa28 	bl	8007574 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8010124:	480b      	ldr	r0, [pc, #44]	; (8010154 <TIM_IC_Stop+0x44>)
 8010126:	f7f7 fa25 	bl	8007574 <HAL_DMA_Abort>
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 801012a:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 801012c:	480a      	ldr	r0, [pc, #40]	; (8010158 <TIM_IC_Stop+0x48>)
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 801012e:	68da      	ldr	r2, [r3, #12]
 8010130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010134:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 8010136:	68da      	ldr	r2, [r3, #12]
 8010138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801013c:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Stop_IT(&htim4);
 801013e:	f7f9 f8eb 	bl	8009318 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 8010142:	4620      	mov	r0, r4
}
 8010144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop(&htim2);
 8010148:	f7f9 b856 	b.w	80091f8 <HAL_TIM_Base_Stop>
 801014c:	2000eb4c 	.word	0x2000eb4c
 8010150:	2000ea40 	.word	0x2000ea40
 8010154:	2000eb08 	.word	0x2000eb08
 8010158:	2000ea84 	.word	0x2000ea84

0801015c <TIM_TI_Start>:
{
 801015c:	b538      	push	{r3, r4, r5, lr}
	if(counter.abba == BIN1){
 801015e:	4c59      	ldr	r4, [pc, #356]	; (80102c4 <TIM_TI_Start+0x168>)
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8010160:	4d59      	ldr	r5, [pc, #356]	; (80102c8 <TIM_TI_Start+0x16c>)
	xStartTime = xTaskGetTickCount();
 8010162:	f7fc ffcd 	bl	800d100 <xTaskGetTickCount>
	if(counter.abba == BIN1){
 8010166:	f894 33ce 	ldrb.w	r3, [r4, #974]	; 0x3ce
	xStartTime = xTaskGetTickCount();
 801016a:	4a58      	ldr	r2, [pc, #352]	; (80102cc <TIM_TI_Start+0x170>)
	if(counter.abba == BIN1){
 801016c:	b2db      	uxtb	r3, r3
 801016e:	2b01      	cmp	r3, #1
	xStartTime = xTaskGetTickCount();
 8010170:	6010      	str	r0, [r2, #0]
	if(counter.abba == BIN1){
 8010172:	d055      	beq.n	8010220 <TIM_TI_Start+0xc4>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8010174:	6829      	ldr	r1, [r5, #0]
 8010176:	4856      	ldr	r0, [pc, #344]	; (80102d0 <TIM_TI_Start+0x174>)
 8010178:	2301      	movs	r3, #1
 801017a:	3138      	adds	r1, #56	; 0x38
 801017c:	f504 72e4 	add.w	r2, r4, #456	; 0x1c8
 8010180:	f7f7 f954 	bl	800742c <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 8010184:	f894 33ca 	ldrb.w	r3, [r4, #970]	; 0x3ca
 8010188:	b1b3      	cbz	r3, 80101b8 <TIM_TI_Start+0x5c>
	HAL_TIM_Base_Start(&htim2);
 801018a:	484f      	ldr	r0, [pc, #316]	; (80102c8 <TIM_TI_Start+0x16c>)
 801018c:	f7f8 fff2 	bl	8009174 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8010190:	4850      	ldr	r0, [pc, #320]	; (80102d4 <TIM_TI_Start+0x178>)
 8010192:	f7f9 f87f 	bl	8009294 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8010196:	682b      	ldr	r3, [r5, #0]
 8010198:	68da      	ldr	r2, [r3, #12]
 801019a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801019e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 80101a0:	68da      	ldr	r2, [r3, #12]
 80101a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80101a6:	60da      	str	r2, [r3, #12]
	if(counter.tiMode!=TI_MODE_EVENT_SEQUENCE_INDEP){
 80101a8:	f894 23ca 	ldrb.w	r2, [r4, #970]	; 0x3ca
 80101ac:	b11a      	cbz	r2, 80101b6 <TIM_TI_Start+0x5a>
		htim2.Instance->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);
 80101ae:	6a1a      	ldr	r2, [r3, #32]
 80101b0:	f042 0211 	orr.w	r2, r2, #17
 80101b4:	621a      	str	r2, [r3, #32]
}
 80101b6:	bd38      	pop	{r3, r4, r5, pc}
 80101b8:	4a47      	ldr	r2, [pc, #284]	; (80102d8 <TIM_TI_Start+0x17c>)
			if(counter.eventChan2==EVENT_FALLING){
 80101ba:	f894 13cc 	ldrb.w	r1, [r4, #972]	; 0x3cc
 80101be:	6813      	ldr	r3, [r2, #0]
 80101c0:	2901      	cmp	r1, #1
				timCcerRegCc2eVal |= (uint32_t)TIM_CCER_CC2P;
 80101c2:	bf0c      	ite	eq
 80101c4:	f043 0320 	orreq.w	r3, r3, #32
				timCcerRegCc2eVal &= (uint32_t)~TIM_CCER_CC2P;
 80101c8:	f023 0320 	bicne.w	r3, r3, #32
 80101cc:	6013      	str	r3, [r2, #0]
 * @param  none
 * @retval none
 */
void TIM_TI_ReconfigActiveEdges(void)
{
	if(counter.eventChan1==EVENT_RISING){
 80101ce:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 80101d2:	682a      	ldr	r2, [r5, #0]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80101d4:	6a13      	ldr	r3, [r2, #32]
	if(counter.eventChan1==EVENT_RISING){
 80101d6:	2900      	cmp	r1, #0
 80101d8:	d05b      	beq.n	8010292 <TIM_TI_Start+0x136>
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 80101da:	f023 0308 	bic.w	r3, r3, #8
 80101de:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 80101e0:	6a13      	ldr	r3, [r2, #32]
 80101e2:	f043 0302 	orr.w	r3, r3, #2
 80101e6:	6213      	str	r3, [r2, #32]
	}

	if(counter.eventChan2==EVENT_RISING){
 80101e8:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d057      	beq.n	80102a0 <TIM_TI_Start+0x144>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
	}else{
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 80101f0:	6a13      	ldr	r3, [r2, #32]
 80101f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101f6:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 80101f8:	6a13      	ldr	r3, [r2, #32]
 80101fa:	f043 0320 	orr.w	r3, r3, #32
 80101fe:	6213      	str	r3, [r2, #32]
			HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&timCcerRegCc2eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 8010200:	3220      	adds	r2, #32
 8010202:	2301      	movs	r3, #1
 8010204:	4934      	ldr	r1, [pc, #208]	; (80102d8 <TIM_TI_Start+0x17c>)
 8010206:	4835      	ldr	r0, [pc, #212]	; (80102dc <TIM_TI_Start+0x180>)
 8010208:	f7f7 f910 	bl	800742c <HAL_DMA_Start>
			htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 801020c:	682b      	ldr	r3, [r5, #0]
 801020e:	6a1a      	ldr	r2, [r3, #32]
 8010210:	f022 0210 	bic.w	r2, r2, #16
 8010214:	621a      	str	r2, [r3, #32]
			htim2.Instance->CCER |= TIM_CCER_CC1E;
 8010216:	6a1a      	ldr	r2, [r3, #32]
 8010218:	f042 0201 	orr.w	r2, r2, #1
 801021c:	621a      	str	r2, [r3, #32]
 801021e:	e7b4      	b.n	801018a <TIM_TI_Start+0x2e>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8010220:	6829      	ldr	r1, [r5, #0]
 8010222:	482e      	ldr	r0, [pc, #184]	; (80102dc <TIM_TI_Start+0x180>)
 8010224:	3134      	adds	r1, #52	; 0x34
 8010226:	f104 0210 	add.w	r2, r4, #16
 801022a:	f7f7 f8ff 	bl	800742c <HAL_DMA_Start>
		if(counter.tiMode==TI_MODE_EVENT_SEQUENCE_INDEP){
 801022e:	f894 33ca 	ldrb.w	r3, [r4, #970]	; 0x3ca
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1a9      	bne.n	801018a <TIM_TI_Start+0x2e>
 8010236:	4a2a      	ldr	r2, [pc, #168]	; (80102e0 <TIM_TI_Start+0x184>)
			if(counter.eventChan1==EVENT_FALLING){
 8010238:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 801023c:	6813      	ldr	r3, [r2, #0]
 801023e:	2901      	cmp	r1, #1
				timCcerRegCc1eVal |= (uint32_t)TIM_CCER_CC1P;
 8010240:	bf0c      	ite	eq
 8010242:	f043 0302 	orreq.w	r3, r3, #2
				timCcerRegCc1eVal &= (uint32_t)~TIM_CCER_CC1P;
 8010246:	f023 0302 	bicne.w	r3, r3, #2
 801024a:	6013      	str	r3, [r2, #0]
	if(counter.eventChan1==EVENT_RISING){
 801024c:	f894 13cb 	ldrb.w	r1, [r4, #971]	; 0x3cb
 8010250:	682a      	ldr	r2, [r5, #0]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010252:	6a13      	ldr	r3, [r2, #32]
	if(counter.eventChan1==EVENT_RISING){
 8010254:	bb49      	cbnz	r1, 80102aa <TIM_TI_Start+0x14e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010256:	f023 030a 	bic.w	r3, r3, #10
 801025a:	6213      	str	r3, [r2, #32]
	if(counter.eventChan2==EVENT_RISING){
 801025c:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 8010260:	b35b      	cbz	r3, 80102ba <TIM_TI_Start+0x15e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 8010262:	6a13      	ldr	r3, [r2, #32]
 8010264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010268:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 801026a:	6a13      	ldr	r3, [r2, #32]
 801026c:	f043 0320 	orr.w	r3, r3, #32
 8010270:	6213      	str	r3, [r2, #32]
			HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&timCcerRegCc1eVal, (uint32_t)&(htim2.Instance->CCER), 1);  //TIM2_CCER_ADDR
 8010272:	3220      	adds	r2, #32
 8010274:	2301      	movs	r3, #1
 8010276:	491a      	ldr	r1, [pc, #104]	; (80102e0 <TIM_TI_Start+0x184>)
 8010278:	4815      	ldr	r0, [pc, #84]	; (80102d0 <TIM_TI_Start+0x174>)
 801027a:	f7f7 f8d7 	bl	800742c <HAL_DMA_Start>
			htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 801027e:	682b      	ldr	r3, [r5, #0]
 8010280:	6a1a      	ldr	r2, [r3, #32]
 8010282:	f022 0201 	bic.w	r2, r2, #1
 8010286:	621a      	str	r2, [r3, #32]
			htim2.Instance->CCER |= TIM_CCER_CC2E;
 8010288:	6a1a      	ldr	r2, [r3, #32]
 801028a:	f042 0210 	orr.w	r2, r2, #16
 801028e:	621a      	str	r2, [r3, #32]
 8010290:	e77b      	b.n	801018a <TIM_TI_Start+0x2e>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010292:	f023 030a 	bic.w	r3, r3, #10
 8010296:	6213      	str	r3, [r2, #32]
	if(counter.eventChan2==EVENT_RISING){
 8010298:	f894 33cc 	ldrb.w	r3, [r4, #972]	; 0x3cc
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1a7      	bne.n	80101f0 <TIM_TI_Start+0x94>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80102a0:	6a13      	ldr	r3, [r2, #32]
 80102a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80102a6:	6213      	str	r3, [r2, #32]
 80102a8:	e7aa      	b.n	8010200 <TIM_TI_Start+0xa4>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 80102aa:	f023 0308 	bic.w	r3, r3, #8
 80102ae:	6213      	str	r3, [r2, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 80102b0:	6a13      	ldr	r3, [r2, #32]
 80102b2:	f043 0302 	orr.w	r3, r3, #2
 80102b6:	6213      	str	r3, [r2, #32]
 80102b8:	e7d0      	b.n	801025c <TIM_TI_Start+0x100>
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80102ba:	6a13      	ldr	r3, [r2, #32]
 80102bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80102c0:	6213      	str	r3, [r2, #32]
 80102c2:	e7d6      	b.n	8010272 <TIM_TI_Start+0x116>
 80102c4:	20004cc8 	.word	0x20004cc8
 80102c8:	2000eb4c 	.word	0x2000eb4c
 80102cc:	20004cc0 	.word	0x20004cc0
 80102d0:	2000eb08 	.word	0x2000eb08
 80102d4:	2000ea84 	.word	0x2000ea84
 80102d8:	20000014 	.word	0x20000014
 80102dc:	2000ea40 	.word	0x2000ea40
 80102e0:	20000010 	.word	0x20000010

080102e4 <TIM_TI_Stop>:
{
 80102e4:	b510      	push	{r4, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 80102e6:	480f      	ldr	r0, [pc, #60]	; (8010324 <TIM_TI_Stop+0x40>)
	HAL_TIM_Base_Stop(&htim2);
 80102e8:	4c0f      	ldr	r4, [pc, #60]	; (8010328 <TIM_TI_Stop+0x44>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 80102ea:	f7f7 f943 	bl	8007574 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 80102ee:	480f      	ldr	r0, [pc, #60]	; (801032c <TIM_TI_Stop+0x48>)
 80102f0:	f7f7 f940 	bl	8007574 <HAL_DMA_Abort>
	HAL_TIM_Base_Stop_IT(&htim4);
 80102f4:	480e      	ldr	r0, [pc, #56]	; (8010330 <TIM_TI_Stop+0x4c>)
 80102f6:	f7f9 f80f 	bl	8009318 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim2);
 80102fa:	4620      	mov	r0, r4
 80102fc:	f7f8 ff7c 	bl	80091f8 <HAL_TIM_Base_Stop>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8010300:	6823      	ldr	r3, [r4, #0]
 8010302:	6a1a      	ldr	r2, [r3, #32]
 8010304:	f022 0201 	bic.w	r2, r2, #1
 8010308:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 801030a:	6a1a      	ldr	r2, [r3, #32]
 801030c:	f022 0210 	bic.w	r2, r2, #16
 8010310:	621a      	str	r2, [r3, #32]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8010312:	68da      	ldr	r2, [r3, #12]
 8010314:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010318:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 801031a:	68da      	ldr	r2, [r3, #12]
 801031c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010320:	60da      	str	r2, [r3, #12]
}
 8010322:	bd10      	pop	{r4, pc}
 8010324:	2000ea40 	.word	0x2000ea40
 8010328:	2000eb4c 	.word	0x2000eb4c
 801032c:	2000eb08 	.word	0x2000eb08
 8010330:	2000ea84 	.word	0x2000ea84

08010334 <TIM_IC_DutyCycleDmaRestart>:
{
 8010334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8010338:	4f0d      	ldr	r7, [pc, #52]	; (8010370 <TIM_IC_DutyCycleDmaRestart+0x3c>)
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801033a:	4c0e      	ldr	r4, [pc, #56]	; (8010374 <TIM_IC_DutyCycleDmaRestart+0x40>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 801033c:	4e0e      	ldr	r6, [pc, #56]	; (8010378 <TIM_IC_DutyCycleDmaRestart+0x44>)
 801033e:	4d0f      	ldr	r5, [pc, #60]	; (801037c <TIM_IC_DutyCycleDmaRestart+0x48>)
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8010340:	4638      	mov	r0, r7
 8010342:	f7f7 f917 	bl	8007574 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 8010346:	4620      	mov	r0, r4
 8010348:	f7f7 f914 	bl	8007574 <HAL_DMA_Abort>
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 801034c:	6831      	ldr	r1, [r6, #0]
 801034e:	462a      	mov	r2, r5
 8010350:	4638      	mov	r0, r7
 8010352:	3134      	adds	r1, #52	; 0x34
 8010354:	2301      	movs	r3, #1
 8010356:	f7f7 f869 	bl	800742c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 801035a:	6831      	ldr	r1, [r6, #0]
 801035c:	f505 72dc 	add.w	r2, r5, #440	; 0x1b8
 8010360:	4620      	mov	r0, r4
 8010362:	3138      	adds	r1, #56	; 0x38
 8010364:	2301      	movs	r3, #1
}
 8010366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 801036a:	f7f7 b85f 	b.w	800742c <HAL_DMA_Start>
 801036e:	bf00      	nop
 8010370:	2000ea40 	.word	0x2000ea40
 8010374:	2000eb08 	.word	0x2000eb08
 8010378:	2000eb4c 	.word	0x2000eb4c
 801037c:	20004cd8 	.word	0x20004cd8

08010380 <TIM_IC_DutyCycle_Init>:
{
 8010380:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&htim4);
 8010382:	4836      	ldr	r0, [pc, #216]	; (801045c <TIM_IC_DutyCycle_Init+0xdc>)
 8010384:	f7f8 ffc8 	bl	8009318 <HAL_TIM_Base_Stop_IT>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8010388:	4b35      	ldr	r3, [pc, #212]	; (8010460 <TIM_IC_DutyCycle_Init+0xe0>)
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 801038a:	4936      	ldr	r1, [pc, #216]	; (8010464 <TIM_IC_DutyCycle_Init+0xe4>)
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	6a1a      	ldr	r2, [r3, #32]
 8010390:	f022 0201 	bic.w	r2, r2, #1
 8010394:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 8010396:	6a1a      	ldr	r2, [r3, #32]
 8010398:	f022 0210 	bic.w	r2, r2, #16
 801039c:	621a      	str	r2, [r3, #32]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 801039e:	f891 23c8 	ldrb.w	r2, [r1, #968]	; 0x3c8
 80103a2:	2a01      	cmp	r2, #1
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80103a4:	699a      	ldr	r2, [r3, #24]
	if(counter.icDutyCycle == DUTY_CYCLE_CH1_ENABLED){
 80103a6:	d031      	beq.n	801040c <TIM_IC_DutyCycle_Init+0x8c>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80103a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80103ac:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 80103ae:	699a      	ldr	r2, [r3, #24]
 80103b0:	f022 0203 	bic.w	r2, r2, #3
 80103b4:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_1;
 80103b6:	699a      	ldr	r2, [r3, #24]
 80103b8:	f042 0202 	orr.w	r2, r2, #2
 80103bc:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 80103be:	6a1a      	ldr	r2, [r3, #32]
 80103c0:	f022 0208 	bic.w	r2, r2, #8
 80103c4:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 80103c6:	6a1a      	ldr	r2, [r3, #32]
 80103c8:	f042 0202 	orr.w	r2, r2, #2
 80103cc:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 80103ce:	699a      	ldr	r2, [r3, #24]
 80103d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80103d4:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 80103d6:	699a      	ldr	r2, [r3, #24]
 80103d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103dc:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80103de:	6a1a      	ldr	r2, [r3, #32]
 80103e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80103e4:	621a      	str	r2, [r3, #32]
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 80103e6:	689a      	ldr	r2, [r3, #8]
 80103e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80103ec:	609a      	str	r2, [r3, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 80103ee:	689a      	ldr	r2, [r3, #8]
 80103f0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80103f4:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 80103f6:	689a      	ldr	r2, [r3, #8]
 80103f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80103fc:	f022 0207 	bic.w	r2, r2, #7
 8010400:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_2;
 8010402:	689a      	ldr	r2, [r3, #8]
 8010404:	f042 0204 	orr.w	r2, r2, #4
 8010408:	609a      	str	r2, [r3, #8]
}
 801040a:	bd08      	pop	{r3, pc}
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801040c:	f022 020c 	bic.w	r2, r2, #12
 8010410:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8010412:	699a      	ldr	r2, [r3, #24]
 8010414:	f022 0203 	bic.w	r2, r2, #3
 8010418:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 801041a:	699a      	ldr	r2, [r3, #24]
 801041c:	f042 0201 	orr.w	r2, r2, #1
 8010420:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010422:	6a1a      	ldr	r2, [r3, #32]
 8010424:	f022 020a 	bic.w	r2, r2, #10
 8010428:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 801042a:	699a      	ldr	r2, [r3, #24]
 801042c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010430:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_1;
 8010432:	699a      	ldr	r2, [r3, #24]
 8010434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010438:	619a      	str	r2, [r3, #24]
		htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801043a:	6a1a      	ldr	r2, [r3, #32]
 801043c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010440:	621a      	str	r2, [r3, #32]
		htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 8010442:	6a1a      	ldr	r2, [r3, #32]
 8010444:	f042 0220 	orr.w	r2, r2, #32
 8010448:	621a      	str	r2, [r3, #32]
		htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 801044a:	689a      	ldr	r2, [r3, #8]
 801044c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8010450:	609a      	str	r2, [r3, #8]
		htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 8010452:	689a      	ldr	r2, [r3, #8]
 8010454:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8010458:	609a      	str	r2, [r3, #8]
 801045a:	e7cc      	b.n	80103f6 <TIM_IC_DutyCycle_Init+0x76>
 801045c:	2000ea84 	.word	0x2000ea84
 8010460:	2000eb4c 	.word	0x2000eb4c
 8010464:	20004cc8 	.word	0x20004cc8

08010468 <TIM_IC_DutyCycle_Deinit>:
{
 8010468:	b538      	push	{r3, r4, r5, lr}
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 801046a:	4c25      	ldr	r4, [pc, #148]	; (8010500 <TIM_IC_DutyCycle_Deinit+0x98>)
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 801046c:	4d25      	ldr	r5, [pc, #148]	; (8010504 <TIM_IC_DutyCycle_Deinit+0x9c>)
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 801046e:	6821      	ldr	r1, [r4, #0]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 8010470:	4825      	ldr	r0, [pc, #148]	; (8010508 <TIM_IC_DutyCycle_Deinit+0xa0>)
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC1S;
 8010472:	698b      	ldr	r3, [r1, #24]
 8010474:	f023 0303 	bic.w	r3, r3, #3
 8010478:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC1S_0;
 801047a:	698b      	ldr	r3, [r1, #24]
 801047c:	f043 0301 	orr.w	r3, r3, #1
 8010480:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010482:	6a0b      	ldr	r3, [r1, #32]
 8010484:	f023 030a 	bic.w	r3, r3, #10
 8010488:	620b      	str	r3, [r1, #32]
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_CC2S;
 801048a:	698b      	ldr	r3, [r1, #24]
 801048c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010490:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCMR1 |= TIM_CCMR1_CC2S_0;
 8010492:	698b      	ldr	r3, [r1, #24]
 8010494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010498:	618b      	str	r3, [r1, #24]
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801049a:	6a0b      	ldr	r3, [r1, #32]
 801049c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80104a0:	620b      	str	r3, [r1, #32]
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 80104a2:	688b      	ldr	r3, [r1, #8]
 80104a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104a8:	608b      	str	r3, [r1, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 80104aa:	688b      	ldr	r3, [r1, #8]
 80104ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104b0:	f023 0307 	bic.w	r3, r3, #7
 80104b4:	608b      	str	r3, [r1, #8]
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 80104b6:	88eb      	ldrh	r3, [r5, #6]
 80104b8:	3134      	adds	r1, #52	; 0x34
 80104ba:	f105 0210 	add.w	r2, r5, #16
 80104be:	f7f6 ffb5 	bl	800742c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 80104c2:	6821      	ldr	r1, [r4, #0]
 80104c4:	892b      	ldrh	r3, [r5, #8]
 80104c6:	4811      	ldr	r0, [pc, #68]	; (801050c <TIM_IC_DutyCycle_Deinit+0xa4>)
 80104c8:	f505 72e4 	add.w	r2, r5, #456	; 0x1c8
 80104cc:	3138      	adds	r1, #56	; 0x38
 80104ce:	f7f6 ffad 	bl	800742c <HAL_DMA_Start>
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 80104d2:	6823      	ldr	r3, [r4, #0]
	HAL_TIM_Base_Start_IT(&htim4);
 80104d4:	480e      	ldr	r0, [pc, #56]	; (8010510 <TIM_IC_DutyCycle_Deinit+0xa8>)
	htim2.Instance->DIER |= TIM_DIER_CC1DE;
 80104d6:	68da      	ldr	r2, [r3, #12]
 80104d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80104dc:	60da      	str	r2, [r3, #12]
	htim2.Instance->DIER |= TIM_DIER_CC2DE;
 80104de:	68da      	ldr	r2, [r3, #12]
 80104e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80104e4:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 80104e6:	f7f8 fed5 	bl	8009294 <HAL_TIM_Base_Start_IT>
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 80104ea:	6823      	ldr	r3, [r4, #0]
 80104ec:	6a1a      	ldr	r2, [r3, #32]
 80104ee:	f042 0201 	orr.w	r2, r2, #1
 80104f2:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 80104f4:	6a1a      	ldr	r2, [r3, #32]
 80104f6:	f042 0210 	orr.w	r2, r2, #16
 80104fa:	621a      	str	r2, [r3, #32]
}
 80104fc:	bd38      	pop	{r3, r4, r5, pc}
 80104fe:	bf00      	nop
 8010500:	2000eb4c 	.word	0x2000eb4c
 8010504:	20004cc8 	.word	0x20004cc8
 8010508:	2000ea40 	.word	0x2000ea40
 801050c:	2000eb08 	.word	0x2000eb08
 8010510:	2000ea84 	.word	0x2000ea84

08010514 <TIM_IC_DutyCycle_Start>:
{
 8010514:	b538      	push	{r3, r4, r5, lr}
	HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, 1);
 8010516:	4d16      	ldr	r5, [pc, #88]	; (8010570 <TIM_IC_DutyCycle_Start+0x5c>)
 8010518:	4c16      	ldr	r4, [pc, #88]	; (8010574 <TIM_IC_DutyCycle_Start+0x60>)
 801051a:	6829      	ldr	r1, [r5, #0]
 801051c:	4816      	ldr	r0, [pc, #88]	; (8010578 <TIM_IC_DutyCycle_Start+0x64>)
 801051e:	3134      	adds	r1, #52	; 0x34
 8010520:	4622      	mov	r2, r4
 8010522:	2301      	movs	r3, #1
 8010524:	f7f6 ff82 	bl	800742c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, 1);
 8010528:	6829      	ldr	r1, [r5, #0]
 801052a:	4814      	ldr	r0, [pc, #80]	; (801057c <TIM_IC_DutyCycle_Start+0x68>)
 801052c:	3138      	adds	r1, #56	; 0x38
 801052e:	f504 72dc 	add.w	r2, r4, #440	; 0x1b8
 8010532:	2301      	movs	r3, #1
 8010534:	f7f6 ff7a 	bl	800742c <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim2);
 8010538:	4628      	mov	r0, r5
 801053a:	f7f8 fe1b 	bl	8009174 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 801053e:	4810      	ldr	r0, [pc, #64]	; (8010580 <TIM_IC_DutyCycle_Start+0x6c>)
 8010540:	f7f8 fea8 	bl	8009294 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8010544:	682b      	ldr	r3, [r5, #0]
 8010546:	68da      	ldr	r2, [r3, #12]
 8010548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801054c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC2);
 801054e:	68da      	ldr	r2, [r3, #12]
 8010550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010554:	60da      	str	r2, [r3, #12]
	htim2.Instance->CCER |= TIM_CCER_CC2E;
 8010556:	6a1a      	ldr	r2, [r3, #32]
 8010558:	f042 0210 	orr.w	r2, r2, #16
 801055c:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 801055e:	6a1a      	ldr	r2, [r3, #32]
	counter.bin = BIN0;
 8010560:	2100      	movs	r1, #0
	htim2.Instance->CCER |= TIM_CCER_CC1E;
 8010562:	f042 0201 	orr.w	r2, r2, #1
 8010566:	621a      	str	r2, [r3, #32]
	counter.bin = BIN0;
 8010568:	f884 13bd 	strb.w	r1, [r4, #957]	; 0x3bd
}
 801056c:	bd38      	pop	{r3, r4, r5, pc}
 801056e:	bf00      	nop
 8010570:	2000eb4c 	.word	0x2000eb4c
 8010574:	20004cd8 	.word	0x20004cd8
 8010578:	2000ea40 	.word	0x2000ea40
 801057c:	2000eb08 	.word	0x2000eb08
 8010580:	2000ea84 	.word	0x2000ea84

08010584 <TIM_IC_DutyCycle_Stop>:
{
 8010584:	b508      	push	{r3, lr}
	HAL_DMA_Abort(&hdma_tim2_ch1);
 8010586:	480c      	ldr	r0, [pc, #48]	; (80105b8 <TIM_IC_DutyCycle_Stop+0x34>)
 8010588:	f7f6 fff4 	bl	8007574 <HAL_DMA_Abort>
	HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 801058c:	480b      	ldr	r0, [pc, #44]	; (80105bc <TIM_IC_DutyCycle_Stop+0x38>)
 801058e:	f7f6 fff1 	bl	8007574 <HAL_DMA_Abort>
	htim2.Instance->CCER &= ~TIM_CCER_CC1E;
 8010592:	4b0b      	ldr	r3, [pc, #44]	; (80105c0 <TIM_IC_DutyCycle_Stop+0x3c>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	6a1a      	ldr	r2, [r3, #32]
 8010598:	f022 0201 	bic.w	r2, r2, #1
 801059c:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER &= ~TIM_CCER_CC2E;
 801059e:	6a1a      	ldr	r2, [r3, #32]
 80105a0:	f022 0210 	bic.w	r2, r2, #16
 80105a4:	621a      	str	r2, [r3, #32]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 80105a6:	68da      	ldr	r2, [r3, #12]
 80105a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80105ac:	60da      	str	r2, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC2);
 80105ae:	68da      	ldr	r2, [r3, #12]
 80105b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80105b4:	60da      	str	r2, [r3, #12]
}
 80105b6:	bd08      	pop	{r3, pc}
 80105b8:	2000ea40 	.word	0x2000ea40
 80105bc:	2000eb08 	.word	0x2000eb08
 80105c0:	2000eb4c 	.word	0x2000eb4c

080105c4 <TIM_ETRP_Config>:
	uint32_t smcr = htim2.Instance->SMCR;
 80105c4:	4b34      	ldr	r3, [pc, #208]	; (8010698 <TIM_ETRP_Config+0xd4>)
{
 80105c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t smcr = htim2.Instance->SMCR;
 80105ca:	681c      	ldr	r4, [r3, #0]
	if(freq < (counter.tim2PrphClk / 4)){
 80105cc:	4d33      	ldr	r5, [pc, #204]	; (801069c <TIM_ETRP_Config+0xd8>)
	uint32_t smcr = htim2.Instance->SMCR;
 80105ce:	f8d4 8008 	ldr.w	r8, [r4, #8]
	if(freq < (counter.tim2PrphClk / 4)){
 80105d2:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
{
 80105d6:	ec57 6b10 	vmov	r6, r7, d0
	if(freq < (counter.tim2PrphClk / 4)){
 80105da:	0880      	lsrs	r0, r0, #2
 80105dc:	f7ef ff4a 	bl	8000474 <__aeabi_ui2d>
 80105e0:	4632      	mov	r2, r6
 80105e2:	463b      	mov	r3, r7
 80105e4:	f7f0 fa50 	bl	8000a88 <__aeabi_dcmpgt>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	d142      	bne.n	8010672 <TIM_ETRP_Config+0xae>
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 80105ec:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 80105f0:	0880      	lsrs	r0, r0, #2
 80105f2:	f7ef ff3f 	bl	8000474 <__aeabi_ui2d>
 80105f6:	4632      	mov	r2, r6
 80105f8:	463b      	mov	r3, r7
 80105fa:	f408 5840 	and.w	r8, r8, #12288	; 0x3000
 80105fe:	f7f0 fa2f 	bl	8000a60 <__aeabi_dcmple>
 8010602:	b9f8      	cbnz	r0, 8010644 <TIM_ETRP_Config+0x80>
	} else if ((freq >= (counter.tim2PrphClk / 2)) && (freq < (counter.tim2PrphClk))) {
 8010604:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 8010608:	0840      	lsrs	r0, r0, #1
 801060a:	f7ef ff33 	bl	8000474 <__aeabi_ui2d>
 801060e:	4632      	mov	r2, r6
 8010610:	463b      	mov	r3, r7
 8010612:	f7f0 fa25 	bl	8000a60 <__aeabi_dcmple>
 8010616:	b140      	cbz	r0, 801062a <TIM_ETRP_Config+0x66>
 8010618:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 801061c:	f7ef ff2a 	bl	8000474 <__aeabi_ui2d>
 8010620:	4632      	mov	r2, r6
 8010622:	463b      	mov	r3, r7
 8010624:	f7f0 fa30 	bl	8000a88 <__aeabi_dcmpgt>
 8010628:	bb48      	cbnz	r0, 801067e <TIM_ETRP_Config+0xba>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS){
 801062a:	f5b8 5f40 	cmp.w	r8, #12288	; 0x3000
 801062e:	d007      	beq.n	8010640 <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 8010630:	68a3      	ldr	r3, [r4, #8]
 8010632:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010636:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS;													/* Set ETR prescaler to 8 */
 8010638:	68a3      	ldr	r3, [r4, #8]
 801063a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 801063e:	60a3      	str	r3, [r4, #8]
}
 8010640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((freq >= (counter.tim2PrphClk / 4)) && freq < ((counter.tim2PrphClk / 2))){
 8010644:	f8d5 03c0 	ldr.w	r0, [r5, #960]	; 0x3c0
 8010648:	0840      	lsrs	r0, r0, #1
 801064a:	f7ef ff13 	bl	8000474 <__aeabi_ui2d>
 801064e:	4632      	mov	r2, r6
 8010650:	463b      	mov	r3, r7
 8010652:	f7f0 fa19 	bl	8000a88 <__aeabi_dcmpgt>
 8010656:	2800      	cmp	r0, #0
 8010658:	d0d4      	beq.n	8010604 <TIM_ETRP_Config+0x40>
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_0){
 801065a:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 801065e:	d0ef      	beq.n	8010640 <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 8010660:	68a3      	ldr	r3, [r4, #8]
 8010662:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010666:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_0;												/* Set ETR prescaler to 2 */
 8010668:	68a3      	ldr	r3, [r4, #8]
 801066a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801066e:	60a3      	str	r3, [r4, #8]
 8010670:	e7e6      	b.n	8010640 <TIM_ETRP_Config+0x7c>
		htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;													/* Set ETR prescaler to 1 */
 8010672:	68a3      	ldr	r3, [r4, #8]
 8010674:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010678:	60a3      	str	r3, [r4, #8]
}
 801067a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((smcr & TIM_SMCR_ETPS) != TIM_SMCR_ETPS_1){
 801067e:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 8010682:	d0dd      	beq.n	8010640 <TIM_ETRP_Config+0x7c>
			htim2.Instance->SMCR &= ~TIM_SMCR_ETPS;
 8010684:	68a3      	ldr	r3, [r4, #8]
 8010686:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801068a:	60a3      	str	r3, [r4, #8]
			htim2.Instance->SMCR |= TIM_SMCR_ETPS_1;												/* Set ETR prescaler to 4 */
 801068c:	68a3      	ldr	r3, [r4, #8]
 801068e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010692:	60a3      	str	r3, [r4, #8]
 8010694:	e7d4      	b.n	8010640 <TIM_ETRP_Config+0x7c>
 8010696:	bf00      	nop
 8010698:	2000eb4c 	.word	0x2000eb4c
 801069c:	20004cc8 	.word	0x20004cc8

080106a0 <TIM_IC1_PSC_Config>:
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80106a0:	4b0e      	ldr	r3, [pc, #56]	; (80106dc <TIM_IC1_PSC_Config+0x3c>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	699a      	ldr	r2, [r3, #24]
 80106a6:	f022 020c 	bic.w	r2, r2, #12
 80106aa:	619a      	str	r2, [r3, #24]
	switch(prescVal){
 80106ac:	2804      	cmp	r0, #4
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 80106ae:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 80106b0:	d00f      	beq.n	80106d2 <TIM_IC1_PSC_Config+0x32>
 80106b2:	2808      	cmp	r0, #8
 80106b4:	d009      	beq.n	80106ca <TIM_IC1_PSC_Config+0x2a>
 80106b6:	2802      	cmp	r0, #2
 80106b8:	d003      	beq.n	80106c2 <TIM_IC1_PSC_Config+0x22>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC; break;
 80106ba:	f022 020c 	bic.w	r2, r2, #12
 80106be:	619a      	str	r2, [r3, #24]
}
 80106c0:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_0; break;
 80106c2:	f042 0204 	orr.w	r2, r2, #4
 80106c6:	619a      	str	r2, [r3, #24]
 80106c8:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC; break;
 80106ca:	f042 020c 	orr.w	r2, r2, #12
 80106ce:	619a      	str	r2, [r3, #24]
 80106d0:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC1PSC_1; break;
 80106d2:	f042 0208 	orr.w	r2, r2, #8
 80106d6:	619a      	str	r2, [r3, #24]
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	2000eb4c 	.word	0x2000eb4c

080106e0 <TIM_IC2_PSC_Config>:
	htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80106e0:	4b0e      	ldr	r3, [pc, #56]	; (801071c <TIM_IC2_PSC_Config+0x3c>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	699a      	ldr	r2, [r3, #24]
 80106e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80106ea:	619a      	str	r2, [r3, #24]
	switch(prescVal){
 80106ec:	2804      	cmp	r0, #4
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 80106ee:	699a      	ldr	r2, [r3, #24]
	switch(prescVal){
 80106f0:	d00f      	beq.n	8010712 <TIM_IC2_PSC_Config+0x32>
 80106f2:	2808      	cmp	r0, #8
 80106f4:	d009      	beq.n	801070a <TIM_IC2_PSC_Config+0x2a>
 80106f6:	2802      	cmp	r0, #2
 80106f8:	d003      	beq.n	8010702 <TIM_IC2_PSC_Config+0x22>
		htim2.Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC; break;
 80106fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80106fe:	619a      	str	r2, [r3, #24]
}
 8010700:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_0; break;
 8010702:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010706:	619a      	str	r2, [r3, #24]
 8010708:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC; break;
 801070a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 801070e:	619a      	str	r2, [r3, #24]
 8010710:	4770      	bx	lr
		htim2.Instance->CCMR1 |= TIM_CCMR1_IC2PSC_1; break;
 8010712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010716:	619a      	str	r2, [r3, #24]
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop
 801071c:	2000eb4c 	.word	0x2000eb4c

08010720 <TIM_IC1_RisingFalling>:
	htim2.Instance->CCER |= (TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010720:	4b03      	ldr	r3, [pc, #12]	; (8010730 <TIM_IC1_RisingFalling+0x10>)
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	6a13      	ldr	r3, [r2, #32]
 8010726:	f043 030a 	orr.w	r3, r3, #10
 801072a:	6213      	str	r3, [r2, #32]
}
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	2000eb4c 	.word	0x2000eb4c

08010734 <TIM_IC1_RisingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010734:	4b03      	ldr	r3, [pc, #12]	; (8010744 <TIM_IC1_RisingOnly+0x10>)
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	6a13      	ldr	r3, [r2, #32]
 801073a:	f023 030a 	bic.w	r3, r3, #10
 801073e:	6213      	str	r3, [r2, #32]
}
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	2000eb4c 	.word	0x2000eb4c

08010748 <TIM_IC1_FallingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC1NP);
 8010748:	4b05      	ldr	r3, [pc, #20]	; (8010760 <TIM_IC1_FallingOnly+0x18>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	6a1a      	ldr	r2, [r3, #32]
 801074e:	f022 0208 	bic.w	r2, r2, #8
 8010752:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC1P);
 8010754:	6a1a      	ldr	r2, [r3, #32]
 8010756:	f042 0202 	orr.w	r2, r2, #2
 801075a:	621a      	str	r2, [r3, #32]
}
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	2000eb4c 	.word	0x2000eb4c

08010764 <TIM_IC2_RisingFalling>:
	htim2.Instance->CCER |= (TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010764:	4b03      	ldr	r3, [pc, #12]	; (8010774 <TIM_IC2_RisingFalling+0x10>)
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	6a13      	ldr	r3, [r2, #32]
 801076a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801076e:	6213      	str	r3, [r2, #32]
}
 8010770:	4770      	bx	lr
 8010772:	bf00      	nop
 8010774:	2000eb4c 	.word	0x2000eb4c

08010778 <TIM_IC2_RisingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010778:	4b03      	ldr	r3, [pc, #12]	; (8010788 <TIM_IC2_RisingOnly+0x10>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	6a13      	ldr	r3, [r2, #32]
 801077e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010782:	6213      	str	r3, [r2, #32]
}
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	2000eb4c 	.word	0x2000eb4c

0801078c <TIM_IC2_FallingOnly>:
	htim2.Instance->CCER &= ~(uint16_t)(TIM_CCER_CC2NP);
 801078c:	4b05      	ldr	r3, [pc, #20]	; (80107a4 <TIM_IC2_FallingOnly+0x18>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	6a1a      	ldr	r2, [r3, #32]
 8010792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010796:	621a      	str	r2, [r3, #32]
	htim2.Instance->CCER |= (uint16_t)(TIM_CCER_CC2P);
 8010798:	6a1a      	ldr	r2, [r3, #32]
 801079a:	f042 0220 	orr.w	r2, r2, #32
 801079e:	621a      	str	r2, [r3, #32]
}
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	2000eb4c 	.word	0x2000eb4c

080107a8 <TIM_TI_Sequence_AB>:
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 80107a8:	4b0c      	ldr	r3, [pc, #48]	; (80107dc <TIM_TI_Sequence_AB+0x34>)
	counter.abba = BIN0;
 80107aa:	490d      	ldr	r1, [pc, #52]	; (80107e0 <TIM_TI_Sequence_AB+0x38>)
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	689a      	ldr	r2, [r3, #8]
 80107b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80107b4:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_0 | TIM_SMCR_TS_2;
 80107b6:	689a      	ldr	r2, [r3, #8]
 80107b8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80107bc:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 80107be:	689a      	ldr	r2, [r3, #8]
 80107c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80107c4:	f022 0207 	bic.w	r2, r2, #7
 80107c8:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 80107ca:	689a      	ldr	r2, [r3, #8]
	counter.abba = BIN0;
 80107cc:	2000      	movs	r0, #0
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 80107ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80107d2:	609a      	str	r2, [r3, #8]
	counter.abba = BIN0;
 80107d4:	f881 03ce 	strb.w	r0, [r1, #974]	; 0x3ce
}
 80107d8:	4770      	bx	lr
 80107da:	bf00      	nop
 80107dc:	2000eb4c 	.word	0x2000eb4c
 80107e0:	20004cc8 	.word	0x20004cc8

080107e4 <TIM_TI_Sequence_BA>:
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 80107e4:	4b0c      	ldr	r3, [pc, #48]	; (8010818 <TIM_TI_Sequence_BA+0x34>)
	counter.abba = BIN1;
 80107e6:	490d      	ldr	r1, [pc, #52]	; (801081c <TIM_TI_Sequence_BA+0x38>)
	htim2.Instance->SMCR &= ~TIM_SMCR_TS;
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	689a      	ldr	r2, [r3, #8]
 80107ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80107f0:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_TS_1 | TIM_SMCR_TS_2;
 80107f2:	689a      	ldr	r2, [r3, #8]
 80107f4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80107f8:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR &= ~TIM_SMCR_SMS;
 80107fa:	689a      	ldr	r2, [r3, #8]
 80107fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010800:	f022 0207 	bic.w	r2, r2, #7
 8010804:	609a      	str	r2, [r3, #8]
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 8010806:	689a      	ldr	r2, [r3, #8]
	counter.abba = BIN1;
 8010808:	2001      	movs	r0, #1
	htim2.Instance->SMCR |= TIM_SMCR_SMS_3;
 801080a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801080e:	609a      	str	r2, [r3, #8]
	counter.abba = BIN1;
 8010810:	f881 03ce 	strb.w	r0, [r1, #974]	; 0x3ce
}
 8010814:	4770      	bx	lr
 8010816:	bf00      	nop
 8010818:	2000eb4c 	.word	0x2000eb4c
 801081c:	20004cc8 	.word	0x20004cc8

08010820 <TIM_ARR_PSC_Config>:
 * @brief  Function settings ARR and PSC values of TIM4 (gate time) - ETR, REF
 * @params arr, psc
 * @retval none
 */
void TIM_ARR_PSC_Config(double gateTime)
{
 8010820:	b570      	push	{r4, r5, r6, lr}
 8010822:	ec53 2b10 	vmov	r2, r3, d0
 8010826:	b082      	sub	sp, #8
 8010828:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 801082c:	f7f7 fed6 	bl	80085dc <HAL_RCC_GetPCLK1Freq>

	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 8010830:	e9dd 2300 	ldrd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 8010834:	4606      	mov	r6, r0
	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 8010836:	4915      	ldr	r1, [pc, #84]	; (801088c <TIM_ARR_PSC_Config+0x6c>)
 8010838:	4d15      	ldr	r5, [pc, #84]	; (8010890 <TIM_ARR_PSC_Config+0x70>)

	counter.counterEtr.arr = htim4.Instance->ARR;
 801083a:	4c16      	ldr	r4, [pc, #88]	; (8010894 <TIM_ARR_PSC_Config+0x74>)
	TIM_ReconfigPrecise(&htim4, periphClock, 1/gateTime);
 801083c:	2000      	movs	r0, #0
 801083e:	f7ef ffbd 	bl	80007bc <__aeabi_ddiv>
 8010842:	ec41 0b10 	vmov	d0, r0, r1
 8010846:	0071      	lsls	r1, r6, #1
 8010848:	4628      	mov	r0, r5
 801084a:	f7fe ff55 	bl	800f6f8 <TIM_ReconfigPrecise>
	counter.counterEtr.arr = htim4.Instance->ARR;
 801084e:	682b      	ldr	r3, [r5, #0]
 8010850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010852:	b292      	uxth	r2, r2
 8010854:	f8a4 2398 	strh.w	r2, [r4, #920]	; 0x398
	counter.counterEtr.psc = htim4.Instance->PSC;
 8010858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801085a:	b292      	uxth	r2, r2
 801085c:	f8a4 239a 	strh.w	r2, [r4, #922]	; 0x39a
	if(counter.state!=COUNTER_IC){
 8010860:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8010864:	2a02      	cmp	r2, #2
 8010866:	d00b      	beq.n	8010880 <TIM_ARR_PSC_Config+0x60>
		xStartTime = xTaskGetTickCount();
 8010868:	f7fc fc4a 	bl	800d100 <xTaskGetTickCount>
		__HAL_TIM_ENABLE(&htim4);
 801086c:	682b      	ldr	r3, [r5, #0]
		xStartTime = xTaskGetTickCount();
 801086e:	490a      	ldr	r1, [pc, #40]	; (8010898 <TIM_ARR_PSC_Config+0x78>)
		__HAL_TIM_ENABLE(&htim4);
 8010870:	681a      	ldr	r2, [r3, #0]
		xStartTime = xTaskGetTickCount();
 8010872:	6008      	str	r0, [r1, #0]
		__HAL_TIM_ENABLE(&htim4);
 8010874:	f042 0201 	orr.w	r2, r2, #1
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 8010878:	2100      	movs	r1, #0
		__HAL_TIM_ENABLE(&htim4);
 801087a:	601a      	str	r2, [r3, #0]
		counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 801087c:	f884 13c4 	strb.w	r1, [r4, #964]	; 0x3c4
 8010880:	695a      	ldr	r2, [r3, #20]
 8010882:	f042 0201 	orr.w	r2, r2, #1
 8010886:	615a      	str	r2, [r3, #20]
	}

	/* Generate an update event to reload the Prescaler and the repetition counter immediately */
	LL_TIM_GenerateEvent_UPDATE(htim4.Instance);
}
 8010888:	b002      	add	sp, #8
 801088a:	bd70      	pop	{r4, r5, r6, pc}
 801088c:	3ff00000 	.word	0x3ff00000
 8010890:	2000ea84 	.word	0x2000ea84
 8010894:	20004cc8 	.word	0x20004cc8
 8010898:	20004cc0 	.word	0x20004cc0

0801089c <TIM_REF_SecondInputDisable>:

void TIM_REF_SecondInputDisable(void){
	__HAL_TIM_DISABLE(&htim4);
 801089c:	4b08      	ldr	r3, [pc, #32]	; (80108c0 <TIM_REF_SecondInputDisable+0x24>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	6a19      	ldr	r1, [r3, #32]
 80108a2:	f241 1211 	movw	r2, #4369	; 0x1111
 80108a6:	4211      	tst	r1, r2
 80108a8:	d108      	bne.n	80108bc <TIM_REF_SecondInputDisable+0x20>
 80108aa:	6a19      	ldr	r1, [r3, #32]
 80108ac:	f240 4244 	movw	r2, #1092	; 0x444
 80108b0:	4211      	tst	r1, r2
 80108b2:	d103      	bne.n	80108bc <TIM_REF_SecondInputDisable+0x20>
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	f022 0201 	bic.w	r2, r2, #1
 80108ba:	601a      	str	r2, [r3, #0]
}
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop
 80108c0:	2000ea84 	.word	0x2000ea84

080108c4 <TIM_REF_Reconfig_cnt>:

void TIM_REF_Reconfig_cnt(uint32_t sampleCount)
{
 80108c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c8:	4680      	mov	r8, r0
 80108ca:	b084      	sub	sp, #16
	uint32_t dummy;
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 80108cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80108d0:	f7f8 f912 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 80108d4:	4607      	mov	r7, r0
	//HAL_RCC_GetPCLK1Freq()*2;  // TIM4 periph clock

	xStartTime = xTaskGetTickCount();
 80108d6:	f7fc fc13 	bl	800d100 <xTaskGetTickCount>
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;

	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 80108da:	4c0a      	ldr	r4, [pc, #40]	; (8010904 <TIM_REF_Reconfig_cnt+0x40>)
	xStartTime = xTaskGetTickCount();
 80108dc:	4b0a      	ldr	r3, [pc, #40]	; (8010908 <TIM_REF_Reconfig_cnt+0x44>)
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80108de:	4e0b      	ldr	r6, [pc, #44]	; (801090c <TIM_REF_Reconfig_cnt+0x48>)
	xStartTime = xTaskGetTickCount();
 80108e0:	6018      	str	r0, [r3, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80108e2:	2500      	movs	r5, #0
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 80108e4:	4642      	mov	r2, r8
 80108e6:	4639      	mov	r1, r7
 80108e8:	ab03      	add	r3, sp, #12
 80108ea:	4620      	mov	r0, r4
 80108ec:	9500      	str	r5, [sp, #0]
	counter.sampleCntChange = SAMPLE_COUNT_CHANGED;
 80108ee:	f886 53c4 	strb.w	r5, [r6, #964]	; 0x3c4
	TIM_Reconfig(&htim4,periphClock,sampleCount,&dummy,false);
 80108f2:	f7fe fe99 	bl	800f628 <TIM_Reconfig>
	HAL_TIM_Base_Start(&htim4);
 80108f6:	4620      	mov	r0, r4
 80108f8:	f7f8 fc3c 	bl	8009174 <HAL_TIM_Base_Start>
}
 80108fc:	b004      	add	sp, #16
 80108fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010902:	bf00      	nop
 8010904:	2000ea84 	.word	0x2000ea84
 8010908:	20004cc0 	.word	0x20004cc0
 801090c:	20004cc8 	.word	0x20004cc8

08010910 <TIM_ETPS_GetPrescaler>:
 * @params none
 * @retval etps: ETRP prescaler register value
 */
uint8_t TIM_ETPS_GetPrescaler(void)
{
	uint16_t etpsRegVal = ((htim2.Instance->SMCR) & TIM_SMCR_ETPS) >> 12;			/* ETR prescaler register value */
 8010910:	4b08      	ldr	r3, [pc, #32]	; (8010934 <TIM_ETPS_GetPrescaler+0x24>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	689b      	ldr	r3, [r3, #8]
 */
uint8_t TIM_GetPrescaler(uint32_t regPrescValue)
{
	uint8_t presc;
	/* Save the real value of ICxPSC prescaler for later calculations */
	switch(regPrescValue){
 8010916:	f3c3 3301 	ubfx	r3, r3, #12, #2
 801091a:	2b02      	cmp	r3, #2
 801091c:	d006      	beq.n	801092c <TIM_ETPS_GetPrescaler+0x1c>
 801091e:	2b03      	cmp	r3, #3
 8010920:	d006      	beq.n	8010930 <TIM_ETPS_GetPrescaler+0x20>
 8010922:	2b01      	cmp	r3, #1
	case 0:
		presc = 1; break;
 8010924:	bf0c      	ite	eq
 8010926:	2002      	moveq	r0, #2
 8010928:	2001      	movne	r0, #1
 801092a:	4770      	bx	lr
	case 1:
		presc = 2; break;
	case 2:
		presc = 4; break;
 801092c:	2004      	movs	r0, #4
 801092e:	4770      	bx	lr
	case 3:
		presc = 8; break;
 8010930:	2008      	movs	r0, #8
}
 8010932:	4770      	bx	lr
 8010934:	2000eb4c 	.word	0x2000eb4c

08010938 <TIM_IC1PSC_GetPrescaler>:
	uint32_t ic1psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC1PSC_Msk) >> TIM_CCMR1_IC1PSC_Pos;
 8010938:	4b08      	ldr	r3, [pc, #32]	; (801095c <TIM_IC1PSC_GetPrescaler+0x24>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	f3c3 0381 	ubfx	r3, r3, #2, #2
	switch(regPrescValue){
 8010942:	2b02      	cmp	r3, #2
 8010944:	d006      	beq.n	8010954 <TIM_IC1PSC_GetPrescaler+0x1c>
 8010946:	2b03      	cmp	r3, #3
 8010948:	d006      	beq.n	8010958 <TIM_IC1PSC_GetPrescaler+0x20>
 801094a:	2b01      	cmp	r3, #1
		presc = 1; break;
 801094c:	bf0c      	ite	eq
 801094e:	2002      	moveq	r0, #2
 8010950:	2001      	movne	r0, #1
 8010952:	4770      	bx	lr
		presc = 4; break;
 8010954:	2004      	movs	r0, #4
 8010956:	4770      	bx	lr
		presc = 8; break;
 8010958:	2008      	movs	r0, #8
}
 801095a:	4770      	bx	lr
 801095c:	2000eb4c 	.word	0x2000eb4c

08010960 <TIM_IC2PSC_GetPrescaler>:
	uint32_t ic2psc = ((htim2.Instance->CCMR1) & TIM_CCMR1_IC2PSC_Msk) >> TIM_CCMR1_IC2PSC_Pos;
 8010960:	4b08      	ldr	r3, [pc, #32]	; (8010984 <TIM_IC2PSC_GetPrescaler+0x24>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	699b      	ldr	r3, [r3, #24]
 8010966:	f3c3 2381 	ubfx	r3, r3, #10, #2
	switch(regPrescValue){
 801096a:	2b02      	cmp	r3, #2
 801096c:	d006      	beq.n	801097c <TIM_IC2PSC_GetPrescaler+0x1c>
 801096e:	2b03      	cmp	r3, #3
 8010970:	d006      	beq.n	8010980 <TIM_IC2PSC_GetPrescaler+0x20>
 8010972:	2b01      	cmp	r3, #1
		presc = 1; break;
 8010974:	bf0c      	ite	eq
 8010976:	2002      	moveq	r0, #2
 8010978:	2001      	movne	r0, #1
 801097a:	4770      	bx	lr
		presc = 4; break;
 801097c:	2004      	movs	r0, #4
 801097e:	4770      	bx	lr
		presc = 8; break;
 8010980:	2008      	movs	r0, #8
}
 8010982:	4770      	bx	lr
 8010984:	2000eb4c 	.word	0x2000eb4c

08010988 <DMA_TransferComplete>:
 */
bool DMA_TransferComplete(DMA_HandleTypeDef *dmah)
{
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;

	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 8010988:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 801098c:	2302      	movs	r3, #2
	uint32_t dmaIsrReg = dmah->DmaBaseAddress->ISR;
 801098e:	6810      	ldr	r0, [r2, #0]
	if(dmaIsrReg & (uint32_t)(DMA_FLAG_TC1 << dmah->ChannelIndex)){
 8010990:	408b      	lsls	r3, r1
 8010992:	4018      	ands	r0, r3
		/* Clear the transfer complete flag */
		dmah->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << dmah->ChannelIndex;
 8010994:	bf1c      	itt	ne
 8010996:	6053      	strne	r3, [r2, #4]
		//		}
		return true;
 8010998:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
 801099a:	4770      	bx	lr

0801099c <DMA_Restart>:
 *         the configuration information for the specified DMA Channel.
 * @retval None
 */
void DMA_Restart(DMA_HandleTypeDef *dmah)
{
	if(dmah == &hdma_tim2_ch1){
 801099c:	4b10      	ldr	r3, [pc, #64]	; (80109e0 <DMA_Restart+0x44>)
 801099e:	4298      	cmp	r0, r3
{
 80109a0:	b510      	push	{r4, lr}
	if(dmah == &hdma_tim2_ch1){
 80109a2:	d00e      	beq.n	80109c2 <DMA_Restart+0x26>
		HAL_DMA_Abort(&hdma_tim2_ch1);
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
	}else{
		HAL_DMA_Abort(&hdma_tim2_ch2_ch4);
 80109a4:	480f      	ldr	r0, [pc, #60]	; (80109e4 <DMA_Restart+0x48>)
 80109a6:	f7f6 fde5 	bl	8007574 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 80109aa:	490f      	ldr	r1, [pc, #60]	; (80109e8 <DMA_Restart+0x4c>)
 80109ac:	4a0f      	ldr	r2, [pc, #60]	; (80109ec <DMA_Restart+0x50>)
 80109ae:	6809      	ldr	r1, [r1, #0]
 80109b0:	8913      	ldrh	r3, [r2, #8]
 80109b2:	480c      	ldr	r0, [pc, #48]	; (80109e4 <DMA_Restart+0x48>)
 80109b4:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 80109b8:	3138      	adds	r1, #56	; 0x38
	}
}
 80109ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim2_ch2_ch4, (uint32_t)&(htim2.Instance->CCR2), (uint32_t)counter.counterIc.ic2buffer, counter.counterIc.ic2BufferSize);
 80109be:	f7f6 bd35 	b.w	800742c <HAL_DMA_Start>
 80109c2:	4604      	mov	r4, r0
		HAL_DMA_Abort(&hdma_tim2_ch1);
 80109c4:	f7f6 fdd6 	bl	8007574 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 80109c8:	4907      	ldr	r1, [pc, #28]	; (80109e8 <DMA_Restart+0x4c>)
 80109ca:	4a08      	ldr	r2, [pc, #32]	; (80109ec <DMA_Restart+0x50>)
 80109cc:	6809      	ldr	r1, [r1, #0]
 80109ce:	88d3      	ldrh	r3, [r2, #6]
 80109d0:	4620      	mov	r0, r4
 80109d2:	3210      	adds	r2, #16
 80109d4:	3134      	adds	r1, #52	; 0x34
}
 80109d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim2_ch1, (uint32_t)&(htim2.Instance->CCR1), (uint32_t)counter.counterIc.ic1buffer, counter.counterIc.ic1BufferSize);
 80109da:	f7f6 bd27 	b.w	800742c <HAL_DMA_Start>
 80109de:	bf00      	nop
 80109e0:	2000ea40 	.word	0x2000ea40
 80109e4:	2000eb08 	.word	0x2000eb08
 80109e8:	2000eb4c 	.word	0x2000eb4c
 80109ec:	20004cc8 	.word	0x20004cc8

080109f0 <MX_TIM6_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM6_Init(void)
{
 80109f0:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim6.Instance = TIM6;
 80109f2:	4c0b      	ldr	r4, [pc, #44]	; (8010a20 <MX_TIM6_Init+0x30>)
 80109f4:	4b0b      	ldr	r3, [pc, #44]	; (8010a24 <MX_TIM6_Init+0x34>)
 80109f6:	6023      	str	r3, [r4, #0]
{
 80109f8:	b085      	sub	sp, #20

	htim6.Init.Period = 0x7FF;
	htim6.Init.Prescaler = 0;
 80109fa:	2500      	movs	r5, #0
	htim6.Init.Period = 0x7FF;
 80109fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
	htim6.Init.ClockDivision = 0;
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
	HAL_TIM_Base_Init(&htim6);
 8010a00:	4620      	mov	r0, r4
	htim6.Init.Period = 0x7FF;
 8010a02:	60e3      	str	r3, [r4, #12]
	htim6.Init.Prescaler = 0;
 8010a04:	6065      	str	r5, [r4, #4]
	htim6.Init.ClockDivision = 0;
 8010a06:	6125      	str	r5, [r4, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010a08:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim6);
 8010a0a:	f7f8 fa6d 	bl	8008ee8 <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010a0e:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010a10:	4620      	mov	r0, r4
 8010a12:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010a14:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010a16:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010a18:	f7fa fef2 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 8010a1c:	b005      	add	sp, #20
 8010a1e:	bd30      	pop	{r4, r5, pc}
 8010a20:	2000ec54 	.word	0x2000ec54
 8010a24:	40001000 	.word	0x40001000

08010a28 <MX_TIM7_Init>:
 * @note   TIM6 Update event occurs each TIM6CLK/256
 * @param  None
 * @retval None
 */
void MX_TIM7_Init(void)
{
 8010a28:	b530      	push	{r4, r5, lr}
	TIM_MasterConfigTypeDef sMasterConfig;

	/*##-1- Configure the TIM peripheral #######################################*/
	/* Time base configuration */
	htim7.Instance = TIM7;
 8010a2a:	4c0b      	ldr	r4, [pc, #44]	; (8010a58 <MX_TIM7_Init+0x30>)
 8010a2c:	4b0b      	ldr	r3, [pc, #44]	; (8010a5c <MX_TIM7_Init+0x34>)
 8010a2e:	6023      	str	r3, [r4, #0]
{
 8010a30:	b085      	sub	sp, #20

	htim7.Init.Period = 0x7FF;
	htim7.Init.Prescaler = 0;
 8010a32:	2500      	movs	r5, #0
	htim7.Init.Period = 0x7FF;
 8010a34:	f240 73ff 	movw	r3, #2047	; 0x7ff
	htim7.Init.ClockDivision = 0;
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
	HAL_TIM_Base_Init(&htim7);
 8010a38:	4620      	mov	r0, r4
	htim7.Init.Period = 0x7FF;
 8010a3a:	60e3      	str	r3, [r4, #12]
	htim7.Init.Prescaler = 0;
 8010a3c:	6065      	str	r5, [r4, #4]
	htim7.Init.ClockDivision = 0;
 8010a3e:	6125      	str	r5, [r4, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010a40:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim7);
 8010a42:	f7f8 fa51 	bl	8008ee8 <HAL_TIM_Base_Init>

	/* TIM6 TRGO selection */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010a46:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8010a48:	4620      	mov	r0, r4
 8010a4a:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010a4c:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010a4e:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8010a50:	f7fa fed6 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>

	/*##-2- Enable TIM peripheral counter ######################################*/
	//HAL_TIM_Base_Start(&htim6);
}
 8010a54:	b005      	add	sp, #20
 8010a56:	bd30      	pop	{r4, r5, pc}
 8010a58:	2000ecd4 	.word	0x2000ecd4
 8010a5c:	40001400 	.word	0x40001400

08010a60 <TIM6_GEN_DAC_MspInit>:

#ifdef USE_GEN

void TIM6_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010a60:	4b06      	ldr	r3, [pc, #24]	; (8010a7c <TIM6_GEN_DAC_MspInit+0x1c>)
 8010a62:	69da      	ldr	r2, [r3, #28]
 8010a64:	f042 0210 	orr.w	r2, r2, #16
 8010a68:	61da      	str	r2, [r3, #28]
 8010a6a:	69db      	ldr	r3, [r3, #28]
{
 8010a6c:	b082      	sub	sp, #8
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010a6e:	f003 0310 	and.w	r3, r3, #16
 8010a72:	9301      	str	r3, [sp, #4]
 8010a74:	9b01      	ldr	r3, [sp, #4]
}
 8010a76:	b002      	add	sp, #8
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	40021000 	.word	0x40021000

08010a80 <TIM7_GEN_DAC_MspInit>:

void TIM7_GEN_DAC_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010a80:	4b06      	ldr	r3, [pc, #24]	; (8010a9c <TIM7_GEN_DAC_MspInit+0x1c>)
 8010a82:	69da      	ldr	r2, [r3, #28]
 8010a84:	f042 0220 	orr.w	r2, r2, #32
 8010a88:	61da      	str	r2, [r3, #28]
 8010a8a:	69db      	ldr	r3, [r3, #28]
{
 8010a8c:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010a8e:	f003 0320 	and.w	r3, r3, #32
 8010a92:	9301      	str	r3, [sp, #4]
 8010a94:	9b01      	ldr	r3, [sp, #4]
}
 8010a96:	b002      	add	sp, #8
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	40021000 	.word	0x40021000

08010aa0 <TIM6_GEN_DAC_MspDeinit>:

void TIM6_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_DISABLE();
 8010aa0:	4a02      	ldr	r2, [pc, #8]	; (8010aac <TIM6_GEN_DAC_MspDeinit+0xc>)
 8010aa2:	69d3      	ldr	r3, [r2, #28]
 8010aa4:	f023 0310 	bic.w	r3, r3, #16
 8010aa8:	61d3      	str	r3, [r2, #28]
}
 8010aaa:	4770      	bx	lr
 8010aac:	40021000 	.word	0x40021000

08010ab0 <TIM7_GEN_DAC_MspDeinit>:

void TIM7_GEN_DAC_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_DISABLE();
 8010ab0:	4a02      	ldr	r2, [pc, #8]	; (8010abc <TIM7_GEN_DAC_MspDeinit+0xc>)
 8010ab2:	69d3      	ldr	r3, [r2, #28]
 8010ab4:	f023 0320 	bic.w	r3, r3, #32
 8010ab8:	61d3      	str	r3, [r2, #28]
}
 8010aba:	4770      	bx	lr
 8010abc:	40021000 	.word	0x40021000

08010ac0 <TIM1_GEN_PWM_MspInit>:

void TIM1_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM1_CLK_ENABLE();
 8010ac0:	4b0e      	ldr	r3, [pc, #56]	; (8010afc <TIM1_GEN_PWM_MspInit+0x3c>)
{
 8010ac2:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 8010ac4:	699a      	ldr	r2, [r3, #24]
 8010ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010aca:	619a      	str	r2, [r3, #24]
 8010acc:	699b      	ldr	r3, [r3, #24]
{
 8010ace:	b086      	sub	sp, #24
	__HAL_RCC_TIM1_CLK_ENABLE();
 8010ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800

	/**TIM1 GPIO Configuration
		PA9     ------> TIM1_CH2
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010ad4:	f44f 7000 	mov.w	r0, #512	; 0x200
	__HAL_RCC_TIM1_CLK_ENABLE();
 8010ad8:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010ada:	2201      	movs	r2, #1
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8010adc:	2306      	movs	r3, #6
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010ade:	9001      	str	r0, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ae0:	2502      	movs	r5, #2
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ae2:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ae4:	a901      	add	r1, sp, #4
 8010ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_TIM1_CLK_ENABLE();
 8010aea:	9e00      	ldr	r6, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aec:	e9cd 5402 	strd	r5, r4, [sp, #8]
	GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8010af0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010af4:	f7f6 fe22 	bl	800773c <HAL_GPIO_Init>
}
 8010af8:	b006      	add	sp, #24
 8010afa:	bd70      	pop	{r4, r5, r6, pc}
 8010afc:	40021000 	.word	0x40021000

08010b00 <TIM3_GEN_PWM_MspInit>:

void TIM3_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM3_CLK_ENABLE();
 8010b00:	4b0d      	ldr	r3, [pc, #52]	; (8010b38 <TIM3_GEN_PWM_MspInit+0x38>)
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b02:	480e      	ldr	r0, [pc, #56]	; (8010b3c <TIM3_GEN_PWM_MspInit+0x3c>)
	__HAL_RCC_TIM3_CLK_ENABLE();
 8010b04:	69da      	ldr	r2, [r3, #28]
{
 8010b06:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM3_CLK_ENABLE();
 8010b08:	f042 0202 	orr.w	r2, r2, #2
 8010b0c:	61da      	str	r2, [r3, #28]
 8010b0e:	69db      	ldr	r3, [r3, #28]
{
 8010b10:	b086      	sub	sp, #24
	__HAL_RCC_TIM3_CLK_ENABLE();
 8010b12:	f003 0302 	and.w	r3, r3, #2
 8010b16:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010b18:	2201      	movs	r2, #1
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b1a:	2302      	movs	r3, #2
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8010b1c:	2510      	movs	r5, #16
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b1e:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b20:	a901      	add	r1, sp, #4
	__HAL_RCC_TIM3_CLK_ENABLE();
 8010b22:	9e00      	ldr	r6, [sp, #0]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8010b24:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b26:	e9cd 5301 	strd	r5, r3, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010b2a:	e9cd 4203 	strd	r4, r2, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b2e:	f7f6 fe05 	bl	800773c <HAL_GPIO_Init>
}
 8010b32:	b006      	add	sp, #24
 8010b34:	bd70      	pop	{r4, r5, r6, pc}
 8010b36:	bf00      	nop
 8010b38:	40021000 	.word	0x40021000
 8010b3c:	48000400 	.word	0x48000400

08010b40 <TIM6_GEN_PWM_MspInit>:

void TIM6_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM6_CLK_ENABLE();
 8010b40:	4b16      	ldr	r3, [pc, #88]	; (8010b9c <TIM6_GEN_PWM_MspInit+0x5c>)

	/* Peripheral DMA init*/
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010b42:	4917      	ldr	r1, [pc, #92]	; (8010ba0 <TIM6_GEN_PWM_MspInit+0x60>)
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010b44:	69da      	ldr	r2, [r3, #28]
{
 8010b46:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010b48:	f042 0210 	orr.w	r2, r2, #16
 8010b4c:	61da      	str	r2, [r3, #28]
 8010b4e:	69db      	ldr	r3, [r3, #28]
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010b50:	4c14      	ldr	r4, [pc, #80]	; (8010ba4 <TIM6_GEN_PWM_MspInit+0x64>)
{
 8010b52:	b082      	sub	sp, #8
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010b54:	f003 0310 	and.w	r3, r3, #16
{
 8010b58:	4605      	mov	r5, r0
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010b5a:	9301      	str	r3, [sp, #4]
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010b5c:	6021      	str	r1, [r4, #0]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010b5e:	2200      	movs	r2, #0
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010b60:	2110      	movs	r1, #16
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8010b62:	2380      	movs	r3, #128	; 0x80
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010b64:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010b68:	6061      	str	r1, [r4, #4]
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010b6a:	60a2      	str	r2, [r4, #8]
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8010b70:	2220      	movs	r2, #32
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8010b72:	60e3      	str	r3, [r4, #12]
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010b74:	6120      	str	r0, [r4, #16]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim6_up);
 8010b7a:	4620      	mov	r0, r4
	hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8010b7c:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010b80:	61e3      	str	r3, [r4, #28]
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010b82:	9e01      	ldr	r6, [sp, #4]
	HAL_DMA_Init(&hdma_tim6_up);
 8010b84:	f7f6 fafe 	bl	8007184 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010b88:	4b07      	ldr	r3, [pc, #28]	; (8010ba8 <TIM6_GEN_PWM_MspInit+0x68>)
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	68d3      	ldr	r3, [r2, #12]
 8010b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b92:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8010b94:	622c      	str	r4, [r5, #32]
 8010b96:	6265      	str	r5, [r4, #36]	; 0x24
}
 8010b98:	b002      	add	sp, #8
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}
 8010b9c:	40021000 	.word	0x40021000
 8010ba0:	40020030 	.word	0x40020030
 8010ba4:	2000ec10 	.word	0x2000ec10
 8010ba8:	2000ec54 	.word	0x2000ec54

08010bac <TIM7_GEN_PWM_MspInit>:

void TIM7_GEN_PWM_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_TIM7_CLK_ENABLE();
 8010bac:	4b16      	ldr	r3, [pc, #88]	; (8010c08 <TIM7_GEN_PWM_MspInit+0x5c>)

	/* Peripheral DMA init*/
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 8010bae:	4917      	ldr	r1, [pc, #92]	; (8010c0c <TIM7_GEN_PWM_MspInit+0x60>)
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010bb0:	69da      	ldr	r2, [r3, #28]
{
 8010bb2:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010bb4:	f042 0220 	orr.w	r2, r2, #32
 8010bb8:	61da      	str	r2, [r3, #28]
 8010bba:	69db      	ldr	r3, [r3, #28]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 8010bbc:	4c14      	ldr	r4, [pc, #80]	; (8010c10 <TIM7_GEN_PWM_MspInit+0x64>)
{
 8010bbe:	b082      	sub	sp, #8
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010bc0:	f003 0320 	and.w	r3, r3, #32
{
 8010bc4:	4605      	mov	r5, r0
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010bc6:	9301      	str	r3, [sp, #4]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 8010bc8:	6021      	str	r1, [r4, #0]
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010bca:	2200      	movs	r2, #0
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010bcc:	2110      	movs	r1, #16
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8010bce:	2380      	movs	r3, #128	; 0x80
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010bd0:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010bd4:	6061      	str	r1, [r4, #4]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010bd6:	60a2      	str	r2, [r4, #8]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8010bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8010bdc:	2220      	movs	r2, #32
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8010bde:	60e3      	str	r3, [r4, #12]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8010be0:	6120      	str	r0, [r4, #16]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim7_up);
 8010be6:	4620      	mov	r0, r4
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8010be8:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 8010bec:	61e3      	str	r3, [r4, #28]
	__HAL_RCC_TIM7_CLK_ENABLE();
 8010bee:	9e01      	ldr	r6, [sp, #4]
	HAL_DMA_Init(&hdma_tim7_up);
 8010bf0:	f7f6 fac8 	bl	8007184 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 8010bf4:	4b07      	ldr	r3, [pc, #28]	; (8010c14 <TIM7_GEN_PWM_MspInit+0x68>)
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	68d3      	ldr	r3, [r2, #12]
 8010bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010bfe:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8010c00:	622c      	str	r4, [r5, #32]
 8010c02:	6265      	str	r5, [r4, #36]	; 0x24
}
 8010c04:	b002      	add	sp, #8
 8010c06:	bd70      	pop	{r4, r5, r6, pc}
 8010c08:	40021000 	.word	0x40021000
 8010c0c:	40020044 	.word	0x40020044
 8010c10:	2000eb8c 	.word	0x2000eb8c
 8010c14:	2000ecd4 	.word	0x2000ecd4

08010c18 <TIM1_GEN_PWM_MspDeinit>:

void TIM1_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM1_CLK_DISABLE();
 8010c18:	4a02      	ldr	r2, [pc, #8]	; (8010c24 <TIM1_GEN_PWM_MspDeinit+0xc>)
 8010c1a:	6993      	ldr	r3, [r2, #24]
 8010c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c20:	6193      	str	r3, [r2, #24]
}
 8010c22:	4770      	bx	lr
 8010c24:	40021000 	.word	0x40021000

08010c28 <TIM3_GEN_PWM_MspDeinit>:

void TIM3_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM3_CLK_DISABLE();
 8010c28:	4a02      	ldr	r2, [pc, #8]	; (8010c34 <TIM3_GEN_PWM_MspDeinit+0xc>)
 8010c2a:	69d3      	ldr	r3, [r2, #28]
 8010c2c:	f023 0302 	bic.w	r3, r3, #2
 8010c30:	61d3      	str	r3, [r2, #28]
}
 8010c32:	4770      	bx	lr
 8010c34:	40021000 	.word	0x40021000

08010c38 <TIM6_GEN_PWM_MspDeinit>:

void TIM6_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM6_CLK_DISABLE();
 8010c38:	4a03      	ldr	r2, [pc, #12]	; (8010c48 <TIM6_GEN_PWM_MspDeinit+0x10>)
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8010c3a:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM6_CLK_DISABLE();
 8010c3c:	69d3      	ldr	r3, [r2, #28]
 8010c3e:	f023 0310 	bic.w	r3, r3, #16
 8010c42:	61d3      	str	r3, [r2, #28]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8010c44:	f7f6 bb6c 	b.w	8007320 <HAL_DMA_DeInit>
 8010c48:	40021000 	.word	0x40021000

08010c4c <TIM7_GEN_PWM_MspDeinit>:
}

void TIM7_GEN_PWM_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM7_CLK_DISABLE();
 8010c4c:	4a03      	ldr	r2, [pc, #12]	; (8010c5c <TIM7_GEN_PWM_MspDeinit+0x10>)
	/* Peripheral DMA DeInit*/
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8010c4e:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM7_CLK_DISABLE();
 8010c50:	69d3      	ldr	r3, [r2, #28]
 8010c52:	f023 0320 	bic.w	r3, r3, #32
 8010c56:	61d3      	str	r3, [r2, #28]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8010c58:	f7f6 bb62 	b.w	8007320 <HAL_DMA_DeInit>
 8010c5c:	40021000 	.word	0x40021000

08010c60 <TIM_Reconfig_gen>:
 * @param  samplingFreq: required frequency of the timer
 * @param  chan: channel number 0 - 1
 * @param  *realFreq: pointer to calculated real frequency
 * @retval status
 */
uint8_t TIM_Reconfig_gen(uint32_t samplingFreq,uint8_t chan,uint32_t* realFreq){
 8010c60:	b570      	push	{r4, r5, r6, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	460c      	mov	r4, r1
 8010c66:	4605      	mov	r5, r0
 8010c68:	4616      	mov	r6, r2
	/* RCC_PERIPHCLK_TIM6 and TIM7 defines missing in order to use with HAL_RCCEx_GetPeriphCLKFreq fun */
	uint32_t periphClock = HAL_RCC_GetPCLK1Freq()*2;
 8010c6a:	f7f7 fcb7 	bl	80085dc <HAL_RCC_GetPCLK1Freq>
 8010c6e:	0041      	lsls	r1, r0, #1
	if(chan==0){
 8010c70:	b124      	cbz	r4, 8010c7c <TIM_Reconfig_gen+0x1c>
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
	}else if(chan==1){
 8010c72:	2c01      	cmp	r4, #1
 8010c74:	d00b      	beq.n	8010c8e <TIM_Reconfig_gen+0x2e>
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
	}else{
		return 0;
 8010c76:	2000      	movs	r0, #0
	}
}
 8010c78:	b002      	add	sp, #8
 8010c7a:	bd70      	pop	{r4, r5, r6, pc}
		return TIM_Reconfig(&htim6,periphClock,samplingFreq,realFreq,true);
 8010c7c:	2001      	movs	r0, #1
 8010c7e:	9000      	str	r0, [sp, #0]
 8010c80:	4633      	mov	r3, r6
 8010c82:	462a      	mov	r2, r5
 8010c84:	4806      	ldr	r0, [pc, #24]	; (8010ca0 <TIM_Reconfig_gen+0x40>)
 8010c86:	f7fe fccf 	bl	800f628 <TIM_Reconfig>
}
 8010c8a:	b002      	add	sp, #8
 8010c8c:	bd70      	pop	{r4, r5, r6, pc}
		return TIM_Reconfig(&htim7,periphClock,samplingFreq,realFreq,true);
 8010c8e:	9400      	str	r4, [sp, #0]
 8010c90:	4633      	mov	r3, r6
 8010c92:	462a      	mov	r2, r5
 8010c94:	4803      	ldr	r0, [pc, #12]	; (8010ca4 <TIM_Reconfig_gen+0x44>)
 8010c96:	f7fe fcc7 	bl	800f628 <TIM_Reconfig>
}
 8010c9a:	b002      	add	sp, #8
 8010c9c:	bd70      	pop	{r4, r5, r6, pc}
 8010c9e:	bf00      	nop
 8010ca0:	2000ec54 	.word	0x2000ec54
 8010ca4:	2000ecd4 	.word	0x2000ecd4

08010ca8 <TIM_Reconfig_GenPwm>:

#ifdef USE_GEN_PWM

double TIM_Reconfig_GenPwm(double reqFreq, uint8_t chan){
 8010ca8:	b508      	push	{r3, lr}
 8010caa:	ed2d 8b02 	vpush	{d8}
 8010cae:	eeb0 8a40 	vmov.f32	s16, s0
 8010cb2:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t periphClock;
	if(chan==0){
 8010cb6:	b130      	cbz	r0, 8010cc6 <TIM_Reconfig_GenPwm+0x1e>
		/* Whenever TIM peripheral is over-clocked and running from PLL, GetPeriphClock HAL function
		 * does not return the correct value.. */
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
				//HAL_RCC_GetPCLK2Freq()*2;
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
	}else if(chan==1){
 8010cb8:	2801      	cmp	r0, #1
 8010cba:	d014      	beq.n	8010ce6 <TIM_Reconfig_GenPwm+0x3e>
				//HAL_RCC_GetHCLKFreq();
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
	}else{
		return 0;
	}
}
 8010cbc:	ecbd 8b02 	vpop	{d8}
 8010cc0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8010d08 <TIM_Reconfig_GenPwm+0x60>
 8010cc4:	bd08      	pop	{r3, pc}
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 8010cc6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010cca:	f7f7 ff15 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 8010cce:	eeb0 0a48 	vmov.f32	s0, s16
 8010cd2:	eef0 0a68 	vmov.f32	s1, s17
}
 8010cd6:	ecbd 8b02 	vpop	{d8}
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 8010cda:	0041      	lsls	r1, r0, #1
}
 8010cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return TIM_ReconfigPrecise(&htim1,periphClock,reqFreq);
 8010ce0:	480b      	ldr	r0, [pc, #44]	; (8010d10 <TIM_Reconfig_GenPwm+0x68>)
 8010ce2:	f7fe bd09 	b.w	800f6f8 <TIM_ReconfigPrecise>
		periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 8010ce6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010cea:	f7f7 ff05 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 8010cee:	eeb0 0a48 	vmov.f32	s0, s16
 8010cf2:	eef0 0a68 	vmov.f32	s1, s17
}
 8010cf6:	ecbd 8b02 	vpop	{d8}
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 8010cfa:	4601      	mov	r1, r0
}
 8010cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return TIM_ReconfigPrecise(&htim3,periphClock,reqFreq);
 8010d00:	4804      	ldr	r0, [pc, #16]	; (8010d14 <TIM_Reconfig_GenPwm+0x6c>)
 8010d02:	f7fe bcf9 	b.w	800f6f8 <TIM_ReconfigPrecise>
 8010d06:	bf00      	nop
	...
 8010d10:	2000ec94 	.word	0x2000ec94
 8010d14:	2000ebd0 	.word	0x2000ebd0

08010d18 <TIMGenEnable>:
/**
 * @brief  Enable TIM6 & TIM7 that trigger DMA - generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenEnable(void){
 8010d18:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start(&htim6);
 8010d1a:	4804      	ldr	r0, [pc, #16]	; (8010d2c <TIMGenEnable+0x14>)
 8010d1c:	f7f8 fa2a 	bl	8009174 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 8010d20:	4803      	ldr	r0, [pc, #12]	; (8010d30 <TIMGenEnable+0x18>)
}
 8010d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim7);
 8010d26:	f7f8 ba25 	b.w	8009174 <HAL_TIM_Base_Start>
 8010d2a:	bf00      	nop
 8010d2c:	2000ec54 	.word	0x2000ec54
 8010d30:	2000ecd4 	.word	0x2000ecd4

08010d34 <TIMGenDisable>:
/**
 * @brief  Disable TIM6 & TIM7 - stop triggering DMA / generating DAC.
 * @param  None
 * @retval None
 */
void TIMGenDisable(void){
 8010d34:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop(&htim6);
 8010d36:	4804      	ldr	r0, [pc, #16]	; (8010d48 <TIMGenDisable+0x14>)
 8010d38:	f7f8 fa5e 	bl	80091f8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim7);
 8010d3c:	4803      	ldr	r0, [pc, #12]	; (8010d4c <TIMGenDisable+0x18>)
}
 8010d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop(&htim7);
 8010d42:	f7f8 ba59 	b.w	80091f8 <HAL_TIM_Base_Stop>
 8010d46:	bf00      	nop
 8010d48:	2000ec54 	.word	0x2000ec54
 8010d4c:	2000ecd4 	.word	0x2000ecd4

08010d50 <TIMGenInit>:
 * @brief  Initialization of arbitrary DAC generator.
 * @note 	TIM6 & TIM7 & DAC.
 * @param  None
 * @retval None
 */
void TIMGenInit(void){
 8010d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	htim6.Instance = TIM6;
 8010d54:	4e15      	ldr	r6, [pc, #84]	; (8010dac <TIMGenInit+0x5c>)
	htim7.Instance = TIM7;
 8010d56:	4d16      	ldr	r5, [pc, #88]	; (8010db0 <TIMGenInit+0x60>)
void TIMGenInit(void){
 8010d58:	b084      	sub	sp, #16
	MX_DAC_Init();
 8010d5a:	f7fd ff59 	bl	800ec10 <MX_DAC_Init>
	htim6.Init.Prescaler = 0;
 8010d5e:	2400      	movs	r4, #0
	htim6.Instance = TIM6;
 8010d60:	4b14      	ldr	r3, [pc, #80]	; (8010db4 <TIMGenInit+0x64>)
 8010d62:	6033      	str	r3, [r6, #0]
	htim6.Init.Period = 0x7FF;
 8010d64:	f240 78ff 	movw	r8, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim6);
 8010d68:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010d6a:	2720      	movs	r7, #32
	htim6.Init.Period = 0x7FF;
 8010d6c:	f8c6 800c 	str.w	r8, [r6, #12]
	htim6.Init.Prescaler = 0;
 8010d70:	6074      	str	r4, [r6, #4]
	htim6.Init.ClockDivision = 0;
 8010d72:	6134      	str	r4, [r6, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010d74:	60b4      	str	r4, [r6, #8]
	HAL_TIM_Base_Init(&htim6);
 8010d76:	f7f8 f8b7 	bl	8008ee8 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010d7a:	a901      	add	r1, sp, #4
 8010d7c:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010d7e:	9403      	str	r4, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010d80:	9701      	str	r7, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010d82:	f7fa fd3d 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	htim7.Instance = TIM7;
 8010d86:	4b0c      	ldr	r3, [pc, #48]	; (8010db8 <TIMGenInit+0x68>)
 8010d88:	602b      	str	r3, [r5, #0]
	HAL_TIM_Base_Init(&htim7);
 8010d8a:	4628      	mov	r0, r5
	htim7.Init.Period = 0x7FF;
 8010d8c:	f8c5 800c 	str.w	r8, [r5, #12]
	htim7.Init.Prescaler = 0;
 8010d90:	606c      	str	r4, [r5, #4]
	htim7.Init.ClockDivision = 0;
 8010d92:	612c      	str	r4, [r5, #16]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010d94:	60ac      	str	r4, [r5, #8]
	HAL_TIM_Base_Init(&htim7);
 8010d96:	f7f8 f8a7 	bl	8008ee8 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8010d9a:	a901      	add	r1, sp, #4
 8010d9c:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010d9e:	9701      	str	r7, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010da0:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8010da2:	f7fa fd2d 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	MX_TIM6_Init();
	MX_TIM7_Init();
}
 8010da6:	b004      	add	sp, #16
 8010da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dac:	2000ec54 	.word	0x2000ec54
 8010db0:	2000ecd4 	.word	0x2000ecd4
 8010db4:	40001000 	.word	0x40001000
 8010db8:	40001400 	.word	0x40001400

08010dbc <TIMGenDacDeinit>:
void TIMGenDacDeinit(void){
	//	HAL_TIM_Base_DeInit(&htim6);
	//	HAL_TIM_Base_DeInit(&htim7);

	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 8010dbc:	4b0c      	ldr	r3, [pc, #48]	; (8010df0 <TIMGenDacDeinit+0x34>)
 8010dbe:	691a      	ldr	r2, [r3, #16]
 8010dc0:	f042 0210 	orr.w	r2, r2, #16
 8010dc4:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM6_RELEASE_RESET();
 8010dc6:	691a      	ldr	r2, [r3, #16]
 8010dc8:	f022 0210 	bic.w	r2, r2, #16
 8010dcc:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM7_FORCE_RESET();
 8010dce:	691a      	ldr	r2, [r3, #16]
 8010dd0:	f042 0220 	orr.w	r2, r2, #32
 8010dd4:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM7_RELEASE_RESET();
 8010dd6:	691a      	ldr	r2, [r3, #16]
 8010dd8:	f022 0220 	bic.w	r2, r2, #32
 8010ddc:	611a      	str	r2, [r3, #16]

	__HAL_RCC_DAC1_FORCE_RESET();
 8010dde:	691a      	ldr	r2, [r3, #16]
 8010de0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010de4:	611a      	str	r2, [r3, #16]
	__HAL_RCC_DAC1_RELEASE_RESET();
 8010de6:	691a      	ldr	r2, [r3, #16]
 8010de8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8010dec:	611a      	str	r2, [r3, #16]
}
 8010dee:	4770      	bx	lr
 8010df0:	40021000 	.word	0x40021000

08010df4 <TIM_DMA_Reconfig>:
 * @brief  Reconfigures the number of PWM Duty Cycle changes in one waveform period.
 * @note		The number of DC cahnges is represented by CNDTR register of DMA peripheral.
 * @param  chan: channel number 0 or 1 (TIM6 or TIM7)
 * @retval None
 */
void TIM_DMA_Reconfig(uint8_t chan){
 8010df4:	b510      	push	{r4, lr}
	if(chan==0){
 8010df6:	b110      	cbz	r0, 8010dfe <TIM_DMA_Reconfig+0xa>
		HAL_DMA_Abort(&hdma_tim6_up);
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
	}else if(chan==1){
 8010df8:	2801      	cmp	r0, #1
 8010dfa:	d00e      	beq.n	8010e1a <TIM_DMA_Reconfig+0x26>
		HAL_DMA_Abort(&hdma_tim7_up);
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
	}
}
 8010dfc:	bd10      	pop	{r4, pc}
		HAL_DMA_Abort(&hdma_tim6_up);
 8010dfe:	480e      	ldr	r0, [pc, #56]	; (8010e38 <TIM_DMA_Reconfig+0x44>)
 8010e00:	f7f6 fbb8 	bl	8007574 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 8010e04:	4a0d      	ldr	r2, [pc, #52]	; (8010e3c <TIM_DMA_Reconfig+0x48>)
 8010e06:	4b0e      	ldr	r3, [pc, #56]	; (8010e40 <TIM_DMA_Reconfig+0x4c>)
 8010e08:	6812      	ldr	r2, [r2, #0]
 8010e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010e0c:	480a      	ldr	r0, [pc, #40]	; (8010e38 <TIM_DMA_Reconfig+0x44>)
 8010e0e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010e10:	3238      	adds	r2, #56	; 0x38
}
 8010e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim6_up, (uint32_t)generator.pChanMem[0], (uint32_t)&(htim1.Instance->CCR2)/*(TIM1->CCR2)*/, generator.oneChanSamples[0]);
 8010e16:	f7f6 bb09 	b.w	800742c <HAL_DMA_Start>
		HAL_DMA_Abort(&hdma_tim7_up);
 8010e1a:	480a      	ldr	r0, [pc, #40]	; (8010e44 <TIM_DMA_Reconfig+0x50>)
 8010e1c:	f7f6 fbaa 	bl	8007574 <HAL_DMA_Abort>
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 8010e20:	4a09      	ldr	r2, [pc, #36]	; (8010e48 <TIM_DMA_Reconfig+0x54>)
 8010e22:	4b07      	ldr	r3, [pc, #28]	; (8010e40 <TIM_DMA_Reconfig+0x4c>)
 8010e24:	6812      	ldr	r2, [r2, #0]
 8010e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010e28:	4806      	ldr	r0, [pc, #24]	; (8010e44 <TIM_DMA_Reconfig+0x50>)
 8010e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010e2c:	3234      	adds	r2, #52	; 0x34
}
 8010e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DMA_Start(&hdma_tim7_up, (uint32_t)generator.pChanMem[1], (uint32_t)&(htim3.Instance->CCR1)/*(TIM3->CCR1)*/, generator.oneChanSamples[1]);
 8010e32:	f7f6 bafb 	b.w	800742c <HAL_DMA_Start>
 8010e36:	bf00      	nop
 8010e38:	2000ec10 	.word	0x2000ec10
 8010e3c:	2000ec94 	.word	0x2000ec94
 8010e40:	200050a0 	.word	0x200050a0
 8010e44:	2000eb8c 	.word	0x2000eb8c
 8010e48:	2000ebd0 	.word	0x2000ebd0

08010e4c <PWMGeneratingEnable>:
 * @brief  Enables/Starts generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingEnable(void){
 8010e4c:	b538      	push	{r3, r4, r5, lr}
	if(generator.numOfChannles==1){
 8010e4e:	4b1a      	ldr	r3, [pc, #104]	; (8010eb8 <PWMGeneratingEnable+0x6c>)
 8010e50:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010e54:	2a01      	cmp	r2, #1
 8010e56:	d020      	beq.n	8010e9a <PWMGeneratingEnable+0x4e>
		/* After sole Generator initialization, PWM generator do not enter TIMGenPwmInit()
		function and thus UDE bits are not configured. Must be set here. */
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Start(&htim6);
	}else if(generator.numOfChannles>1){
 8010e58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d91b      	bls.n	8010e98 <PWMGeneratingEnable+0x4c>
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e60:	4d16      	ldr	r5, [pc, #88]	; (8010ebc <PWMGeneratingEnable+0x70>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Start(&htim6);
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 8010e62:	4c17      	ldr	r4, [pc, #92]	; (8010ec0 <PWMGeneratingEnable+0x74>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e64:	682a      	ldr	r2, [r5, #0]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8010e66:	4817      	ldr	r0, [pc, #92]	; (8010ec4 <PWMGeneratingEnable+0x78>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e68:	68d3      	ldr	r3, [r2, #12]
 8010e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e6e:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8010e70:	2104      	movs	r1, #4
 8010e72:	f7f8 fc95 	bl	80097a0 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 8010e76:	4628      	mov	r0, r5
 8010e78:	f7f8 f97c 	bl	8009174 <HAL_TIM_Base_Start>
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 8010e7c:	6822      	ldr	r2, [r4, #0]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8010e7e:	4812      	ldr	r0, [pc, #72]	; (8010ec8 <PWMGeneratingEnable+0x7c>)
		__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 8010e80:	68d3      	ldr	r3, [r2, #12]
 8010e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e86:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8010e88:	2100      	movs	r1, #0
 8010e8a:	f7f8 fc89 	bl	80097a0 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim7);
 8010e8e:	4620      	mov	r0, r4
	}
}
 8010e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start(&htim7);
 8010e94:	f7f8 b96e 	b.w	8009174 <HAL_TIM_Base_Start>
}
 8010e98:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e9a:	4c08      	ldr	r4, [pc, #32]	; (8010ebc <PWMGeneratingEnable+0x70>)
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8010e9c:	4809      	ldr	r0, [pc, #36]	; (8010ec4 <PWMGeneratingEnable+0x78>)
		__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8010e9e:	6822      	ldr	r2, [r4, #0]
 8010ea0:	68d3      	ldr	r3, [r2, #12]
 8010ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010ea6:	60d3      	str	r3, [r2, #12]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8010ea8:	2104      	movs	r1, #4
 8010eaa:	f7f8 fc79 	bl	80097a0 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);
 8010eae:	4620      	mov	r0, r4
}
 8010eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start(&htim6);
 8010eb4:	f7f8 b95e 	b.w	8009174 <HAL_TIM_Base_Start>
 8010eb8:	200050a0 	.word	0x200050a0
 8010ebc:	2000ec54 	.word	0x2000ec54
 8010ec0:	2000ecd4 	.word	0x2000ecd4
 8010ec4:	2000ec94 	.word	0x2000ec94
 8010ec8:	2000ebd0 	.word	0x2000ebd0

08010ecc <PWMGeneratingDisable>:
 * @brief  Disables/Stops generating of PWM and its simultaneous Duty Cycle changes.
 * @note		The PWM generated by TIM6 (ch2) & TIM7 (ch1). The DMA for DC change triggered by TIM1 (for TIM6) & TIM3 (for TIM7).
 * @param  None
 * @retval None
 */
void PWMGeneratingDisable(void){
 8010ecc:	b508      	push	{r3, lr}
	if(generator.numOfChannles==1){
 8010ece:	4b11      	ldr	r3, [pc, #68]	; (8010f14 <PWMGeneratingDisable+0x48>)
 8010ed0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010ed4:	2a01      	cmp	r2, #1
 8010ed6:	d014      	beq.n	8010f02 <PWMGeneratingDisable+0x36>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
		HAL_TIM_Base_Stop(&htim6);
	}else if(generator.numOfChannles>1){
 8010ed8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d90f      	bls.n	8010f00 <PWMGeneratingDisable+0x34>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8010ee0:	2104      	movs	r1, #4
 8010ee2:	480d      	ldr	r0, [pc, #52]	; (8010f18 <PWMGeneratingDisable+0x4c>)
 8010ee4:	f7f8 fd1a 	bl	800991c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 8010ee8:	480c      	ldr	r0, [pc, #48]	; (8010f1c <PWMGeneratingDisable+0x50>)
 8010eea:	f7f8 f985 	bl	80091f8 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8010eee:	2100      	movs	r1, #0
 8010ef0:	480b      	ldr	r0, [pc, #44]	; (8010f20 <PWMGeneratingDisable+0x54>)
 8010ef2:	f7f8 fd13 	bl	800991c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim7);
 8010ef6:	480b      	ldr	r0, [pc, #44]	; (8010f24 <PWMGeneratingDisable+0x58>)
	}
}
 8010ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim7);
 8010efc:	f7f8 b97c 	b.w	80091f8 <HAL_TIM_Base_Stop>
}
 8010f00:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8010f02:	2104      	movs	r1, #4
 8010f04:	4804      	ldr	r0, [pc, #16]	; (8010f18 <PWMGeneratingDisable+0x4c>)
 8010f06:	f7f8 fd09 	bl	800991c <HAL_TIM_PWM_Stop>
		HAL_TIM_Base_Stop(&htim6);
 8010f0a:	4804      	ldr	r0, [pc, #16]	; (8010f1c <PWMGeneratingDisable+0x50>)
}
 8010f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop(&htim6);
 8010f10:	f7f8 b972 	b.w	80091f8 <HAL_TIM_Base_Stop>
 8010f14:	200050a0 	.word	0x200050a0
 8010f18:	2000ec94 	.word	0x2000ec94
 8010f1c:	2000ec54 	.word	0x2000ec54
 8010f20:	2000ebd0 	.word	0x2000ebd0
 8010f24:	2000ecd4 	.word	0x2000ecd4

08010f28 <TIMGenPwmInit>:
 * @brief  Initialization of arbitrary PWM generator.
 * @note		TIM6 & TIM7 (PWM gen.) and TIM1 & TIM3 (DMA for Duty Cycle change).
 * @param  None
 * @retval None
 */
void TIMGenPwmInit(void){
 8010f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	htim1.Instance = TIM1;
 8010f2c:	4d7c      	ldr	r5, [pc, #496]	; (8011120 <TIMGenPwmInit+0x1f8>)
 8010f2e:	4b7d      	ldr	r3, [pc, #500]	; (8011124 <TIMGenPwmInit+0x1fc>)
 8010f30:	602b      	str	r3, [r5, #0]
void TIMGenPwmInit(void){
 8010f32:	b09d      	sub	sp, #116	; 0x74
	htim1.Init.Prescaler = 0;
 8010f34:	2400      	movs	r4, #0
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010f36:	af1c      	add	r7, sp, #112	; 0x70
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010f38:	f04f 0a80 	mov.w	sl, #128	; 0x80
	htim1.Init.Period = 1023;
 8010f3c:	f240 33ff 	movw	r3, #1023	; 0x3ff
	HAL_TIM_Base_Init(&htim1);
 8010f40:	4628      	mov	r0, r5
	htim1.Init.Period = 1023;
 8010f42:	60eb      	str	r3, [r5, #12]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010f44:	e9c5 4401 	strd	r4, r4, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 8010f48:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010f4c:	f8c5 a018 	str.w	sl, [r5, #24]
	HAL_TIM_Base_Init(&htim1);
 8010f50:	f7f7 ffca 	bl	8008ee8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f58:	f847 3d58 	str.w	r3, [r7, #-88]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	4639      	mov	r1, r7
 8010f60:	f7f9 f944 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim1);
 8010f64:	4628      	mov	r0, r5
 8010f66:	f7f8 fb21 	bl	80095ac <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8010f6a:	a903      	add	r1, sp, #12
 8010f6c:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8010f6e:	e9cd 4403 	strd	r4, r4, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010f72:	9405      	str	r4, [sp, #20]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010f74:	2660      	movs	r6, #96	; 0x60
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8010f76:	f7fa fc43 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8010f7a:	2204      	movs	r2, #4
 8010f7c:	a90a      	add	r1, sp, #40	; 0x28
	sConfigOC.Pulse = 512;
 8010f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8010f82:	4628      	mov	r0, r5
	sConfigOC.Pulse = 512;
 8010f84:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8010f88:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8010f8c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8010f90:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8010f94:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8010f96:	f7fa fa2f 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8010f9a:	a911      	add	r1, sp, #68	; 0x44
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8010f9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8010fa0:	4628      	mov	r0, r5
	htim6.Instance = TIM6;
 8010fa2:	4e61      	ldr	r6, [pc, #388]	; (8011128 <TIMGenPwmInit+0x200>)
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8010fa4:	9319      	str	r3, [sp, #100]	; 0x64
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8010fa6:	9411      	str	r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8010fa8:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8010fac:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8010fb0:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8010fb4:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8010fb8:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
	HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8010fbc:	f7fa fca4 	bl	800b908 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_TIM_Base_MspInit(&htim1);
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	f7fe fa0b 	bl	800f3dc <HAL_TIM_Base_MspInit>
	htim6.Instance = TIM6;
 8010fc6:	4b59      	ldr	r3, [pc, #356]	; (801112c <TIMGenPwmInit+0x204>)
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010fc8:	f8df 8180 	ldr.w	r8, [pc, #384]	; 801114c <TIMGenPwmInit+0x224>
	htim6.Instance = TIM6;
 8010fcc:	6033      	str	r3, [r6, #0]
	HAL_TIM_Base_Init(&htim6);
 8010fce:	4630      	mov	r0, r6
	htim6.Init.Period = 0x7FF;
 8010fd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010fd4:	f04f 0920 	mov.w	r9, #32
	htim6.Init.Period = 0x7FF;
 8010fd8:	60f3      	str	r3, [r6, #12]
	htim6.Init.Prescaler = 0;
 8010fda:	6074      	str	r4, [r6, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010fdc:	60b4      	str	r4, [r6, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010fde:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim6);
 8010fe0:	f7f7 ff82 	bl	8008ee8 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010fe4:	a911      	add	r1, sp, #68	; 0x44
 8010fe6:	4630      	mov	r0, r6
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010fe8:	9413      	str	r4, [sp, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010fea:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8010fee:	f7fa fc07 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010ff2:	f8d8 301c 	ldr.w	r3, [r8, #28]
	hdma_tim6_up.Instance = DMA1_Channel3;
 8010ff6:	494e      	ldr	r1, [pc, #312]	; (8011130 <TIMGenPwmInit+0x208>)
 8010ff8:	4d4e      	ldr	r5, [pc, #312]	; (8011134 <TIMGenPwmInit+0x20c>)
	hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8010ffa:	608c      	str	r4, [r1, #8]
	__HAL_RCC_TIM6_CLK_ENABLE();
 8010ffc:	f043 0310 	orr.w	r3, r3, #16
 8011000:	f8c8 301c 	str.w	r3, [r8, #28]
 8011004:	f8d8 301c 	ldr.w	r3, [r8, #28]
	hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8011008:	f8c1 a00c 	str.w	sl, [r1, #12]
	__HAL_RCC_TIM6_CLK_ENABLE();
 801100c:	f003 0310 	and.w	r3, r3, #16
 8011010:	9303      	str	r3, [sp, #12]
 8011012:	9a03      	ldr	r2, [sp, #12]
	hdma_tim6_up.Instance = DMA1_Channel3;
 8011014:	600d      	str	r5, [r1, #0]
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011016:	2210      	movs	r2, #16
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011018:	f44f 6380 	mov.w	r3, #1024	; 0x400
	hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801101c:	604a      	str	r2, [r1, #4]
	HAL_DMA_Init(&hdma_tim6_up);
 801101e:	4608      	mov	r0, r1
	hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8011020:	f44f 7280 	mov.w	r2, #256	; 0x100
	hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011024:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011028:	e9cd 1300 	strd	r1, r3, [sp]
	hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 801102c:	e9c1 9b06 	strd	r9, fp, [r1, #24]
	HAL_DMA_Init(&hdma_tim6_up);
 8011030:	f7f6 f8a8 	bl	8007184 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8011034:	6832      	ldr	r2, [r6, #0]
	htim3.Instance = TIM3;
 8011036:	4d40      	ldr	r5, [pc, #256]	; (8011138 <TIMGenPwmInit+0x210>)
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8011038:	68d0      	ldr	r0, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 801103a:	9900      	ldr	r1, [sp, #0]
	htim3.Instance = TIM3;
 801103c:	f8df e110 	ldr.w	lr, [pc, #272]	; 8011150 <TIMGenPwmInit+0x228>
 8011040:	f8c5 e000 	str.w	lr, [r5]
	__HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8011044:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8011048:	60d0      	str	r0, [r2, #12]
	htim3.Init.Period = 511;
 801104a:	f240 1cff 	movw	ip, #511	; 0x1ff
	HAL_TIM_Base_Init(&htim3);
 801104e:	4628      	mov	r0, r5
	htim3.Init.Period = 511;
 8011050:	f8c5 c00c 	str.w	ip, [r5, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8011054:	6231      	str	r1, [r6, #32]
 8011056:	624e      	str	r6, [r1, #36]	; 0x24
	htim3.Init.Prescaler = 0;
 8011058:	606c      	str	r4, [r5, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801105a:	60ac      	str	r4, [r5, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801105c:	612c      	str	r4, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801105e:	f8c5 a018 	str.w	sl, [r5, #24]
	HAL_TIM_Base_Init(&htim3);
 8011062:	f7f7 ff41 	bl	8008ee8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 801106a:	a90a      	add	r1, sp, #40	; 0x28
 801106c:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801106e:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8011070:	f7f9 f8bc 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim3);
 8011074:	4628      	mov	r0, r5
 8011076:	f7f8 fa99 	bl	80095ac <HAL_TIM_PWM_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 801107a:	4639      	mov	r1, r7
 801107c:	4628      	mov	r0, r5
	htim7.Instance = TIM7;
 801107e:	4f2f      	ldr	r7, [pc, #188]	; (801113c <TIMGenPwmInit+0x214>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011080:	9406      	str	r4, [sp, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011082:	9408      	str	r4, [sp, #32]
	HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8011084:	f7fa fbbc 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = 256;
 8011088:	f04f 0c60 	mov.w	ip, #96	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 801108c:	a911      	add	r1, sp, #68	; 0x44
 801108e:	4622      	mov	r2, r4
	sConfigOC.Pulse = 256;
 8011090:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8011094:	4628      	mov	r0, r5
	sConfigOC.Pulse = 256;
 8011096:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801109a:	9413      	str	r4, [sp, #76]	; 0x4c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801109c:	9415      	str	r4, [sp, #84]	; 0x54
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 801109e:	f7fa f9ab 	bl	800b3f8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_MspInit(&htim3);
 80110a2:	4628      	mov	r0, r5
 80110a4:	f7fe f99a 	bl	800f3dc <HAL_TIM_Base_MspInit>
	htim7.Instance = TIM7;
 80110a8:	4a25      	ldr	r2, [pc, #148]	; (8011140 <TIMGenPwmInit+0x218>)
 80110aa:	603a      	str	r2, [r7, #0]
	htim7.Init.Period = 0x7FF;
 80110ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
	HAL_TIM_Base_Init(&htim7);
 80110b0:	4638      	mov	r0, r7
	htim7.Init.Period = 0x7FF;
 80110b2:	60fb      	str	r3, [r7, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80110b4:	e9c7 4401 	strd	r4, r4, [r7, #4]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80110b8:	61bc      	str	r4, [r7, #24]
	HAL_TIM_Base_Init(&htim7);
 80110ba:	f7f7 ff15 	bl	8008ee8 <HAL_TIM_Base_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 80110be:	a911      	add	r1, sp, #68	; 0x44
 80110c0:	4638      	mov	r0, r7
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80110c2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80110c6:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 80110c8:	f7fa fb9a 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	__HAL_RCC_TIM7_CLK_ENABLE();
 80110cc:	f8d8 201c 	ldr.w	r2, [r8, #28]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 80110d0:	4e1c      	ldr	r6, [pc, #112]	; (8011144 <TIMGenPwmInit+0x21c>)
 80110d2:	491d      	ldr	r1, [pc, #116]	; (8011148 <TIMGenPwmInit+0x220>)
	__HAL_RCC_TIM7_CLK_ENABLE();
 80110d4:	ea42 0209 	orr.w	r2, r2, r9
	hdma_tim7_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80110d8:	2310      	movs	r3, #16
 80110da:	6073      	str	r3, [r6, #4]
	__HAL_RCC_TIM7_CLK_ENABLE();
 80110dc:	f8c8 201c 	str.w	r2, [r8, #28]
 80110e0:	f8d8 201c 	ldr.w	r2, [r8, #28]
	hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80110e4:	60b4      	str	r4, [r6, #8]
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80110e6:	f44f 7380 	mov.w	r3, #256	; 0x100
	__HAL_RCC_TIM7_CLK_ENABLE();
 80110ea:	ea02 0209 	and.w	r2, r2, r9
	hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80110ee:	6133      	str	r3, [r6, #16]
	hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80110f0:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_TIM7_CLK_ENABLE();
 80110f2:	920a      	str	r2, [sp, #40]	; 0x28
	HAL_DMA_Init(&hdma_tim7_up);
 80110f4:	4630      	mov	r0, r6
	__HAL_RCC_TIM7_CLK_ENABLE();
 80110f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 80110f8:	f8c6 a00c 	str.w	sl, [r6, #12]
	hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 80110fc:	e9c6 3905 	strd	r3, r9, [r6, #20]
	hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 8011100:	f8c6 b01c 	str.w	fp, [r6, #28]
	hdma_tim7_up.Instance = DMA1_Channel4;   // DMA2_Channel4
 8011104:	6031      	str	r1, [r6, #0]
	HAL_DMA_Init(&hdma_tim7_up);
 8011106:	f7f6 f83d 	bl	8007184 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 801110a:	683a      	ldr	r2, [r7, #0]
 801110c:	68d3      	ldr	r3, [r2, #12]
 801110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011112:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8011114:	623e      	str	r6, [r7, #32]
 8011116:	6277      	str	r7, [r6, #36]	; 0x24
	MX_TIM1_GEN_PWM_Init();
	MX_TIM6_GEN_PWM_Init();
	MX_TIM3_GEN_PWM_Init();			// PWM generation
	MX_TIM7_GEN_PWM_Init();			// DMA transaction timing
}
 8011118:	b01d      	add	sp, #116	; 0x74
 801111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111e:	bf00      	nop
 8011120:	2000ec94 	.word	0x2000ec94
 8011124:	40012c00 	.word	0x40012c00
 8011128:	2000ec54 	.word	0x2000ec54
 801112c:	40001000 	.word	0x40001000
 8011130:	2000ec10 	.word	0x2000ec10
 8011134:	40020030 	.word	0x40020030
 8011138:	2000ebd0 	.word	0x2000ebd0
 801113c:	2000ecd4 	.word	0x2000ecd4
 8011140:	40001400 	.word	0x40001400
 8011144:	2000eb8c 	.word	0x2000eb8c
 8011148:	40020044 	.word	0x40020044
 801114c:	40021000 	.word	0x40021000
 8011150:	40000400 	.word	0x40000400

08011154 <TIMGenPwmDeinit>:
 * @param  None
 * @retval None
 */
void TIMGenPwmDeinit(void){
	/* Reset TIM peripherals */
	__HAL_RCC_TIM6_FORCE_RESET();
 8011154:	4b10      	ldr	r3, [pc, #64]	; (8011198 <TIMGenPwmDeinit+0x44>)
 8011156:	691a      	ldr	r2, [r3, #16]
 8011158:	f042 0210 	orr.w	r2, r2, #16
 801115c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM6_RELEASE_RESET();
 801115e:	691a      	ldr	r2, [r3, #16]
 8011160:	f022 0210 	bic.w	r2, r2, #16
 8011164:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM7_FORCE_RESET();
 8011166:	691a      	ldr	r2, [r3, #16]
 8011168:	f042 0220 	orr.w	r2, r2, #32
 801116c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM7_RELEASE_RESET();
 801116e:	691a      	ldr	r2, [r3, #16]
 8011170:	f022 0220 	bic.w	r2, r2, #32
 8011174:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM1_FORCE_RESET();
 8011176:	68da      	ldr	r2, [r3, #12]
 8011178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801117c:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 801117e:	68da      	ldr	r2, [r3, #12]
 8011180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011184:	60da      	str	r2, [r3, #12]

	__HAL_RCC_TIM3_FORCE_RESET();
 8011186:	691a      	ldr	r2, [r3, #16]
 8011188:	f042 0202 	orr.w	r2, r2, #2
 801118c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM3_RELEASE_RESET();
 801118e:	691a      	ldr	r2, [r3, #16]
 8011190:	f022 0202 	bic.w	r2, r2, #2
 8011194:	611a      	str	r2, [r3, #16]
}
 8011196:	4770      	bx	lr
 8011198:	40021000 	.word	0x40021000

0801119c <TIM1_LOG_ANLYS_MspInit>:
void TIM1_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM1_CLK_ENABLE();
 801119c:	4b21      	ldr	r3, [pc, #132]	; (8011224 <TIM1_LOG_ANLYS_MspInit+0x88>)
{
 801119e:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_TIM1_CLK_ENABLE();
 80111a0:	699a      	ldr	r2, [r3, #24]
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);

	/* TIM1 DMA Init */
	/* TIM1_UP Init */
	hdma_tim1_up.Instance = DMA1_Channel5;
 80111a2:	4c21      	ldr	r4, [pc, #132]	; (8011228 <TIM1_LOG_ANLYS_MspInit+0x8c>)
	__HAL_RCC_TIM1_CLK_ENABLE();
 80111a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80111a8:	619a      	str	r2, [r3, #24]
 80111aa:	699b      	ldr	r3, [r3, #24]
{
 80111ac:	b086      	sub	sp, #24
	__HAL_RCC_TIM1_CLK_ENABLE();
 80111ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111b2:	9300      	str	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80111b4:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 80111b8:	2500      	movs	r5, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80111ba:	2303      	movs	r3, #3
{
 80111bc:	4606      	mov	r6, r0
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 80111be:	2201      	movs	r2, #1
	__HAL_RCC_TIM1_CLK_ENABLE();
 80111c0:	9800      	ldr	r0, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80111c2:	9101      	str	r1, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80111c4:	4819      	ldr	r0, [pc, #100]	; (801122c <TIM1_LOG_ANLYS_MspInit+0x90>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80111c6:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80111c8:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 80111ca:	e9cd 5202 	strd	r5, r2, [sp, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80111ce:	f7f6 fab5 	bl	800773c <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn,9,0);
 80111d2:	462a      	mov	r2, r5
 80111d4:	2109      	movs	r1, #9
 80111d6:	2017      	movs	r0, #23
 80111d8:	f7f5 fd56 	bl	8006c88 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,9,0);
 80111dc:	462a      	mov	r2, r5
 80111de:	2109      	movs	r1, #9
 80111e0:	2028      	movs	r0, #40	; 0x28
 80111e2:	f7f5 fd51 	bl	8006c88 <HAL_NVIC_SetPriority>
	hdma_tim1_up.Instance = DMA1_Channel5;
 80111e6:	4a12      	ldr	r2, [pc, #72]	; (8011230 <TIM1_LOG_ANLYS_MspInit+0x94>)
 80111e8:	6022      	str	r2, [r4, #0]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80111ea:	2380      	movs	r3, #128	; 0x80
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80111ec:	f44f 7080 	mov.w	r0, #256	; 0x100
	hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80111f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80111f4:	2220      	movs	r2, #32
	hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80111f6:	60e3      	str	r3, [r4, #12]
	hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80111f8:	6120      	str	r0, [r4, #16]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 80111fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim1_up);
 80111fe:	4620      	mov	r0, r4
	hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8011200:	e9c4 1205 	strd	r1, r2, [r4, #20]
	hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 8011204:	61e3      	str	r3, [r4, #28]
	hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011206:	6065      	str	r5, [r4, #4]
	hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8011208:	60a5      	str	r5, [r4, #8]
	HAL_DMA_Init(&hdma_tim1_up);
 801120a:	f7f5 ffbb 	bl	8007184 <HAL_DMA_Init>
	/* Trigger DMA by TIMer to transfer data from GPIO IDR reg. to memory buffer. */
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DIER_UDE);
 801120e:	4b09      	ldr	r3, [pc, #36]	; (8011234 <TIM1_LOG_ANLYS_MspInit+0x98>)
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	68d3      	ldr	r3, [r2, #12]
 8011214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011218:	60d3      	str	r3, [r2, #12]
	__HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 801121a:	6234      	str	r4, [r6, #32]
 801121c:	6266      	str	r6, [r4, #36]	; 0x24
}
 801121e:	b006      	add	sp, #24
 8011220:	bd70      	pop	{r4, r5, r6, pc}
 8011222:	bf00      	nop
 8011224:	40021000 	.word	0x40021000
 8011228:	2000ed14 	.word	0x2000ed14
 801122c:	48000400 	.word	0x48000400
 8011230:	40020058 	.word	0x40020058
 8011234:	2000ec94 	.word	0x2000ec94

08011238 <TIM4_LOG_ANLYS_MspInit>:

void TIM4_LOG_ANLYS_MspInit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock enable */
	__HAL_RCC_TIM4_CLK_ENABLE();
 8011238:	4b0e      	ldr	r3, [pc, #56]	; (8011274 <TIM4_LOG_ANLYS_MspInit+0x3c>)

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 801123a:	490f      	ldr	r1, [pc, #60]	; (8011278 <TIM4_LOG_ANLYS_MspInit+0x40>)
	__HAL_RCC_TIM4_CLK_ENABLE();
 801123c:	69da      	ldr	r2, [r3, #28]
{
 801123e:	b500      	push	{lr}
	__HAL_RCC_TIM4_CLK_ENABLE();
 8011240:	f042 0204 	orr.w	r2, r2, #4
 8011244:	61da      	str	r2, [r3, #28]
 8011246:	69db      	ldr	r3, [r3, #28]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8011248:	680a      	ldr	r2, [r1, #0]
{
 801124a:	b083      	sub	sp, #12
	__HAL_RCC_TIM4_CLK_ENABLE();
 801124c:	f003 0304 	and.w	r3, r3, #4
 8011250:	9301      	str	r3, [sp, #4]
 8011252:	9b01      	ldr	r3, [sp, #4]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8011254:	68d3      	ldr	r3, [r2, #12]
 8011256:	f043 0301 	orr.w	r3, r3, #1
 801125a:	60d3      	str	r3, [r2, #12]

	/* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 9, 0);
 801125c:	2109      	movs	r1, #9
 801125e:	2200      	movs	r2, #0
 8011260:	201e      	movs	r0, #30
 8011262:	f7f5 fd11 	bl	8006c88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8011266:	201e      	movs	r0, #30
}
 8011268:	b003      	add	sp, #12
 801126a:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801126e:	f7f5 bd51 	b.w	8006d14 <HAL_NVIC_EnableIRQ>
 8011272:	bf00      	nop
 8011274:	40021000 	.word	0x40021000
 8011278:	2000ea84 	.word	0x2000ea84

0801127c <TIM4_LOG_ANLYS_MspDeinit>:

void TIM4_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM4_CLK_DISABLE();
 801127c:	4a08      	ldr	r2, [pc, #32]	; (80112a0 <TIM4_LOG_ANLYS_MspDeinit+0x24>)
{
 801127e:	b508      	push	{r3, lr}
	__HAL_RCC_TIM4_CLK_DISABLE();
 8011280:	69d3      	ldr	r3, [r2, #28]
 8011282:	f023 0304 	bic.w	r3, r3, #4
 8011286:	61d3      	str	r3, [r2, #28]
	HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8011288:	201e      	movs	r0, #30
 801128a:	f7f5 fd57 	bl	8006d3c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801128e:	2017      	movs	r0, #23
 8011290:	f7f5 fd54 	bl	8006d3c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8011294:	2028      	movs	r0, #40	; 0x28
}
 8011296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 801129a:	f7f5 bd4f 	b.w	8006d3c <HAL_NVIC_DisableIRQ>
 801129e:	bf00      	nop
 80112a0:	40021000 	.word	0x40021000

080112a4 <TIM1_LOG_ANLYS_MspDeinit>:

void TIM1_LOG_ANLYS_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	/* Peripheral clock disable */
	__HAL_RCC_TIM1_CLK_DISABLE();
 80112a4:	4a03      	ldr	r2, [pc, #12]	; (80112b4 <TIM1_LOG_ANLYS_MspDeinit+0x10>)
	/* TIM1 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 80112a6:	6a00      	ldr	r0, [r0, #32]
	__HAL_RCC_TIM1_CLK_DISABLE();
 80112a8:	6993      	ldr	r3, [r2, #24]
 80112aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80112ae:	6193      	str	r3, [r2, #24]
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 80112b0:	f7f6 b836 	b.w	8007320 <HAL_DMA_DeInit>
 80112b4:	40021000 	.word	0x40021000

080112b8 <LOG_ANLYS_PeriodElapsedCallback>:
 * @note		The time after the trigger occured elapsed and all required data is sampled.
 * @params htim:	TIM handler
 * @retval None
 */
void LOG_ANLYS_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80112b8:	b508      	push	{r3, lr}
	//    {
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);

	/* Stop timer trigering the DMA for data transfer */
	//HAL_TIM_Base_Stop(&htim1);
	__HAL_TIM_DISABLE(&htim4);
 80112ba:	4b15      	ldr	r3, [pc, #84]	; (8011310 <LOG_ANLYS_PeriodElapsedCallback+0x58>)
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80112bc:	6802      	ldr	r2, [r0, #0]
	__HAL_TIM_DISABLE(&htim4);
 80112be:	681b      	ldr	r3, [r3, #0]
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80112c0:	f06f 0101 	mvn.w	r1, #1
 80112c4:	6111      	str	r1, [r2, #16]
	__HAL_TIM_DISABLE(&htim4);
 80112c6:	6a19      	ldr	r1, [r3, #32]
 80112c8:	f241 1211 	movw	r2, #4369	; 0x1111
 80112cc:	4211      	tst	r1, r2
 80112ce:	d104      	bne.n	80112da <LOG_ANLYS_PeriodElapsedCallback+0x22>
 80112d0:	6a19      	ldr	r1, [r3, #32]
 80112d2:	f240 4244 	movw	r2, #1092	; 0x444
 80112d6:	4211      	tst	r1, r2
 80112d8:	d010      	beq.n	80112fc <LOG_ANLYS_PeriodElapsedCallback+0x44>
	HAL_DMA_Abort(&hdma_tim1_up);
 80112da:	480e      	ldr	r0, [pc, #56]	; (8011314 <LOG_ANLYS_PeriodElapsedCallback+0x5c>)
 80112dc:	f7f6 f94a 	bl	8007574 <HAL_DMA_Abort>
 * @note		Disables all IRQ channels of GPIOs to prevent from triggering.
 * @params None
 * @retval None
 */
void GPIO_DisableIRQ(void){
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 80112e0:	4b0d      	ldr	r3, [pc, #52]	; (8011318 <LOG_ANLYS_PeriodElapsedCallback+0x60>)
 80112e2:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 80112e6:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80112e8:	2017      	movs	r0, #23
 80112ea:	f7f5 fd27 	bl	8006d3c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80112ee:	2028      	movs	r0, #40	; 0x28
 80112f0:	f7f5 fd24 	bl	8006d3c <HAL_NVIC_DisableIRQ>
	if(logAnlys.trigOccur == TRIG_OCCURRED){
 80112f4:	4b09      	ldr	r3, [pc, #36]	; (801131c <LOG_ANLYS_PeriodElapsedCallback+0x64>)
 80112f6:	7ddb      	ldrb	r3, [r3, #23]
 80112f8:	b12b      	cbz	r3, 8011306 <LOG_ANLYS_PeriodElapsedCallback+0x4e>
}
 80112fa:	bd08      	pop	{r3, pc}
	__HAL_TIM_DISABLE(&htim4);
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	f022 0201 	bic.w	r2, r2, #1
 8011302:	601a      	str	r2, [r3, #0]
 8011304:	e7e9      	b.n	80112da <LOG_ANLYS_PeriodElapsedCallback+0x22>
}
 8011306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logAnlysPeriodElapsedCallback();
 801130a:	f7f3 b865 	b.w	80043d8 <logAnlysPeriodElapsedCallback>
 801130e:	bf00      	nop
 8011310:	2000ea84 	.word	0x2000ea84
 8011314:	2000ed14 	.word	0x2000ed14
 8011318:	40010400 	.word	0x40010400
 801131c:	20007028 	.word	0x20007028

08011320 <LOG_ANLYS_TriggerEventOccured>:
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 8011320:	4a03      	ldr	r2, [pc, #12]	; (8011330 <LOG_ANLYS_TriggerEventOccured+0x10>)
 8011322:	4b04      	ldr	r3, [pc, #16]	; (8011334 <LOG_ANLYS_TriggerEventOccured+0x14>)
 8011324:	6811      	ldr	r1, [r2, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 8011326:	2200      	movs	r2, #0
	logAnlys.triggerPointer = hdma_tim1_up.Instance->CNDTR;
 8011328:	6849      	ldr	r1, [r1, #4]
 801132a:	6019      	str	r1, [r3, #0]
	logAnlys.trigOccur = TRIG_OCCURRED;
 801132c:	75da      	strb	r2, [r3, #23]
}
 801132e:	4770      	bx	lr
 8011330:	2000ed14 	.word	0x2000ed14
 8011334:	20007028 	.word	0x20007028

08011338 <TIM_LogAnlys_Init>:
	__HAL_RCC_TIM4_FORCE_RESET();
 8011338:	4b30      	ldr	r3, [pc, #192]	; (80113fc <TIM_LogAnlys_Init+0xc4>)
	htim1.Instance = TIM1;
 801133a:	4931      	ldr	r1, [pc, #196]	; (8011400 <TIM_LogAnlys_Init+0xc8>)
	__HAL_RCC_TIM4_FORCE_RESET();
 801133c:	691a      	ldr	r2, [r3, #16]
 801133e:	f042 0204 	orr.w	r2, r2, #4
{
 8011342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__HAL_RCC_TIM4_FORCE_RESET();
 8011346:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 8011348:	691a      	ldr	r2, [r3, #16]
	htim1.State = HAL_TIM_STATE_RESET;
 801134a:	4d2e      	ldr	r5, [pc, #184]	; (8011404 <TIM_LogAnlys_Init+0xcc>)
	htim4.State = HAL_TIM_STATE_RESET;
 801134c:	4e2e      	ldr	r6, [pc, #184]	; (8011408 <TIM_LogAnlys_Init+0xd0>)
	__HAL_RCC_TIM4_RELEASE_RESET();
 801134e:	f022 0204 	bic.w	r2, r2, #4
 8011352:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM1_FORCE_RESET();
 8011354:	68da      	ldr	r2, [r3, #12]
 8011356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801135a:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 801135c:	68da      	ldr	r2, [r3, #12]
{
 801135e:	b08c      	sub	sp, #48	; 0x30
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011360:	af0c      	add	r7, sp, #48	; 0x30
	__HAL_RCC_TIM1_RELEASE_RESET();
 8011362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
	htim4.State = HAL_TIM_STATE_RESET;
 8011366:	2400      	movs	r4, #0
	__HAL_RCC_TIM1_RELEASE_RESET();
 8011368:	60da      	str	r2, [r3, #12]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801136a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	htim1.Init.Period = 14399;   //14399
 801136e:	f643 033f 	movw	r3, #14399	; 0x383f
	HAL_TIM_Base_Init(&htim1);
 8011372:	4628      	mov	r0, r5
	htim1.Init.Period = 14399;   //14399
 8011374:	60eb      	str	r3, [r5, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 8011376:	f886 403d 	strb.w	r4, [r6, #61]	; 0x3d
	htim1.Instance = TIM1;
 801137a:	6029      	str	r1, [r5, #0]
	htim1.Init.Prescaler = 0;  //0
 801137c:	606c      	str	r4, [r5, #4]
	htim1.State = HAL_TIM_STATE_RESET;
 801137e:	f885 403d 	strb.w	r4, [r5, #61]	; 0x3d
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011382:	60ac      	str	r4, [r5, #8]
	htim1.Init.RepetitionCounter = 0;
 8011384:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011388:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim1);
 801138a:	f7f7 fdad 	bl	8008ee8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801138e:	f847 8d24 	str.w	r8, [r7, #-36]!
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8011392:	4628      	mov	r0, r5
 8011394:	4639      	mov	r1, r7
 8011396:	f7f8 ff29 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 801139a:	2204      	movs	r2, #4
 801139c:	2330      	movs	r3, #48	; 0x30
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 801139e:	a907      	add	r1, sp, #28
 80113a0:	4628      	mov	r0, r5
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80113a2:	e9cd 2307 	strd	r2, r3, [sp, #28]
	HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig);
 80113a6:	f7f9 f9ed 	bl	800a784 <HAL_TIM_SlaveConfigSynchronization>
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 80113aa:	4669      	mov	r1, sp
 80113ac:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80113ae:	e9cd 4400 	strd	r4, r4, [sp]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80113b2:	9402      	str	r4, [sp, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 80113b4:	f7fa fa24 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	htim4.Instance = TIM4;
 80113b8:	4914      	ldr	r1, [pc, #80]	; (801140c <TIM_LogAnlys_Init+0xd4>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80113ba:	60b4      	str	r4, [r6, #8]
	htim4.Init.Prescaler = 1199;
 80113bc:	f240 42af 	movw	r2, #1199	; 0x4af
	htim4.Init.Period = 59999;
 80113c0:	f64e 235f 	movw	r3, #59999	; 0xea5f
	HAL_TIM_Base_Init(&htim4);
 80113c4:	4630      	mov	r0, r6
	htim4.Init.Prescaler = 1199;
 80113c6:	e9c6 1200 	strd	r1, r2, [r6]
	htim4.Init.Period = 59999;
 80113ca:	60f3      	str	r3, [r6, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80113cc:	6134      	str	r4, [r6, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80113ce:	61b4      	str	r4, [r6, #24]
	HAL_TIM_Base_Init(&htim4);
 80113d0:	f7f7 fd8a 	bl	8008ee8 <HAL_TIM_Base_Init>
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 80113d4:	a907      	add	r1, sp, #28
 80113d6:	4630      	mov	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80113d8:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 80113dc:	f7f8 ff06 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE);
 80113e0:	4630      	mov	r0, r6
 80113e2:	2108      	movs	r1, #8
 80113e4:	f7f8 fc74 	bl	8009cd0 <HAL_TIM_OnePulse_Init>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80113e8:	2380      	movs	r3, #128	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 80113ea:	4639      	mov	r1, r7
 80113ec:	4630      	mov	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80113ee:	9403      	str	r4, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80113f0:	9305      	str	r3, [sp, #20]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 80113f2:	f7fa fa05 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
}
 80113f6:	b00c      	add	sp, #48	; 0x30
 80113f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113fc:	40021000 	.word	0x40021000
 8011400:	40012c00 	.word	0x40012c00
 8011404:	2000ec94 	.word	0x2000ec94
 8011408:	2000ea84 	.word	0x2000ea84
 801140c:	40000800 	.word	0x40000800

08011410 <TIM_LogAnlys_Deinit>:
{
 8011410:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_Base_DeInit(&htim4);
 8011412:	4d0f      	ldr	r5, [pc, #60]	; (8011450 <TIM_LogAnlys_Deinit+0x40>)
	HAL_TIM_Base_DeInit(&htim1);
 8011414:	4c0f      	ldr	r4, [pc, #60]	; (8011454 <TIM_LogAnlys_Deinit+0x44>)
	HAL_TIM_Base_DeInit(&htim4);
 8011416:	4628      	mov	r0, r5
 8011418:	f7f7 fe5c 	bl	80090d4 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 801141c:	4620      	mov	r0, r4
 801141e:	f7f7 fe59 	bl	80090d4 <HAL_TIM_Base_DeInit>
	__HAL_RCC_TIM4_FORCE_RESET();
 8011422:	4b0d      	ldr	r3, [pc, #52]	; (8011458 <TIM_LogAnlys_Deinit+0x48>)
 8011424:	691a      	ldr	r2, [r3, #16]
 8011426:	f042 0204 	orr.w	r2, r2, #4
 801142a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM4_RELEASE_RESET();
 801142c:	691a      	ldr	r2, [r3, #16]
 801142e:	f022 0204 	bic.w	r2, r2, #4
 8011432:	611a      	str	r2, [r3, #16]
	__HAL_RCC_TIM1_FORCE_RESET();
 8011434:	68da      	ldr	r2, [r3, #12]
 8011436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801143a:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM1_RELEASE_RESET();
 801143c:	68da      	ldr	r2, [r3, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 801143e:	2100      	movs	r1, #0
	__HAL_RCC_TIM1_RELEASE_RESET();
 8011440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011444:	60da      	str	r2, [r3, #12]
	htim4.State = HAL_TIM_STATE_RESET;
 8011446:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
	htim1.State = HAL_TIM_STATE_RESET;
 801144a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 801144e:	bd38      	pop	{r3, r4, r5, pc}
 8011450:	2000ea84 	.word	0x2000ea84
 8011454:	2000ec94 	.word	0x2000ec94
 8011458:	40021000 	.word	0x40021000

0801145c <TIM_LogAnlys_Start>:
{
 801145c:	b508      	push	{r3, lr}
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&(GPIOB->IDR), (uint32_t)logAnlys.bufferMemory, logAnlys.samplesNumber + MAX_ADC_CHANNELS * SCOPE_BUFFER_MARGIN);
 801145e:	4b07      	ldr	r3, [pc, #28]	; (801147c <TIM_LogAnlys_Start+0x20>)
 8011460:	4907      	ldr	r1, [pc, #28]	; (8011480 <TIM_LogAnlys_Start+0x24>)
 8011462:	68da      	ldr	r2, [r3, #12]
 8011464:	8a1b      	ldrh	r3, [r3, #16]
 8011466:	4807      	ldr	r0, [pc, #28]	; (8011484 <TIM_LogAnlys_Start+0x28>)
 8011468:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801146c:	f7f5 ffde 	bl	800742c <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim1);
 8011470:	4805      	ldr	r0, [pc, #20]	; (8011488 <TIM_LogAnlys_Start+0x2c>)
}
 8011472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start(&htim1);
 8011476:	f7f7 be7d 	b.w	8009174 <HAL_TIM_Base_Start>
 801147a:	bf00      	nop
 801147c:	20007028 	.word	0x20007028
 8011480:	48000410 	.word	0x48000410
 8011484:	2000ed14 	.word	0x2000ed14
 8011488:	2000ec94 	.word	0x2000ec94

0801148c <TIM_LogAnlys_Stop>:
{
 801148c:	b510      	push	{r4, lr}
 * @note		Stop TIM1 and abort DMA.
 * @params None
 * @retval None
 */
void TIM_SamplingStop(void){
	HAL_TIM_Base_Stop(&htim1);
 801148e:	480d      	ldr	r0, [pc, #52]	; (80114c4 <TIM_LogAnlys_Stop+0x38>)
	HAL_TIM_Base_Stop(&htim4);
 8011490:	4c0d      	ldr	r4, [pc, #52]	; (80114c8 <TIM_LogAnlys_Stop+0x3c>)
	HAL_TIM_Base_Stop(&htim1);
 8011492:	f7f7 feb1 	bl	80091f8 <HAL_TIM_Base_Stop>
	HAL_DMA_Abort(&hdma_tim1_up);
 8011496:	480d      	ldr	r0, [pc, #52]	; (80114cc <TIM_LogAnlys_Stop+0x40>)
 8011498:	f7f6 f86c 	bl	8007574 <HAL_DMA_Abort>
	__HAL_GPIO_EXTI_CLEAR_IT(0x3fc0);
 801149c:	4b0c      	ldr	r3, [pc, #48]	; (80114d0 <TIM_LogAnlys_Stop+0x44>)
 801149e:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 80114a2:	615a      	str	r2, [r3, #20]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80114a4:	2017      	movs	r0, #23
 80114a6:	f7f5 fc49 	bl	8006d3c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80114aa:	2028      	movs	r0, #40	; 0x28
 80114ac:	f7f5 fc46 	bl	8006d3c <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Stop(&htim4);
 80114b0:	4620      	mov	r0, r4
 80114b2:	f7f7 fea1 	bl	80091f8 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80114b6:	6821      	ldr	r1, [r4, #0]
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80114b8:	4b06      	ldr	r3, [pc, #24]	; (80114d4 <TIM_LogAnlys_Stop+0x48>)
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80114ba:	2000      	movs	r0, #0
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80114bc:	2201      	movs	r2, #1
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80114be:	6248      	str	r0, [r1, #36]	; 0x24
	logAnlys.trigOccur = TRIG_NOT_OCCURRED;
 80114c0:	75da      	strb	r2, [r3, #23]
}
 80114c2:	bd10      	pop	{r4, pc}
 80114c4:	2000ec94 	.word	0x2000ec94
 80114c8:	2000ea84 	.word	0x2000ea84
 80114cc:	2000ed14 	.word	0x2000ed14
 80114d0:	40010400 	.word	0x40010400
 80114d4:	20007028 	.word	0x20007028

080114d8 <TIM_LogAnlys_PostTrigger_Reconfig>:
{
 80114d8:	b530      	push	{r4, r5, lr}
 80114da:	ec53 2b10 	vmov	r2, r3, d0
 80114de:	b083      	sub	sp, #12
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 80114e0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
{
 80114e4:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 80114e8:	f7f7 fb06 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
	double freq = 1 / posttrigInSec;
 80114ec:	e9dd 2300 	ldrd	r2, r3, [sp]
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM34);
 80114f0:	4605      	mov	r5, r0
	double freq = 1 / posttrigInSec;
 80114f2:	4908      	ldr	r1, [pc, #32]	; (8011514 <TIM_LogAnlys_PostTrigger_Reconfig+0x3c>)
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 80114f4:	4c08      	ldr	r4, [pc, #32]	; (8011518 <TIM_LogAnlys_PostTrigger_Reconfig+0x40>)
	double freq = 1 / posttrigInSec;
 80114f6:	2000      	movs	r0, #0
 80114f8:	f7ef f960 	bl	80007bc <__aeabi_ddiv>
	TIM_ReconfigPrecise(&htim4, periphClock, freq);
 80114fc:	ec41 0b10 	vmov	d0, r0, r1
 8011500:	4620      	mov	r0, r4
 8011502:	4629      	mov	r1, r5
 8011504:	f7fe f8f8 	bl	800f6f8 <TIM_ReconfigPrecise>
	HAL_TIM_Base_Stop(&htim4);
 8011508:	4620      	mov	r0, r4
}
 801150a:	b003      	add	sp, #12
 801150c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_TIM_Base_Stop(&htim4);
 8011510:	f7f7 be72 	b.w	80091f8 <HAL_TIM_Base_Stop>
 8011514:	3ff00000 	.word	0x3ff00000
 8011518:	2000ea84 	.word	0x2000ea84

0801151c <TIM_LogAnlys_SamplingFreq_Reconfig>:
{
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	4605      	mov	r5, r0
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM1)*2;
 8011520:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011524:	f7f7 fae8 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
 8011528:	4604      	mov	r4, r0
	logAnlys.samplingFreq = TIM_ReconfigPrecise(&htim1, periphClock, smplFreq);
 801152a:	4628      	mov	r0, r5
 801152c:	f7ee ffa2 	bl	8000474 <__aeabi_ui2d>
 8011530:	ec41 0b10 	vmov	d0, r0, r1
 8011534:	0061      	lsls	r1, r4, #1
 8011536:	4805      	ldr	r0, [pc, #20]	; (801154c <TIM_LogAnlys_SamplingFreq_Reconfig+0x30>)
 8011538:	f7fe f8de 	bl	800f6f8 <TIM_ReconfigPrecise>
 801153c:	ec51 0b10 	vmov	r0, r1, d0
 8011540:	f7ef faea 	bl	8000b18 <__aeabi_d2uiz>
 8011544:	4b02      	ldr	r3, [pc, #8]	; (8011550 <TIM_LogAnlys_SamplingFreq_Reconfig+0x34>)
 8011546:	6058      	str	r0, [r3, #4]
}
 8011548:	bd38      	pop	{r3, r4, r5, pc}
 801154a:	bf00      	nop
 801154c:	2000ec94 	.word	0x2000ec94
 8011550:	20007028 	.word	0x20007028

08011554 <TIM_PostTrigger_SoftwareStart>:
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8011554:	4b04      	ldr	r3, [pc, #16]	; (8011568 <TIM_PostTrigger_SoftwareStart+0x14>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2200      	movs	r2, #0
 801155a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(&htim4);
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	f042 0201 	orr.w	r2, r2, #1
 8011562:	601a      	str	r2, [r3, #0]
}
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop
 8011568:	2000ea84 	.word	0x2000ea84

0801156c <GPIO_EnableTrigger>:
 * @note		Enable triggers on selected channel after the pretrigger time data was already samples.
 * @params None
 * @retval None
 */
void GPIO_EnableTrigger(void)
{
 801156c:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef   GPIO_InitStructure;
	IRQn_Type ExtiLine;

	//restore default settings
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 801156e:	2017      	movs	r0, #23
{
 8011570:	b087      	sub	sp, #28
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8011572:	f7f5 fbe3 	bl	8006d3c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8011576:	2028      	movs	r0, #40	; 0x28
 8011578:	f7f5 fbe0 	bl	8006d3c <HAL_NVIC_DisableIRQ>

	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 801157c:	4a28      	ldr	r2, [pc, #160]	; (8011620 <GPIO_EnableTrigger+0xb4>)


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801157e:	4829      	ldr	r0, [pc, #164]	; (8011624 <GPIO_EnableTrigger+0xb8>)
	GPIO_InitStructure.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8011580:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8011584:	9301      	str	r3, [sp, #4]
	EXTI->IMR &= ~(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);  //when selecting different line the EXTI settings remain the same
 8011586:	6813      	ldr	r3, [r2, #0]
 8011588:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801158c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801158e:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 8011590:	2201      	movs	r2, #1
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8011592:	2303      	movs	r3, #3
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT; //GPIO_MODE_INPUT;
 8011594:	2500      	movs	r5, #0
	GPIO_InitStructure.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;
 8011596:	e9cd 5202 	strd	r5, r2, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 801159a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 801159c:	f7f6 f8ce 	bl	800773c <HAL_GPIO_Init>


	//init right pin to interrupt
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 80115a0:	4a21      	ldr	r2, [pc, #132]	; (8011628 <GPIO_EnableTrigger+0xbc>)
		GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
	}else {
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80115a2:	4b22      	ldr	r3, [pc, #136]	; (801162c <GPIO_EnableTrigger+0xc0>)
	if(logAnlys.trigEdge == TRIG_EDGE_FALLING){
 80115a4:	7d90      	ldrb	r0, [r2, #22]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80115a6:	4922      	ldr	r1, [pc, #136]	; (8011630 <GPIO_EnableTrigger+0xc4>)
	}

	switch(logAnlys.trigConfig){
 80115a8:	7d52      	ldrb	r2, [r2, #21]
		GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80115aa:	2801      	cmp	r0, #1
 80115ac:	bf18      	it	ne
 80115ae:	460b      	movne	r3, r1
 80115b0:	9302      	str	r3, [sp, #8]
	switch(logAnlys.trigConfig){
 80115b2:	2a07      	cmp	r2, #7
 80115b4:	d809      	bhi.n	80115ca <GPIO_EnableTrigger+0x5e>
 80115b6:	e8df f002 	tbb	[pc, r2]
 80115ba:	1511      	.short	0x1511
 80115bc:	28231e19 	.word	0x28231e19
 80115c0:	042d      	.short	0x042d
	case TRIG_CHAN7:
		GPIO_InitStructure.Pin = GPIO_PIN_12;
		ExtiLine = EXTI15_10_IRQn;
		break;
	case TRIG_CHAN8:
		GPIO_InitStructure.Pin = GPIO_PIN_13;
 80115c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115c6:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 80115c8:	2428      	movs	r4, #40	; 0x28
		break;
	}

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80115ca:	a901      	add	r1, sp, #4
 80115cc:	4815      	ldr	r0, [pc, #84]	; (8011624 <GPIO_EnableTrigger+0xb8>)
 80115ce:	f7f6 f8b5 	bl	800773c <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(ExtiLine);
 80115d2:	4620      	mov	r0, r4
 80115d4:	f7f5 fb9e 	bl	8006d14 <HAL_NVIC_EnableIRQ>
}
 80115d8:	b007      	add	sp, #28
 80115da:	bd30      	pop	{r4, r5, pc}
		GPIO_InitStructure.Pin = GPIO_PIN_6;
 80115dc:	2340      	movs	r3, #64	; 0x40
 80115de:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 80115e0:	2417      	movs	r4, #23
		break;
 80115e2:	e7f2      	b.n	80115ca <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_7;
 80115e4:	2380      	movs	r3, #128	; 0x80
 80115e6:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 80115e8:	2417      	movs	r4, #23
		break;
 80115ea:	e7ee      	b.n	80115ca <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_8;
 80115ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115f0:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 80115f2:	2417      	movs	r4, #23
		break;
 80115f4:	e7e9      	b.n	80115ca <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_9;
 80115f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115fa:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI9_5_IRQn;
 80115fc:	2417      	movs	r4, #23
		break;
 80115fe:	e7e4      	b.n	80115ca <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_10;
 8011600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011604:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 8011606:	2428      	movs	r4, #40	; 0x28
		break;
 8011608:	e7df      	b.n	80115ca <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_11;
 801160a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801160e:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 8011610:	2428      	movs	r4, #40	; 0x28
		break;
 8011612:	e7da      	b.n	80115ca <GPIO_EnableTrigger+0x5e>
		GPIO_InitStructure.Pin = GPIO_PIN_12;
 8011614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011618:	9301      	str	r3, [sp, #4]
		ExtiLine = EXTI15_10_IRQn;
 801161a:	2428      	movs	r4, #40	; 0x28
		break;
 801161c:	e7d5      	b.n	80115ca <GPIO_EnableTrigger+0x5e>
 801161e:	bf00      	nop
 8011620:	40010400 	.word	0x40010400
 8011624:	48000400 	.word	0x48000400
 8011628:	20007028 	.word	0x20007028
 801162c:	10210000 	.word	0x10210000
 8011630:	10110000 	.word	0x10110000

08011634 <MX_TIM15_Init>:
 * @{
 */

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8011634:	b530      	push	{r4, r5, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim_scope.Instance = TIM15;
 8011636:	4c0e      	ldr	r4, [pc, #56]	; (8011670 <MX_TIM15_Init+0x3c>)
 8011638:	4b0e      	ldr	r3, [pc, #56]	; (8011674 <MX_TIM15_Init+0x40>)
 801163a:	6023      	str	r3, [r4, #0]
{
 801163c:	b089      	sub	sp, #36	; 0x24
	htim_scope.Init.Prescaler = 0;
 801163e:	2500      	movs	r5, #0
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim_scope.Init.Period = 0;
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	HAL_TIM_Base_Init(&htim_scope);
 8011640:	4620      	mov	r0, r4
	htim_scope.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011642:	e9c4 5501 	strd	r5, r5, [r4, #4]
	htim_scope.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011646:	e9c4 5503 	strd	r5, r5, [r4, #12]
	HAL_TIM_Base_Init(&htim_scope);
 801164a:	f7f7 fc4d 	bl	8008ee8 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801164e:	a908      	add	r1, sp, #32
 8011650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011654:	f841 3d10 	str.w	r3, [r1, #-16]!
	HAL_TIM_ConfigClockSource(&htim_scope, &sClockSourceConfig);
 8011658:	4620      	mov	r0, r4
 801165a:	f7f8 fdc7 	bl	800a1ec <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801165e:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 8011660:	4620      	mov	r0, r4
 8011662:	a901      	add	r1, sp, #4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011664:	9503      	str	r5, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011666:	9301      	str	r3, [sp, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim_scope, &sMasterConfig);
 8011668:	f7fa f8ca 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>

}
 801166c:	b009      	add	sp, #36	; 0x24
 801166e:	bd30      	pop	{r4, r5, pc}
 8011670:	2000ed9c 	.word	0x2000ed9c
 8011674:	40014000 	.word	0x40014000

08011678 <TIM15_SCOPE_MspInit>:

void TIM15_SCOPE_MspInit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM15_CLK_ENABLE();
 8011678:	4b06      	ldr	r3, [pc, #24]	; (8011694 <TIM15_SCOPE_MspInit+0x1c>)
 801167a:	699a      	ldr	r2, [r3, #24]
 801167c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011680:	619a      	str	r2, [r3, #24]
 8011682:	699b      	ldr	r3, [r3, #24]
{
 8011684:	b082      	sub	sp, #8
	__HAL_RCC_TIM15_CLK_ENABLE();
 8011686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801168a:	9301      	str	r3, [sp, #4]
 801168c:	9b01      	ldr	r3, [sp, #4]
}
 801168e:	b002      	add	sp, #8
 8011690:	4770      	bx	lr
 8011692:	bf00      	nop
 8011694:	40021000 	.word	0x40021000

08011698 <TIM15_SCOPE_MspDeinit>:

void TIM15_SCOPE_MspDeinit(TIM_HandleTypeDef* htim_base)
{
	__HAL_RCC_TIM15_CLK_DISABLE();
 8011698:	4a02      	ldr	r2, [pc, #8]	; (80116a4 <TIM15_SCOPE_MspDeinit+0xc>)
 801169a:	6993      	ldr	r3, [r2, #24]
 801169c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116a0:	6193      	str	r3, [r2, #24]
}
 80116a2:	4770      	bx	lr
 80116a4:	40021000 	.word	0x40021000

080116a8 <TIMScopeEnable>:

/** @defgroup Scope_TIM_Functions Scope TIMers Functions.
 * @{
 */
void TIMScopeEnable(){
	HAL_TIM_Base_Start(&htim_scope);
 80116a8:	4801      	ldr	r0, [pc, #4]	; (80116b0 <TIMScopeEnable+0x8>)
 80116aa:	f7f7 bd63 	b.w	8009174 <HAL_TIM_Base_Start>
 80116ae:	bf00      	nop
 80116b0:	2000ed9c 	.word	0x2000ed9c

080116b4 <TIMScopeDisable>:
}

void TIMScopeDisable(){
	HAL_TIM_Base_Stop(&htim_scope);
 80116b4:	4801      	ldr	r0, [pc, #4]	; (80116bc <TIMScopeDisable+0x8>)
 80116b6:	f7f7 bd9f 	b.w	80091f8 <HAL_TIM_Base_Stop>
 80116ba:	bf00      	nop
 80116bc:	2000ed9c 	.word	0x2000ed9c

080116c0 <TIM_Reconfig_scope>:
}

uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 80116c0:	b570      	push	{r4, r5, r6, lr}
 80116c2:	4605      	mov	r5, r0
 80116c4:	b082      	sub	sp, #8
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 80116c6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
uint8_t TIM_Reconfig_scope(uint32_t samplingFreq,uint32_t* realFreq){
 80116ca:	460e      	mov	r6, r1
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM15);		//HAL_RCC_GetHCLKFreq();
 80116cc:	f7f7 fa14 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
	return TIM_Reconfig(&htim_scope,periphClock,samplingFreq,realFreq, true);
 80116d0:	2401      	movs	r4, #1
 80116d2:	4601      	mov	r1, r0
 80116d4:	4633      	mov	r3, r6
 80116d6:	462a      	mov	r2, r5
 80116d8:	9400      	str	r4, [sp, #0]
 80116da:	4802      	ldr	r0, [pc, #8]	; (80116e4 <TIM_Reconfig_scope+0x24>)
 80116dc:	f7fd ffa4 	bl	800f628 <TIM_Reconfig>
}
 80116e0:	b002      	add	sp, #8
 80116e2:	bd70      	pop	{r4, r5, r6, pc}
 80116e4:	2000ed9c 	.word	0x2000ed9c

080116e8 <getMaxScopeSamplingFreq>:

uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
	if(ADCRes==12){
 80116e8:	280c      	cmp	r0, #12
 80116ea:	d00b      	beq.n	8011704 <getMaxScopeSamplingFreq+0x1c>
		return MAX_SAMPLING_FREQ_12B;
	}else if(ADCRes==8){
 80116ec:	2808      	cmp	r0, #8
 80116ee:	d007      	beq.n	8011700 <getMaxScopeSamplingFreq+0x18>
uint32_t getMaxScopeSamplingFreq(uint8_t ADCRes){
 80116f0:	b510      	push	{r4, lr}
 80116f2:	4604      	mov	r4, r0
		return MAX_SAMPLING_FREQ_8B;
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 80116f4:	f7f6 ff8a 	bl	800860c <HAL_RCC_GetPCLK2Freq>
 80116f8:	3402      	adds	r4, #2
 80116fa:	fbb0 f0f4 	udiv	r0, r0, r4
}
 80116fe:	bd10      	pop	{r4, pc}
		return MAX_SAMPLING_FREQ_8B;
 8011700:	4801      	ldr	r0, [pc, #4]	; (8011708 <getMaxScopeSamplingFreq+0x20>)
}
 8011702:	4770      	bx	lr
		return MAX_SAMPLING_FREQ_12B;
 8011704:	4801      	ldr	r0, [pc, #4]	; (801170c <getMaxScopeSamplingFreq+0x24>)
 8011706:	4770      	bx	lr
 8011708:	00493e00 	.word	0x00493e00
 801170c:	003d0900 	.word	0x003d0900

08011710 <getMaxScopeSamplingFreqInterleaved>:

uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
	if(ADCRes==12){
 8011710:	280c      	cmp	r0, #12
 8011712:	d00b      	beq.n	801172c <getMaxScopeSamplingFreqInterleaved+0x1c>
		return MAX_INTERLEAVE_FREQ_12B;
	}else if(ADCRes==8){
 8011714:	2808      	cmp	r0, #8
 8011716:	d007      	beq.n	8011728 <getMaxScopeSamplingFreqInterleaved+0x18>
uint32_t getMaxScopeSamplingFreqInterleaved(uint8_t ADCRes){
 8011718:	b510      	push	{r4, lr}
 801171a:	4604      	mov	r4, r0
		return MAX_INTERLEAVE_FREQ_8B;
	}
	return HAL_RCC_GetPCLK2Freq()/(ADCRes+2);
 801171c:	f7f6 ff76 	bl	800860c <HAL_RCC_GetPCLK2Freq>
 8011720:	3402      	adds	r4, #2
 8011722:	fbb0 f0f4 	udiv	r0, r0, r4
}
 8011726:	bd10      	pop	{r4, pc}
		return MAX_INTERLEAVE_FREQ_8B;
 8011728:	4801      	ldr	r0, [pc, #4]	; (8011730 <getMaxScopeSamplingFreqInterleaved+0x20>)
}
 801172a:	4770      	bx	lr
		return MAX_INTERLEAVE_FREQ_12B;
 801172c:	4801      	ldr	r0, [pc, #4]	; (8011734 <getMaxScopeSamplingFreqInterleaved+0x24>)
 801172e:	4770      	bx	lr
 8011730:	006ddd00 	.word	0x006ddd00
 8011734:	005b8d80 	.word	0x005b8d80

08011738 <MX_TIM8_SYNC_PWM_Init>:
 * @brief  TIM8 Configuration.
 * @note   Configures 4 channels for synchronized PWM outputs handled by one timer.
 * @param  None
 * @retval None
 */
static void MX_TIM8_SYNC_PWM_Init(void) {
 8011738:	b5f0      	push	{r4, r5, r6, r7, lr}
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

	/* TIM8 running on 72 MHz - Run 1 Hz by default. */
	htim8.Instance = TIM8;
 801173a:	4d2f      	ldr	r5, [pc, #188]	; (80117f8 <MX_TIM8_SYNC_PWM_Init+0xc0>)
 801173c:	4b2f      	ldr	r3, [pc, #188]	; (80117fc <MX_TIM8_SYNC_PWM_Init+0xc4>)
 801173e:	602b      	str	r3, [r5, #0]
static void MX_TIM8_SYNC_PWM_Init(void) {
 8011740:	b09b      	sub	sp, #108	; 0x6c
	htim8.Init.Prescaler = 1151; // 1151
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011742:	2400      	movs	r4, #0
	htim8.Init.Prescaler = 1151; // 1151
 8011744:	f240 427f 	movw	r2, #1151	; 0x47f
	htim8.Init.Period = 62499; // 62499
 8011748:	f24f 4323 	movw	r3, #62499	; 0xf423
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim8.Init.RepetitionCounter = 0;
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	HAL_TIM_Base_Init(&htim8);
 801174c:	4628      	mov	r0, r5
	htim8.Init.Prescaler = 1151; // 1151
 801174e:	606a      	str	r2, [r5, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011750:	e9c5 4302 	strd	r4, r3, [r5, #8]
	htim8.Init.RepetitionCounter = 0;
 8011754:	e9c5 4404 	strd	r4, r4, [r5, #16]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011758:	61ac      	str	r4, [r5, #24]
	HAL_TIM_Base_Init(&htim8);
 801175a:	f7f7 fbc5 	bl	8008ee8 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801175e:	a91a      	add	r1, sp, #104	; 0x68
 8011760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011764:	f841 3d58 	str.w	r3, [r1, #-88]!
	HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 8011768:	4628      	mov	r0, r5
 801176a:	f7f8 fd3f 	bl	800a1ec <HAL_TIM_ConfigClockSource>
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	//	sConfigOC.Pulse = 0;
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 801176e:	4e24      	ldr	r6, [pc, #144]	; (8011800 <MX_TIM8_SYNC_PWM_Init+0xc8>)
	HAL_TIM_OC_Init(&htim8);
 8011770:	4628      	mov	r0, r5
 8011772:	f7f7 fe1f 	bl	80093b4 <HAL_TIM_OC_Init>
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 8011776:	a901      	add	r1, sp, #4
 8011778:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801177a:	e9cd 4401 	strd	r4, r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801177e:	9403      	str	r4, [sp, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 8011780:	f7fa f83e 	bl	800b800 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = syncPwm.dataEdgeChan1[1];
 8011784:	8877      	ldrh	r7, [r6, #2]
 8011786:	9709      	str	r7, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 8011788:	4622      	mov	r2, r4
 801178a:	a908      	add	r1, sp, #32
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801178c:	2330      	movs	r3, #48	; 0x30
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 801178e:	2708      	movs	r7, #8
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 8011790:	4628      	mov	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8011792:	9308      	str	r3, [sp, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011794:	940a      	str	r4, [sp, #40]	; 0x28
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8011796:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801179a:	940e      	str	r4, [sp, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 801179c:	970b      	str	r7, [sp, #44]	; 0x2c
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 801179e:	f7f9 fc91 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan2[1];
 80117a2:	88f3      	ldrh	r3, [r6, #6]
 80117a4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
 80117a6:	a908      	add	r1, sp, #32
 80117a8:	4628      	mov	r0, r5
 80117aa:	2204      	movs	r2, #4
 80117ac:	f7f9 fc8a 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan3[1];
 80117b0:	8973      	ldrh	r3, [r6, #10]
 80117b2:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
 80117b4:	463a      	mov	r2, r7
 80117b6:	a908      	add	r1, sp, #32
 80117b8:	4628      	mov	r0, r5
 80117ba:	f7f9 fc83 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
	sConfigOC.Pulse = syncPwm.dataEdgeChan4[1];
 80117be:	89f3      	ldrh	r3, [r6, #14]
 80117c0:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
 80117c2:	a908      	add	r1, sp, #32
 80117c4:	4628      	mov	r0, r5
 80117c6:	220c      	movs	r2, #12
 80117c8:	f7f9 fc7c 	bl	800b0c4 <HAL_TIM_OC_ConfigChannel>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80117cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	sBreakDeadTimeConfig.BreakFilter = 0;
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80117d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	sBreakDeadTimeConfig.Break2Filter = 0;
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 80117d4:	4628      	mov	r0, r5
 80117d6:	a90f      	add	r1, sp, #60	; 0x3c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80117d8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.DeadTime = 0;
 80117dc:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80117e0:	9413      	str	r4, [sp, #76]	; 0x4c
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80117e2:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80117e6:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80117ea:	9214      	str	r2, [sp, #80]	; 0x50
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80117ec:	9317      	str	r3, [sp, #92]	; 0x5c
	HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 80117ee:	f7fa f88b 	bl	800b908 <HAL_TIMEx_ConfigBreakDeadTime>
}
 80117f2:	b01b      	add	sp, #108	; 0x6c
 80117f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117f6:	bf00      	nop
 80117f8:	2000ee20 	.word	0x2000ee20
 80117fc:	40013400 	.word	0x40013400
 8011800:	2000e710 	.word	0x2000e710

08011804 <TIM8_SYNC_PWM_MspInit>:

void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Peripheral clock enable */
	__HAL_RCC_TIM8_CLK_ENABLE();
 8011804:	4b4b      	ldr	r3, [pc, #300]	; (8011934 <TIM8_SYNC_PWM_MspInit+0x130>)
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 8011806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_TIM8_CLK_ENABLE();
 801180a:	6999      	ldr	r1, [r3, #24]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* TIM8 DMA Init */
	/* TIM8_CH1 Init */
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 801180c:	4d4a      	ldr	r5, [pc, #296]	; (8011938 <TIM8_SYNC_PWM_MspInit+0x134>)
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch1);
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 801180e:	f8df b14c 	ldr.w	fp, [pc, #332]	; 801195c <TIM8_SYNC_PWM_MspInit+0x158>
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);

	/* TIM8_CH2 Init */
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 8011812:	4c4a      	ldr	r4, [pc, #296]	; (801193c <TIM8_SYNC_PWM_MspInit+0x138>)
	__HAL_RCC_TIM8_CLK_ENABLE();
 8011814:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8011818:	6199      	str	r1, [r3, #24]
 801181a:	6999      	ldr	r1, [r3, #24]
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 801181c:	b087      	sub	sp, #28
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 801181e:	2604      	movs	r6, #4
	__HAL_RCC_TIM8_CLK_ENABLE();
 8011820:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
void TIM8_SYNC_PWM_MspInit(TIM_HandleTypeDef* htim_base) {
 8011824:	4682      	mov	sl, r0
	__HAL_RCC_TIM8_CLK_ENABLE();
 8011826:	9100      	str	r1, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011828:	2202      	movs	r2, #2
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801182a:	eb0d 0106 	add.w	r1, sp, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801182e:	2301      	movs	r3, #1
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8011830:	f44f 7870 	mov.w	r8, #960	; 0x3c0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011834:	2703      	movs	r7, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011836:	4842      	ldr	r0, [pc, #264]	; (8011940 <TIM8_SYNC_PWM_MspInit+0x13c>)
	__HAL_RCC_TIM8_CLK_ENABLE();
 8011838:	f8dd 9000 	ldr.w	r9, [sp]
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 801183c:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801183e:	e9cd 8201 	strd	r8, r2, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011842:	e9cd 3703 	strd	r3, r7, [sp, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011846:	f7f5 ff79 	bl	800773c <HAL_GPIO_Init>
	hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801184a:	2210      	movs	r2, #16
 801184c:	2300      	movs	r3, #0
 801184e:	e9c5 2301 	strd	r2, r3, [r5, #4]
	hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011852:	f44f 6780 	mov.w	r7, #1024	; 0x400
	hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8011856:	f04f 0980 	mov.w	r9, #128	; 0x80
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801185a:	f44f 7880 	mov.w	r8, #256	; 0x100
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 801185e:	2620      	movs	r6, #32
	hdma_tim8_ch1.Instance = DMA2_Channel3;
 8011860:	4938      	ldr	r1, [pc, #224]	; (8011944 <TIM8_SYNC_PWM_MspInit+0x140>)
 8011862:	6029      	str	r1, [r5, #0]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8011864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch1);
 8011868:	4628      	mov	r0, r5
	hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801186a:	e9c5 9803 	strd	r9, r8, [r5, #12]
	hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 801186e:	e9c5 7605 	strd	r7, r6, [r5, #20]
	hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8011872:	61eb      	str	r3, [r5, #28]
	HAL_DMA_Init(&hdma_tim8_ch1);
 8011874:	f7f5 fc86 	bl	8007184 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8011878:	f8db 0000 	ldr.w	r0, [fp]
 801187c:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801187e:	2310      	movs	r3, #16
 8011880:	6063      	str	r3, [r4, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8011882:	f441 7100 	orr.w	r1, r1, #512	; 0x200
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8011886:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8011888:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 801188a:	60a3      	str	r3, [r4, #8]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 801188c:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 8011890:	492d      	ldr	r1, [pc, #180]	; (8011948 <TIM8_SYNC_PWM_MspInit+0x144>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim8_ch1);
 8011892:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8011896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch2);
 801189a:	4620      	mov	r0, r4
	hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801189c:	e9c4 9803 	strd	r9, r8, [r4, #12]
	hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 80118a0:	e9c4 7605 	strd	r7, r6, [r4, #20]
	hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80118a4:	61e3      	str	r3, [r4, #28]
	hdma_tim8_ch2.Instance = DMA2_Channel5;
 80118a6:	6021      	str	r1, [r4, #0]
	HAL_DMA_Init(&hdma_tim8_ch2);
 80118a8:	f7f5 fc6c 	bl	8007184 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 80118ac:	f8db 0000 	ldr.w	r0, [fp]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);

	/* TIM8_CH3_UP Init */
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 80118b0:	4d26      	ldr	r5, [pc, #152]	; (801194c <TIM8_SYNC_PWM_MspInit+0x148>)
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 80118b2:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80118b4:	2310      	movs	r3, #16
 80118b6:	606b      	str	r3, [r5, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 80118b8:	4339      	orrs	r1, r7
	hdma_tim8_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80118ba:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 80118bc:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 80118be:	4924      	ldr	r1, [pc, #144]	; (8011950 <TIM8_SYNC_PWM_MspInit+0x14c>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 80118c0:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
	hdma_tim8_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80118c4:	e9c5 3902 	strd	r3, r9, [r5, #8]
	hdma_tim8_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 80118c8:	4628      	mov	r0, r5
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 80118ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC2], hdma_tim8_ch2);
 80118ce:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
	hdma_tim8_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 80118d2:	61eb      	str	r3, [r5, #28]
	hdma_tim8_ch3_up.Instance = DMA2_Channel1;
 80118d4:	6029      	str	r1, [r5, #0]
	hdma_tim8_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80118d6:	e9c5 8704 	strd	r8, r7, [r5, #16]
	hdma_tim8_ch3_up.Init.Mode = DMA_CIRCULAR;
 80118da:	61ae      	str	r6, [r5, #24]
	HAL_DMA_Init(&hdma_tim8_ch3_up);
 80118dc:	f7f5 fc52 	bl	8007184 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 80118e0:	f8db 0000 	ldr.w	r0, [fp]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);

	/* TIM8_CH4_TRIG_COM Init */
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 80118e4:	4c1b      	ldr	r4, [pc, #108]	; (8011954 <TIM8_SYNC_PWM_MspInit+0x150>)
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 80118e6:	68c1      	ldr	r1, [r0, #12]
	hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80118e8:	2310      	movs	r3, #16
 80118ea:	6063      	str	r3, [r4, #4]
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 80118ec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80118f0:	2300      	movs	r3, #0
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 80118f2:	60c1      	str	r1, [r0, #12]
	hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80118f4:	60a3      	str	r3, [r4, #8]
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 80118f6:	4918      	ldr	r1, [pc, #96]	; (8011958 <TIM8_SYNC_PWM_MspInit+0x154>)
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 80118f8:	f8ca 502c 	str.w	r5, [sl, #44]	; 0x2c
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
	hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80118fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 8011900:	4620      	mov	r0, r4
	hdma_tim8_ch4_trig_com.Instance = DMA2_Channel2;
 8011902:	6021      	str	r1, [r4, #0]
	hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8011904:	f8c4 900c 	str.w	r9, [r4, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC3], hdma_tim8_ch3_up);
 8011908:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
	hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801190c:	e9c4 8704 	strd	r8, r7, [r4, #16]
	hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8011910:	61a6      	str	r6, [r4, #24]
	hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8011912:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(&hdma_tim8_ch4_trig_com);
 8011914:	f7f5 fc36 	bl	8007184 <HAL_DMA_Init>
	__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 8011918:	f8db 1000 	ldr.w	r1, [fp]
 801191c:	68ca      	ldr	r2, [r1, #12]
 801191e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011922:	60ca      	str	r2, [r1, #12]
	__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC4], hdma_tim8_ch4_trig_com);
 8011924:	f8ca 4030 	str.w	r4, [sl, #48]	; 0x30
 8011928:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
}
 801192c:	b007      	add	sp, #28
 801192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011932:	bf00      	nop
 8011934:	40021000 	.word	0x40021000
 8011938:	2000ee60 	.word	0x2000ee60
 801193c:	2000eddc 	.word	0x2000eddc
 8011940:	48000800 	.word	0x48000800
 8011944:	40020430 	.word	0x40020430
 8011948:	40020458 	.word	0x40020458
 801194c:	2000eee8 	.word	0x2000eee8
 8011950:	40020408 	.word	0x40020408
 8011954:	2000eea4 	.word	0x2000eea4
 8011958:	4002041c 	.word	0x4002041c
 801195c:	2000ee20 	.word	0x2000ee20

08011960 <TIM8_SYNC_PWM_MspDeinit>:

void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
	/* Peripheral clock disable */
	__HAL_RCC_TIM8_CLK_DISABLE();
 8011960:	4a0a      	ldr	r2, [pc, #40]	; (801198c <TIM8_SYNC_PWM_MspDeinit+0x2c>)
 8011962:	6993      	ldr	r3, [r2, #24]
void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 8011964:	b510      	push	{r4, lr}
	__HAL_RCC_TIM8_CLK_DISABLE();
 8011966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
void TIM8_SYNC_PWM_MspDeinit(TIM_HandleTypeDef* htim_base) {
 801196a:	4604      	mov	r4, r0
	__HAL_RCC_TIM8_CLK_DISABLE();
 801196c:	6193      	str	r3, [r2, #24]

	/* TIM8 DMA DeInit */
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC1]);
 801196e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011970:	f7f5 fcd6 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC2]);
 8011974:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011976:	f7f5 fcd3 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC3]);
 801197a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801197c:	f7f5 fcd0 	bl	8007320 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 8011980:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8011982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_CC4]);
 8011986:	f7f5 bccb 	b.w	8007320 <HAL_DMA_DeInit>
 801198a:	bf00      	nop
 801198c:	40021000 	.word	0x40021000

08011990 <TIM_SYNC_PWM_Init>:
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Init(void) {
	//	htim8.State = HAL_TIM_STATE_RESET;
	MX_TIM8_SYNC_PWM_Init();
 8011990:	f7ff bed2 	b.w	8011738 <MX_TIM8_SYNC_PWM_Init>

08011994 <TIM_SYNC_PWM_Deinit>:
 * @brief  Deinit of Synchronized PWMs.
 * @note		TIM8 peripherla reset.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Deinit(void) {
 8011994:	b508      	push	{r3, lr}
	HAL_TIM_Base_DeInit(&htim8);
 8011996:	4806      	ldr	r0, [pc, #24]	; (80119b0 <TIM_SYNC_PWM_Deinit+0x1c>)
 8011998:	f7f7 fb9c 	bl	80090d4 <HAL_TIM_Base_DeInit>

	/* Reset TIM8 preipheral */
	__HAL_RCC_TIM8_FORCE_RESET();
 801199c:	4b05      	ldr	r3, [pc, #20]	; (80119b4 <TIM_SYNC_PWM_Deinit+0x20>)
 801199e:	68da      	ldr	r2, [r3, #12]
 80119a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80119a4:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM8_RELEASE_RESET();
 80119a6:	68da      	ldr	r2, [r3, #12]
 80119a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80119ac:	60da      	str	r2, [r3, #12]
}
 80119ae:	bd08      	pop	{r3, pc}
 80119b0:	2000ee20 	.word	0x2000ee20
 80119b4:	40021000 	.word	0x40021000

080119b8 <TIM_SYNC_PWM_ChannelState>:
 * @param  channel: channel number 1 - 4
 * @param  state: CHAN_ENABLE or CHAN_DISABLE
 * @retval None
 */
void TIM_SYNC_PWM_ChannelState(uint8_t channel, uint8_t state) {
	if (channel == 1) {
 80119b8:	2801      	cmp	r0, #1
 80119ba:	d017      	beq.n	80119ec <TIM_SYNC_PWM_ChannelState+0x34>
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 2) {
 80119bc:	2802      	cmp	r0, #2
 80119be:	d00c      	beq.n	80119da <TIM_SYNC_PWM_ChannelState+0x22>
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 3) {
 80119c0:	2803      	cmp	r0, #3
 80119c2:	d01c      	beq.n	80119fe <TIM_SYNC_PWM_ChannelState+0x46>
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
	} else if (channel == 4) {
 80119c4:	2804      	cmp	r0, #4
 80119c6:	d107      	bne.n	80119d8 <TIM_SYNC_PWM_ChannelState+0x20>
		syncPwm.chan4 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 80119c8:	f1a1 0101 	sub.w	r1, r1, #1
 80119cc:	4b10      	ldr	r3, [pc, #64]	; (8011a10 <TIM_SYNC_PWM_ChannelState+0x58>)
 80119ce:	fab1 f181 	clz	r1, r1
 80119d2:	0949      	lsrs	r1, r1, #5
 80119d4:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	}
}
 80119d8:	4770      	bx	lr
		syncPwm.chan2 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 80119da:	f1a1 0101 	sub.w	r1, r1, #1
 80119de:	4b0c      	ldr	r3, [pc, #48]	; (8011a10 <TIM_SYNC_PWM_ChannelState+0x58>)
 80119e0:	fab1 f181 	clz	r1, r1
 80119e4:	0949      	lsrs	r1, r1, #5
 80119e6:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
 80119ea:	4770      	bx	lr
		syncPwm.chan1 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 80119ec:	f1a1 0101 	sub.w	r1, r1, #1
 80119f0:	4b07      	ldr	r3, [pc, #28]	; (8011a10 <TIM_SYNC_PWM_ChannelState+0x58>)
 80119f2:	fab1 f181 	clz	r1, r1
 80119f6:	0949      	lsrs	r1, r1, #5
 80119f8:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 80119fc:	4770      	bx	lr
		syncPwm.chan3 = (state == 1) ? CHAN_ENABLE : CHAN_DISABLE;
 80119fe:	f1a1 0101 	sub.w	r1, r1, #1
 8011a02:	4b03      	ldr	r3, [pc, #12]	; (8011a10 <TIM_SYNC_PWM_ChannelState+0x58>)
 8011a04:	fab1 f181 	clz	r1, r1
 8011a08:	0949      	lsrs	r1, r1, #5
 8011a0a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8011a0e:	4770      	bx	lr
 8011a10:	2000e710 	.word	0x2000e710

08011a14 <TIM_SYNC_PWM_Start>:
/**
 * @brief  Starts generating synchronized PWM on the selected channels.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Start(void) {
 8011a14:	b570      	push	{r4, r5, r6, lr}
	if (syncPwm.chan1 == CHAN_ENABLE) {
 8011a16:	4c38      	ldr	r4, [pc, #224]	; (8011af8 <TIM_SYNC_PWM_Start+0xe4>)
 8011a18:	4e38      	ldr	r6, [pc, #224]	; (8011afc <TIM_SYNC_PWM_Start+0xe8>)
 8011a1a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
 8011a1e:	6832      	ldr	r2, [r6, #0]
 8011a20:	b2ed      	uxtb	r5, r5
 8011a22:	2d01      	cmp	r5, #1
 8011a24:	d053      	beq.n	8011ace <TIM_SYNC_PWM_Start+0xba>
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
				(uint32_t) &(htim8.Instance->CCR1), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 8011a26:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
 8011a2a:	b2ed      	uxtb	r5, r5
 8011a2c:	2d01      	cmp	r5, #1
 8011a2e:	d03a      	beq.n	8011aa6 <TIM_SYNC_PWM_Start+0x92>
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
				(uint32_t) &(htim8.Instance->CCR2), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 8011a30:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
 8011a34:	b2ed      	uxtb	r5, r5
 8011a36:	2d01      	cmp	r5, #1
 8011a38:	d021      	beq.n	8011a7e <TIM_SYNC_PWM_Start+0x6a>
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
				(uint32_t) &(htim8.Instance->CCR3), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 8011a3a:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 8011a3e:	b2ed      	uxtb	r5, r5
 8011a40:	2d01      	cmp	r5, #1
 8011a42:	d008      	beq.n	8011a56 <TIM_SYNC_PWM_Start+0x42>
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
				(uint32_t) &syncPwm.dataEdgeChan4[0], (uint32_t) &(htim8.Instance->CCR4), 2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
	}
	/* Master Output Enable. */
	__HAL_TIM_MOE_ENABLE(&htim8);
 8011a44:	6c53      	ldr	r3, [r2, #68]	; 0x44
	/* Start generating. */
	HAL_TIM_Base_Start(&htim8);
 8011a46:	482d      	ldr	r0, [pc, #180]	; (8011afc <TIM_SYNC_PWM_Start+0xe8>)
	__HAL_TIM_MOE_ENABLE(&htim8);
 8011a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a4c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8011a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim8);
 8011a52:	f7f7 bb8f 	b.w	8009174 <HAL_TIM_Base_Start>
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 8011a56:	89e3      	ldrh	r3, [r4, #14]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 8011a58:	4929      	ldr	r1, [pc, #164]	; (8011b00 <TIM_SYNC_PWM_Start+0xec>)
 8011a5a:	482a      	ldr	r0, [pc, #168]	; (8011b04 <TIM_SYNC_PWM_Start+0xf0>)
		htim8.Instance->CCR4 = syncPwm.dataEdgeChan4[1];
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC4);
 8011a60:	68d3      	ldr	r3, [r2, #12]
 8011a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011a66:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch4_trig_com,
 8011a68:	3240      	adds	r2, #64	; 0x40
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	f7f5 fcde 	bl	800742c <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_ENABLE);
 8011a70:	462a      	mov	r2, r5
 8011a72:	210c      	movs	r1, #12
 8011a74:	6830      	ldr	r0, [r6, #0]
 8011a76:	f7f9 fad5 	bl	800b024 <TIM_CCxChannelCmd>
 8011a7a:	6832      	ldr	r2, [r6, #0]
 8011a7c:	e7e2      	b.n	8011a44 <TIM_SYNC_PWM_Start+0x30>
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 8011a7e:	8963      	ldrh	r3, [r4, #10]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 8011a80:	4921      	ldr	r1, [pc, #132]	; (8011b08 <TIM_SYNC_PWM_Start+0xf4>)
 8011a82:	4822      	ldr	r0, [pc, #136]	; (8011b0c <TIM_SYNC_PWM_Start+0xf8>)
		htim8.Instance->CCR3 = syncPwm.dataEdgeChan3[1];
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	63d3      	str	r3, [r2, #60]	; 0x3c
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC3);
 8011a88:	68d3      	ldr	r3, [r2, #12]
 8011a8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011a8e:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch3_up, (uint32_t) &syncPwm.dataEdgeChan3[0],
 8011a90:	323c      	adds	r2, #60	; 0x3c
 8011a92:	2302      	movs	r3, #2
 8011a94:	f7f5 fcca 	bl	800742c <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 8011a98:	462a      	mov	r2, r5
 8011a9a:	2108      	movs	r1, #8
 8011a9c:	6830      	ldr	r0, [r6, #0]
 8011a9e:	f7f9 fac1 	bl	800b024 <TIM_CCxChannelCmd>
 8011aa2:	6832      	ldr	r2, [r6, #0]
 8011aa4:	e7c9      	b.n	8011a3a <TIM_SYNC_PWM_Start+0x26>
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 8011aa6:	88e3      	ldrh	r3, [r4, #6]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 8011aa8:	4919      	ldr	r1, [pc, #100]	; (8011b10 <TIM_SYNC_PWM_Start+0xfc>)
 8011aaa:	481a      	ldr	r0, [pc, #104]	; (8011b14 <TIM_SYNC_PWM_Start+0x100>)
		htim8.Instance->CCR2 = syncPwm.dataEdgeChan2[1];
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC2);
 8011ab0:	68d3      	ldr	r3, [r2, #12]
 8011ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011ab6:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch2, (uint32_t) &syncPwm.dataEdgeChan2[0],
 8011ab8:	3238      	adds	r2, #56	; 0x38
 8011aba:	2302      	movs	r3, #2
 8011abc:	f7f5 fcb6 	bl	800742c <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011ac0:	462a      	mov	r2, r5
 8011ac2:	2104      	movs	r1, #4
 8011ac4:	6830      	ldr	r0, [r6, #0]
 8011ac6:	f7f9 faad 	bl	800b024 <TIM_CCxChannelCmd>
 8011aca:	6832      	ldr	r2, [r6, #0]
 8011acc:	e7b0      	b.n	8011a30 <TIM_SYNC_PWM_Start+0x1c>
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 8011ace:	8863      	ldrh	r3, [r4, #2]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 8011ad0:	4811      	ldr	r0, [pc, #68]	; (8011b18 <TIM_SYNC_PWM_Start+0x104>)
		htim8.Instance->CCR1 = syncPwm.dataEdgeChan1[1];
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	6353      	str	r3, [r2, #52]	; 0x34
		__HAL_TIM_ENABLE_DMA(&htim8, TIM_DMA_CC1);
 8011ad6:	68d3      	ldr	r3, [r2, #12]
 8011ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011adc:	60d3      	str	r3, [r2, #12]
		HAL_DMA_Start(&hdma_tim8_ch1, (uint32_t) &syncPwm.dataEdgeChan1[0],
 8011ade:	4621      	mov	r1, r4
 8011ae0:	3234      	adds	r2, #52	; 0x34
 8011ae2:	2302      	movs	r3, #2
 8011ae4:	f7f5 fca2 	bl	800742c <HAL_DMA_Start>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011ae8:	462a      	mov	r2, r5
 8011aea:	2100      	movs	r1, #0
 8011aec:	6830      	ldr	r0, [r6, #0]
 8011aee:	f7f9 fa99 	bl	800b024 <TIM_CCxChannelCmd>
 8011af2:	6832      	ldr	r2, [r6, #0]
 8011af4:	e797      	b.n	8011a26 <TIM_SYNC_PWM_Start+0x12>
 8011af6:	bf00      	nop
 8011af8:	2000e710 	.word	0x2000e710
 8011afc:	2000ee20 	.word	0x2000ee20
 8011b00:	2000e71c 	.word	0x2000e71c
 8011b04:	2000eea4 	.word	0x2000eea4
 8011b08:	2000e718 	.word	0x2000e718
 8011b0c:	2000eee8 	.word	0x2000eee8
 8011b10:	2000e714 	.word	0x2000e714
 8011b14:	2000eddc 	.word	0x2000eddc
 8011b18:	2000ee60 	.word	0x2000ee60

08011b1c <TIM_SYNC_PWM_Stop>:
/**
 * @brief  Stops generating synchronized PWM.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_Stop(void) {
 8011b1c:	b538      	push	{r3, r4, r5, lr}
	/* Disable the peripheral */
	__HAL_TIM_DISABLE(&htim8);
 8011b1e:	4d4f      	ldr	r5, [pc, #316]	; (8011c5c <TIM_SYNC_PWM_Stop+0x140>)
 8011b20:	682b      	ldr	r3, [r5, #0]
 8011b22:	6a19      	ldr	r1, [r3, #32]
 8011b24:	f241 1211 	movw	r2, #4369	; 0x1111
 8011b28:	4211      	tst	r1, r2
 8011b2a:	d105      	bne.n	8011b38 <TIM_SYNC_PWM_Stop+0x1c>
 8011b2c:	6a19      	ldr	r1, [r3, #32]
 8011b2e:	f240 4244 	movw	r2, #1092	; 0x444
 8011b32:	4211      	tst	r1, r2
 8011b34:	f000 808d 	beq.w	8011c52 <TIM_SYNC_PWM_Stop+0x136>
	/* Master Output Enable Disable */
	__HAL_TIM_MOE_DISABLE(&htim8);
 8011b38:	6a19      	ldr	r1, [r3, #32]
 8011b3a:	f241 1211 	movw	r2, #4369	; 0x1111
 8011b3e:	4211      	tst	r1, r2
 8011b40:	d104      	bne.n	8011b4c <TIM_SYNC_PWM_Stop+0x30>
 8011b42:	6a19      	ldr	r1, [r3, #32]
 8011b44:	f240 4244 	movw	r2, #1092	; 0x444
 8011b48:	4211      	tst	r1, r2
 8011b4a:	d038      	beq.n	8011bbe <TIM_SYNC_PWM_Stop+0xa2>

	if (syncPwm.chan1 == CHAN_ENABLE) {
 8011b4c:	4c44      	ldr	r4, [pc, #272]	; (8011c60 <TIM_SYNC_PWM_Stop+0x144>)
 8011b4e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8011b52:	2a01      	cmp	r2, #1
 8011b54:	d03c      	beq.n	8011bd0 <TIM_SYNC_PWM_Stop+0xb4>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
		HAL_DMA_Abort(&hdma_tim8_ch1);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan2 == CHAN_ENABLE) {
 8011b56:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8011b5a:	2a01      	cmp	r2, #1
 8011b5c:	d049      	beq.n	8011bf2 <TIM_SYNC_PWM_Stop+0xd6>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
		HAL_DMA_Abort(&hdma_tim8_ch2);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan3 == CHAN_ENABLE) {
 8011b5e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8011b62:	2a01      	cmp	r2, #1
 8011b64:	d056      	beq.n	8011c14 <TIM_SYNC_PWM_Stop+0xf8>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
	}

	if (syncPwm.chan4 == CHAN_ENABLE) {
 8011b66:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8011b6a:	2a01      	cmp	r2, #1
 8011b6c:	d063      	beq.n	8011c36 <TIM_SYNC_PWM_Stop+0x11a>
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
	}

	/* Save configuration. */
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 8011b6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	syncPwm.timPrescReg = htim8.Instance->PSC;

	/* There are DMA pending requests when stopped. Unfortunately
	 cannot be cleared in another way. */
	__HAL_RCC_TIM8_FORCE_RESET();
 8011b70:	4a3c      	ldr	r2, [pc, #240]	; (8011c64 <TIM_SYNC_PWM_Stop+0x148>)
	syncPwm.timAutoReloadReg = htim8.Instance->ARR; //TIM8->ARR;
 8011b72:	b289      	uxth	r1, r1
 8011b74:	8221      	strh	r1, [r4, #16]
	syncPwm.timPrescReg = htim8.Instance->PSC;
 8011b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	8263      	strh	r3, [r4, #18]
	__HAL_RCC_TIM8_FORCE_RESET();
 8011b7c:	68d3      	ldr	r3, [r2, #12]
 8011b7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011b82:	60d3      	str	r3, [r2, #12]
	__HAL_RCC_TIM8_RELEASE_RESET();
 8011b84:	68d3      	ldr	r3, [r2, #12]
 8011b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b8a:	60d3      	str	r3, [r2, #12]

	MX_TIM8_SYNC_PWM_Init();
 8011b8c:	f7ff fdd4 	bl	8011738 <MX_TIM8_SYNC_PWM_Init>

	/* Set One Pulse Mode after reset if previously enabled. Funny thing is
	 the peripheral does not work if CEN bit is not enabled right after OPM bit.
	 And even funnier is it does not generate a pulse. Bloody hell! */
	if (syncPwm.stepMode == CHAN_ENABLE) {
 8011b90:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 * @note		Only one period of PWM is generated. Disable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Enable(void) {
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 8011b94:	682b      	ldr	r3, [r5, #0]
	if (syncPwm.stepMode == CHAN_ENABLE) {
 8011b96:	b2d2      	uxtb	r2, r2
 8011b98:	2a01      	cmp	r2, #1
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8011b9a:	bf01      	itttt	eq
 8011b9c:	6819      	ldreq	r1, [r3, #0]
 8011b9e:	f041 0108 	orreq.w	r1, r1, #8
 8011ba2:	6019      	streq	r1, [r3, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 8011ba4:	f884 2025 	strbeq.w	r2, [r4, #37]	; 0x25
	htim8.Instance->PSC = syncPwm.timPrescReg;
 8011ba8:	8a62      	ldrh	r2, [r4, #18]
 8011baa:	b292      	uxth	r2, r2
 8011bac:	629a      	str	r2, [r3, #40]	; 0x28
	htim8.Instance->ARR = syncPwm.timAutoReloadReg;
 8011bae:	8a22      	ldrh	r2, [r4, #16]
 8011bb0:	b292      	uxth	r2, r2
 8011bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8011bb4:	695a      	ldr	r2, [r3, #20]
 8011bb6:	f042 0201 	orr.w	r2, r2, #1
 8011bba:	615a      	str	r2, [r3, #20]
}
 8011bbc:	bd38      	pop	{r3, r4, r5, pc}
	__HAL_TIM_MOE_DISABLE(&htim8);
 8011bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
	if (syncPwm.chan1 == CHAN_ENABLE) {
 8011bc0:	4c27      	ldr	r4, [pc, #156]	; (8011c60 <TIM_SYNC_PWM_Stop+0x144>)
	__HAL_TIM_MOE_DISABLE(&htim8);
 8011bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011bc6:	645a      	str	r2, [r3, #68]	; 0x44
	if (syncPwm.chan1 == CHAN_ENABLE) {
 8011bc8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8011bcc:	2a01      	cmp	r2, #1
 8011bce:	d1c2      	bne.n	8011b56 <TIM_SYNC_PWM_Stop+0x3a>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 8011bd0:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 8011bd2:	4825      	ldr	r0, [pc, #148]	; (8011c68 <TIM_SYNC_PWM_Stop+0x14c>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC1);
 8011bd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011bd8:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch1);
 8011bda:	f7f5 fccb 	bl	8007574 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8011bde:	2200      	movs	r2, #0
 8011be0:	4611      	mov	r1, r2
 8011be2:	6828      	ldr	r0, [r5, #0]
 8011be4:	f7f9 fa1e 	bl	800b024 <TIM_CCxChannelCmd>
	if (syncPwm.chan2 == CHAN_ENABLE) {
 8011be8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8011bec:	682b      	ldr	r3, [r5, #0]
 8011bee:	2a01      	cmp	r2, #1
 8011bf0:	d1b5      	bne.n	8011b5e <TIM_SYNC_PWM_Stop+0x42>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 8011bf2:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 8011bf4:	481d      	ldr	r0, [pc, #116]	; (8011c6c <TIM_SYNC_PWM_Stop+0x150>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC2);
 8011bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011bfa:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch2);
 8011bfc:	f7f5 fcba 	bl	8007574 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8011c00:	2200      	movs	r2, #0
 8011c02:	2104      	movs	r1, #4
 8011c04:	6828      	ldr	r0, [r5, #0]
 8011c06:	f7f9 fa0d 	bl	800b024 <TIM_CCxChannelCmd>
	if (syncPwm.chan3 == CHAN_ENABLE) {
 8011c0a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8011c0e:	682b      	ldr	r3, [r5, #0]
 8011c10:	2a01      	cmp	r2, #1
 8011c12:	d1a8      	bne.n	8011b66 <TIM_SYNC_PWM_Stop+0x4a>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 8011c14:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8011c16:	4816      	ldr	r0, [pc, #88]	; (8011c70 <TIM_SYNC_PWM_Stop+0x154>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC3);
 8011c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011c1c:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch3_up);
 8011c1e:	f7f5 fca9 	bl	8007574 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 8011c22:	2200      	movs	r2, #0
 8011c24:	2108      	movs	r1, #8
 8011c26:	6828      	ldr	r0, [r5, #0]
 8011c28:	f7f9 f9fc 	bl	800b024 <TIM_CCxChannelCmd>
	if (syncPwm.chan4 == CHAN_ENABLE) {
 8011c2c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8011c30:	682b      	ldr	r3, [r5, #0]
 8011c32:	2a01      	cmp	r2, #1
 8011c34:	d19b      	bne.n	8011b6e <TIM_SYNC_PWM_Stop+0x52>
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 8011c36:	68da      	ldr	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8011c38:	480e      	ldr	r0, [pc, #56]	; (8011c74 <TIM_SYNC_PWM_Stop+0x158>)
		__HAL_TIM_DISABLE_DMA(&htim8, TIM_DMA_CC4);
 8011c3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011c3e:	60da      	str	r2, [r3, #12]
		HAL_DMA_Abort(&hdma_tim8_ch4_trig_com);
 8011c40:	f7f5 fc98 	bl	8007574 <HAL_DMA_Abort>
		TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);
 8011c44:	2200      	movs	r2, #0
 8011c46:	210c      	movs	r1, #12
 8011c48:	6828      	ldr	r0, [r5, #0]
 8011c4a:	f7f9 f9eb 	bl	800b024 <TIM_CCxChannelCmd>
 8011c4e:	682b      	ldr	r3, [r5, #0]
 8011c50:	e78d      	b.n	8011b6e <TIM_SYNC_PWM_Stop+0x52>
	__HAL_TIM_DISABLE(&htim8);
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	f022 0201 	bic.w	r2, r2, #1
 8011c58:	601a      	str	r2, [r3, #0]
 8011c5a:	e76d      	b.n	8011b38 <TIM_SYNC_PWM_Stop+0x1c>
 8011c5c:	2000ee20 	.word	0x2000ee20
 8011c60:	2000e710 	.word	0x2000e710
 8011c64:	40021000 	.word	0x40021000
 8011c68:	2000ee60 	.word	0x2000ee60
 8011c6c:	2000eddc 	.word	0x2000eddc
 8011c70:	2000eee8 	.word	0x2000eee8
 8011c74:	2000eea4 	.word	0x2000eea4

08011c78 <TIM_SYNC_PWM_DMA_ChanConfig>:
	switch (syncPwm.channelToConfig) {
 8011c78:	4a0a      	ldr	r2, [pc, #40]	; (8011ca4 <TIM_SYNC_PWM_DMA_ChanConfig+0x2c>)
 8011c7a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	2b03      	cmp	r3, #3
 8011c82:	d805      	bhi.n	8011c90 <TIM_SYNC_PWM_DMA_ChanConfig+0x18>
 8011c84:	e8df f003 	tbb	[pc, r3]
 8011c88:	0205080b 	.word	0x0205080b
		syncPwm.dataEdgeChan4[0] = ccr2nd;
 8011c8c:	8191      	strh	r1, [r2, #12]
		syncPwm.dataEdgeChan4[1] = ccr1st;
 8011c8e:	81d0      	strh	r0, [r2, #14]
}
 8011c90:	4770      	bx	lr
		syncPwm.dataEdgeChan3[0] = ccr2nd;
 8011c92:	8111      	strh	r1, [r2, #8]
		syncPwm.dataEdgeChan3[1] = ccr1st;
 8011c94:	8150      	strh	r0, [r2, #10]
		break;
 8011c96:	4770      	bx	lr
		syncPwm.dataEdgeChan2[0] = ccr2nd;
 8011c98:	8091      	strh	r1, [r2, #4]
		syncPwm.dataEdgeChan2[1] = ccr1st;
 8011c9a:	80d0      	strh	r0, [r2, #6]
		break;
 8011c9c:	4770      	bx	lr
		syncPwm.dataEdgeChan1[0] = ccr2nd;
 8011c9e:	8011      	strh	r1, [r2, #0]
		syncPwm.dataEdgeChan1[1] = ccr1st;
 8011ca0:	8050      	strh	r0, [r2, #2]
		break;
 8011ca2:	4770      	bx	lr
 8011ca4:	2000e710 	.word	0x2000e710

08011ca8 <TIM_SYNC_PWM_StepMode_Enable>:
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 8011ca8:	4b05      	ldr	r3, [pc, #20]	; (8011cc0 <TIM_SYNC_PWM_StepMode_Enable+0x18>)
	syncPwm.stepMode = CHAN_ENABLE;
 8011caa:	4906      	ldr	r1, [pc, #24]	; (8011cc4 <TIM_SYNC_PWM_StepMode_Enable+0x1c>)
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_SINGLE);
 8011cac:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8011cae:	6813      	ldr	r3, [r2, #0]
	syncPwm.stepMode = CHAN_ENABLE;
 8011cb0:	2001      	movs	r0, #1
 8011cb2:	f043 0308 	orr.w	r3, r3, #8
 8011cb6:	6013      	str	r3, [r2, #0]
 8011cb8:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
}
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	2000ee20 	.word	0x2000ee20
 8011cc4:	2000e710 	.word	0x2000e710

08011cc8 <TIM_SYNC_PWM_StepMode_Disable>:
 * @note		Disable one PWM period generation. Enable continuous mode.
 * @param  None
 * @retval None
 */
void TIM_SYNC_PWM_StepMode_Disable(void) {
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 8011cc8:	4b05      	ldr	r3, [pc, #20]	; (8011ce0 <TIM_SYNC_PWM_StepMode_Disable+0x18>)
	syncPwm.stepMode = CHAN_DISABLE;
 8011cca:	4906      	ldr	r1, [pc, #24]	; (8011ce4 <TIM_SYNC_PWM_StepMode_Disable+0x1c>)
	LL_TIM_SetOnePulseMode(htim8.Instance, LL_TIM_ONEPULSEMODE_REPETITIVE);
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	6813      	ldr	r3, [r2, #0]
	syncPwm.stepMode = CHAN_DISABLE;
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	f023 0308 	bic.w	r3, r3, #8
 8011cd6:	6013      	str	r3, [r2, #0]
 8011cd8:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
}
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop
 8011ce0:	2000ee20 	.word	0x2000ee20
 8011ce4:	2000e710 	.word	0x2000e710

08011ce8 <TIM_Reconfig_SyncPwm>:
 * @brief  Reconfiguration of PWM frequency.
 * @note		ARR & PSC calculated by host.
 * @params arrPsc: ARR and PSC register of TIM8
 * @retval None
 */
double TIM_Reconfig_SyncPwm(double freq) {
 8011ce8:	b508      	push	{r3, lr}
 8011cea:	ed2d 8b02 	vpush	{d8}
 8011cee:	eeb0 8a40 	vmov.f32	s16, s0
 8011cf2:	eef0 8a60 	vmov.f32	s17, s1
	uint32_t periphClock = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_TIM8);  // HAL_RCC_GetHCLKFreq();
 8011cf6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8011cfa:	f7f6 fefd 	bl	8008af8 <HAL_RCCEx_GetPeriphCLKFreq>
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 8011cfe:	eeb0 0a48 	vmov.f32	s0, s16
 8011d02:	eef0 0a68 	vmov.f32	s1, s17
}
 8011d06:	ecbd 8b02 	vpop	{d8}
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 8011d0a:	4601      	mov	r1, r0
}
 8011d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return TIM_ReconfigPrecise(&htim8, periphClock, freq);
 8011d10:	4801      	ldr	r0, [pc, #4]	; (8011d18 <TIM_Reconfig_SyncPwm+0x30>)
 8011d12:	f7fd bcf1 	b.w	800f6f8 <TIM_ReconfigPrecise>
 8011d16:	bf00      	nop
 8011d18:	2000ee20 	.word	0x2000ee20

08011d1c <MX_UART_Init>:
  //HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
  /* DMA1_Channel7_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

  huart2.Instance = USART2;
 8011d1c:	4b09      	ldr	r3, [pc, #36]	; (8011d44 <MX_UART_Init+0x28>)
 8011d1e:	4a0a      	ldr	r2, [pc, #40]	; (8011d48 <MX_UART_Init+0x2c>)
{
 8011d20:	b410      	push	{r4}
  huart2.Init.BaudRate = UART_SPEED;
 8011d22:	f44f 2461 	mov.w	r4, #921600	; 0xe1000
  huart2.Instance = USART2;
 8011d26:	601a      	str	r2, [r3, #0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011d28:	210c      	movs	r1, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011d2a:	2200      	movs	r2, #0
  huart2.Init.BaudRate = UART_SPEED;
 8011d2c:	605c      	str	r4, [r3, #4]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);
 8011d2e:	4618      	mov	r0, r3

}
 8011d30:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011d34:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011d36:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011d3c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  HAL_UART_Init(&huart2);
 8011d40:	f7fa b82a 	b.w	800bd98 <HAL_UART_Init>
 8011d44:	2000efb4 	.word	0x2000efb4
 8011d48:	40004400 	.word	0x40004400

08011d4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011d4c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8011d4e:	4b17      	ldr	r3, [pc, #92]	; (8011dac <HAL_UART_MspInit+0x60>)
 8011d50:	6804      	ldr	r4, [r0, #0]
 8011d52:	429c      	cmp	r4, r3
{
 8011d54:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8011d56:	d001      	beq.n	8011d5c <HAL_UART_MspInit+0x10>
    //HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);		
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8011d58:	b006      	add	sp, #24
 8011d5a:	bd70      	pop	{r4, r5, r6, pc}
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d5c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 8011d60:	210c      	movs	r1, #12
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d62:	69da      	ldr	r2, [r3, #28]
 8011d64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011d68:	61da      	str	r2, [r3, #28]
 8011d6a:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX|USART_RX;
 8011d6c:	9101      	str	r1, [sp, #4]
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d72:	2002      	movs	r0, #2
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d74:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d76:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011d78:	2307      	movs	r3, #7
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 8011d7a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d7c:	9002      	str	r0, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;   // GPIO_PULLUP
 8011d7e:	2501      	movs	r5, #1
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 8011d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d84:	e9cd 5203 	strd	r5, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011d88:	9305      	str	r3, [sp, #20]
	  __HAL_RCC_USART2_CLK_ENABLE();
 8011d8a:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(USART_GPIO, &GPIO_InitStruct);
 8011d8c:	f7f5 fcd6 	bl	800773c <HAL_GPIO_Init>
		USART2->CR1 |= USART_CR1_RXNEIE;
 8011d90:	6823      	ldr	r3, [r4, #0]
 8011d92:	f043 0320 	orr.w	r3, r3, #32
 8011d96:	6023      	str	r3, [r4, #0]
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8011d98:	2200      	movs	r2, #0
 8011d9a:	2106      	movs	r1, #6
 8011d9c:	2026      	movs	r0, #38	; 0x26
 8011d9e:	f7f4 ff73 	bl	8006c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8011da2:	2026      	movs	r0, #38	; 0x26
 8011da4:	f7f4 ffb6 	bl	8006d14 <HAL_NVIC_EnableIRQ>
}
 8011da8:	b006      	add	sp, #24
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	40004400 	.word	0x40004400

08011db0 <UARTsendChar>:
  }
} 

/* USER CODE BEGIN 1 */
uint8_t UARTsendChar(char chr){
	while (!(USART2->ISR & USART_ISR_TXE));
 8011db0:	4a03      	ldr	r2, [pc, #12]	; (8011dc0 <UARTsendChar+0x10>)
 8011db2:	69d3      	ldr	r3, [r2, #28]
 8011db4:	061b      	lsls	r3, r3, #24
 8011db6:	d5fc      	bpl.n	8011db2 <UARTsendChar+0x2>
	return (USART2->TDR = chr);	
 8011db8:	b283      	uxth	r3, r0
 8011dba:	8513      	strh	r3, [r2, #40]	; 0x28
}
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	40004400 	.word	0x40004400

08011dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8011dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011dfc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8011dc8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8011dca:	e003      	b.n	8011dd4 <LoopCopyDataInit>

08011dcc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8011dcc:	4b0c      	ldr	r3, [pc, #48]	; (8011e00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8011dce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8011dd0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8011dd2:	3104      	adds	r1, #4

08011dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8011dd4:	480b      	ldr	r0, [pc, #44]	; (8011e04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8011dd6:	4b0c      	ldr	r3, [pc, #48]	; (8011e08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8011dd8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8011dda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8011ddc:	d3f6      	bcc.n	8011dcc <CopyDataInit>
	ldr	r2, =_sbss
 8011dde:	4a0b      	ldr	r2, [pc, #44]	; (8011e0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8011de0:	e002      	b.n	8011de8 <LoopFillZerobss>

08011de2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8011de2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8011de4:	f842 3b04 	str.w	r3, [r2], #4

08011de8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8011de8:	4b09      	ldr	r3, [pc, #36]	; (8011e10 <LoopForever+0x16>)
	cmp	r2, r3
 8011dea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8011dec:	d3f9      	bcc.n	8011de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8011dee:	f7fd fabd 	bl	800f36c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011df2:	f000 f817 	bl	8011e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8011df6:	f7fd f88b 	bl	800ef10 <main>

08011dfa <LoopForever>:

LoopForever:
    b LoopForever
 8011dfa:	e7fe      	b.n	8011dfa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8011dfc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8011e00:	08015720 	.word	0x08015720
	ldr	r0, =_sdata
 8011e04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8011e08:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8011e0c:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8011e10:	2000f028 	.word	0x2000f028

08011e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8011e14:	e7fe      	b.n	8011e14 <ADC1_2_IRQHandler>
	...

08011e18 <__errno>:
 8011e18:	4b01      	ldr	r3, [pc, #4]	; (8011e20 <__errno+0x8>)
 8011e1a:	6818      	ldr	r0, [r3, #0]
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop
 8011e20:	20000018 	.word	0x20000018

08011e24 <__libc_init_array>:
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	4e0d      	ldr	r6, [pc, #52]	; (8011e5c <__libc_init_array+0x38>)
 8011e28:	4c0d      	ldr	r4, [pc, #52]	; (8011e60 <__libc_init_array+0x3c>)
 8011e2a:	1ba4      	subs	r4, r4, r6
 8011e2c:	10a4      	asrs	r4, r4, #2
 8011e2e:	2500      	movs	r5, #0
 8011e30:	42a5      	cmp	r5, r4
 8011e32:	d109      	bne.n	8011e48 <__libc_init_array+0x24>
 8011e34:	4e0b      	ldr	r6, [pc, #44]	; (8011e64 <__libc_init_array+0x40>)
 8011e36:	4c0c      	ldr	r4, [pc, #48]	; (8011e68 <__libc_init_array+0x44>)
 8011e38:	f002 fe54 	bl	8014ae4 <_init>
 8011e3c:	1ba4      	subs	r4, r4, r6
 8011e3e:	10a4      	asrs	r4, r4, #2
 8011e40:	2500      	movs	r5, #0
 8011e42:	42a5      	cmp	r5, r4
 8011e44:	d105      	bne.n	8011e52 <__libc_init_array+0x2e>
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
 8011e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e4c:	4798      	blx	r3
 8011e4e:	3501      	adds	r5, #1
 8011e50:	e7ee      	b.n	8011e30 <__libc_init_array+0xc>
 8011e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e56:	4798      	blx	r3
 8011e58:	3501      	adds	r5, #1
 8011e5a:	e7f2      	b.n	8011e42 <__libc_init_array+0x1e>
 8011e5c:	08015718 	.word	0x08015718
 8011e60:	08015718 	.word	0x08015718
 8011e64:	08015718 	.word	0x08015718
 8011e68:	0801571c 	.word	0x0801571c

08011e6c <memcpy>:
 8011e6c:	b510      	push	{r4, lr}
 8011e6e:	1e43      	subs	r3, r0, #1
 8011e70:	440a      	add	r2, r1
 8011e72:	4291      	cmp	r1, r2
 8011e74:	d100      	bne.n	8011e78 <memcpy+0xc>
 8011e76:	bd10      	pop	{r4, pc}
 8011e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e80:	e7f7      	b.n	8011e72 <memcpy+0x6>

08011e82 <memset>:
 8011e82:	4402      	add	r2, r0
 8011e84:	4603      	mov	r3, r0
 8011e86:	4293      	cmp	r3, r2
 8011e88:	d100      	bne.n	8011e8c <memset+0xa>
 8011e8a:	4770      	bx	lr
 8011e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8011e90:	e7f9      	b.n	8011e86 <memset+0x4>
	...

08011e94 <_malloc_r>:
 8011e94:	b570      	push	{r4, r5, r6, lr}
 8011e96:	1ccd      	adds	r5, r1, #3
 8011e98:	f025 0503 	bic.w	r5, r5, #3
 8011e9c:	3508      	adds	r5, #8
 8011e9e:	2d0c      	cmp	r5, #12
 8011ea0:	bf38      	it	cc
 8011ea2:	250c      	movcc	r5, #12
 8011ea4:	2d00      	cmp	r5, #0
 8011ea6:	4606      	mov	r6, r0
 8011ea8:	db01      	blt.n	8011eae <_malloc_r+0x1a>
 8011eaa:	42a9      	cmp	r1, r5
 8011eac:	d903      	bls.n	8011eb6 <_malloc_r+0x22>
 8011eae:	230c      	movs	r3, #12
 8011eb0:	6033      	str	r3, [r6, #0]
 8011eb2:	2000      	movs	r0, #0
 8011eb4:	bd70      	pop	{r4, r5, r6, pc}
 8011eb6:	f001 fa65 	bl	8013384 <__malloc_lock>
 8011eba:	4a21      	ldr	r2, [pc, #132]	; (8011f40 <_malloc_r+0xac>)
 8011ebc:	6814      	ldr	r4, [r2, #0]
 8011ebe:	4621      	mov	r1, r4
 8011ec0:	b991      	cbnz	r1, 8011ee8 <_malloc_r+0x54>
 8011ec2:	4c20      	ldr	r4, [pc, #128]	; (8011f44 <_malloc_r+0xb0>)
 8011ec4:	6823      	ldr	r3, [r4, #0]
 8011ec6:	b91b      	cbnz	r3, 8011ed0 <_malloc_r+0x3c>
 8011ec8:	4630      	mov	r0, r6
 8011eca:	f000 fbef 	bl	80126ac <_sbrk_r>
 8011ece:	6020      	str	r0, [r4, #0]
 8011ed0:	4629      	mov	r1, r5
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	f000 fbea 	bl	80126ac <_sbrk_r>
 8011ed8:	1c43      	adds	r3, r0, #1
 8011eda:	d124      	bne.n	8011f26 <_malloc_r+0x92>
 8011edc:	230c      	movs	r3, #12
 8011ede:	6033      	str	r3, [r6, #0]
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f001 fa50 	bl	8013386 <__malloc_unlock>
 8011ee6:	e7e4      	b.n	8011eb2 <_malloc_r+0x1e>
 8011ee8:	680b      	ldr	r3, [r1, #0]
 8011eea:	1b5b      	subs	r3, r3, r5
 8011eec:	d418      	bmi.n	8011f20 <_malloc_r+0x8c>
 8011eee:	2b0b      	cmp	r3, #11
 8011ef0:	d90f      	bls.n	8011f12 <_malloc_r+0x7e>
 8011ef2:	600b      	str	r3, [r1, #0]
 8011ef4:	50cd      	str	r5, [r1, r3]
 8011ef6:	18cc      	adds	r4, r1, r3
 8011ef8:	4630      	mov	r0, r6
 8011efa:	f001 fa44 	bl	8013386 <__malloc_unlock>
 8011efe:	f104 000b 	add.w	r0, r4, #11
 8011f02:	1d23      	adds	r3, r4, #4
 8011f04:	f020 0007 	bic.w	r0, r0, #7
 8011f08:	1ac3      	subs	r3, r0, r3
 8011f0a:	d0d3      	beq.n	8011eb4 <_malloc_r+0x20>
 8011f0c:	425a      	negs	r2, r3
 8011f0e:	50e2      	str	r2, [r4, r3]
 8011f10:	e7d0      	b.n	8011eb4 <_malloc_r+0x20>
 8011f12:	428c      	cmp	r4, r1
 8011f14:	684b      	ldr	r3, [r1, #4]
 8011f16:	bf16      	itet	ne
 8011f18:	6063      	strne	r3, [r4, #4]
 8011f1a:	6013      	streq	r3, [r2, #0]
 8011f1c:	460c      	movne	r4, r1
 8011f1e:	e7eb      	b.n	8011ef8 <_malloc_r+0x64>
 8011f20:	460c      	mov	r4, r1
 8011f22:	6849      	ldr	r1, [r1, #4]
 8011f24:	e7cc      	b.n	8011ec0 <_malloc_r+0x2c>
 8011f26:	1cc4      	adds	r4, r0, #3
 8011f28:	f024 0403 	bic.w	r4, r4, #3
 8011f2c:	42a0      	cmp	r0, r4
 8011f2e:	d005      	beq.n	8011f3c <_malloc_r+0xa8>
 8011f30:	1a21      	subs	r1, r4, r0
 8011f32:	4630      	mov	r0, r6
 8011f34:	f000 fbba 	bl	80126ac <_sbrk_r>
 8011f38:	3001      	adds	r0, #1
 8011f3a:	d0cf      	beq.n	8011edc <_malloc_r+0x48>
 8011f3c:	6025      	str	r5, [r4, #0]
 8011f3e:	e7db      	b.n	8011ef8 <_malloc_r+0x64>
 8011f40:	20004ca8 	.word	0x20004ca8
 8011f44:	20004cac 	.word	0x20004cac

08011f48 <__cvt>:
 8011f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f4c:	ec55 4b10 	vmov	r4, r5, d0
 8011f50:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011f52:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011f56:	2d00      	cmp	r5, #0
 8011f58:	460e      	mov	r6, r1
 8011f5a:	4691      	mov	r9, r2
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	bfb8      	it	lt
 8011f60:	4622      	movlt	r2, r4
 8011f62:	462b      	mov	r3, r5
 8011f64:	f027 0720 	bic.w	r7, r7, #32
 8011f68:	bfbb      	ittet	lt
 8011f6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f6e:	461d      	movlt	r5, r3
 8011f70:	2300      	movge	r3, #0
 8011f72:	232d      	movlt	r3, #45	; 0x2d
 8011f74:	bfb8      	it	lt
 8011f76:	4614      	movlt	r4, r2
 8011f78:	2f46      	cmp	r7, #70	; 0x46
 8011f7a:	700b      	strb	r3, [r1, #0]
 8011f7c:	d004      	beq.n	8011f88 <__cvt+0x40>
 8011f7e:	2f45      	cmp	r7, #69	; 0x45
 8011f80:	d100      	bne.n	8011f84 <__cvt+0x3c>
 8011f82:	3601      	adds	r6, #1
 8011f84:	2102      	movs	r1, #2
 8011f86:	e000      	b.n	8011f8a <__cvt+0x42>
 8011f88:	2103      	movs	r1, #3
 8011f8a:	ab03      	add	r3, sp, #12
 8011f8c:	9301      	str	r3, [sp, #4]
 8011f8e:	ab02      	add	r3, sp, #8
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	4632      	mov	r2, r6
 8011f94:	4653      	mov	r3, sl
 8011f96:	ec45 4b10 	vmov	d0, r4, r5
 8011f9a:	f000 fc25 	bl	80127e8 <_dtoa_r>
 8011f9e:	2f47      	cmp	r7, #71	; 0x47
 8011fa0:	4680      	mov	r8, r0
 8011fa2:	d102      	bne.n	8011faa <__cvt+0x62>
 8011fa4:	f019 0f01 	tst.w	r9, #1
 8011fa8:	d026      	beq.n	8011ff8 <__cvt+0xb0>
 8011faa:	2f46      	cmp	r7, #70	; 0x46
 8011fac:	eb08 0906 	add.w	r9, r8, r6
 8011fb0:	d111      	bne.n	8011fd6 <__cvt+0x8e>
 8011fb2:	f898 3000 	ldrb.w	r3, [r8]
 8011fb6:	2b30      	cmp	r3, #48	; 0x30
 8011fb8:	d10a      	bne.n	8011fd0 <__cvt+0x88>
 8011fba:	2200      	movs	r2, #0
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	f7ee fd39 	bl	8000a38 <__aeabi_dcmpeq>
 8011fc6:	b918      	cbnz	r0, 8011fd0 <__cvt+0x88>
 8011fc8:	f1c6 0601 	rsb	r6, r6, #1
 8011fcc:	f8ca 6000 	str.w	r6, [sl]
 8011fd0:	f8da 3000 	ldr.w	r3, [sl]
 8011fd4:	4499      	add	r9, r3
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	2300      	movs	r3, #0
 8011fda:	4620      	mov	r0, r4
 8011fdc:	4629      	mov	r1, r5
 8011fde:	f7ee fd2b 	bl	8000a38 <__aeabi_dcmpeq>
 8011fe2:	b938      	cbnz	r0, 8011ff4 <__cvt+0xac>
 8011fe4:	2230      	movs	r2, #48	; 0x30
 8011fe6:	9b03      	ldr	r3, [sp, #12]
 8011fe8:	454b      	cmp	r3, r9
 8011fea:	d205      	bcs.n	8011ff8 <__cvt+0xb0>
 8011fec:	1c59      	adds	r1, r3, #1
 8011fee:	9103      	str	r1, [sp, #12]
 8011ff0:	701a      	strb	r2, [r3, #0]
 8011ff2:	e7f8      	b.n	8011fe6 <__cvt+0x9e>
 8011ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8011ff8:	9b03      	ldr	r3, [sp, #12]
 8011ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ffc:	eba3 0308 	sub.w	r3, r3, r8
 8012000:	4640      	mov	r0, r8
 8012002:	6013      	str	r3, [r2, #0]
 8012004:	b004      	add	sp, #16
 8012006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801200a <__exponent>:
 801200a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801200c:	2900      	cmp	r1, #0
 801200e:	4604      	mov	r4, r0
 8012010:	bfba      	itte	lt
 8012012:	4249      	neglt	r1, r1
 8012014:	232d      	movlt	r3, #45	; 0x2d
 8012016:	232b      	movge	r3, #43	; 0x2b
 8012018:	2909      	cmp	r1, #9
 801201a:	f804 2b02 	strb.w	r2, [r4], #2
 801201e:	7043      	strb	r3, [r0, #1]
 8012020:	dd20      	ble.n	8012064 <__exponent+0x5a>
 8012022:	f10d 0307 	add.w	r3, sp, #7
 8012026:	461f      	mov	r7, r3
 8012028:	260a      	movs	r6, #10
 801202a:	fb91 f5f6 	sdiv	r5, r1, r6
 801202e:	fb06 1115 	mls	r1, r6, r5, r1
 8012032:	3130      	adds	r1, #48	; 0x30
 8012034:	2d09      	cmp	r5, #9
 8012036:	f803 1c01 	strb.w	r1, [r3, #-1]
 801203a:	f103 32ff 	add.w	r2, r3, #4294967295
 801203e:	4629      	mov	r1, r5
 8012040:	dc09      	bgt.n	8012056 <__exponent+0x4c>
 8012042:	3130      	adds	r1, #48	; 0x30
 8012044:	3b02      	subs	r3, #2
 8012046:	f802 1c01 	strb.w	r1, [r2, #-1]
 801204a:	42bb      	cmp	r3, r7
 801204c:	4622      	mov	r2, r4
 801204e:	d304      	bcc.n	801205a <__exponent+0x50>
 8012050:	1a10      	subs	r0, r2, r0
 8012052:	b003      	add	sp, #12
 8012054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012056:	4613      	mov	r3, r2
 8012058:	e7e7      	b.n	801202a <__exponent+0x20>
 801205a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801205e:	f804 2b01 	strb.w	r2, [r4], #1
 8012062:	e7f2      	b.n	801204a <__exponent+0x40>
 8012064:	2330      	movs	r3, #48	; 0x30
 8012066:	4419      	add	r1, r3
 8012068:	7083      	strb	r3, [r0, #2]
 801206a:	1d02      	adds	r2, r0, #4
 801206c:	70c1      	strb	r1, [r0, #3]
 801206e:	e7ef      	b.n	8012050 <__exponent+0x46>

08012070 <_printf_float>:
 8012070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012074:	b08d      	sub	sp, #52	; 0x34
 8012076:	460c      	mov	r4, r1
 8012078:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801207c:	4616      	mov	r6, r2
 801207e:	461f      	mov	r7, r3
 8012080:	4605      	mov	r5, r0
 8012082:	f001 f969 	bl	8013358 <_localeconv_r>
 8012086:	6803      	ldr	r3, [r0, #0]
 8012088:	9304      	str	r3, [sp, #16]
 801208a:	4618      	mov	r0, r3
 801208c:	f7ee f8a8 	bl	80001e0 <strlen>
 8012090:	2300      	movs	r3, #0
 8012092:	930a      	str	r3, [sp, #40]	; 0x28
 8012094:	f8d8 3000 	ldr.w	r3, [r8]
 8012098:	9005      	str	r0, [sp, #20]
 801209a:	3307      	adds	r3, #7
 801209c:	f023 0307 	bic.w	r3, r3, #7
 80120a0:	f103 0208 	add.w	r2, r3, #8
 80120a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80120a8:	f8d4 b000 	ldr.w	fp, [r4]
 80120ac:	f8c8 2000 	str.w	r2, [r8]
 80120b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80120b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80120bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120c0:	9307      	str	r3, [sp, #28]
 80120c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80120c6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ca:	4ba7      	ldr	r3, [pc, #668]	; (8012368 <_printf_float+0x2f8>)
 80120cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120d0:	f7ee fce4 	bl	8000a9c <__aeabi_dcmpun>
 80120d4:	bb70      	cbnz	r0, 8012134 <_printf_float+0xc4>
 80120d6:	f04f 32ff 	mov.w	r2, #4294967295
 80120da:	4ba3      	ldr	r3, [pc, #652]	; (8012368 <_printf_float+0x2f8>)
 80120dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120e0:	f7ee fcbe 	bl	8000a60 <__aeabi_dcmple>
 80120e4:	bb30      	cbnz	r0, 8012134 <_printf_float+0xc4>
 80120e6:	2200      	movs	r2, #0
 80120e8:	2300      	movs	r3, #0
 80120ea:	4640      	mov	r0, r8
 80120ec:	4649      	mov	r1, r9
 80120ee:	f7ee fcad 	bl	8000a4c <__aeabi_dcmplt>
 80120f2:	b110      	cbz	r0, 80120fa <_printf_float+0x8a>
 80120f4:	232d      	movs	r3, #45	; 0x2d
 80120f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120fa:	4a9c      	ldr	r2, [pc, #624]	; (801236c <_printf_float+0x2fc>)
 80120fc:	4b9c      	ldr	r3, [pc, #624]	; (8012370 <_printf_float+0x300>)
 80120fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012102:	bf8c      	ite	hi
 8012104:	4690      	movhi	r8, r2
 8012106:	4698      	movls	r8, r3
 8012108:	2303      	movs	r3, #3
 801210a:	f02b 0204 	bic.w	r2, fp, #4
 801210e:	6123      	str	r3, [r4, #16]
 8012110:	6022      	str	r2, [r4, #0]
 8012112:	f04f 0900 	mov.w	r9, #0
 8012116:	9700      	str	r7, [sp, #0]
 8012118:	4633      	mov	r3, r6
 801211a:	aa0b      	add	r2, sp, #44	; 0x2c
 801211c:	4621      	mov	r1, r4
 801211e:	4628      	mov	r0, r5
 8012120:	f000 f9e6 	bl	80124f0 <_printf_common>
 8012124:	3001      	adds	r0, #1
 8012126:	f040 808d 	bne.w	8012244 <_printf_float+0x1d4>
 801212a:	f04f 30ff 	mov.w	r0, #4294967295
 801212e:	b00d      	add	sp, #52	; 0x34
 8012130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012134:	4642      	mov	r2, r8
 8012136:	464b      	mov	r3, r9
 8012138:	4640      	mov	r0, r8
 801213a:	4649      	mov	r1, r9
 801213c:	f7ee fcae 	bl	8000a9c <__aeabi_dcmpun>
 8012140:	b110      	cbz	r0, 8012148 <_printf_float+0xd8>
 8012142:	4a8c      	ldr	r2, [pc, #560]	; (8012374 <_printf_float+0x304>)
 8012144:	4b8c      	ldr	r3, [pc, #560]	; (8012378 <_printf_float+0x308>)
 8012146:	e7da      	b.n	80120fe <_printf_float+0x8e>
 8012148:	6861      	ldr	r1, [r4, #4]
 801214a:	1c4b      	adds	r3, r1, #1
 801214c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012150:	a80a      	add	r0, sp, #40	; 0x28
 8012152:	d13e      	bne.n	80121d2 <_printf_float+0x162>
 8012154:	2306      	movs	r3, #6
 8012156:	6063      	str	r3, [r4, #4]
 8012158:	2300      	movs	r3, #0
 801215a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801215e:	ab09      	add	r3, sp, #36	; 0x24
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	ec49 8b10 	vmov	d0, r8, r9
 8012166:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801216a:	6022      	str	r2, [r4, #0]
 801216c:	f8cd a004 	str.w	sl, [sp, #4]
 8012170:	6861      	ldr	r1, [r4, #4]
 8012172:	4628      	mov	r0, r5
 8012174:	f7ff fee8 	bl	8011f48 <__cvt>
 8012178:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801217c:	2b47      	cmp	r3, #71	; 0x47
 801217e:	4680      	mov	r8, r0
 8012180:	d109      	bne.n	8012196 <_printf_float+0x126>
 8012182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012184:	1cd8      	adds	r0, r3, #3
 8012186:	db02      	blt.n	801218e <_printf_float+0x11e>
 8012188:	6862      	ldr	r2, [r4, #4]
 801218a:	4293      	cmp	r3, r2
 801218c:	dd47      	ble.n	801221e <_printf_float+0x1ae>
 801218e:	f1aa 0a02 	sub.w	sl, sl, #2
 8012192:	fa5f fa8a 	uxtb.w	sl, sl
 8012196:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801219a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801219c:	d824      	bhi.n	80121e8 <_printf_float+0x178>
 801219e:	3901      	subs	r1, #1
 80121a0:	4652      	mov	r2, sl
 80121a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121a6:	9109      	str	r1, [sp, #36]	; 0x24
 80121a8:	f7ff ff2f 	bl	801200a <__exponent>
 80121ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121ae:	1813      	adds	r3, r2, r0
 80121b0:	2a01      	cmp	r2, #1
 80121b2:	4681      	mov	r9, r0
 80121b4:	6123      	str	r3, [r4, #16]
 80121b6:	dc02      	bgt.n	80121be <_printf_float+0x14e>
 80121b8:	6822      	ldr	r2, [r4, #0]
 80121ba:	07d1      	lsls	r1, r2, #31
 80121bc:	d501      	bpl.n	80121c2 <_printf_float+0x152>
 80121be:	3301      	adds	r3, #1
 80121c0:	6123      	str	r3, [r4, #16]
 80121c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d0a5      	beq.n	8012116 <_printf_float+0xa6>
 80121ca:	232d      	movs	r3, #45	; 0x2d
 80121cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121d0:	e7a1      	b.n	8012116 <_printf_float+0xa6>
 80121d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80121d6:	f000 8177 	beq.w	80124c8 <_printf_float+0x458>
 80121da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80121de:	d1bb      	bne.n	8012158 <_printf_float+0xe8>
 80121e0:	2900      	cmp	r1, #0
 80121e2:	d1b9      	bne.n	8012158 <_printf_float+0xe8>
 80121e4:	2301      	movs	r3, #1
 80121e6:	e7b6      	b.n	8012156 <_printf_float+0xe6>
 80121e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80121ec:	d119      	bne.n	8012222 <_printf_float+0x1b2>
 80121ee:	2900      	cmp	r1, #0
 80121f0:	6863      	ldr	r3, [r4, #4]
 80121f2:	dd0c      	ble.n	801220e <_printf_float+0x19e>
 80121f4:	6121      	str	r1, [r4, #16]
 80121f6:	b913      	cbnz	r3, 80121fe <_printf_float+0x18e>
 80121f8:	6822      	ldr	r2, [r4, #0]
 80121fa:	07d2      	lsls	r2, r2, #31
 80121fc:	d502      	bpl.n	8012204 <_printf_float+0x194>
 80121fe:	3301      	adds	r3, #1
 8012200:	440b      	add	r3, r1
 8012202:	6123      	str	r3, [r4, #16]
 8012204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012206:	65a3      	str	r3, [r4, #88]	; 0x58
 8012208:	f04f 0900 	mov.w	r9, #0
 801220c:	e7d9      	b.n	80121c2 <_printf_float+0x152>
 801220e:	b913      	cbnz	r3, 8012216 <_printf_float+0x1a6>
 8012210:	6822      	ldr	r2, [r4, #0]
 8012212:	07d0      	lsls	r0, r2, #31
 8012214:	d501      	bpl.n	801221a <_printf_float+0x1aa>
 8012216:	3302      	adds	r3, #2
 8012218:	e7f3      	b.n	8012202 <_printf_float+0x192>
 801221a:	2301      	movs	r3, #1
 801221c:	e7f1      	b.n	8012202 <_printf_float+0x192>
 801221e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012222:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012226:	4293      	cmp	r3, r2
 8012228:	db05      	blt.n	8012236 <_printf_float+0x1c6>
 801222a:	6822      	ldr	r2, [r4, #0]
 801222c:	6123      	str	r3, [r4, #16]
 801222e:	07d1      	lsls	r1, r2, #31
 8012230:	d5e8      	bpl.n	8012204 <_printf_float+0x194>
 8012232:	3301      	adds	r3, #1
 8012234:	e7e5      	b.n	8012202 <_printf_float+0x192>
 8012236:	2b00      	cmp	r3, #0
 8012238:	bfd4      	ite	le
 801223a:	f1c3 0302 	rsble	r3, r3, #2
 801223e:	2301      	movgt	r3, #1
 8012240:	4413      	add	r3, r2
 8012242:	e7de      	b.n	8012202 <_printf_float+0x192>
 8012244:	6823      	ldr	r3, [r4, #0]
 8012246:	055a      	lsls	r2, r3, #21
 8012248:	d407      	bmi.n	801225a <_printf_float+0x1ea>
 801224a:	6923      	ldr	r3, [r4, #16]
 801224c:	4642      	mov	r2, r8
 801224e:	4631      	mov	r1, r6
 8012250:	4628      	mov	r0, r5
 8012252:	47b8      	blx	r7
 8012254:	3001      	adds	r0, #1
 8012256:	d12b      	bne.n	80122b0 <_printf_float+0x240>
 8012258:	e767      	b.n	801212a <_printf_float+0xba>
 801225a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801225e:	f240 80dc 	bls.w	801241a <_printf_float+0x3aa>
 8012262:	2200      	movs	r2, #0
 8012264:	2300      	movs	r3, #0
 8012266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801226a:	f7ee fbe5 	bl	8000a38 <__aeabi_dcmpeq>
 801226e:	2800      	cmp	r0, #0
 8012270:	d033      	beq.n	80122da <_printf_float+0x26a>
 8012272:	2301      	movs	r3, #1
 8012274:	4a41      	ldr	r2, [pc, #260]	; (801237c <_printf_float+0x30c>)
 8012276:	4631      	mov	r1, r6
 8012278:	4628      	mov	r0, r5
 801227a:	47b8      	blx	r7
 801227c:	3001      	adds	r0, #1
 801227e:	f43f af54 	beq.w	801212a <_printf_float+0xba>
 8012282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012286:	429a      	cmp	r2, r3
 8012288:	db02      	blt.n	8012290 <_printf_float+0x220>
 801228a:	6823      	ldr	r3, [r4, #0]
 801228c:	07d8      	lsls	r0, r3, #31
 801228e:	d50f      	bpl.n	80122b0 <_printf_float+0x240>
 8012290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012294:	4631      	mov	r1, r6
 8012296:	4628      	mov	r0, r5
 8012298:	47b8      	blx	r7
 801229a:	3001      	adds	r0, #1
 801229c:	f43f af45 	beq.w	801212a <_printf_float+0xba>
 80122a0:	f04f 0800 	mov.w	r8, #0
 80122a4:	f104 091a 	add.w	r9, r4, #26
 80122a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122aa:	3b01      	subs	r3, #1
 80122ac:	4543      	cmp	r3, r8
 80122ae:	dc09      	bgt.n	80122c4 <_printf_float+0x254>
 80122b0:	6823      	ldr	r3, [r4, #0]
 80122b2:	079b      	lsls	r3, r3, #30
 80122b4:	f100 8103 	bmi.w	80124be <_printf_float+0x44e>
 80122b8:	68e0      	ldr	r0, [r4, #12]
 80122ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122bc:	4298      	cmp	r0, r3
 80122be:	bfb8      	it	lt
 80122c0:	4618      	movlt	r0, r3
 80122c2:	e734      	b.n	801212e <_printf_float+0xbe>
 80122c4:	2301      	movs	r3, #1
 80122c6:	464a      	mov	r2, r9
 80122c8:	4631      	mov	r1, r6
 80122ca:	4628      	mov	r0, r5
 80122cc:	47b8      	blx	r7
 80122ce:	3001      	adds	r0, #1
 80122d0:	f43f af2b 	beq.w	801212a <_printf_float+0xba>
 80122d4:	f108 0801 	add.w	r8, r8, #1
 80122d8:	e7e6      	b.n	80122a8 <_printf_float+0x238>
 80122da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122dc:	2b00      	cmp	r3, #0
 80122de:	dc2b      	bgt.n	8012338 <_printf_float+0x2c8>
 80122e0:	2301      	movs	r3, #1
 80122e2:	4a26      	ldr	r2, [pc, #152]	; (801237c <_printf_float+0x30c>)
 80122e4:	4631      	mov	r1, r6
 80122e6:	4628      	mov	r0, r5
 80122e8:	47b8      	blx	r7
 80122ea:	3001      	adds	r0, #1
 80122ec:	f43f af1d 	beq.w	801212a <_printf_float+0xba>
 80122f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f2:	b923      	cbnz	r3, 80122fe <_printf_float+0x28e>
 80122f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f6:	b913      	cbnz	r3, 80122fe <_printf_float+0x28e>
 80122f8:	6823      	ldr	r3, [r4, #0]
 80122fa:	07d9      	lsls	r1, r3, #31
 80122fc:	d5d8      	bpl.n	80122b0 <_printf_float+0x240>
 80122fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012302:	4631      	mov	r1, r6
 8012304:	4628      	mov	r0, r5
 8012306:	47b8      	blx	r7
 8012308:	3001      	adds	r0, #1
 801230a:	f43f af0e 	beq.w	801212a <_printf_float+0xba>
 801230e:	f04f 0900 	mov.w	r9, #0
 8012312:	f104 0a1a 	add.w	sl, r4, #26
 8012316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012318:	425b      	negs	r3, r3
 801231a:	454b      	cmp	r3, r9
 801231c:	dc01      	bgt.n	8012322 <_printf_float+0x2b2>
 801231e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012320:	e794      	b.n	801224c <_printf_float+0x1dc>
 8012322:	2301      	movs	r3, #1
 8012324:	4652      	mov	r2, sl
 8012326:	4631      	mov	r1, r6
 8012328:	4628      	mov	r0, r5
 801232a:	47b8      	blx	r7
 801232c:	3001      	adds	r0, #1
 801232e:	f43f aefc 	beq.w	801212a <_printf_float+0xba>
 8012332:	f109 0901 	add.w	r9, r9, #1
 8012336:	e7ee      	b.n	8012316 <_printf_float+0x2a6>
 8012338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801233a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801233c:	429a      	cmp	r2, r3
 801233e:	bfa8      	it	ge
 8012340:	461a      	movge	r2, r3
 8012342:	2a00      	cmp	r2, #0
 8012344:	4691      	mov	r9, r2
 8012346:	dd07      	ble.n	8012358 <_printf_float+0x2e8>
 8012348:	4613      	mov	r3, r2
 801234a:	4631      	mov	r1, r6
 801234c:	4642      	mov	r2, r8
 801234e:	4628      	mov	r0, r5
 8012350:	47b8      	blx	r7
 8012352:	3001      	adds	r0, #1
 8012354:	f43f aee9 	beq.w	801212a <_printf_float+0xba>
 8012358:	f104 031a 	add.w	r3, r4, #26
 801235c:	f04f 0b00 	mov.w	fp, #0
 8012360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012364:	9306      	str	r3, [sp, #24]
 8012366:	e015      	b.n	8012394 <_printf_float+0x324>
 8012368:	7fefffff 	.word	0x7fefffff
 801236c:	080154ac 	.word	0x080154ac
 8012370:	080154a8 	.word	0x080154a8
 8012374:	080154b4 	.word	0x080154b4
 8012378:	080154b0 	.word	0x080154b0
 801237c:	080154b8 	.word	0x080154b8
 8012380:	2301      	movs	r3, #1
 8012382:	9a06      	ldr	r2, [sp, #24]
 8012384:	4631      	mov	r1, r6
 8012386:	4628      	mov	r0, r5
 8012388:	47b8      	blx	r7
 801238a:	3001      	adds	r0, #1
 801238c:	f43f aecd 	beq.w	801212a <_printf_float+0xba>
 8012390:	f10b 0b01 	add.w	fp, fp, #1
 8012394:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012398:	ebaa 0309 	sub.w	r3, sl, r9
 801239c:	455b      	cmp	r3, fp
 801239e:	dcef      	bgt.n	8012380 <_printf_float+0x310>
 80123a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123a4:	429a      	cmp	r2, r3
 80123a6:	44d0      	add	r8, sl
 80123a8:	db15      	blt.n	80123d6 <_printf_float+0x366>
 80123aa:	6823      	ldr	r3, [r4, #0]
 80123ac:	07da      	lsls	r2, r3, #31
 80123ae:	d412      	bmi.n	80123d6 <_printf_float+0x366>
 80123b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123b4:	eba3 020a 	sub.w	r2, r3, sl
 80123b8:	eba3 0a01 	sub.w	sl, r3, r1
 80123bc:	4592      	cmp	sl, r2
 80123be:	bfa8      	it	ge
 80123c0:	4692      	movge	sl, r2
 80123c2:	f1ba 0f00 	cmp.w	sl, #0
 80123c6:	dc0e      	bgt.n	80123e6 <_printf_float+0x376>
 80123c8:	f04f 0800 	mov.w	r8, #0
 80123cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123d0:	f104 091a 	add.w	r9, r4, #26
 80123d4:	e019      	b.n	801240a <_printf_float+0x39a>
 80123d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123da:	4631      	mov	r1, r6
 80123dc:	4628      	mov	r0, r5
 80123de:	47b8      	blx	r7
 80123e0:	3001      	adds	r0, #1
 80123e2:	d1e5      	bne.n	80123b0 <_printf_float+0x340>
 80123e4:	e6a1      	b.n	801212a <_printf_float+0xba>
 80123e6:	4653      	mov	r3, sl
 80123e8:	4642      	mov	r2, r8
 80123ea:	4631      	mov	r1, r6
 80123ec:	4628      	mov	r0, r5
 80123ee:	47b8      	blx	r7
 80123f0:	3001      	adds	r0, #1
 80123f2:	d1e9      	bne.n	80123c8 <_printf_float+0x358>
 80123f4:	e699      	b.n	801212a <_printf_float+0xba>
 80123f6:	2301      	movs	r3, #1
 80123f8:	464a      	mov	r2, r9
 80123fa:	4631      	mov	r1, r6
 80123fc:	4628      	mov	r0, r5
 80123fe:	47b8      	blx	r7
 8012400:	3001      	adds	r0, #1
 8012402:	f43f ae92 	beq.w	801212a <_printf_float+0xba>
 8012406:	f108 0801 	add.w	r8, r8, #1
 801240a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801240e:	1a9b      	subs	r3, r3, r2
 8012410:	eba3 030a 	sub.w	r3, r3, sl
 8012414:	4543      	cmp	r3, r8
 8012416:	dcee      	bgt.n	80123f6 <_printf_float+0x386>
 8012418:	e74a      	b.n	80122b0 <_printf_float+0x240>
 801241a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801241c:	2a01      	cmp	r2, #1
 801241e:	dc01      	bgt.n	8012424 <_printf_float+0x3b4>
 8012420:	07db      	lsls	r3, r3, #31
 8012422:	d53a      	bpl.n	801249a <_printf_float+0x42a>
 8012424:	2301      	movs	r3, #1
 8012426:	4642      	mov	r2, r8
 8012428:	4631      	mov	r1, r6
 801242a:	4628      	mov	r0, r5
 801242c:	47b8      	blx	r7
 801242e:	3001      	adds	r0, #1
 8012430:	f43f ae7b 	beq.w	801212a <_printf_float+0xba>
 8012434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012438:	4631      	mov	r1, r6
 801243a:	4628      	mov	r0, r5
 801243c:	47b8      	blx	r7
 801243e:	3001      	adds	r0, #1
 8012440:	f108 0801 	add.w	r8, r8, #1
 8012444:	f43f ae71 	beq.w	801212a <_printf_float+0xba>
 8012448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801244a:	2200      	movs	r2, #0
 801244c:	f103 3aff 	add.w	sl, r3, #4294967295
 8012450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012454:	2300      	movs	r3, #0
 8012456:	f7ee faef 	bl	8000a38 <__aeabi_dcmpeq>
 801245a:	b9c8      	cbnz	r0, 8012490 <_printf_float+0x420>
 801245c:	4653      	mov	r3, sl
 801245e:	4642      	mov	r2, r8
 8012460:	4631      	mov	r1, r6
 8012462:	4628      	mov	r0, r5
 8012464:	47b8      	blx	r7
 8012466:	3001      	adds	r0, #1
 8012468:	d10e      	bne.n	8012488 <_printf_float+0x418>
 801246a:	e65e      	b.n	801212a <_printf_float+0xba>
 801246c:	2301      	movs	r3, #1
 801246e:	4652      	mov	r2, sl
 8012470:	4631      	mov	r1, r6
 8012472:	4628      	mov	r0, r5
 8012474:	47b8      	blx	r7
 8012476:	3001      	adds	r0, #1
 8012478:	f43f ae57 	beq.w	801212a <_printf_float+0xba>
 801247c:	f108 0801 	add.w	r8, r8, #1
 8012480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012482:	3b01      	subs	r3, #1
 8012484:	4543      	cmp	r3, r8
 8012486:	dcf1      	bgt.n	801246c <_printf_float+0x3fc>
 8012488:	464b      	mov	r3, r9
 801248a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801248e:	e6de      	b.n	801224e <_printf_float+0x1de>
 8012490:	f04f 0800 	mov.w	r8, #0
 8012494:	f104 0a1a 	add.w	sl, r4, #26
 8012498:	e7f2      	b.n	8012480 <_printf_float+0x410>
 801249a:	2301      	movs	r3, #1
 801249c:	e7df      	b.n	801245e <_printf_float+0x3ee>
 801249e:	2301      	movs	r3, #1
 80124a0:	464a      	mov	r2, r9
 80124a2:	4631      	mov	r1, r6
 80124a4:	4628      	mov	r0, r5
 80124a6:	47b8      	blx	r7
 80124a8:	3001      	adds	r0, #1
 80124aa:	f43f ae3e 	beq.w	801212a <_printf_float+0xba>
 80124ae:	f108 0801 	add.w	r8, r8, #1
 80124b2:	68e3      	ldr	r3, [r4, #12]
 80124b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124b6:	1a9b      	subs	r3, r3, r2
 80124b8:	4543      	cmp	r3, r8
 80124ba:	dcf0      	bgt.n	801249e <_printf_float+0x42e>
 80124bc:	e6fc      	b.n	80122b8 <_printf_float+0x248>
 80124be:	f04f 0800 	mov.w	r8, #0
 80124c2:	f104 0919 	add.w	r9, r4, #25
 80124c6:	e7f4      	b.n	80124b2 <_printf_float+0x442>
 80124c8:	2900      	cmp	r1, #0
 80124ca:	f43f ae8b 	beq.w	80121e4 <_printf_float+0x174>
 80124ce:	2300      	movs	r3, #0
 80124d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80124d4:	ab09      	add	r3, sp, #36	; 0x24
 80124d6:	9300      	str	r3, [sp, #0]
 80124d8:	ec49 8b10 	vmov	d0, r8, r9
 80124dc:	6022      	str	r2, [r4, #0]
 80124de:	f8cd a004 	str.w	sl, [sp, #4]
 80124e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124e6:	4628      	mov	r0, r5
 80124e8:	f7ff fd2e 	bl	8011f48 <__cvt>
 80124ec:	4680      	mov	r8, r0
 80124ee:	e648      	b.n	8012182 <_printf_float+0x112>

080124f0 <_printf_common>:
 80124f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124f4:	4691      	mov	r9, r2
 80124f6:	461f      	mov	r7, r3
 80124f8:	688a      	ldr	r2, [r1, #8]
 80124fa:	690b      	ldr	r3, [r1, #16]
 80124fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012500:	4293      	cmp	r3, r2
 8012502:	bfb8      	it	lt
 8012504:	4613      	movlt	r3, r2
 8012506:	f8c9 3000 	str.w	r3, [r9]
 801250a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801250e:	4606      	mov	r6, r0
 8012510:	460c      	mov	r4, r1
 8012512:	b112      	cbz	r2, 801251a <_printf_common+0x2a>
 8012514:	3301      	adds	r3, #1
 8012516:	f8c9 3000 	str.w	r3, [r9]
 801251a:	6823      	ldr	r3, [r4, #0]
 801251c:	0699      	lsls	r1, r3, #26
 801251e:	bf42      	ittt	mi
 8012520:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012524:	3302      	addmi	r3, #2
 8012526:	f8c9 3000 	strmi.w	r3, [r9]
 801252a:	6825      	ldr	r5, [r4, #0]
 801252c:	f015 0506 	ands.w	r5, r5, #6
 8012530:	d107      	bne.n	8012542 <_printf_common+0x52>
 8012532:	f104 0a19 	add.w	sl, r4, #25
 8012536:	68e3      	ldr	r3, [r4, #12]
 8012538:	f8d9 2000 	ldr.w	r2, [r9]
 801253c:	1a9b      	subs	r3, r3, r2
 801253e:	42ab      	cmp	r3, r5
 8012540:	dc28      	bgt.n	8012594 <_printf_common+0xa4>
 8012542:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012546:	6822      	ldr	r2, [r4, #0]
 8012548:	3300      	adds	r3, #0
 801254a:	bf18      	it	ne
 801254c:	2301      	movne	r3, #1
 801254e:	0692      	lsls	r2, r2, #26
 8012550:	d42d      	bmi.n	80125ae <_printf_common+0xbe>
 8012552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012556:	4639      	mov	r1, r7
 8012558:	4630      	mov	r0, r6
 801255a:	47c0      	blx	r8
 801255c:	3001      	adds	r0, #1
 801255e:	d020      	beq.n	80125a2 <_printf_common+0xb2>
 8012560:	6823      	ldr	r3, [r4, #0]
 8012562:	68e5      	ldr	r5, [r4, #12]
 8012564:	f8d9 2000 	ldr.w	r2, [r9]
 8012568:	f003 0306 	and.w	r3, r3, #6
 801256c:	2b04      	cmp	r3, #4
 801256e:	bf08      	it	eq
 8012570:	1aad      	subeq	r5, r5, r2
 8012572:	68a3      	ldr	r3, [r4, #8]
 8012574:	6922      	ldr	r2, [r4, #16]
 8012576:	bf0c      	ite	eq
 8012578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801257c:	2500      	movne	r5, #0
 801257e:	4293      	cmp	r3, r2
 8012580:	bfc4      	itt	gt
 8012582:	1a9b      	subgt	r3, r3, r2
 8012584:	18ed      	addgt	r5, r5, r3
 8012586:	f04f 0900 	mov.w	r9, #0
 801258a:	341a      	adds	r4, #26
 801258c:	454d      	cmp	r5, r9
 801258e:	d11a      	bne.n	80125c6 <_printf_common+0xd6>
 8012590:	2000      	movs	r0, #0
 8012592:	e008      	b.n	80125a6 <_printf_common+0xb6>
 8012594:	2301      	movs	r3, #1
 8012596:	4652      	mov	r2, sl
 8012598:	4639      	mov	r1, r7
 801259a:	4630      	mov	r0, r6
 801259c:	47c0      	blx	r8
 801259e:	3001      	adds	r0, #1
 80125a0:	d103      	bne.n	80125aa <_printf_common+0xba>
 80125a2:	f04f 30ff 	mov.w	r0, #4294967295
 80125a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125aa:	3501      	adds	r5, #1
 80125ac:	e7c3      	b.n	8012536 <_printf_common+0x46>
 80125ae:	18e1      	adds	r1, r4, r3
 80125b0:	1c5a      	adds	r2, r3, #1
 80125b2:	2030      	movs	r0, #48	; 0x30
 80125b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80125b8:	4422      	add	r2, r4
 80125ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80125be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80125c2:	3302      	adds	r3, #2
 80125c4:	e7c5      	b.n	8012552 <_printf_common+0x62>
 80125c6:	2301      	movs	r3, #1
 80125c8:	4622      	mov	r2, r4
 80125ca:	4639      	mov	r1, r7
 80125cc:	4630      	mov	r0, r6
 80125ce:	47c0      	blx	r8
 80125d0:	3001      	adds	r0, #1
 80125d2:	d0e6      	beq.n	80125a2 <_printf_common+0xb2>
 80125d4:	f109 0901 	add.w	r9, r9, #1
 80125d8:	e7d8      	b.n	801258c <_printf_common+0x9c>

080125da <cleanup_glue>:
 80125da:	b538      	push	{r3, r4, r5, lr}
 80125dc:	460c      	mov	r4, r1
 80125de:	6809      	ldr	r1, [r1, #0]
 80125e0:	4605      	mov	r5, r0
 80125e2:	b109      	cbz	r1, 80125e8 <cleanup_glue+0xe>
 80125e4:	f7ff fff9 	bl	80125da <cleanup_glue>
 80125e8:	4621      	mov	r1, r4
 80125ea:	4628      	mov	r0, r5
 80125ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125f0:	f001 b9b4 	b.w	801395c <_free_r>

080125f4 <_reclaim_reent>:
 80125f4:	4b2c      	ldr	r3, [pc, #176]	; (80126a8 <_reclaim_reent+0xb4>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4283      	cmp	r3, r0
 80125fa:	b570      	push	{r4, r5, r6, lr}
 80125fc:	4604      	mov	r4, r0
 80125fe:	d051      	beq.n	80126a4 <_reclaim_reent+0xb0>
 8012600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012602:	b143      	cbz	r3, 8012616 <_reclaim_reent+0x22>
 8012604:	68db      	ldr	r3, [r3, #12]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d14a      	bne.n	80126a0 <_reclaim_reent+0xac>
 801260a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801260c:	6819      	ldr	r1, [r3, #0]
 801260e:	b111      	cbz	r1, 8012616 <_reclaim_reent+0x22>
 8012610:	4620      	mov	r0, r4
 8012612:	f001 f9a3 	bl	801395c <_free_r>
 8012616:	6961      	ldr	r1, [r4, #20]
 8012618:	b111      	cbz	r1, 8012620 <_reclaim_reent+0x2c>
 801261a:	4620      	mov	r0, r4
 801261c:	f001 f99e 	bl	801395c <_free_r>
 8012620:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012622:	b111      	cbz	r1, 801262a <_reclaim_reent+0x36>
 8012624:	4620      	mov	r0, r4
 8012626:	f001 f999 	bl	801395c <_free_r>
 801262a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801262c:	b111      	cbz	r1, 8012634 <_reclaim_reent+0x40>
 801262e:	4620      	mov	r0, r4
 8012630:	f001 f994 	bl	801395c <_free_r>
 8012634:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012636:	b111      	cbz	r1, 801263e <_reclaim_reent+0x4a>
 8012638:	4620      	mov	r0, r4
 801263a:	f001 f98f 	bl	801395c <_free_r>
 801263e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012640:	b111      	cbz	r1, 8012648 <_reclaim_reent+0x54>
 8012642:	4620      	mov	r0, r4
 8012644:	f001 f98a 	bl	801395c <_free_r>
 8012648:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801264a:	b111      	cbz	r1, 8012652 <_reclaim_reent+0x5e>
 801264c:	4620      	mov	r0, r4
 801264e:	f001 f985 	bl	801395c <_free_r>
 8012652:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012654:	b111      	cbz	r1, 801265c <_reclaim_reent+0x68>
 8012656:	4620      	mov	r0, r4
 8012658:	f001 f980 	bl	801395c <_free_r>
 801265c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801265e:	b111      	cbz	r1, 8012666 <_reclaim_reent+0x72>
 8012660:	4620      	mov	r0, r4
 8012662:	f001 f97b 	bl	801395c <_free_r>
 8012666:	69a3      	ldr	r3, [r4, #24]
 8012668:	b1e3      	cbz	r3, 80126a4 <_reclaim_reent+0xb0>
 801266a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801266c:	4620      	mov	r0, r4
 801266e:	4798      	blx	r3
 8012670:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012672:	b1b9      	cbz	r1, 80126a4 <_reclaim_reent+0xb0>
 8012674:	4620      	mov	r0, r4
 8012676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801267a:	f7ff bfae 	b.w	80125da <cleanup_glue>
 801267e:	5949      	ldr	r1, [r1, r5]
 8012680:	b941      	cbnz	r1, 8012694 <_reclaim_reent+0xa0>
 8012682:	3504      	adds	r5, #4
 8012684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012686:	2d80      	cmp	r5, #128	; 0x80
 8012688:	68d9      	ldr	r1, [r3, #12]
 801268a:	d1f8      	bne.n	801267e <_reclaim_reent+0x8a>
 801268c:	4620      	mov	r0, r4
 801268e:	f001 f965 	bl	801395c <_free_r>
 8012692:	e7ba      	b.n	801260a <_reclaim_reent+0x16>
 8012694:	680e      	ldr	r6, [r1, #0]
 8012696:	4620      	mov	r0, r4
 8012698:	f001 f960 	bl	801395c <_free_r>
 801269c:	4631      	mov	r1, r6
 801269e:	e7ef      	b.n	8012680 <_reclaim_reent+0x8c>
 80126a0:	2500      	movs	r5, #0
 80126a2:	e7ef      	b.n	8012684 <_reclaim_reent+0x90>
 80126a4:	bd70      	pop	{r4, r5, r6, pc}
 80126a6:	bf00      	nop
 80126a8:	20000018 	.word	0x20000018

080126ac <_sbrk_r>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	4c06      	ldr	r4, [pc, #24]	; (80126c8 <_sbrk_r+0x1c>)
 80126b0:	2300      	movs	r3, #0
 80126b2:	4605      	mov	r5, r0
 80126b4:	4608      	mov	r0, r1
 80126b6:	6023      	str	r3, [r4, #0]
 80126b8:	f7fc fe3a 	bl	800f330 <_sbrk>
 80126bc:	1c43      	adds	r3, r0, #1
 80126be:	d102      	bne.n	80126c6 <_sbrk_r+0x1a>
 80126c0:	6823      	ldr	r3, [r4, #0]
 80126c2:	b103      	cbz	r3, 80126c6 <_sbrk_r+0x1a>
 80126c4:	602b      	str	r3, [r5, #0]
 80126c6:	bd38      	pop	{r3, r4, r5, pc}
 80126c8:	2000f024 	.word	0x2000f024

080126cc <quorem>:
 80126cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d0:	6903      	ldr	r3, [r0, #16]
 80126d2:	690c      	ldr	r4, [r1, #16]
 80126d4:	42a3      	cmp	r3, r4
 80126d6:	4680      	mov	r8, r0
 80126d8:	f2c0 8082 	blt.w	80127e0 <quorem+0x114>
 80126dc:	3c01      	subs	r4, #1
 80126de:	f101 0714 	add.w	r7, r1, #20
 80126e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80126e6:	f100 0614 	add.w	r6, r0, #20
 80126ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80126ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80126f2:	eb06 030c 	add.w	r3, r6, ip
 80126f6:	3501      	adds	r5, #1
 80126f8:	eb07 090c 	add.w	r9, r7, ip
 80126fc:	9301      	str	r3, [sp, #4]
 80126fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8012702:	b395      	cbz	r5, 801276a <quorem+0x9e>
 8012704:	f04f 0a00 	mov.w	sl, #0
 8012708:	4638      	mov	r0, r7
 801270a:	46b6      	mov	lr, r6
 801270c:	46d3      	mov	fp, sl
 801270e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012712:	b293      	uxth	r3, r2
 8012714:	fb05 a303 	mla	r3, r5, r3, sl
 8012718:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801271c:	b29b      	uxth	r3, r3
 801271e:	ebab 0303 	sub.w	r3, fp, r3
 8012722:	0c12      	lsrs	r2, r2, #16
 8012724:	f8de b000 	ldr.w	fp, [lr]
 8012728:	fb05 a202 	mla	r2, r5, r2, sl
 801272c:	fa13 f38b 	uxtah	r3, r3, fp
 8012730:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012734:	fa1f fb82 	uxth.w	fp, r2
 8012738:	f8de 2000 	ldr.w	r2, [lr]
 801273c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012744:	b29b      	uxth	r3, r3
 8012746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801274a:	4581      	cmp	r9, r0
 801274c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012750:	f84e 3b04 	str.w	r3, [lr], #4
 8012754:	d2db      	bcs.n	801270e <quorem+0x42>
 8012756:	f856 300c 	ldr.w	r3, [r6, ip]
 801275a:	b933      	cbnz	r3, 801276a <quorem+0x9e>
 801275c:	9b01      	ldr	r3, [sp, #4]
 801275e:	3b04      	subs	r3, #4
 8012760:	429e      	cmp	r6, r3
 8012762:	461a      	mov	r2, r3
 8012764:	d330      	bcc.n	80127c8 <quorem+0xfc>
 8012766:	f8c8 4010 	str.w	r4, [r8, #16]
 801276a:	4640      	mov	r0, r8
 801276c:	f001 f822 	bl	80137b4 <__mcmp>
 8012770:	2800      	cmp	r0, #0
 8012772:	db25      	blt.n	80127c0 <quorem+0xf4>
 8012774:	3501      	adds	r5, #1
 8012776:	4630      	mov	r0, r6
 8012778:	f04f 0c00 	mov.w	ip, #0
 801277c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012780:	f8d0 e000 	ldr.w	lr, [r0]
 8012784:	b293      	uxth	r3, r2
 8012786:	ebac 0303 	sub.w	r3, ip, r3
 801278a:	0c12      	lsrs	r2, r2, #16
 801278c:	fa13 f38e 	uxtah	r3, r3, lr
 8012790:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012798:	b29b      	uxth	r3, r3
 801279a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801279e:	45b9      	cmp	r9, r7
 80127a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80127a4:	f840 3b04 	str.w	r3, [r0], #4
 80127a8:	d2e8      	bcs.n	801277c <quorem+0xb0>
 80127aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80127ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80127b2:	b92a      	cbnz	r2, 80127c0 <quorem+0xf4>
 80127b4:	3b04      	subs	r3, #4
 80127b6:	429e      	cmp	r6, r3
 80127b8:	461a      	mov	r2, r3
 80127ba:	d30b      	bcc.n	80127d4 <quorem+0x108>
 80127bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80127c0:	4628      	mov	r0, r5
 80127c2:	b003      	add	sp, #12
 80127c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c8:	6812      	ldr	r2, [r2, #0]
 80127ca:	3b04      	subs	r3, #4
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	d1ca      	bne.n	8012766 <quorem+0x9a>
 80127d0:	3c01      	subs	r4, #1
 80127d2:	e7c5      	b.n	8012760 <quorem+0x94>
 80127d4:	6812      	ldr	r2, [r2, #0]
 80127d6:	3b04      	subs	r3, #4
 80127d8:	2a00      	cmp	r2, #0
 80127da:	d1ef      	bne.n	80127bc <quorem+0xf0>
 80127dc:	3c01      	subs	r4, #1
 80127de:	e7ea      	b.n	80127b6 <quorem+0xea>
 80127e0:	2000      	movs	r0, #0
 80127e2:	e7ee      	b.n	80127c2 <quorem+0xf6>
 80127e4:	0000      	movs	r0, r0
	...

080127e8 <_dtoa_r>:
 80127e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	ec57 6b10 	vmov	r6, r7, d0
 80127f0:	b097      	sub	sp, #92	; 0x5c
 80127f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80127f4:	9106      	str	r1, [sp, #24]
 80127f6:	4604      	mov	r4, r0
 80127f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80127fa:	9312      	str	r3, [sp, #72]	; 0x48
 80127fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012800:	e9cd 6700 	strd	r6, r7, [sp]
 8012804:	b93d      	cbnz	r5, 8012816 <_dtoa_r+0x2e>
 8012806:	2010      	movs	r0, #16
 8012808:	f000 fdb4 	bl	8013374 <malloc>
 801280c:	6260      	str	r0, [r4, #36]	; 0x24
 801280e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012812:	6005      	str	r5, [r0, #0]
 8012814:	60c5      	str	r5, [r0, #12]
 8012816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012818:	6819      	ldr	r1, [r3, #0]
 801281a:	b151      	cbz	r1, 8012832 <_dtoa_r+0x4a>
 801281c:	685a      	ldr	r2, [r3, #4]
 801281e:	604a      	str	r2, [r1, #4]
 8012820:	2301      	movs	r3, #1
 8012822:	4093      	lsls	r3, r2
 8012824:	608b      	str	r3, [r1, #8]
 8012826:	4620      	mov	r0, r4
 8012828:	f000 fde2 	bl	80133f0 <_Bfree>
 801282c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801282e:	2200      	movs	r2, #0
 8012830:	601a      	str	r2, [r3, #0]
 8012832:	1e3b      	subs	r3, r7, #0
 8012834:	bfbb      	ittet	lt
 8012836:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801283a:	9301      	strlt	r3, [sp, #4]
 801283c:	2300      	movge	r3, #0
 801283e:	2201      	movlt	r2, #1
 8012840:	bfac      	ite	ge
 8012842:	f8c8 3000 	strge.w	r3, [r8]
 8012846:	f8c8 2000 	strlt.w	r2, [r8]
 801284a:	4baf      	ldr	r3, [pc, #700]	; (8012b08 <_dtoa_r+0x320>)
 801284c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012850:	ea33 0308 	bics.w	r3, r3, r8
 8012854:	d114      	bne.n	8012880 <_dtoa_r+0x98>
 8012856:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012858:	f242 730f 	movw	r3, #9999	; 0x270f
 801285c:	6013      	str	r3, [r2, #0]
 801285e:	9b00      	ldr	r3, [sp, #0]
 8012860:	b923      	cbnz	r3, 801286c <_dtoa_r+0x84>
 8012862:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012866:	2800      	cmp	r0, #0
 8012868:	f000 8542 	beq.w	80132f0 <_dtoa_r+0xb08>
 801286c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801286e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012b1c <_dtoa_r+0x334>
 8012872:	2b00      	cmp	r3, #0
 8012874:	f000 8544 	beq.w	8013300 <_dtoa_r+0xb18>
 8012878:	f10b 0303 	add.w	r3, fp, #3
 801287c:	f000 bd3e 	b.w	80132fc <_dtoa_r+0xb14>
 8012880:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012884:	2200      	movs	r2, #0
 8012886:	2300      	movs	r3, #0
 8012888:	4630      	mov	r0, r6
 801288a:	4639      	mov	r1, r7
 801288c:	f7ee f8d4 	bl	8000a38 <__aeabi_dcmpeq>
 8012890:	4681      	mov	r9, r0
 8012892:	b168      	cbz	r0, 80128b0 <_dtoa_r+0xc8>
 8012894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012896:	2301      	movs	r3, #1
 8012898:	6013      	str	r3, [r2, #0]
 801289a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801289c:	2b00      	cmp	r3, #0
 801289e:	f000 8524 	beq.w	80132ea <_dtoa_r+0xb02>
 80128a2:	4b9a      	ldr	r3, [pc, #616]	; (8012b0c <_dtoa_r+0x324>)
 80128a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80128a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80128aa:	6013      	str	r3, [r2, #0]
 80128ac:	f000 bd28 	b.w	8013300 <_dtoa_r+0xb18>
 80128b0:	aa14      	add	r2, sp, #80	; 0x50
 80128b2:	a915      	add	r1, sp, #84	; 0x54
 80128b4:	ec47 6b10 	vmov	d0, r6, r7
 80128b8:	4620      	mov	r0, r4
 80128ba:	f000 fff2 	bl	80138a2 <__d2b>
 80128be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80128c2:	9004      	str	r0, [sp, #16]
 80128c4:	2d00      	cmp	r5, #0
 80128c6:	d07c      	beq.n	80129c2 <_dtoa_r+0x1da>
 80128c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80128cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80128d0:	46b2      	mov	sl, r6
 80128d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80128d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80128da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80128de:	2200      	movs	r2, #0
 80128e0:	4b8b      	ldr	r3, [pc, #556]	; (8012b10 <_dtoa_r+0x328>)
 80128e2:	4650      	mov	r0, sl
 80128e4:	4659      	mov	r1, fp
 80128e6:	f7ed fc87 	bl	80001f8 <__aeabi_dsub>
 80128ea:	a381      	add	r3, pc, #516	; (adr r3, 8012af0 <_dtoa_r+0x308>)
 80128ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f0:	f7ed fe3a 	bl	8000568 <__aeabi_dmul>
 80128f4:	a380      	add	r3, pc, #512	; (adr r3, 8012af8 <_dtoa_r+0x310>)
 80128f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128fa:	f7ed fc7f 	bl	80001fc <__adddf3>
 80128fe:	4606      	mov	r6, r0
 8012900:	4628      	mov	r0, r5
 8012902:	460f      	mov	r7, r1
 8012904:	f7ed fdc6 	bl	8000494 <__aeabi_i2d>
 8012908:	a37d      	add	r3, pc, #500	; (adr r3, 8012b00 <_dtoa_r+0x318>)
 801290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290e:	f7ed fe2b 	bl	8000568 <__aeabi_dmul>
 8012912:	4602      	mov	r2, r0
 8012914:	460b      	mov	r3, r1
 8012916:	4630      	mov	r0, r6
 8012918:	4639      	mov	r1, r7
 801291a:	f7ed fc6f 	bl	80001fc <__adddf3>
 801291e:	4606      	mov	r6, r0
 8012920:	460f      	mov	r7, r1
 8012922:	f7ee f8d1 	bl	8000ac8 <__aeabi_d2iz>
 8012926:	2200      	movs	r2, #0
 8012928:	4682      	mov	sl, r0
 801292a:	2300      	movs	r3, #0
 801292c:	4630      	mov	r0, r6
 801292e:	4639      	mov	r1, r7
 8012930:	f7ee f88c 	bl	8000a4c <__aeabi_dcmplt>
 8012934:	b148      	cbz	r0, 801294a <_dtoa_r+0x162>
 8012936:	4650      	mov	r0, sl
 8012938:	f7ed fdac 	bl	8000494 <__aeabi_i2d>
 801293c:	4632      	mov	r2, r6
 801293e:	463b      	mov	r3, r7
 8012940:	f7ee f87a 	bl	8000a38 <__aeabi_dcmpeq>
 8012944:	b908      	cbnz	r0, 801294a <_dtoa_r+0x162>
 8012946:	f10a 3aff 	add.w	sl, sl, #4294967295
 801294a:	f1ba 0f16 	cmp.w	sl, #22
 801294e:	d859      	bhi.n	8012a04 <_dtoa_r+0x21c>
 8012950:	4970      	ldr	r1, [pc, #448]	; (8012b14 <_dtoa_r+0x32c>)
 8012952:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012956:	e9dd 2300 	ldrd	r2, r3, [sp]
 801295a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801295e:	f7ee f893 	bl	8000a88 <__aeabi_dcmpgt>
 8012962:	2800      	cmp	r0, #0
 8012964:	d050      	beq.n	8012a08 <_dtoa_r+0x220>
 8012966:	f10a 3aff 	add.w	sl, sl, #4294967295
 801296a:	2300      	movs	r3, #0
 801296c:	930f      	str	r3, [sp, #60]	; 0x3c
 801296e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012970:	1b5d      	subs	r5, r3, r5
 8012972:	f1b5 0801 	subs.w	r8, r5, #1
 8012976:	bf49      	itett	mi
 8012978:	f1c5 0301 	rsbmi	r3, r5, #1
 801297c:	2300      	movpl	r3, #0
 801297e:	9305      	strmi	r3, [sp, #20]
 8012980:	f04f 0800 	movmi.w	r8, #0
 8012984:	bf58      	it	pl
 8012986:	9305      	strpl	r3, [sp, #20]
 8012988:	f1ba 0f00 	cmp.w	sl, #0
 801298c:	db3e      	blt.n	8012a0c <_dtoa_r+0x224>
 801298e:	2300      	movs	r3, #0
 8012990:	44d0      	add	r8, sl
 8012992:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012996:	9307      	str	r3, [sp, #28]
 8012998:	9b06      	ldr	r3, [sp, #24]
 801299a:	2b09      	cmp	r3, #9
 801299c:	f200 8090 	bhi.w	8012ac0 <_dtoa_r+0x2d8>
 80129a0:	2b05      	cmp	r3, #5
 80129a2:	bfc4      	itt	gt
 80129a4:	3b04      	subgt	r3, #4
 80129a6:	9306      	strgt	r3, [sp, #24]
 80129a8:	9b06      	ldr	r3, [sp, #24]
 80129aa:	f1a3 0302 	sub.w	r3, r3, #2
 80129ae:	bfcc      	ite	gt
 80129b0:	2500      	movgt	r5, #0
 80129b2:	2501      	movle	r5, #1
 80129b4:	2b03      	cmp	r3, #3
 80129b6:	f200 808f 	bhi.w	8012ad8 <_dtoa_r+0x2f0>
 80129ba:	e8df f003 	tbb	[pc, r3]
 80129be:	7f7d      	.short	0x7f7d
 80129c0:	7131      	.short	0x7131
 80129c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80129c6:	441d      	add	r5, r3
 80129c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80129cc:	2820      	cmp	r0, #32
 80129ce:	dd13      	ble.n	80129f8 <_dtoa_r+0x210>
 80129d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80129d4:	9b00      	ldr	r3, [sp, #0]
 80129d6:	fa08 f800 	lsl.w	r8, r8, r0
 80129da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80129de:	fa23 f000 	lsr.w	r0, r3, r0
 80129e2:	ea48 0000 	orr.w	r0, r8, r0
 80129e6:	f7ed fd45 	bl	8000474 <__aeabi_ui2d>
 80129ea:	2301      	movs	r3, #1
 80129ec:	4682      	mov	sl, r0
 80129ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80129f2:	3d01      	subs	r5, #1
 80129f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80129f6:	e772      	b.n	80128de <_dtoa_r+0xf6>
 80129f8:	9b00      	ldr	r3, [sp, #0]
 80129fa:	f1c0 0020 	rsb	r0, r0, #32
 80129fe:	fa03 f000 	lsl.w	r0, r3, r0
 8012a02:	e7f0      	b.n	80129e6 <_dtoa_r+0x1fe>
 8012a04:	2301      	movs	r3, #1
 8012a06:	e7b1      	b.n	801296c <_dtoa_r+0x184>
 8012a08:	900f      	str	r0, [sp, #60]	; 0x3c
 8012a0a:	e7b0      	b.n	801296e <_dtoa_r+0x186>
 8012a0c:	9b05      	ldr	r3, [sp, #20]
 8012a0e:	eba3 030a 	sub.w	r3, r3, sl
 8012a12:	9305      	str	r3, [sp, #20]
 8012a14:	f1ca 0300 	rsb	r3, sl, #0
 8012a18:	9307      	str	r3, [sp, #28]
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8012a1e:	e7bb      	b.n	8012998 <_dtoa_r+0x1b0>
 8012a20:	2301      	movs	r3, #1
 8012a22:	930a      	str	r3, [sp, #40]	; 0x28
 8012a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	dd59      	ble.n	8012ade <_dtoa_r+0x2f6>
 8012a2a:	9302      	str	r3, [sp, #8]
 8012a2c:	4699      	mov	r9, r3
 8012a2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012a30:	2200      	movs	r2, #0
 8012a32:	6072      	str	r2, [r6, #4]
 8012a34:	2204      	movs	r2, #4
 8012a36:	f102 0014 	add.w	r0, r2, #20
 8012a3a:	4298      	cmp	r0, r3
 8012a3c:	6871      	ldr	r1, [r6, #4]
 8012a3e:	d953      	bls.n	8012ae8 <_dtoa_r+0x300>
 8012a40:	4620      	mov	r0, r4
 8012a42:	f000 fca1 	bl	8013388 <_Balloc>
 8012a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a48:	6030      	str	r0, [r6, #0]
 8012a4a:	f1b9 0f0e 	cmp.w	r9, #14
 8012a4e:	f8d3 b000 	ldr.w	fp, [r3]
 8012a52:	f200 80e6 	bhi.w	8012c22 <_dtoa_r+0x43a>
 8012a56:	2d00      	cmp	r5, #0
 8012a58:	f000 80e3 	beq.w	8012c22 <_dtoa_r+0x43a>
 8012a5c:	ed9d 7b00 	vldr	d7, [sp]
 8012a60:	f1ba 0f00 	cmp.w	sl, #0
 8012a64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012a68:	dd74      	ble.n	8012b54 <_dtoa_r+0x36c>
 8012a6a:	4a2a      	ldr	r2, [pc, #168]	; (8012b14 <_dtoa_r+0x32c>)
 8012a6c:	f00a 030f 	and.w	r3, sl, #15
 8012a70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a74:	ed93 7b00 	vldr	d7, [r3]
 8012a78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012a7c:	06f0      	lsls	r0, r6, #27
 8012a7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012a82:	d565      	bpl.n	8012b50 <_dtoa_r+0x368>
 8012a84:	4b24      	ldr	r3, [pc, #144]	; (8012b18 <_dtoa_r+0x330>)
 8012a86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012a8e:	f7ed fe95 	bl	80007bc <__aeabi_ddiv>
 8012a92:	e9cd 0100 	strd	r0, r1, [sp]
 8012a96:	f006 060f 	and.w	r6, r6, #15
 8012a9a:	2503      	movs	r5, #3
 8012a9c:	4f1e      	ldr	r7, [pc, #120]	; (8012b18 <_dtoa_r+0x330>)
 8012a9e:	e04c      	b.n	8012b3a <_dtoa_r+0x352>
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8012aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012aa6:	4453      	add	r3, sl
 8012aa8:	f103 0901 	add.w	r9, r3, #1
 8012aac:	9302      	str	r3, [sp, #8]
 8012aae:	464b      	mov	r3, r9
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	bfb8      	it	lt
 8012ab4:	2301      	movlt	r3, #1
 8012ab6:	e7ba      	b.n	8012a2e <_dtoa_r+0x246>
 8012ab8:	2300      	movs	r3, #0
 8012aba:	e7b2      	b.n	8012a22 <_dtoa_r+0x23a>
 8012abc:	2300      	movs	r3, #0
 8012abe:	e7f0      	b.n	8012aa2 <_dtoa_r+0x2ba>
 8012ac0:	2501      	movs	r5, #1
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	9306      	str	r3, [sp, #24]
 8012ac6:	950a      	str	r5, [sp, #40]	; 0x28
 8012ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8012acc:	9302      	str	r3, [sp, #8]
 8012ace:	4699      	mov	r9, r3
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	2312      	movs	r3, #18
 8012ad4:	920b      	str	r2, [sp, #44]	; 0x2c
 8012ad6:	e7aa      	b.n	8012a2e <_dtoa_r+0x246>
 8012ad8:	2301      	movs	r3, #1
 8012ada:	930a      	str	r3, [sp, #40]	; 0x28
 8012adc:	e7f4      	b.n	8012ac8 <_dtoa_r+0x2e0>
 8012ade:	2301      	movs	r3, #1
 8012ae0:	9302      	str	r3, [sp, #8]
 8012ae2:	4699      	mov	r9, r3
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	e7f5      	b.n	8012ad4 <_dtoa_r+0x2ec>
 8012ae8:	3101      	adds	r1, #1
 8012aea:	6071      	str	r1, [r6, #4]
 8012aec:	0052      	lsls	r2, r2, #1
 8012aee:	e7a2      	b.n	8012a36 <_dtoa_r+0x24e>
 8012af0:	636f4361 	.word	0x636f4361
 8012af4:	3fd287a7 	.word	0x3fd287a7
 8012af8:	8b60c8b3 	.word	0x8b60c8b3
 8012afc:	3fc68a28 	.word	0x3fc68a28
 8012b00:	509f79fb 	.word	0x509f79fb
 8012b04:	3fd34413 	.word	0x3fd34413
 8012b08:	7ff00000 	.word	0x7ff00000
 8012b0c:	080154b9 	.word	0x080154b9
 8012b10:	3ff80000 	.word	0x3ff80000
 8012b14:	080154f0 	.word	0x080154f0
 8012b18:	080154c8 	.word	0x080154c8
 8012b1c:	080154c3 	.word	0x080154c3
 8012b20:	07f1      	lsls	r1, r6, #31
 8012b22:	d508      	bpl.n	8012b36 <_dtoa_r+0x34e>
 8012b24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b2c:	f7ed fd1c 	bl	8000568 <__aeabi_dmul>
 8012b30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b34:	3501      	adds	r5, #1
 8012b36:	1076      	asrs	r6, r6, #1
 8012b38:	3708      	adds	r7, #8
 8012b3a:	2e00      	cmp	r6, #0
 8012b3c:	d1f0      	bne.n	8012b20 <_dtoa_r+0x338>
 8012b3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012b42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b46:	f7ed fe39 	bl	80007bc <__aeabi_ddiv>
 8012b4a:	e9cd 0100 	strd	r0, r1, [sp]
 8012b4e:	e01a      	b.n	8012b86 <_dtoa_r+0x39e>
 8012b50:	2502      	movs	r5, #2
 8012b52:	e7a3      	b.n	8012a9c <_dtoa_r+0x2b4>
 8012b54:	f000 80a0 	beq.w	8012c98 <_dtoa_r+0x4b0>
 8012b58:	f1ca 0600 	rsb	r6, sl, #0
 8012b5c:	4b9f      	ldr	r3, [pc, #636]	; (8012ddc <_dtoa_r+0x5f4>)
 8012b5e:	4fa0      	ldr	r7, [pc, #640]	; (8012de0 <_dtoa_r+0x5f8>)
 8012b60:	f006 020f 	and.w	r2, r6, #15
 8012b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012b70:	f7ed fcfa 	bl	8000568 <__aeabi_dmul>
 8012b74:	e9cd 0100 	strd	r0, r1, [sp]
 8012b78:	1136      	asrs	r6, r6, #4
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	2502      	movs	r5, #2
 8012b7e:	2e00      	cmp	r6, #0
 8012b80:	d17f      	bne.n	8012c82 <_dtoa_r+0x49a>
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d1e1      	bne.n	8012b4a <_dtoa_r+0x362>
 8012b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 8087 	beq.w	8012c9c <_dtoa_r+0x4b4>
 8012b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b92:	2200      	movs	r2, #0
 8012b94:	4b93      	ldr	r3, [pc, #588]	; (8012de4 <_dtoa_r+0x5fc>)
 8012b96:	4630      	mov	r0, r6
 8012b98:	4639      	mov	r1, r7
 8012b9a:	f7ed ff57 	bl	8000a4c <__aeabi_dcmplt>
 8012b9e:	2800      	cmp	r0, #0
 8012ba0:	d07c      	beq.n	8012c9c <_dtoa_r+0x4b4>
 8012ba2:	f1b9 0f00 	cmp.w	r9, #0
 8012ba6:	d079      	beq.n	8012c9c <_dtoa_r+0x4b4>
 8012ba8:	9b02      	ldr	r3, [sp, #8]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	dd35      	ble.n	8012c1a <_dtoa_r+0x432>
 8012bae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012bb2:	9308      	str	r3, [sp, #32]
 8012bb4:	4639      	mov	r1, r7
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	4b8b      	ldr	r3, [pc, #556]	; (8012de8 <_dtoa_r+0x600>)
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f7ed fcd4 	bl	8000568 <__aeabi_dmul>
 8012bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8012bc4:	9f02      	ldr	r7, [sp, #8]
 8012bc6:	3501      	adds	r5, #1
 8012bc8:	4628      	mov	r0, r5
 8012bca:	f7ed fc63 	bl	8000494 <__aeabi_i2d>
 8012bce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bd2:	f7ed fcc9 	bl	8000568 <__aeabi_dmul>
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	4b84      	ldr	r3, [pc, #528]	; (8012dec <_dtoa_r+0x604>)
 8012bda:	f7ed fb0f 	bl	80001fc <__adddf3>
 8012bde:	4605      	mov	r5, r0
 8012be0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012be4:	2f00      	cmp	r7, #0
 8012be6:	d15d      	bne.n	8012ca4 <_dtoa_r+0x4bc>
 8012be8:	2200      	movs	r2, #0
 8012bea:	4b81      	ldr	r3, [pc, #516]	; (8012df0 <_dtoa_r+0x608>)
 8012bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bf0:	f7ed fb02 	bl	80001f8 <__aeabi_dsub>
 8012bf4:	462a      	mov	r2, r5
 8012bf6:	4633      	mov	r3, r6
 8012bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8012bfc:	f7ed ff44 	bl	8000a88 <__aeabi_dcmpgt>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	f040 8288 	bne.w	8013116 <_dtoa_r+0x92e>
 8012c06:	462a      	mov	r2, r5
 8012c08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c10:	f7ed ff1c 	bl	8000a4c <__aeabi_dcmplt>
 8012c14:	2800      	cmp	r0, #0
 8012c16:	f040 827c 	bne.w	8013112 <_dtoa_r+0x92a>
 8012c1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012c1e:	e9cd 2300 	strd	r2, r3, [sp]
 8012c22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	f2c0 8150 	blt.w	8012eca <_dtoa_r+0x6e2>
 8012c2a:	f1ba 0f0e 	cmp.w	sl, #14
 8012c2e:	f300 814c 	bgt.w	8012eca <_dtoa_r+0x6e2>
 8012c32:	4b6a      	ldr	r3, [pc, #424]	; (8012ddc <_dtoa_r+0x5f4>)
 8012c34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012c38:	ed93 7b00 	vldr	d7, [r3]
 8012c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c44:	f280 80d8 	bge.w	8012df8 <_dtoa_r+0x610>
 8012c48:	f1b9 0f00 	cmp.w	r9, #0
 8012c4c:	f300 80d4 	bgt.w	8012df8 <_dtoa_r+0x610>
 8012c50:	f040 825e 	bne.w	8013110 <_dtoa_r+0x928>
 8012c54:	2200      	movs	r2, #0
 8012c56:	4b66      	ldr	r3, [pc, #408]	; (8012df0 <_dtoa_r+0x608>)
 8012c58:	ec51 0b17 	vmov	r0, r1, d7
 8012c5c:	f7ed fc84 	bl	8000568 <__aeabi_dmul>
 8012c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c64:	f7ed ff06 	bl	8000a74 <__aeabi_dcmpge>
 8012c68:	464f      	mov	r7, r9
 8012c6a:	464e      	mov	r6, r9
 8012c6c:	2800      	cmp	r0, #0
 8012c6e:	f040 8234 	bne.w	80130da <_dtoa_r+0x8f2>
 8012c72:	2331      	movs	r3, #49	; 0x31
 8012c74:	f10b 0501 	add.w	r5, fp, #1
 8012c78:	f88b 3000 	strb.w	r3, [fp]
 8012c7c:	f10a 0a01 	add.w	sl, sl, #1
 8012c80:	e22f      	b.n	80130e2 <_dtoa_r+0x8fa>
 8012c82:	07f2      	lsls	r2, r6, #31
 8012c84:	d505      	bpl.n	8012c92 <_dtoa_r+0x4aa>
 8012c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c8a:	f7ed fc6d 	bl	8000568 <__aeabi_dmul>
 8012c8e:	3501      	adds	r5, #1
 8012c90:	2301      	movs	r3, #1
 8012c92:	1076      	asrs	r6, r6, #1
 8012c94:	3708      	adds	r7, #8
 8012c96:	e772      	b.n	8012b7e <_dtoa_r+0x396>
 8012c98:	2502      	movs	r5, #2
 8012c9a:	e774      	b.n	8012b86 <_dtoa_r+0x39e>
 8012c9c:	f8cd a020 	str.w	sl, [sp, #32]
 8012ca0:	464f      	mov	r7, r9
 8012ca2:	e791      	b.n	8012bc8 <_dtoa_r+0x3e0>
 8012ca4:	4b4d      	ldr	r3, [pc, #308]	; (8012ddc <_dtoa_r+0x5f4>)
 8012ca6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012caa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d047      	beq.n	8012d44 <_dtoa_r+0x55c>
 8012cb4:	4602      	mov	r2, r0
 8012cb6:	460b      	mov	r3, r1
 8012cb8:	2000      	movs	r0, #0
 8012cba:	494e      	ldr	r1, [pc, #312]	; (8012df4 <_dtoa_r+0x60c>)
 8012cbc:	f7ed fd7e 	bl	80007bc <__aeabi_ddiv>
 8012cc0:	462a      	mov	r2, r5
 8012cc2:	4633      	mov	r3, r6
 8012cc4:	f7ed fa98 	bl	80001f8 <__aeabi_dsub>
 8012cc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012ccc:	465d      	mov	r5, fp
 8012cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cd2:	f7ed fef9 	bl	8000ac8 <__aeabi_d2iz>
 8012cd6:	4606      	mov	r6, r0
 8012cd8:	f7ed fbdc 	bl	8000494 <__aeabi_i2d>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	460b      	mov	r3, r1
 8012ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ce4:	f7ed fa88 	bl	80001f8 <__aeabi_dsub>
 8012ce8:	3630      	adds	r6, #48	; 0x30
 8012cea:	f805 6b01 	strb.w	r6, [r5], #1
 8012cee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012cf2:	e9cd 0100 	strd	r0, r1, [sp]
 8012cf6:	f7ed fea9 	bl	8000a4c <__aeabi_dcmplt>
 8012cfa:	2800      	cmp	r0, #0
 8012cfc:	d163      	bne.n	8012dc6 <_dtoa_r+0x5de>
 8012cfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d02:	2000      	movs	r0, #0
 8012d04:	4937      	ldr	r1, [pc, #220]	; (8012de4 <_dtoa_r+0x5fc>)
 8012d06:	f7ed fa77 	bl	80001f8 <__aeabi_dsub>
 8012d0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012d0e:	f7ed fe9d 	bl	8000a4c <__aeabi_dcmplt>
 8012d12:	2800      	cmp	r0, #0
 8012d14:	f040 80b7 	bne.w	8012e86 <_dtoa_r+0x69e>
 8012d18:	eba5 030b 	sub.w	r3, r5, fp
 8012d1c:	429f      	cmp	r7, r3
 8012d1e:	f77f af7c 	ble.w	8012c1a <_dtoa_r+0x432>
 8012d22:	2200      	movs	r2, #0
 8012d24:	4b30      	ldr	r3, [pc, #192]	; (8012de8 <_dtoa_r+0x600>)
 8012d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012d2a:	f7ed fc1d 	bl	8000568 <__aeabi_dmul>
 8012d2e:	2200      	movs	r2, #0
 8012d30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012d34:	4b2c      	ldr	r3, [pc, #176]	; (8012de8 <_dtoa_r+0x600>)
 8012d36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d3a:	f7ed fc15 	bl	8000568 <__aeabi_dmul>
 8012d3e:	e9cd 0100 	strd	r0, r1, [sp]
 8012d42:	e7c4      	b.n	8012cce <_dtoa_r+0x4e6>
 8012d44:	462a      	mov	r2, r5
 8012d46:	4633      	mov	r3, r6
 8012d48:	f7ed fc0e 	bl	8000568 <__aeabi_dmul>
 8012d4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012d50:	eb0b 0507 	add.w	r5, fp, r7
 8012d54:	465e      	mov	r6, fp
 8012d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d5a:	f7ed feb5 	bl	8000ac8 <__aeabi_d2iz>
 8012d5e:	4607      	mov	r7, r0
 8012d60:	f7ed fb98 	bl	8000494 <__aeabi_i2d>
 8012d64:	3730      	adds	r7, #48	; 0x30
 8012d66:	4602      	mov	r2, r0
 8012d68:	460b      	mov	r3, r1
 8012d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d6e:	f7ed fa43 	bl	80001f8 <__aeabi_dsub>
 8012d72:	f806 7b01 	strb.w	r7, [r6], #1
 8012d76:	42ae      	cmp	r6, r5
 8012d78:	e9cd 0100 	strd	r0, r1, [sp]
 8012d7c:	f04f 0200 	mov.w	r2, #0
 8012d80:	d126      	bne.n	8012dd0 <_dtoa_r+0x5e8>
 8012d82:	4b1c      	ldr	r3, [pc, #112]	; (8012df4 <_dtoa_r+0x60c>)
 8012d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012d88:	f7ed fa38 	bl	80001fc <__adddf3>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	460b      	mov	r3, r1
 8012d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d94:	f7ed fe78 	bl	8000a88 <__aeabi_dcmpgt>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	d174      	bne.n	8012e86 <_dtoa_r+0x69e>
 8012d9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012da0:	2000      	movs	r0, #0
 8012da2:	4914      	ldr	r1, [pc, #80]	; (8012df4 <_dtoa_r+0x60c>)
 8012da4:	f7ed fa28 	bl	80001f8 <__aeabi_dsub>
 8012da8:	4602      	mov	r2, r0
 8012daa:	460b      	mov	r3, r1
 8012dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012db0:	f7ed fe4c 	bl	8000a4c <__aeabi_dcmplt>
 8012db4:	2800      	cmp	r0, #0
 8012db6:	f43f af30 	beq.w	8012c1a <_dtoa_r+0x432>
 8012dba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012dbe:	2b30      	cmp	r3, #48	; 0x30
 8012dc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8012dc4:	d002      	beq.n	8012dcc <_dtoa_r+0x5e4>
 8012dc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012dca:	e04a      	b.n	8012e62 <_dtoa_r+0x67a>
 8012dcc:	4615      	mov	r5, r2
 8012dce:	e7f4      	b.n	8012dba <_dtoa_r+0x5d2>
 8012dd0:	4b05      	ldr	r3, [pc, #20]	; (8012de8 <_dtoa_r+0x600>)
 8012dd2:	f7ed fbc9 	bl	8000568 <__aeabi_dmul>
 8012dd6:	e9cd 0100 	strd	r0, r1, [sp]
 8012dda:	e7bc      	b.n	8012d56 <_dtoa_r+0x56e>
 8012ddc:	080154f0 	.word	0x080154f0
 8012de0:	080154c8 	.word	0x080154c8
 8012de4:	3ff00000 	.word	0x3ff00000
 8012de8:	40240000 	.word	0x40240000
 8012dec:	401c0000 	.word	0x401c0000
 8012df0:	40140000 	.word	0x40140000
 8012df4:	3fe00000 	.word	0x3fe00000
 8012df8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012dfc:	465d      	mov	r5, fp
 8012dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e02:	4630      	mov	r0, r6
 8012e04:	4639      	mov	r1, r7
 8012e06:	f7ed fcd9 	bl	80007bc <__aeabi_ddiv>
 8012e0a:	f7ed fe5d 	bl	8000ac8 <__aeabi_d2iz>
 8012e0e:	4680      	mov	r8, r0
 8012e10:	f7ed fb40 	bl	8000494 <__aeabi_i2d>
 8012e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e18:	f7ed fba6 	bl	8000568 <__aeabi_dmul>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	460b      	mov	r3, r1
 8012e20:	4630      	mov	r0, r6
 8012e22:	4639      	mov	r1, r7
 8012e24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012e28:	f7ed f9e6 	bl	80001f8 <__aeabi_dsub>
 8012e2c:	f805 6b01 	strb.w	r6, [r5], #1
 8012e30:	eba5 060b 	sub.w	r6, r5, fp
 8012e34:	45b1      	cmp	r9, r6
 8012e36:	4602      	mov	r2, r0
 8012e38:	460b      	mov	r3, r1
 8012e3a:	d139      	bne.n	8012eb0 <_dtoa_r+0x6c8>
 8012e3c:	f7ed f9de 	bl	80001fc <__adddf3>
 8012e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e44:	4606      	mov	r6, r0
 8012e46:	460f      	mov	r7, r1
 8012e48:	f7ed fe1e 	bl	8000a88 <__aeabi_dcmpgt>
 8012e4c:	b9c8      	cbnz	r0, 8012e82 <_dtoa_r+0x69a>
 8012e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e52:	4630      	mov	r0, r6
 8012e54:	4639      	mov	r1, r7
 8012e56:	f7ed fdef 	bl	8000a38 <__aeabi_dcmpeq>
 8012e5a:	b110      	cbz	r0, 8012e62 <_dtoa_r+0x67a>
 8012e5c:	f018 0f01 	tst.w	r8, #1
 8012e60:	d10f      	bne.n	8012e82 <_dtoa_r+0x69a>
 8012e62:	9904      	ldr	r1, [sp, #16]
 8012e64:	4620      	mov	r0, r4
 8012e66:	f000 fac3 	bl	80133f0 <_Bfree>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e6e:	702b      	strb	r3, [r5, #0]
 8012e70:	f10a 0301 	add.w	r3, sl, #1
 8012e74:	6013      	str	r3, [r2, #0]
 8012e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	f000 8241 	beq.w	8013300 <_dtoa_r+0xb18>
 8012e7e:	601d      	str	r5, [r3, #0]
 8012e80:	e23e      	b.n	8013300 <_dtoa_r+0xb18>
 8012e82:	f8cd a020 	str.w	sl, [sp, #32]
 8012e86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012e8a:	2a39      	cmp	r2, #57	; 0x39
 8012e8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8012e90:	d108      	bne.n	8012ea4 <_dtoa_r+0x6bc>
 8012e92:	459b      	cmp	fp, r3
 8012e94:	d10a      	bne.n	8012eac <_dtoa_r+0x6c4>
 8012e96:	9b08      	ldr	r3, [sp, #32]
 8012e98:	3301      	adds	r3, #1
 8012e9a:	9308      	str	r3, [sp, #32]
 8012e9c:	2330      	movs	r3, #48	; 0x30
 8012e9e:	f88b 3000 	strb.w	r3, [fp]
 8012ea2:	465b      	mov	r3, fp
 8012ea4:	781a      	ldrb	r2, [r3, #0]
 8012ea6:	3201      	adds	r2, #1
 8012ea8:	701a      	strb	r2, [r3, #0]
 8012eaa:	e78c      	b.n	8012dc6 <_dtoa_r+0x5de>
 8012eac:	461d      	mov	r5, r3
 8012eae:	e7ea      	b.n	8012e86 <_dtoa_r+0x69e>
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	4b9b      	ldr	r3, [pc, #620]	; (8013120 <_dtoa_r+0x938>)
 8012eb4:	f7ed fb58 	bl	8000568 <__aeabi_dmul>
 8012eb8:	2200      	movs	r2, #0
 8012eba:	2300      	movs	r3, #0
 8012ebc:	4606      	mov	r6, r0
 8012ebe:	460f      	mov	r7, r1
 8012ec0:	f7ed fdba 	bl	8000a38 <__aeabi_dcmpeq>
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	d09a      	beq.n	8012dfe <_dtoa_r+0x616>
 8012ec8:	e7cb      	b.n	8012e62 <_dtoa_r+0x67a>
 8012eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ecc:	2a00      	cmp	r2, #0
 8012ece:	f000 808b 	beq.w	8012fe8 <_dtoa_r+0x800>
 8012ed2:	9a06      	ldr	r2, [sp, #24]
 8012ed4:	2a01      	cmp	r2, #1
 8012ed6:	dc6e      	bgt.n	8012fb6 <_dtoa_r+0x7ce>
 8012ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012eda:	2a00      	cmp	r2, #0
 8012edc:	d067      	beq.n	8012fae <_dtoa_r+0x7c6>
 8012ede:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ee2:	9f07      	ldr	r7, [sp, #28]
 8012ee4:	9d05      	ldr	r5, [sp, #20]
 8012ee6:	9a05      	ldr	r2, [sp, #20]
 8012ee8:	2101      	movs	r1, #1
 8012eea:	441a      	add	r2, r3
 8012eec:	4620      	mov	r0, r4
 8012eee:	9205      	str	r2, [sp, #20]
 8012ef0:	4498      	add	r8, r3
 8012ef2:	f000 fb1d 	bl	8013530 <__i2b>
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	2d00      	cmp	r5, #0
 8012efa:	dd0c      	ble.n	8012f16 <_dtoa_r+0x72e>
 8012efc:	f1b8 0f00 	cmp.w	r8, #0
 8012f00:	dd09      	ble.n	8012f16 <_dtoa_r+0x72e>
 8012f02:	4545      	cmp	r5, r8
 8012f04:	9a05      	ldr	r2, [sp, #20]
 8012f06:	462b      	mov	r3, r5
 8012f08:	bfa8      	it	ge
 8012f0a:	4643      	movge	r3, r8
 8012f0c:	1ad2      	subs	r2, r2, r3
 8012f0e:	9205      	str	r2, [sp, #20]
 8012f10:	1aed      	subs	r5, r5, r3
 8012f12:	eba8 0803 	sub.w	r8, r8, r3
 8012f16:	9b07      	ldr	r3, [sp, #28]
 8012f18:	b1eb      	cbz	r3, 8012f56 <_dtoa_r+0x76e>
 8012f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d067      	beq.n	8012ff0 <_dtoa_r+0x808>
 8012f20:	b18f      	cbz	r7, 8012f46 <_dtoa_r+0x75e>
 8012f22:	4631      	mov	r1, r6
 8012f24:	463a      	mov	r2, r7
 8012f26:	4620      	mov	r0, r4
 8012f28:	f000 fba2 	bl	8013670 <__pow5mult>
 8012f2c:	9a04      	ldr	r2, [sp, #16]
 8012f2e:	4601      	mov	r1, r0
 8012f30:	4606      	mov	r6, r0
 8012f32:	4620      	mov	r0, r4
 8012f34:	f000 fb05 	bl	8013542 <__multiply>
 8012f38:	9904      	ldr	r1, [sp, #16]
 8012f3a:	9008      	str	r0, [sp, #32]
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f000 fa57 	bl	80133f0 <_Bfree>
 8012f42:	9b08      	ldr	r3, [sp, #32]
 8012f44:	9304      	str	r3, [sp, #16]
 8012f46:	9b07      	ldr	r3, [sp, #28]
 8012f48:	1bda      	subs	r2, r3, r7
 8012f4a:	d004      	beq.n	8012f56 <_dtoa_r+0x76e>
 8012f4c:	9904      	ldr	r1, [sp, #16]
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f000 fb8e 	bl	8013670 <__pow5mult>
 8012f54:	9004      	str	r0, [sp, #16]
 8012f56:	2101      	movs	r1, #1
 8012f58:	4620      	mov	r0, r4
 8012f5a:	f000 fae9 	bl	8013530 <__i2b>
 8012f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f60:	4607      	mov	r7, r0
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	f000 81d0 	beq.w	8013308 <_dtoa_r+0xb20>
 8012f68:	461a      	mov	r2, r3
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f000 fb7f 	bl	8013670 <__pow5mult>
 8012f72:	9b06      	ldr	r3, [sp, #24]
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	4607      	mov	r7, r0
 8012f78:	dc40      	bgt.n	8012ffc <_dtoa_r+0x814>
 8012f7a:	9b00      	ldr	r3, [sp, #0]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d139      	bne.n	8012ff4 <_dtoa_r+0x80c>
 8012f80:	9b01      	ldr	r3, [sp, #4]
 8012f82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d136      	bne.n	8012ff8 <_dtoa_r+0x810>
 8012f8a:	9b01      	ldr	r3, [sp, #4]
 8012f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f90:	0d1b      	lsrs	r3, r3, #20
 8012f92:	051b      	lsls	r3, r3, #20
 8012f94:	b12b      	cbz	r3, 8012fa2 <_dtoa_r+0x7ba>
 8012f96:	9b05      	ldr	r3, [sp, #20]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	9305      	str	r3, [sp, #20]
 8012f9c:	f108 0801 	add.w	r8, r8, #1
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	9307      	str	r3, [sp, #28]
 8012fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d12a      	bne.n	8013000 <_dtoa_r+0x818>
 8012faa:	2001      	movs	r0, #1
 8012fac:	e030      	b.n	8013010 <_dtoa_r+0x828>
 8012fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012fb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012fb4:	e795      	b.n	8012ee2 <_dtoa_r+0x6fa>
 8012fb6:	9b07      	ldr	r3, [sp, #28]
 8012fb8:	f109 37ff 	add.w	r7, r9, #4294967295
 8012fbc:	42bb      	cmp	r3, r7
 8012fbe:	bfbf      	itttt	lt
 8012fc0:	9b07      	ldrlt	r3, [sp, #28]
 8012fc2:	9707      	strlt	r7, [sp, #28]
 8012fc4:	1afa      	sublt	r2, r7, r3
 8012fc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012fc8:	bfbb      	ittet	lt
 8012fca:	189b      	addlt	r3, r3, r2
 8012fcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012fce:	1bdf      	subge	r7, r3, r7
 8012fd0:	2700      	movlt	r7, #0
 8012fd2:	f1b9 0f00 	cmp.w	r9, #0
 8012fd6:	bfb5      	itete	lt
 8012fd8:	9b05      	ldrlt	r3, [sp, #20]
 8012fda:	9d05      	ldrge	r5, [sp, #20]
 8012fdc:	eba3 0509 	sublt.w	r5, r3, r9
 8012fe0:	464b      	movge	r3, r9
 8012fe2:	bfb8      	it	lt
 8012fe4:	2300      	movlt	r3, #0
 8012fe6:	e77e      	b.n	8012ee6 <_dtoa_r+0x6fe>
 8012fe8:	9f07      	ldr	r7, [sp, #28]
 8012fea:	9d05      	ldr	r5, [sp, #20]
 8012fec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012fee:	e783      	b.n	8012ef8 <_dtoa_r+0x710>
 8012ff0:	9a07      	ldr	r2, [sp, #28]
 8012ff2:	e7ab      	b.n	8012f4c <_dtoa_r+0x764>
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	e7d4      	b.n	8012fa2 <_dtoa_r+0x7ba>
 8012ff8:	9b00      	ldr	r3, [sp, #0]
 8012ffa:	e7d2      	b.n	8012fa2 <_dtoa_r+0x7ba>
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	9307      	str	r3, [sp, #28]
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013006:	6918      	ldr	r0, [r3, #16]
 8013008:	f000 fa44 	bl	8013494 <__hi0bits>
 801300c:	f1c0 0020 	rsb	r0, r0, #32
 8013010:	4440      	add	r0, r8
 8013012:	f010 001f 	ands.w	r0, r0, #31
 8013016:	d047      	beq.n	80130a8 <_dtoa_r+0x8c0>
 8013018:	f1c0 0320 	rsb	r3, r0, #32
 801301c:	2b04      	cmp	r3, #4
 801301e:	dd3b      	ble.n	8013098 <_dtoa_r+0x8b0>
 8013020:	9b05      	ldr	r3, [sp, #20]
 8013022:	f1c0 001c 	rsb	r0, r0, #28
 8013026:	4403      	add	r3, r0
 8013028:	9305      	str	r3, [sp, #20]
 801302a:	4405      	add	r5, r0
 801302c:	4480      	add	r8, r0
 801302e:	9b05      	ldr	r3, [sp, #20]
 8013030:	2b00      	cmp	r3, #0
 8013032:	dd05      	ble.n	8013040 <_dtoa_r+0x858>
 8013034:	461a      	mov	r2, r3
 8013036:	9904      	ldr	r1, [sp, #16]
 8013038:	4620      	mov	r0, r4
 801303a:	f000 fb67 	bl	801370c <__lshift>
 801303e:	9004      	str	r0, [sp, #16]
 8013040:	f1b8 0f00 	cmp.w	r8, #0
 8013044:	dd05      	ble.n	8013052 <_dtoa_r+0x86a>
 8013046:	4639      	mov	r1, r7
 8013048:	4642      	mov	r2, r8
 801304a:	4620      	mov	r0, r4
 801304c:	f000 fb5e 	bl	801370c <__lshift>
 8013050:	4607      	mov	r7, r0
 8013052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013054:	b353      	cbz	r3, 80130ac <_dtoa_r+0x8c4>
 8013056:	4639      	mov	r1, r7
 8013058:	9804      	ldr	r0, [sp, #16]
 801305a:	f000 fbab 	bl	80137b4 <__mcmp>
 801305e:	2800      	cmp	r0, #0
 8013060:	da24      	bge.n	80130ac <_dtoa_r+0x8c4>
 8013062:	2300      	movs	r3, #0
 8013064:	220a      	movs	r2, #10
 8013066:	9904      	ldr	r1, [sp, #16]
 8013068:	4620      	mov	r0, r4
 801306a:	f000 f9d8 	bl	801341e <__multadd>
 801306e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013070:	9004      	str	r0, [sp, #16]
 8013072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013076:	2b00      	cmp	r3, #0
 8013078:	f000 814d 	beq.w	8013316 <_dtoa_r+0xb2e>
 801307c:	2300      	movs	r3, #0
 801307e:	4631      	mov	r1, r6
 8013080:	220a      	movs	r2, #10
 8013082:	4620      	mov	r0, r4
 8013084:	f000 f9cb 	bl	801341e <__multadd>
 8013088:	9b02      	ldr	r3, [sp, #8]
 801308a:	2b00      	cmp	r3, #0
 801308c:	4606      	mov	r6, r0
 801308e:	dc4f      	bgt.n	8013130 <_dtoa_r+0x948>
 8013090:	9b06      	ldr	r3, [sp, #24]
 8013092:	2b02      	cmp	r3, #2
 8013094:	dd4c      	ble.n	8013130 <_dtoa_r+0x948>
 8013096:	e011      	b.n	80130bc <_dtoa_r+0x8d4>
 8013098:	d0c9      	beq.n	801302e <_dtoa_r+0x846>
 801309a:	9a05      	ldr	r2, [sp, #20]
 801309c:	331c      	adds	r3, #28
 801309e:	441a      	add	r2, r3
 80130a0:	9205      	str	r2, [sp, #20]
 80130a2:	441d      	add	r5, r3
 80130a4:	4498      	add	r8, r3
 80130a6:	e7c2      	b.n	801302e <_dtoa_r+0x846>
 80130a8:	4603      	mov	r3, r0
 80130aa:	e7f6      	b.n	801309a <_dtoa_r+0x8b2>
 80130ac:	f1b9 0f00 	cmp.w	r9, #0
 80130b0:	dc38      	bgt.n	8013124 <_dtoa_r+0x93c>
 80130b2:	9b06      	ldr	r3, [sp, #24]
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	dd35      	ble.n	8013124 <_dtoa_r+0x93c>
 80130b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80130bc:	9b02      	ldr	r3, [sp, #8]
 80130be:	b963      	cbnz	r3, 80130da <_dtoa_r+0x8f2>
 80130c0:	4639      	mov	r1, r7
 80130c2:	2205      	movs	r2, #5
 80130c4:	4620      	mov	r0, r4
 80130c6:	f000 f9aa 	bl	801341e <__multadd>
 80130ca:	4601      	mov	r1, r0
 80130cc:	4607      	mov	r7, r0
 80130ce:	9804      	ldr	r0, [sp, #16]
 80130d0:	f000 fb70 	bl	80137b4 <__mcmp>
 80130d4:	2800      	cmp	r0, #0
 80130d6:	f73f adcc 	bgt.w	8012c72 <_dtoa_r+0x48a>
 80130da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130dc:	465d      	mov	r5, fp
 80130de:	ea6f 0a03 	mvn.w	sl, r3
 80130e2:	f04f 0900 	mov.w	r9, #0
 80130e6:	4639      	mov	r1, r7
 80130e8:	4620      	mov	r0, r4
 80130ea:	f000 f981 	bl	80133f0 <_Bfree>
 80130ee:	2e00      	cmp	r6, #0
 80130f0:	f43f aeb7 	beq.w	8012e62 <_dtoa_r+0x67a>
 80130f4:	f1b9 0f00 	cmp.w	r9, #0
 80130f8:	d005      	beq.n	8013106 <_dtoa_r+0x91e>
 80130fa:	45b1      	cmp	r9, r6
 80130fc:	d003      	beq.n	8013106 <_dtoa_r+0x91e>
 80130fe:	4649      	mov	r1, r9
 8013100:	4620      	mov	r0, r4
 8013102:	f000 f975 	bl	80133f0 <_Bfree>
 8013106:	4631      	mov	r1, r6
 8013108:	4620      	mov	r0, r4
 801310a:	f000 f971 	bl	80133f0 <_Bfree>
 801310e:	e6a8      	b.n	8012e62 <_dtoa_r+0x67a>
 8013110:	2700      	movs	r7, #0
 8013112:	463e      	mov	r6, r7
 8013114:	e7e1      	b.n	80130da <_dtoa_r+0x8f2>
 8013116:	f8dd a020 	ldr.w	sl, [sp, #32]
 801311a:	463e      	mov	r6, r7
 801311c:	e5a9      	b.n	8012c72 <_dtoa_r+0x48a>
 801311e:	bf00      	nop
 8013120:	40240000 	.word	0x40240000
 8013124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013126:	f8cd 9008 	str.w	r9, [sp, #8]
 801312a:	2b00      	cmp	r3, #0
 801312c:	f000 80fa 	beq.w	8013324 <_dtoa_r+0xb3c>
 8013130:	2d00      	cmp	r5, #0
 8013132:	dd05      	ble.n	8013140 <_dtoa_r+0x958>
 8013134:	4631      	mov	r1, r6
 8013136:	462a      	mov	r2, r5
 8013138:	4620      	mov	r0, r4
 801313a:	f000 fae7 	bl	801370c <__lshift>
 801313e:	4606      	mov	r6, r0
 8013140:	9b07      	ldr	r3, [sp, #28]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d04c      	beq.n	80131e0 <_dtoa_r+0x9f8>
 8013146:	6871      	ldr	r1, [r6, #4]
 8013148:	4620      	mov	r0, r4
 801314a:	f000 f91d 	bl	8013388 <_Balloc>
 801314e:	6932      	ldr	r2, [r6, #16]
 8013150:	3202      	adds	r2, #2
 8013152:	4605      	mov	r5, r0
 8013154:	0092      	lsls	r2, r2, #2
 8013156:	f106 010c 	add.w	r1, r6, #12
 801315a:	300c      	adds	r0, #12
 801315c:	f7fe fe86 	bl	8011e6c <memcpy>
 8013160:	2201      	movs	r2, #1
 8013162:	4629      	mov	r1, r5
 8013164:	4620      	mov	r0, r4
 8013166:	f000 fad1 	bl	801370c <__lshift>
 801316a:	9b00      	ldr	r3, [sp, #0]
 801316c:	f8cd b014 	str.w	fp, [sp, #20]
 8013170:	f003 0301 	and.w	r3, r3, #1
 8013174:	46b1      	mov	r9, r6
 8013176:	9307      	str	r3, [sp, #28]
 8013178:	4606      	mov	r6, r0
 801317a:	4639      	mov	r1, r7
 801317c:	9804      	ldr	r0, [sp, #16]
 801317e:	f7ff faa5 	bl	80126cc <quorem>
 8013182:	4649      	mov	r1, r9
 8013184:	4605      	mov	r5, r0
 8013186:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801318a:	9804      	ldr	r0, [sp, #16]
 801318c:	f000 fb12 	bl	80137b4 <__mcmp>
 8013190:	4632      	mov	r2, r6
 8013192:	9000      	str	r0, [sp, #0]
 8013194:	4639      	mov	r1, r7
 8013196:	4620      	mov	r0, r4
 8013198:	f000 fb26 	bl	80137e8 <__mdiff>
 801319c:	68c3      	ldr	r3, [r0, #12]
 801319e:	4602      	mov	r2, r0
 80131a0:	bb03      	cbnz	r3, 80131e4 <_dtoa_r+0x9fc>
 80131a2:	4601      	mov	r1, r0
 80131a4:	9008      	str	r0, [sp, #32]
 80131a6:	9804      	ldr	r0, [sp, #16]
 80131a8:	f000 fb04 	bl	80137b4 <__mcmp>
 80131ac:	9a08      	ldr	r2, [sp, #32]
 80131ae:	4603      	mov	r3, r0
 80131b0:	4611      	mov	r1, r2
 80131b2:	4620      	mov	r0, r4
 80131b4:	9308      	str	r3, [sp, #32]
 80131b6:	f000 f91b 	bl	80133f0 <_Bfree>
 80131ba:	9b08      	ldr	r3, [sp, #32]
 80131bc:	b9a3      	cbnz	r3, 80131e8 <_dtoa_r+0xa00>
 80131be:	9a06      	ldr	r2, [sp, #24]
 80131c0:	b992      	cbnz	r2, 80131e8 <_dtoa_r+0xa00>
 80131c2:	9a07      	ldr	r2, [sp, #28]
 80131c4:	b982      	cbnz	r2, 80131e8 <_dtoa_r+0xa00>
 80131c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80131ca:	d029      	beq.n	8013220 <_dtoa_r+0xa38>
 80131cc:	9b00      	ldr	r3, [sp, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	dd01      	ble.n	80131d6 <_dtoa_r+0x9ee>
 80131d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80131d6:	9b05      	ldr	r3, [sp, #20]
 80131d8:	1c5d      	adds	r5, r3, #1
 80131da:	f883 8000 	strb.w	r8, [r3]
 80131de:	e782      	b.n	80130e6 <_dtoa_r+0x8fe>
 80131e0:	4630      	mov	r0, r6
 80131e2:	e7c2      	b.n	801316a <_dtoa_r+0x982>
 80131e4:	2301      	movs	r3, #1
 80131e6:	e7e3      	b.n	80131b0 <_dtoa_r+0x9c8>
 80131e8:	9a00      	ldr	r2, [sp, #0]
 80131ea:	2a00      	cmp	r2, #0
 80131ec:	db04      	blt.n	80131f8 <_dtoa_r+0xa10>
 80131ee:	d125      	bne.n	801323c <_dtoa_r+0xa54>
 80131f0:	9a06      	ldr	r2, [sp, #24]
 80131f2:	bb1a      	cbnz	r2, 801323c <_dtoa_r+0xa54>
 80131f4:	9a07      	ldr	r2, [sp, #28]
 80131f6:	bb0a      	cbnz	r2, 801323c <_dtoa_r+0xa54>
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	ddec      	ble.n	80131d6 <_dtoa_r+0x9ee>
 80131fc:	2201      	movs	r2, #1
 80131fe:	9904      	ldr	r1, [sp, #16]
 8013200:	4620      	mov	r0, r4
 8013202:	f000 fa83 	bl	801370c <__lshift>
 8013206:	4639      	mov	r1, r7
 8013208:	9004      	str	r0, [sp, #16]
 801320a:	f000 fad3 	bl	80137b4 <__mcmp>
 801320e:	2800      	cmp	r0, #0
 8013210:	dc03      	bgt.n	801321a <_dtoa_r+0xa32>
 8013212:	d1e0      	bne.n	80131d6 <_dtoa_r+0x9ee>
 8013214:	f018 0f01 	tst.w	r8, #1
 8013218:	d0dd      	beq.n	80131d6 <_dtoa_r+0x9ee>
 801321a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801321e:	d1d8      	bne.n	80131d2 <_dtoa_r+0x9ea>
 8013220:	9b05      	ldr	r3, [sp, #20]
 8013222:	9a05      	ldr	r2, [sp, #20]
 8013224:	1c5d      	adds	r5, r3, #1
 8013226:	2339      	movs	r3, #57	; 0x39
 8013228:	7013      	strb	r3, [r2, #0]
 801322a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801322e:	2b39      	cmp	r3, #57	; 0x39
 8013230:	f105 32ff 	add.w	r2, r5, #4294967295
 8013234:	d04f      	beq.n	80132d6 <_dtoa_r+0xaee>
 8013236:	3301      	adds	r3, #1
 8013238:	7013      	strb	r3, [r2, #0]
 801323a:	e754      	b.n	80130e6 <_dtoa_r+0x8fe>
 801323c:	9a05      	ldr	r2, [sp, #20]
 801323e:	2b00      	cmp	r3, #0
 8013240:	f102 0501 	add.w	r5, r2, #1
 8013244:	dd06      	ble.n	8013254 <_dtoa_r+0xa6c>
 8013246:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801324a:	d0e9      	beq.n	8013220 <_dtoa_r+0xa38>
 801324c:	f108 0801 	add.w	r8, r8, #1
 8013250:	9b05      	ldr	r3, [sp, #20]
 8013252:	e7c2      	b.n	80131da <_dtoa_r+0x9f2>
 8013254:	9a02      	ldr	r2, [sp, #8]
 8013256:	f805 8c01 	strb.w	r8, [r5, #-1]
 801325a:	eba5 030b 	sub.w	r3, r5, fp
 801325e:	4293      	cmp	r3, r2
 8013260:	d021      	beq.n	80132a6 <_dtoa_r+0xabe>
 8013262:	2300      	movs	r3, #0
 8013264:	220a      	movs	r2, #10
 8013266:	9904      	ldr	r1, [sp, #16]
 8013268:	4620      	mov	r0, r4
 801326a:	f000 f8d8 	bl	801341e <__multadd>
 801326e:	45b1      	cmp	r9, r6
 8013270:	9004      	str	r0, [sp, #16]
 8013272:	f04f 0300 	mov.w	r3, #0
 8013276:	f04f 020a 	mov.w	r2, #10
 801327a:	4649      	mov	r1, r9
 801327c:	4620      	mov	r0, r4
 801327e:	d105      	bne.n	801328c <_dtoa_r+0xaa4>
 8013280:	f000 f8cd 	bl	801341e <__multadd>
 8013284:	4681      	mov	r9, r0
 8013286:	4606      	mov	r6, r0
 8013288:	9505      	str	r5, [sp, #20]
 801328a:	e776      	b.n	801317a <_dtoa_r+0x992>
 801328c:	f000 f8c7 	bl	801341e <__multadd>
 8013290:	4631      	mov	r1, r6
 8013292:	4681      	mov	r9, r0
 8013294:	2300      	movs	r3, #0
 8013296:	220a      	movs	r2, #10
 8013298:	4620      	mov	r0, r4
 801329a:	f000 f8c0 	bl	801341e <__multadd>
 801329e:	4606      	mov	r6, r0
 80132a0:	e7f2      	b.n	8013288 <_dtoa_r+0xaa0>
 80132a2:	f04f 0900 	mov.w	r9, #0
 80132a6:	2201      	movs	r2, #1
 80132a8:	9904      	ldr	r1, [sp, #16]
 80132aa:	4620      	mov	r0, r4
 80132ac:	f000 fa2e 	bl	801370c <__lshift>
 80132b0:	4639      	mov	r1, r7
 80132b2:	9004      	str	r0, [sp, #16]
 80132b4:	f000 fa7e 	bl	80137b4 <__mcmp>
 80132b8:	2800      	cmp	r0, #0
 80132ba:	dcb6      	bgt.n	801322a <_dtoa_r+0xa42>
 80132bc:	d102      	bne.n	80132c4 <_dtoa_r+0xadc>
 80132be:	f018 0f01 	tst.w	r8, #1
 80132c2:	d1b2      	bne.n	801322a <_dtoa_r+0xa42>
 80132c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80132c8:	2b30      	cmp	r3, #48	; 0x30
 80132ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80132ce:	f47f af0a 	bne.w	80130e6 <_dtoa_r+0x8fe>
 80132d2:	4615      	mov	r5, r2
 80132d4:	e7f6      	b.n	80132c4 <_dtoa_r+0xadc>
 80132d6:	4593      	cmp	fp, r2
 80132d8:	d105      	bne.n	80132e6 <_dtoa_r+0xafe>
 80132da:	2331      	movs	r3, #49	; 0x31
 80132dc:	f10a 0a01 	add.w	sl, sl, #1
 80132e0:	f88b 3000 	strb.w	r3, [fp]
 80132e4:	e6ff      	b.n	80130e6 <_dtoa_r+0x8fe>
 80132e6:	4615      	mov	r5, r2
 80132e8:	e79f      	b.n	801322a <_dtoa_r+0xa42>
 80132ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013350 <_dtoa_r+0xb68>
 80132ee:	e007      	b.n	8013300 <_dtoa_r+0xb18>
 80132f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013354 <_dtoa_r+0xb6c>
 80132f6:	b11b      	cbz	r3, 8013300 <_dtoa_r+0xb18>
 80132f8:	f10b 0308 	add.w	r3, fp, #8
 80132fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132fe:	6013      	str	r3, [r2, #0]
 8013300:	4658      	mov	r0, fp
 8013302:	b017      	add	sp, #92	; 0x5c
 8013304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013308:	9b06      	ldr	r3, [sp, #24]
 801330a:	2b01      	cmp	r3, #1
 801330c:	f77f ae35 	ble.w	8012f7a <_dtoa_r+0x792>
 8013310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013312:	9307      	str	r3, [sp, #28]
 8013314:	e649      	b.n	8012faa <_dtoa_r+0x7c2>
 8013316:	9b02      	ldr	r3, [sp, #8]
 8013318:	2b00      	cmp	r3, #0
 801331a:	dc03      	bgt.n	8013324 <_dtoa_r+0xb3c>
 801331c:	9b06      	ldr	r3, [sp, #24]
 801331e:	2b02      	cmp	r3, #2
 8013320:	f73f aecc 	bgt.w	80130bc <_dtoa_r+0x8d4>
 8013324:	465d      	mov	r5, fp
 8013326:	4639      	mov	r1, r7
 8013328:	9804      	ldr	r0, [sp, #16]
 801332a:	f7ff f9cf 	bl	80126cc <quorem>
 801332e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013332:	f805 8b01 	strb.w	r8, [r5], #1
 8013336:	9a02      	ldr	r2, [sp, #8]
 8013338:	eba5 030b 	sub.w	r3, r5, fp
 801333c:	429a      	cmp	r2, r3
 801333e:	ddb0      	ble.n	80132a2 <_dtoa_r+0xaba>
 8013340:	2300      	movs	r3, #0
 8013342:	220a      	movs	r2, #10
 8013344:	9904      	ldr	r1, [sp, #16]
 8013346:	4620      	mov	r0, r4
 8013348:	f000 f869 	bl	801341e <__multadd>
 801334c:	9004      	str	r0, [sp, #16]
 801334e:	e7ea      	b.n	8013326 <_dtoa_r+0xb3e>
 8013350:	080154b8 	.word	0x080154b8
 8013354:	080154ba 	.word	0x080154ba

08013358 <_localeconv_r>:
 8013358:	4b04      	ldr	r3, [pc, #16]	; (801336c <_localeconv_r+0x14>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	6a18      	ldr	r0, [r3, #32]
 801335e:	4b04      	ldr	r3, [pc, #16]	; (8013370 <_localeconv_r+0x18>)
 8013360:	2800      	cmp	r0, #0
 8013362:	bf08      	it	eq
 8013364:	4618      	moveq	r0, r3
 8013366:	30f0      	adds	r0, #240	; 0xf0
 8013368:	4770      	bx	lr
 801336a:	bf00      	nop
 801336c:	20000018 	.word	0x20000018
 8013370:	2000007c 	.word	0x2000007c

08013374 <malloc>:
 8013374:	4b02      	ldr	r3, [pc, #8]	; (8013380 <malloc+0xc>)
 8013376:	4601      	mov	r1, r0
 8013378:	6818      	ldr	r0, [r3, #0]
 801337a:	f7fe bd8b 	b.w	8011e94 <_malloc_r>
 801337e:	bf00      	nop
 8013380:	20000018 	.word	0x20000018

08013384 <__malloc_lock>:
 8013384:	4770      	bx	lr

08013386 <__malloc_unlock>:
 8013386:	4770      	bx	lr

08013388 <_Balloc>:
 8013388:	b570      	push	{r4, r5, r6, lr}
 801338a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801338c:	4604      	mov	r4, r0
 801338e:	460e      	mov	r6, r1
 8013390:	b93d      	cbnz	r5, 80133a2 <_Balloc+0x1a>
 8013392:	2010      	movs	r0, #16
 8013394:	f7ff ffee 	bl	8013374 <malloc>
 8013398:	6260      	str	r0, [r4, #36]	; 0x24
 801339a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801339e:	6005      	str	r5, [r0, #0]
 80133a0:	60c5      	str	r5, [r0, #12]
 80133a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80133a4:	68eb      	ldr	r3, [r5, #12]
 80133a6:	b183      	cbz	r3, 80133ca <_Balloc+0x42>
 80133a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80133b0:	b9b8      	cbnz	r0, 80133e2 <_Balloc+0x5a>
 80133b2:	2101      	movs	r1, #1
 80133b4:	fa01 f506 	lsl.w	r5, r1, r6
 80133b8:	1d6a      	adds	r2, r5, #5
 80133ba:	0092      	lsls	r2, r2, #2
 80133bc:	4620      	mov	r0, r4
 80133be:	f000 fabf 	bl	8013940 <_calloc_r>
 80133c2:	b160      	cbz	r0, 80133de <_Balloc+0x56>
 80133c4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80133c8:	e00e      	b.n	80133e8 <_Balloc+0x60>
 80133ca:	2221      	movs	r2, #33	; 0x21
 80133cc:	2104      	movs	r1, #4
 80133ce:	4620      	mov	r0, r4
 80133d0:	f000 fab6 	bl	8013940 <_calloc_r>
 80133d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133d6:	60e8      	str	r0, [r5, #12]
 80133d8:	68db      	ldr	r3, [r3, #12]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d1e4      	bne.n	80133a8 <_Balloc+0x20>
 80133de:	2000      	movs	r0, #0
 80133e0:	bd70      	pop	{r4, r5, r6, pc}
 80133e2:	6802      	ldr	r2, [r0, #0]
 80133e4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80133e8:	2300      	movs	r3, #0
 80133ea:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80133ee:	e7f7      	b.n	80133e0 <_Balloc+0x58>

080133f0 <_Bfree>:
 80133f0:	b570      	push	{r4, r5, r6, lr}
 80133f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80133f4:	4606      	mov	r6, r0
 80133f6:	460d      	mov	r5, r1
 80133f8:	b93c      	cbnz	r4, 801340a <_Bfree+0x1a>
 80133fa:	2010      	movs	r0, #16
 80133fc:	f7ff ffba 	bl	8013374 <malloc>
 8013400:	6270      	str	r0, [r6, #36]	; 0x24
 8013402:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013406:	6004      	str	r4, [r0, #0]
 8013408:	60c4      	str	r4, [r0, #12]
 801340a:	b13d      	cbz	r5, 801341c <_Bfree+0x2c>
 801340c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801340e:	686a      	ldr	r2, [r5, #4]
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013416:	6029      	str	r1, [r5, #0]
 8013418:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801341c:	bd70      	pop	{r4, r5, r6, pc}

0801341e <__multadd>:
 801341e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013422:	690d      	ldr	r5, [r1, #16]
 8013424:	461f      	mov	r7, r3
 8013426:	4606      	mov	r6, r0
 8013428:	460c      	mov	r4, r1
 801342a:	f101 0c14 	add.w	ip, r1, #20
 801342e:	2300      	movs	r3, #0
 8013430:	f8dc 0000 	ldr.w	r0, [ip]
 8013434:	b281      	uxth	r1, r0
 8013436:	fb02 7101 	mla	r1, r2, r1, r7
 801343a:	0c0f      	lsrs	r7, r1, #16
 801343c:	0c00      	lsrs	r0, r0, #16
 801343e:	fb02 7000 	mla	r0, r2, r0, r7
 8013442:	b289      	uxth	r1, r1
 8013444:	3301      	adds	r3, #1
 8013446:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801344a:	429d      	cmp	r5, r3
 801344c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013450:	f84c 1b04 	str.w	r1, [ip], #4
 8013454:	dcec      	bgt.n	8013430 <__multadd+0x12>
 8013456:	b1d7      	cbz	r7, 801348e <__multadd+0x70>
 8013458:	68a3      	ldr	r3, [r4, #8]
 801345a:	42ab      	cmp	r3, r5
 801345c:	dc12      	bgt.n	8013484 <__multadd+0x66>
 801345e:	6861      	ldr	r1, [r4, #4]
 8013460:	4630      	mov	r0, r6
 8013462:	3101      	adds	r1, #1
 8013464:	f7ff ff90 	bl	8013388 <_Balloc>
 8013468:	6922      	ldr	r2, [r4, #16]
 801346a:	3202      	adds	r2, #2
 801346c:	f104 010c 	add.w	r1, r4, #12
 8013470:	4680      	mov	r8, r0
 8013472:	0092      	lsls	r2, r2, #2
 8013474:	300c      	adds	r0, #12
 8013476:	f7fe fcf9 	bl	8011e6c <memcpy>
 801347a:	4621      	mov	r1, r4
 801347c:	4630      	mov	r0, r6
 801347e:	f7ff ffb7 	bl	80133f0 <_Bfree>
 8013482:	4644      	mov	r4, r8
 8013484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013488:	3501      	adds	r5, #1
 801348a:	615f      	str	r7, [r3, #20]
 801348c:	6125      	str	r5, [r4, #16]
 801348e:	4620      	mov	r0, r4
 8013490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013494 <__hi0bits>:
 8013494:	0c02      	lsrs	r2, r0, #16
 8013496:	0412      	lsls	r2, r2, #16
 8013498:	4603      	mov	r3, r0
 801349a:	b9b2      	cbnz	r2, 80134ca <__hi0bits+0x36>
 801349c:	0403      	lsls	r3, r0, #16
 801349e:	2010      	movs	r0, #16
 80134a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80134a4:	bf04      	itt	eq
 80134a6:	021b      	lsleq	r3, r3, #8
 80134a8:	3008      	addeq	r0, #8
 80134aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80134ae:	bf04      	itt	eq
 80134b0:	011b      	lsleq	r3, r3, #4
 80134b2:	3004      	addeq	r0, #4
 80134b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80134b8:	bf04      	itt	eq
 80134ba:	009b      	lsleq	r3, r3, #2
 80134bc:	3002      	addeq	r0, #2
 80134be:	2b00      	cmp	r3, #0
 80134c0:	db06      	blt.n	80134d0 <__hi0bits+0x3c>
 80134c2:	005b      	lsls	r3, r3, #1
 80134c4:	d503      	bpl.n	80134ce <__hi0bits+0x3a>
 80134c6:	3001      	adds	r0, #1
 80134c8:	4770      	bx	lr
 80134ca:	2000      	movs	r0, #0
 80134cc:	e7e8      	b.n	80134a0 <__hi0bits+0xc>
 80134ce:	2020      	movs	r0, #32
 80134d0:	4770      	bx	lr

080134d2 <__lo0bits>:
 80134d2:	6803      	ldr	r3, [r0, #0]
 80134d4:	f013 0207 	ands.w	r2, r3, #7
 80134d8:	4601      	mov	r1, r0
 80134da:	d00b      	beq.n	80134f4 <__lo0bits+0x22>
 80134dc:	07da      	lsls	r2, r3, #31
 80134de:	d423      	bmi.n	8013528 <__lo0bits+0x56>
 80134e0:	0798      	lsls	r0, r3, #30
 80134e2:	bf49      	itett	mi
 80134e4:	085b      	lsrmi	r3, r3, #1
 80134e6:	089b      	lsrpl	r3, r3, #2
 80134e8:	2001      	movmi	r0, #1
 80134ea:	600b      	strmi	r3, [r1, #0]
 80134ec:	bf5c      	itt	pl
 80134ee:	600b      	strpl	r3, [r1, #0]
 80134f0:	2002      	movpl	r0, #2
 80134f2:	4770      	bx	lr
 80134f4:	b298      	uxth	r0, r3
 80134f6:	b9a8      	cbnz	r0, 8013524 <__lo0bits+0x52>
 80134f8:	0c1b      	lsrs	r3, r3, #16
 80134fa:	2010      	movs	r0, #16
 80134fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013500:	bf04      	itt	eq
 8013502:	0a1b      	lsreq	r3, r3, #8
 8013504:	3008      	addeq	r0, #8
 8013506:	071a      	lsls	r2, r3, #28
 8013508:	bf04      	itt	eq
 801350a:	091b      	lsreq	r3, r3, #4
 801350c:	3004      	addeq	r0, #4
 801350e:	079a      	lsls	r2, r3, #30
 8013510:	bf04      	itt	eq
 8013512:	089b      	lsreq	r3, r3, #2
 8013514:	3002      	addeq	r0, #2
 8013516:	07da      	lsls	r2, r3, #31
 8013518:	d402      	bmi.n	8013520 <__lo0bits+0x4e>
 801351a:	085b      	lsrs	r3, r3, #1
 801351c:	d006      	beq.n	801352c <__lo0bits+0x5a>
 801351e:	3001      	adds	r0, #1
 8013520:	600b      	str	r3, [r1, #0]
 8013522:	4770      	bx	lr
 8013524:	4610      	mov	r0, r2
 8013526:	e7e9      	b.n	80134fc <__lo0bits+0x2a>
 8013528:	2000      	movs	r0, #0
 801352a:	4770      	bx	lr
 801352c:	2020      	movs	r0, #32
 801352e:	4770      	bx	lr

08013530 <__i2b>:
 8013530:	b510      	push	{r4, lr}
 8013532:	460c      	mov	r4, r1
 8013534:	2101      	movs	r1, #1
 8013536:	f7ff ff27 	bl	8013388 <_Balloc>
 801353a:	2201      	movs	r2, #1
 801353c:	6144      	str	r4, [r0, #20]
 801353e:	6102      	str	r2, [r0, #16]
 8013540:	bd10      	pop	{r4, pc}

08013542 <__multiply>:
 8013542:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013546:	4614      	mov	r4, r2
 8013548:	690a      	ldr	r2, [r1, #16]
 801354a:	6923      	ldr	r3, [r4, #16]
 801354c:	429a      	cmp	r2, r3
 801354e:	bfb8      	it	lt
 8013550:	460b      	movlt	r3, r1
 8013552:	4688      	mov	r8, r1
 8013554:	bfbc      	itt	lt
 8013556:	46a0      	movlt	r8, r4
 8013558:	461c      	movlt	r4, r3
 801355a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801355e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013562:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013566:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801356a:	eb07 0609 	add.w	r6, r7, r9
 801356e:	42b3      	cmp	r3, r6
 8013570:	bfb8      	it	lt
 8013572:	3101      	addlt	r1, #1
 8013574:	f7ff ff08 	bl	8013388 <_Balloc>
 8013578:	f100 0514 	add.w	r5, r0, #20
 801357c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013580:	462b      	mov	r3, r5
 8013582:	2200      	movs	r2, #0
 8013584:	4573      	cmp	r3, lr
 8013586:	d316      	bcc.n	80135b6 <__multiply+0x74>
 8013588:	f104 0214 	add.w	r2, r4, #20
 801358c:	f108 0114 	add.w	r1, r8, #20
 8013590:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013594:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	9b00      	ldr	r3, [sp, #0]
 801359c:	9201      	str	r2, [sp, #4]
 801359e:	4293      	cmp	r3, r2
 80135a0:	d80c      	bhi.n	80135bc <__multiply+0x7a>
 80135a2:	2e00      	cmp	r6, #0
 80135a4:	dd03      	ble.n	80135ae <__multiply+0x6c>
 80135a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d05d      	beq.n	801366a <__multiply+0x128>
 80135ae:	6106      	str	r6, [r0, #16]
 80135b0:	b003      	add	sp, #12
 80135b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b6:	f843 2b04 	str.w	r2, [r3], #4
 80135ba:	e7e3      	b.n	8013584 <__multiply+0x42>
 80135bc:	f8b2 b000 	ldrh.w	fp, [r2]
 80135c0:	f1bb 0f00 	cmp.w	fp, #0
 80135c4:	d023      	beq.n	801360e <__multiply+0xcc>
 80135c6:	4689      	mov	r9, r1
 80135c8:	46ac      	mov	ip, r5
 80135ca:	f04f 0800 	mov.w	r8, #0
 80135ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80135d2:	f8dc a000 	ldr.w	sl, [ip]
 80135d6:	b2a3      	uxth	r3, r4
 80135d8:	fa1f fa8a 	uxth.w	sl, sl
 80135dc:	fb0b a303 	mla	r3, fp, r3, sl
 80135e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80135e4:	f8dc 4000 	ldr.w	r4, [ip]
 80135e8:	4443      	add	r3, r8
 80135ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80135ee:	fb0b 840a 	mla	r4, fp, sl, r8
 80135f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80135f6:	46e2      	mov	sl, ip
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80135fe:	454f      	cmp	r7, r9
 8013600:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013604:	f84a 3b04 	str.w	r3, [sl], #4
 8013608:	d82b      	bhi.n	8013662 <__multiply+0x120>
 801360a:	f8cc 8004 	str.w	r8, [ip, #4]
 801360e:	9b01      	ldr	r3, [sp, #4]
 8013610:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013614:	3204      	adds	r2, #4
 8013616:	f1ba 0f00 	cmp.w	sl, #0
 801361a:	d020      	beq.n	801365e <__multiply+0x11c>
 801361c:	682b      	ldr	r3, [r5, #0]
 801361e:	4689      	mov	r9, r1
 8013620:	46a8      	mov	r8, r5
 8013622:	f04f 0b00 	mov.w	fp, #0
 8013626:	f8b9 c000 	ldrh.w	ip, [r9]
 801362a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801362e:	fb0a 440c 	mla	r4, sl, ip, r4
 8013632:	445c      	add	r4, fp
 8013634:	46c4      	mov	ip, r8
 8013636:	b29b      	uxth	r3, r3
 8013638:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801363c:	f84c 3b04 	str.w	r3, [ip], #4
 8013640:	f859 3b04 	ldr.w	r3, [r9], #4
 8013644:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013648:	0c1b      	lsrs	r3, r3, #16
 801364a:	fb0a b303 	mla	r3, sl, r3, fp
 801364e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013652:	454f      	cmp	r7, r9
 8013654:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013658:	d805      	bhi.n	8013666 <__multiply+0x124>
 801365a:	f8c8 3004 	str.w	r3, [r8, #4]
 801365e:	3504      	adds	r5, #4
 8013660:	e79b      	b.n	801359a <__multiply+0x58>
 8013662:	46d4      	mov	ip, sl
 8013664:	e7b3      	b.n	80135ce <__multiply+0x8c>
 8013666:	46e0      	mov	r8, ip
 8013668:	e7dd      	b.n	8013626 <__multiply+0xe4>
 801366a:	3e01      	subs	r6, #1
 801366c:	e799      	b.n	80135a2 <__multiply+0x60>
	...

08013670 <__pow5mult>:
 8013670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013674:	4615      	mov	r5, r2
 8013676:	f012 0203 	ands.w	r2, r2, #3
 801367a:	4606      	mov	r6, r0
 801367c:	460f      	mov	r7, r1
 801367e:	d007      	beq.n	8013690 <__pow5mult+0x20>
 8013680:	3a01      	subs	r2, #1
 8013682:	4c21      	ldr	r4, [pc, #132]	; (8013708 <__pow5mult+0x98>)
 8013684:	2300      	movs	r3, #0
 8013686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801368a:	f7ff fec8 	bl	801341e <__multadd>
 801368e:	4607      	mov	r7, r0
 8013690:	10ad      	asrs	r5, r5, #2
 8013692:	d035      	beq.n	8013700 <__pow5mult+0x90>
 8013694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013696:	b93c      	cbnz	r4, 80136a8 <__pow5mult+0x38>
 8013698:	2010      	movs	r0, #16
 801369a:	f7ff fe6b 	bl	8013374 <malloc>
 801369e:	6270      	str	r0, [r6, #36]	; 0x24
 80136a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136a4:	6004      	str	r4, [r0, #0]
 80136a6:	60c4      	str	r4, [r0, #12]
 80136a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80136ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136b0:	b94c      	cbnz	r4, 80136c6 <__pow5mult+0x56>
 80136b2:	f240 2171 	movw	r1, #625	; 0x271
 80136b6:	4630      	mov	r0, r6
 80136b8:	f7ff ff3a 	bl	8013530 <__i2b>
 80136bc:	2300      	movs	r3, #0
 80136be:	f8c8 0008 	str.w	r0, [r8, #8]
 80136c2:	4604      	mov	r4, r0
 80136c4:	6003      	str	r3, [r0, #0]
 80136c6:	f04f 0800 	mov.w	r8, #0
 80136ca:	07eb      	lsls	r3, r5, #31
 80136cc:	d50a      	bpl.n	80136e4 <__pow5mult+0x74>
 80136ce:	4639      	mov	r1, r7
 80136d0:	4622      	mov	r2, r4
 80136d2:	4630      	mov	r0, r6
 80136d4:	f7ff ff35 	bl	8013542 <__multiply>
 80136d8:	4639      	mov	r1, r7
 80136da:	4681      	mov	r9, r0
 80136dc:	4630      	mov	r0, r6
 80136de:	f7ff fe87 	bl	80133f0 <_Bfree>
 80136e2:	464f      	mov	r7, r9
 80136e4:	106d      	asrs	r5, r5, #1
 80136e6:	d00b      	beq.n	8013700 <__pow5mult+0x90>
 80136e8:	6820      	ldr	r0, [r4, #0]
 80136ea:	b938      	cbnz	r0, 80136fc <__pow5mult+0x8c>
 80136ec:	4622      	mov	r2, r4
 80136ee:	4621      	mov	r1, r4
 80136f0:	4630      	mov	r0, r6
 80136f2:	f7ff ff26 	bl	8013542 <__multiply>
 80136f6:	6020      	str	r0, [r4, #0]
 80136f8:	f8c0 8000 	str.w	r8, [r0]
 80136fc:	4604      	mov	r4, r0
 80136fe:	e7e4      	b.n	80136ca <__pow5mult+0x5a>
 8013700:	4638      	mov	r0, r7
 8013702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013706:	bf00      	nop
 8013708:	080155b8 	.word	0x080155b8

0801370c <__lshift>:
 801370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013710:	460c      	mov	r4, r1
 8013712:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013716:	6923      	ldr	r3, [r4, #16]
 8013718:	6849      	ldr	r1, [r1, #4]
 801371a:	eb0a 0903 	add.w	r9, sl, r3
 801371e:	68a3      	ldr	r3, [r4, #8]
 8013720:	4607      	mov	r7, r0
 8013722:	4616      	mov	r6, r2
 8013724:	f109 0501 	add.w	r5, r9, #1
 8013728:	42ab      	cmp	r3, r5
 801372a:	db32      	blt.n	8013792 <__lshift+0x86>
 801372c:	4638      	mov	r0, r7
 801372e:	f7ff fe2b 	bl	8013388 <_Balloc>
 8013732:	2300      	movs	r3, #0
 8013734:	4680      	mov	r8, r0
 8013736:	f100 0114 	add.w	r1, r0, #20
 801373a:	461a      	mov	r2, r3
 801373c:	4553      	cmp	r3, sl
 801373e:	db2b      	blt.n	8013798 <__lshift+0x8c>
 8013740:	6920      	ldr	r0, [r4, #16]
 8013742:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013746:	f104 0314 	add.w	r3, r4, #20
 801374a:	f016 021f 	ands.w	r2, r6, #31
 801374e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013752:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013756:	d025      	beq.n	80137a4 <__lshift+0x98>
 8013758:	f1c2 0e20 	rsb	lr, r2, #32
 801375c:	2000      	movs	r0, #0
 801375e:	681e      	ldr	r6, [r3, #0]
 8013760:	468a      	mov	sl, r1
 8013762:	4096      	lsls	r6, r2
 8013764:	4330      	orrs	r0, r6
 8013766:	f84a 0b04 	str.w	r0, [sl], #4
 801376a:	f853 0b04 	ldr.w	r0, [r3], #4
 801376e:	459c      	cmp	ip, r3
 8013770:	fa20 f00e 	lsr.w	r0, r0, lr
 8013774:	d814      	bhi.n	80137a0 <__lshift+0x94>
 8013776:	6048      	str	r0, [r1, #4]
 8013778:	b108      	cbz	r0, 801377e <__lshift+0x72>
 801377a:	f109 0502 	add.w	r5, r9, #2
 801377e:	3d01      	subs	r5, #1
 8013780:	4638      	mov	r0, r7
 8013782:	f8c8 5010 	str.w	r5, [r8, #16]
 8013786:	4621      	mov	r1, r4
 8013788:	f7ff fe32 	bl	80133f0 <_Bfree>
 801378c:	4640      	mov	r0, r8
 801378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013792:	3101      	adds	r1, #1
 8013794:	005b      	lsls	r3, r3, #1
 8013796:	e7c7      	b.n	8013728 <__lshift+0x1c>
 8013798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801379c:	3301      	adds	r3, #1
 801379e:	e7cd      	b.n	801373c <__lshift+0x30>
 80137a0:	4651      	mov	r1, sl
 80137a2:	e7dc      	b.n	801375e <__lshift+0x52>
 80137a4:	3904      	subs	r1, #4
 80137a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80137aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80137ae:	459c      	cmp	ip, r3
 80137b0:	d8f9      	bhi.n	80137a6 <__lshift+0x9a>
 80137b2:	e7e4      	b.n	801377e <__lshift+0x72>

080137b4 <__mcmp>:
 80137b4:	6903      	ldr	r3, [r0, #16]
 80137b6:	690a      	ldr	r2, [r1, #16]
 80137b8:	1a9b      	subs	r3, r3, r2
 80137ba:	b530      	push	{r4, r5, lr}
 80137bc:	d10c      	bne.n	80137d8 <__mcmp+0x24>
 80137be:	0092      	lsls	r2, r2, #2
 80137c0:	3014      	adds	r0, #20
 80137c2:	3114      	adds	r1, #20
 80137c4:	1884      	adds	r4, r0, r2
 80137c6:	4411      	add	r1, r2
 80137c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80137cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80137d0:	4295      	cmp	r5, r2
 80137d2:	d003      	beq.n	80137dc <__mcmp+0x28>
 80137d4:	d305      	bcc.n	80137e2 <__mcmp+0x2e>
 80137d6:	2301      	movs	r3, #1
 80137d8:	4618      	mov	r0, r3
 80137da:	bd30      	pop	{r4, r5, pc}
 80137dc:	42a0      	cmp	r0, r4
 80137de:	d3f3      	bcc.n	80137c8 <__mcmp+0x14>
 80137e0:	e7fa      	b.n	80137d8 <__mcmp+0x24>
 80137e2:	f04f 33ff 	mov.w	r3, #4294967295
 80137e6:	e7f7      	b.n	80137d8 <__mcmp+0x24>

080137e8 <__mdiff>:
 80137e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137ec:	460d      	mov	r5, r1
 80137ee:	4607      	mov	r7, r0
 80137f0:	4611      	mov	r1, r2
 80137f2:	4628      	mov	r0, r5
 80137f4:	4614      	mov	r4, r2
 80137f6:	f7ff ffdd 	bl	80137b4 <__mcmp>
 80137fa:	1e06      	subs	r6, r0, #0
 80137fc:	d108      	bne.n	8013810 <__mdiff+0x28>
 80137fe:	4631      	mov	r1, r6
 8013800:	4638      	mov	r0, r7
 8013802:	f7ff fdc1 	bl	8013388 <_Balloc>
 8013806:	2301      	movs	r3, #1
 8013808:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801380c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013810:	bfa4      	itt	ge
 8013812:	4623      	movge	r3, r4
 8013814:	462c      	movge	r4, r5
 8013816:	4638      	mov	r0, r7
 8013818:	6861      	ldr	r1, [r4, #4]
 801381a:	bfa6      	itte	ge
 801381c:	461d      	movge	r5, r3
 801381e:	2600      	movge	r6, #0
 8013820:	2601      	movlt	r6, #1
 8013822:	f7ff fdb1 	bl	8013388 <_Balloc>
 8013826:	692b      	ldr	r3, [r5, #16]
 8013828:	60c6      	str	r6, [r0, #12]
 801382a:	6926      	ldr	r6, [r4, #16]
 801382c:	f105 0914 	add.w	r9, r5, #20
 8013830:	f104 0214 	add.w	r2, r4, #20
 8013834:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013838:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801383c:	f100 0514 	add.w	r5, r0, #20
 8013840:	f04f 0e00 	mov.w	lr, #0
 8013844:	f852 ab04 	ldr.w	sl, [r2], #4
 8013848:	f859 4b04 	ldr.w	r4, [r9], #4
 801384c:	fa1e f18a 	uxtah	r1, lr, sl
 8013850:	b2a3      	uxth	r3, r4
 8013852:	1ac9      	subs	r1, r1, r3
 8013854:	0c23      	lsrs	r3, r4, #16
 8013856:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801385a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801385e:	b289      	uxth	r1, r1
 8013860:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013864:	45c8      	cmp	r8, r9
 8013866:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801386a:	4694      	mov	ip, r2
 801386c:	f845 3b04 	str.w	r3, [r5], #4
 8013870:	d8e8      	bhi.n	8013844 <__mdiff+0x5c>
 8013872:	45bc      	cmp	ip, r7
 8013874:	d304      	bcc.n	8013880 <__mdiff+0x98>
 8013876:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801387a:	b183      	cbz	r3, 801389e <__mdiff+0xb6>
 801387c:	6106      	str	r6, [r0, #16]
 801387e:	e7c5      	b.n	801380c <__mdiff+0x24>
 8013880:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013884:	fa1e f381 	uxtah	r3, lr, r1
 8013888:	141a      	asrs	r2, r3, #16
 801388a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801388e:	b29b      	uxth	r3, r3
 8013890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013894:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013898:	f845 3b04 	str.w	r3, [r5], #4
 801389c:	e7e9      	b.n	8013872 <__mdiff+0x8a>
 801389e:	3e01      	subs	r6, #1
 80138a0:	e7e9      	b.n	8013876 <__mdiff+0x8e>

080138a2 <__d2b>:
 80138a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80138a6:	460e      	mov	r6, r1
 80138a8:	2101      	movs	r1, #1
 80138aa:	ec59 8b10 	vmov	r8, r9, d0
 80138ae:	4615      	mov	r5, r2
 80138b0:	f7ff fd6a 	bl	8013388 <_Balloc>
 80138b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80138b8:	4607      	mov	r7, r0
 80138ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80138be:	bb34      	cbnz	r4, 801390e <__d2b+0x6c>
 80138c0:	9301      	str	r3, [sp, #4]
 80138c2:	f1b8 0300 	subs.w	r3, r8, #0
 80138c6:	d027      	beq.n	8013918 <__d2b+0x76>
 80138c8:	a802      	add	r0, sp, #8
 80138ca:	f840 3d08 	str.w	r3, [r0, #-8]!
 80138ce:	f7ff fe00 	bl	80134d2 <__lo0bits>
 80138d2:	9900      	ldr	r1, [sp, #0]
 80138d4:	b1f0      	cbz	r0, 8013914 <__d2b+0x72>
 80138d6:	9a01      	ldr	r2, [sp, #4]
 80138d8:	f1c0 0320 	rsb	r3, r0, #32
 80138dc:	fa02 f303 	lsl.w	r3, r2, r3
 80138e0:	430b      	orrs	r3, r1
 80138e2:	40c2      	lsrs	r2, r0
 80138e4:	617b      	str	r3, [r7, #20]
 80138e6:	9201      	str	r2, [sp, #4]
 80138e8:	9b01      	ldr	r3, [sp, #4]
 80138ea:	61bb      	str	r3, [r7, #24]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	bf14      	ite	ne
 80138f0:	2102      	movne	r1, #2
 80138f2:	2101      	moveq	r1, #1
 80138f4:	6139      	str	r1, [r7, #16]
 80138f6:	b1c4      	cbz	r4, 801392a <__d2b+0x88>
 80138f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80138fc:	4404      	add	r4, r0
 80138fe:	6034      	str	r4, [r6, #0]
 8013900:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013904:	6028      	str	r0, [r5, #0]
 8013906:	4638      	mov	r0, r7
 8013908:	b003      	add	sp, #12
 801390a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801390e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013912:	e7d5      	b.n	80138c0 <__d2b+0x1e>
 8013914:	6179      	str	r1, [r7, #20]
 8013916:	e7e7      	b.n	80138e8 <__d2b+0x46>
 8013918:	a801      	add	r0, sp, #4
 801391a:	f7ff fdda 	bl	80134d2 <__lo0bits>
 801391e:	9b01      	ldr	r3, [sp, #4]
 8013920:	617b      	str	r3, [r7, #20]
 8013922:	2101      	movs	r1, #1
 8013924:	6139      	str	r1, [r7, #16]
 8013926:	3020      	adds	r0, #32
 8013928:	e7e5      	b.n	80138f6 <__d2b+0x54>
 801392a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801392e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013932:	6030      	str	r0, [r6, #0]
 8013934:	6918      	ldr	r0, [r3, #16]
 8013936:	f7ff fdad 	bl	8013494 <__hi0bits>
 801393a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801393e:	e7e1      	b.n	8013904 <__d2b+0x62>

08013940 <_calloc_r>:
 8013940:	b538      	push	{r3, r4, r5, lr}
 8013942:	fb02 f401 	mul.w	r4, r2, r1
 8013946:	4621      	mov	r1, r4
 8013948:	f7fe faa4 	bl	8011e94 <_malloc_r>
 801394c:	4605      	mov	r5, r0
 801394e:	b118      	cbz	r0, 8013958 <_calloc_r+0x18>
 8013950:	4622      	mov	r2, r4
 8013952:	2100      	movs	r1, #0
 8013954:	f7fe fa95 	bl	8011e82 <memset>
 8013958:	4628      	mov	r0, r5
 801395a:	bd38      	pop	{r3, r4, r5, pc}

0801395c <_free_r>:
 801395c:	b538      	push	{r3, r4, r5, lr}
 801395e:	4605      	mov	r5, r0
 8013960:	2900      	cmp	r1, #0
 8013962:	d045      	beq.n	80139f0 <_free_r+0x94>
 8013964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013968:	1f0c      	subs	r4, r1, #4
 801396a:	2b00      	cmp	r3, #0
 801396c:	bfb8      	it	lt
 801396e:	18e4      	addlt	r4, r4, r3
 8013970:	f7ff fd08 	bl	8013384 <__malloc_lock>
 8013974:	4a1f      	ldr	r2, [pc, #124]	; (80139f4 <_free_r+0x98>)
 8013976:	6813      	ldr	r3, [r2, #0]
 8013978:	4610      	mov	r0, r2
 801397a:	b933      	cbnz	r3, 801398a <_free_r+0x2e>
 801397c:	6063      	str	r3, [r4, #4]
 801397e:	6014      	str	r4, [r2, #0]
 8013980:	4628      	mov	r0, r5
 8013982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013986:	f7ff bcfe 	b.w	8013386 <__malloc_unlock>
 801398a:	42a3      	cmp	r3, r4
 801398c:	d90c      	bls.n	80139a8 <_free_r+0x4c>
 801398e:	6821      	ldr	r1, [r4, #0]
 8013990:	1862      	adds	r2, r4, r1
 8013992:	4293      	cmp	r3, r2
 8013994:	bf04      	itt	eq
 8013996:	681a      	ldreq	r2, [r3, #0]
 8013998:	685b      	ldreq	r3, [r3, #4]
 801399a:	6063      	str	r3, [r4, #4]
 801399c:	bf04      	itt	eq
 801399e:	1852      	addeq	r2, r2, r1
 80139a0:	6022      	streq	r2, [r4, #0]
 80139a2:	6004      	str	r4, [r0, #0]
 80139a4:	e7ec      	b.n	8013980 <_free_r+0x24>
 80139a6:	4613      	mov	r3, r2
 80139a8:	685a      	ldr	r2, [r3, #4]
 80139aa:	b10a      	cbz	r2, 80139b0 <_free_r+0x54>
 80139ac:	42a2      	cmp	r2, r4
 80139ae:	d9fa      	bls.n	80139a6 <_free_r+0x4a>
 80139b0:	6819      	ldr	r1, [r3, #0]
 80139b2:	1858      	adds	r0, r3, r1
 80139b4:	42a0      	cmp	r0, r4
 80139b6:	d10b      	bne.n	80139d0 <_free_r+0x74>
 80139b8:	6820      	ldr	r0, [r4, #0]
 80139ba:	4401      	add	r1, r0
 80139bc:	1858      	adds	r0, r3, r1
 80139be:	4282      	cmp	r2, r0
 80139c0:	6019      	str	r1, [r3, #0]
 80139c2:	d1dd      	bne.n	8013980 <_free_r+0x24>
 80139c4:	6810      	ldr	r0, [r2, #0]
 80139c6:	6852      	ldr	r2, [r2, #4]
 80139c8:	605a      	str	r2, [r3, #4]
 80139ca:	4401      	add	r1, r0
 80139cc:	6019      	str	r1, [r3, #0]
 80139ce:	e7d7      	b.n	8013980 <_free_r+0x24>
 80139d0:	d902      	bls.n	80139d8 <_free_r+0x7c>
 80139d2:	230c      	movs	r3, #12
 80139d4:	602b      	str	r3, [r5, #0]
 80139d6:	e7d3      	b.n	8013980 <_free_r+0x24>
 80139d8:	6820      	ldr	r0, [r4, #0]
 80139da:	1821      	adds	r1, r4, r0
 80139dc:	428a      	cmp	r2, r1
 80139de:	bf04      	itt	eq
 80139e0:	6811      	ldreq	r1, [r2, #0]
 80139e2:	6852      	ldreq	r2, [r2, #4]
 80139e4:	6062      	str	r2, [r4, #4]
 80139e6:	bf04      	itt	eq
 80139e8:	1809      	addeq	r1, r1, r0
 80139ea:	6021      	streq	r1, [r4, #0]
 80139ec:	605c      	str	r4, [r3, #4]
 80139ee:	e7c7      	b.n	8013980 <_free_r+0x24>
 80139f0:	bd38      	pop	{r3, r4, r5, pc}
 80139f2:	bf00      	nop
 80139f4:	20004ca8 	.word	0x20004ca8

080139f8 <__ascii_mbtowc>:
 80139f8:	b082      	sub	sp, #8
 80139fa:	b901      	cbnz	r1, 80139fe <__ascii_mbtowc+0x6>
 80139fc:	a901      	add	r1, sp, #4
 80139fe:	b142      	cbz	r2, 8013a12 <__ascii_mbtowc+0x1a>
 8013a00:	b14b      	cbz	r3, 8013a16 <__ascii_mbtowc+0x1e>
 8013a02:	7813      	ldrb	r3, [r2, #0]
 8013a04:	600b      	str	r3, [r1, #0]
 8013a06:	7812      	ldrb	r2, [r2, #0]
 8013a08:	1c10      	adds	r0, r2, #0
 8013a0a:	bf18      	it	ne
 8013a0c:	2001      	movne	r0, #1
 8013a0e:	b002      	add	sp, #8
 8013a10:	4770      	bx	lr
 8013a12:	4610      	mov	r0, r2
 8013a14:	e7fb      	b.n	8013a0e <__ascii_mbtowc+0x16>
 8013a16:	f06f 0001 	mvn.w	r0, #1
 8013a1a:	e7f8      	b.n	8013a0e <__ascii_mbtowc+0x16>

08013a1c <__ascii_wctomb>:
 8013a1c:	b149      	cbz	r1, 8013a32 <__ascii_wctomb+0x16>
 8013a1e:	2aff      	cmp	r2, #255	; 0xff
 8013a20:	bf85      	ittet	hi
 8013a22:	238a      	movhi	r3, #138	; 0x8a
 8013a24:	6003      	strhi	r3, [r0, #0]
 8013a26:	700a      	strbls	r2, [r1, #0]
 8013a28:	f04f 30ff 	movhi.w	r0, #4294967295
 8013a2c:	bf98      	it	ls
 8013a2e:	2001      	movls	r0, #1
 8013a30:	4770      	bx	lr
 8013a32:	4608      	mov	r0, r1
 8013a34:	4770      	bx	lr
	...

08013a38 <pow>:
 8013a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3c:	ed2d 8b04 	vpush	{d8-d9}
 8013a40:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013d14 <pow+0x2dc>
 8013a44:	b08d      	sub	sp, #52	; 0x34
 8013a46:	ec57 6b10 	vmov	r6, r7, d0
 8013a4a:	ec55 4b11 	vmov	r4, r5, d1
 8013a4e:	f000 f963 	bl	8013d18 <__ieee754_pow>
 8013a52:	f999 3000 	ldrsb.w	r3, [r9]
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	3301      	adds	r3, #1
 8013a5a:	eeb0 8a40 	vmov.f32	s16, s0
 8013a5e:	eef0 8a60 	vmov.f32	s17, s1
 8013a62:	46c8      	mov	r8, r9
 8013a64:	d05f      	beq.n	8013b26 <pow+0xee>
 8013a66:	4622      	mov	r2, r4
 8013a68:	462b      	mov	r3, r5
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	4629      	mov	r1, r5
 8013a6e:	f7ed f815 	bl	8000a9c <__aeabi_dcmpun>
 8013a72:	4683      	mov	fp, r0
 8013a74:	2800      	cmp	r0, #0
 8013a76:	d156      	bne.n	8013b26 <pow+0xee>
 8013a78:	4632      	mov	r2, r6
 8013a7a:	463b      	mov	r3, r7
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	4639      	mov	r1, r7
 8013a80:	f7ed f80c 	bl	8000a9c <__aeabi_dcmpun>
 8013a84:	9001      	str	r0, [sp, #4]
 8013a86:	b1e8      	cbz	r0, 8013ac4 <pow+0x8c>
 8013a88:	2200      	movs	r2, #0
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	4629      	mov	r1, r5
 8013a90:	f7ec ffd2 	bl	8000a38 <__aeabi_dcmpeq>
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d046      	beq.n	8013b26 <pow+0xee>
 8013a98:	2301      	movs	r3, #1
 8013a9a:	9302      	str	r3, [sp, #8]
 8013a9c:	4b96      	ldr	r3, [pc, #600]	; (8013cf8 <pow+0x2c0>)
 8013a9e:	9303      	str	r3, [sp, #12]
 8013aa0:	4b96      	ldr	r3, [pc, #600]	; (8013cfc <pow+0x2c4>)
 8013aa2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013aac:	9b00      	ldr	r3, [sp, #0]
 8013aae:	2b02      	cmp	r3, #2
 8013ab0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013ab4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013ab8:	d033      	beq.n	8013b22 <pow+0xea>
 8013aba:	a802      	add	r0, sp, #8
 8013abc:	f000 fefb 	bl	80148b6 <matherr>
 8013ac0:	bb48      	cbnz	r0, 8013b16 <pow+0xde>
 8013ac2:	e05d      	b.n	8013b80 <pow+0x148>
 8013ac4:	f04f 0a00 	mov.w	sl, #0
 8013ac8:	f04f 0b00 	mov.w	fp, #0
 8013acc:	4652      	mov	r2, sl
 8013ace:	465b      	mov	r3, fp
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	4639      	mov	r1, r7
 8013ad4:	f7ec ffb0 	bl	8000a38 <__aeabi_dcmpeq>
 8013ad8:	ec4b ab19 	vmov	d9, sl, fp
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d054      	beq.n	8013b8a <pow+0x152>
 8013ae0:	4652      	mov	r2, sl
 8013ae2:	465b      	mov	r3, fp
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	4629      	mov	r1, r5
 8013ae8:	f7ec ffa6 	bl	8000a38 <__aeabi_dcmpeq>
 8013aec:	4680      	mov	r8, r0
 8013aee:	b318      	cbz	r0, 8013b38 <pow+0x100>
 8013af0:	2301      	movs	r3, #1
 8013af2:	9302      	str	r3, [sp, #8]
 8013af4:	4b80      	ldr	r3, [pc, #512]	; (8013cf8 <pow+0x2c0>)
 8013af6:	9303      	str	r3, [sp, #12]
 8013af8:	9b01      	ldr	r3, [sp, #4]
 8013afa:	930a      	str	r3, [sp, #40]	; 0x28
 8013afc:	9b00      	ldr	r3, [sp, #0]
 8013afe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013b02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013b06:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d0d5      	beq.n	8013aba <pow+0x82>
 8013b0e:	4b7b      	ldr	r3, [pc, #492]	; (8013cfc <pow+0x2c4>)
 8013b10:	2200      	movs	r2, #0
 8013b12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b18:	b11b      	cbz	r3, 8013b22 <pow+0xea>
 8013b1a:	f7fe f97d 	bl	8011e18 <__errno>
 8013b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b20:	6003      	str	r3, [r0, #0]
 8013b22:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013b26:	eeb0 0a48 	vmov.f32	s0, s16
 8013b2a:	eef0 0a68 	vmov.f32	s1, s17
 8013b2e:	b00d      	add	sp, #52	; 0x34
 8013b30:	ecbd 8b04 	vpop	{d8-d9}
 8013b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b38:	ec45 4b10 	vmov	d0, r4, r5
 8013b3c:	f000 feb3 	bl	80148a6 <finite>
 8013b40:	2800      	cmp	r0, #0
 8013b42:	d0f0      	beq.n	8013b26 <pow+0xee>
 8013b44:	4652      	mov	r2, sl
 8013b46:	465b      	mov	r3, fp
 8013b48:	4620      	mov	r0, r4
 8013b4a:	4629      	mov	r1, r5
 8013b4c:	f7ec ff7e 	bl	8000a4c <__aeabi_dcmplt>
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d0e8      	beq.n	8013b26 <pow+0xee>
 8013b54:	2301      	movs	r3, #1
 8013b56:	9302      	str	r3, [sp, #8]
 8013b58:	4b67      	ldr	r3, [pc, #412]	; (8013cf8 <pow+0x2c0>)
 8013b5a:	9303      	str	r3, [sp, #12]
 8013b5c:	f999 3000 	ldrsb.w	r3, [r9]
 8013b60:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013b64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013b68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013b6c:	b913      	cbnz	r3, 8013b74 <pow+0x13c>
 8013b6e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013b72:	e7a2      	b.n	8013aba <pow+0x82>
 8013b74:	4962      	ldr	r1, [pc, #392]	; (8013d00 <pow+0x2c8>)
 8013b76:	2000      	movs	r0, #0
 8013b78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	d19c      	bne.n	8013aba <pow+0x82>
 8013b80:	f7fe f94a 	bl	8011e18 <__errno>
 8013b84:	2321      	movs	r3, #33	; 0x21
 8013b86:	6003      	str	r3, [r0, #0]
 8013b88:	e7c5      	b.n	8013b16 <pow+0xde>
 8013b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8013b8e:	eef0 0a68 	vmov.f32	s1, s17
 8013b92:	f000 fe88 	bl	80148a6 <finite>
 8013b96:	9000      	str	r0, [sp, #0]
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	f040 8081 	bne.w	8013ca0 <pow+0x268>
 8013b9e:	ec47 6b10 	vmov	d0, r6, r7
 8013ba2:	f000 fe80 	bl	80148a6 <finite>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d07a      	beq.n	8013ca0 <pow+0x268>
 8013baa:	ec45 4b10 	vmov	d0, r4, r5
 8013bae:	f000 fe7a 	bl	80148a6 <finite>
 8013bb2:	2800      	cmp	r0, #0
 8013bb4:	d074      	beq.n	8013ca0 <pow+0x268>
 8013bb6:	ec53 2b18 	vmov	r2, r3, d8
 8013bba:	ee18 0a10 	vmov	r0, s16
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	f7ec ff6c 	bl	8000a9c <__aeabi_dcmpun>
 8013bc4:	f999 9000 	ldrsb.w	r9, [r9]
 8013bc8:	4b4b      	ldr	r3, [pc, #300]	; (8013cf8 <pow+0x2c0>)
 8013bca:	b1b0      	cbz	r0, 8013bfa <pow+0x1c2>
 8013bcc:	2201      	movs	r2, #1
 8013bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013bd2:	9b00      	ldr	r3, [sp, #0]
 8013bd4:	930a      	str	r3, [sp, #40]	; 0x28
 8013bd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013bda:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013bde:	f1b9 0f00 	cmp.w	r9, #0
 8013be2:	d0c4      	beq.n	8013b6e <pow+0x136>
 8013be4:	4652      	mov	r2, sl
 8013be6:	465b      	mov	r3, fp
 8013be8:	4650      	mov	r0, sl
 8013bea:	4659      	mov	r1, fp
 8013bec:	f7ec fde6 	bl	80007bc <__aeabi_ddiv>
 8013bf0:	f1b9 0f02 	cmp.w	r9, #2
 8013bf4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013bf8:	e7c1      	b.n	8013b7e <pow+0x146>
 8013bfa:	2203      	movs	r2, #3
 8013bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013c00:	900a      	str	r0, [sp, #40]	; 0x28
 8013c02:	4629      	mov	r1, r5
 8013c04:	4620      	mov	r0, r4
 8013c06:	2200      	movs	r2, #0
 8013c08:	4b3e      	ldr	r3, [pc, #248]	; (8013d04 <pow+0x2cc>)
 8013c0a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013c0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013c12:	f7ec fca9 	bl	8000568 <__aeabi_dmul>
 8013c16:	4604      	mov	r4, r0
 8013c18:	460d      	mov	r5, r1
 8013c1a:	f1b9 0f00 	cmp.w	r9, #0
 8013c1e:	d124      	bne.n	8013c6a <pow+0x232>
 8013c20:	4b39      	ldr	r3, [pc, #228]	; (8013d08 <pow+0x2d0>)
 8013c22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013c26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	4652      	mov	r2, sl
 8013c2e:	465b      	mov	r3, fp
 8013c30:	4639      	mov	r1, r7
 8013c32:	f7ec ff0b 	bl	8000a4c <__aeabi_dcmplt>
 8013c36:	2800      	cmp	r0, #0
 8013c38:	d056      	beq.n	8013ce8 <pow+0x2b0>
 8013c3a:	ec45 4b10 	vmov	d0, r4, r5
 8013c3e:	f000 fe47 	bl	80148d0 <rint>
 8013c42:	4622      	mov	r2, r4
 8013c44:	462b      	mov	r3, r5
 8013c46:	ec51 0b10 	vmov	r0, r1, d0
 8013c4a:	f7ec fef5 	bl	8000a38 <__aeabi_dcmpeq>
 8013c4e:	b920      	cbnz	r0, 8013c5a <pow+0x222>
 8013c50:	4b2e      	ldr	r3, [pc, #184]	; (8013d0c <pow+0x2d4>)
 8013c52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013c56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c5a:	f998 3000 	ldrsb.w	r3, [r8]
 8013c5e:	2b02      	cmp	r3, #2
 8013c60:	d142      	bne.n	8013ce8 <pow+0x2b0>
 8013c62:	f7fe f8d9 	bl	8011e18 <__errno>
 8013c66:	2322      	movs	r3, #34	; 0x22
 8013c68:	e78d      	b.n	8013b86 <pow+0x14e>
 8013c6a:	4b29      	ldr	r3, [pc, #164]	; (8013d10 <pow+0x2d8>)
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c72:	4630      	mov	r0, r6
 8013c74:	4652      	mov	r2, sl
 8013c76:	465b      	mov	r3, fp
 8013c78:	4639      	mov	r1, r7
 8013c7a:	f7ec fee7 	bl	8000a4c <__aeabi_dcmplt>
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	d0eb      	beq.n	8013c5a <pow+0x222>
 8013c82:	ec45 4b10 	vmov	d0, r4, r5
 8013c86:	f000 fe23 	bl	80148d0 <rint>
 8013c8a:	4622      	mov	r2, r4
 8013c8c:	462b      	mov	r3, r5
 8013c8e:	ec51 0b10 	vmov	r0, r1, d0
 8013c92:	f7ec fed1 	bl	8000a38 <__aeabi_dcmpeq>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d1df      	bne.n	8013c5a <pow+0x222>
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	4b18      	ldr	r3, [pc, #96]	; (8013d00 <pow+0x2c8>)
 8013c9e:	e7da      	b.n	8013c56 <pow+0x21e>
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	ec51 0b18 	vmov	r0, r1, d8
 8013ca8:	f7ec fec6 	bl	8000a38 <__aeabi_dcmpeq>
 8013cac:	2800      	cmp	r0, #0
 8013cae:	f43f af3a 	beq.w	8013b26 <pow+0xee>
 8013cb2:	ec47 6b10 	vmov	d0, r6, r7
 8013cb6:	f000 fdf6 	bl	80148a6 <finite>
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	f43f af33 	beq.w	8013b26 <pow+0xee>
 8013cc0:	ec45 4b10 	vmov	d0, r4, r5
 8013cc4:	f000 fdef 	bl	80148a6 <finite>
 8013cc8:	2800      	cmp	r0, #0
 8013cca:	f43f af2c 	beq.w	8013b26 <pow+0xee>
 8013cce:	2304      	movs	r3, #4
 8013cd0:	9302      	str	r3, [sp, #8]
 8013cd2:	4b09      	ldr	r3, [pc, #36]	; (8013cf8 <pow+0x2c0>)
 8013cd4:	9303      	str	r3, [sp, #12]
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8013cda:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013cde:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013ce2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013ce6:	e7b8      	b.n	8013c5a <pow+0x222>
 8013ce8:	a802      	add	r0, sp, #8
 8013cea:	f000 fde4 	bl	80148b6 <matherr>
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	f47f af11 	bne.w	8013b16 <pow+0xde>
 8013cf4:	e7b5      	b.n	8013c62 <pow+0x22a>
 8013cf6:	bf00      	nop
 8013cf8:	080156cf 	.word	0x080156cf
 8013cfc:	3ff00000 	.word	0x3ff00000
 8013d00:	fff00000 	.word	0xfff00000
 8013d04:	3fe00000 	.word	0x3fe00000
 8013d08:	47efffff 	.word	0x47efffff
 8013d0c:	c7efffff 	.word	0xc7efffff
 8013d10:	7ff00000 	.word	0x7ff00000
 8013d14:	200001e8 	.word	0x200001e8

08013d18 <__ieee754_pow>:
 8013d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d1c:	b091      	sub	sp, #68	; 0x44
 8013d1e:	ed8d 1b00 	vstr	d1, [sp]
 8013d22:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013d26:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013d2a:	ea58 0302 	orrs.w	r3, r8, r2
 8013d2e:	ec57 6b10 	vmov	r6, r7, d0
 8013d32:	f000 84be 	beq.w	80146b2 <__ieee754_pow+0x99a>
 8013d36:	4b7a      	ldr	r3, [pc, #488]	; (8013f20 <__ieee754_pow+0x208>)
 8013d38:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013d3c:	429c      	cmp	r4, r3
 8013d3e:	463d      	mov	r5, r7
 8013d40:	ee10 aa10 	vmov	sl, s0
 8013d44:	dc09      	bgt.n	8013d5a <__ieee754_pow+0x42>
 8013d46:	d103      	bne.n	8013d50 <__ieee754_pow+0x38>
 8013d48:	b93e      	cbnz	r6, 8013d5a <__ieee754_pow+0x42>
 8013d4a:	45a0      	cmp	r8, r4
 8013d4c:	dc0d      	bgt.n	8013d6a <__ieee754_pow+0x52>
 8013d4e:	e001      	b.n	8013d54 <__ieee754_pow+0x3c>
 8013d50:	4598      	cmp	r8, r3
 8013d52:	dc02      	bgt.n	8013d5a <__ieee754_pow+0x42>
 8013d54:	4598      	cmp	r8, r3
 8013d56:	d10e      	bne.n	8013d76 <__ieee754_pow+0x5e>
 8013d58:	b16a      	cbz	r2, 8013d76 <__ieee754_pow+0x5e>
 8013d5a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013d5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013d62:	ea54 030a 	orrs.w	r3, r4, sl
 8013d66:	f000 84a4 	beq.w	80146b2 <__ieee754_pow+0x99a>
 8013d6a:	486e      	ldr	r0, [pc, #440]	; (8013f24 <__ieee754_pow+0x20c>)
 8013d6c:	b011      	add	sp, #68	; 0x44
 8013d6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d72:	f000 bda5 	b.w	80148c0 <nan>
 8013d76:	2d00      	cmp	r5, #0
 8013d78:	da53      	bge.n	8013e22 <__ieee754_pow+0x10a>
 8013d7a:	4b6b      	ldr	r3, [pc, #428]	; (8013f28 <__ieee754_pow+0x210>)
 8013d7c:	4598      	cmp	r8, r3
 8013d7e:	dc4d      	bgt.n	8013e1c <__ieee754_pow+0x104>
 8013d80:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013d84:	4598      	cmp	r8, r3
 8013d86:	dd4c      	ble.n	8013e22 <__ieee754_pow+0x10a>
 8013d88:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013d8c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013d90:	2b14      	cmp	r3, #20
 8013d92:	dd26      	ble.n	8013de2 <__ieee754_pow+0xca>
 8013d94:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013d98:	fa22 f103 	lsr.w	r1, r2, r3
 8013d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8013da0:	4293      	cmp	r3, r2
 8013da2:	d13e      	bne.n	8013e22 <__ieee754_pow+0x10a>
 8013da4:	f001 0101 	and.w	r1, r1, #1
 8013da8:	f1c1 0b02 	rsb	fp, r1, #2
 8013dac:	2a00      	cmp	r2, #0
 8013dae:	d15b      	bne.n	8013e68 <__ieee754_pow+0x150>
 8013db0:	4b5b      	ldr	r3, [pc, #364]	; (8013f20 <__ieee754_pow+0x208>)
 8013db2:	4598      	cmp	r8, r3
 8013db4:	d124      	bne.n	8013e00 <__ieee754_pow+0xe8>
 8013db6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013dba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013dbe:	ea53 030a 	orrs.w	r3, r3, sl
 8013dc2:	f000 8476 	beq.w	80146b2 <__ieee754_pow+0x99a>
 8013dc6:	4b59      	ldr	r3, [pc, #356]	; (8013f2c <__ieee754_pow+0x214>)
 8013dc8:	429c      	cmp	r4, r3
 8013dca:	dd2d      	ble.n	8013e28 <__ieee754_pow+0x110>
 8013dcc:	f1b9 0f00 	cmp.w	r9, #0
 8013dd0:	f280 8473 	bge.w	80146ba <__ieee754_pow+0x9a2>
 8013dd4:	2000      	movs	r0, #0
 8013dd6:	2100      	movs	r1, #0
 8013dd8:	ec41 0b10 	vmov	d0, r0, r1
 8013ddc:	b011      	add	sp, #68	; 0x44
 8013dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de2:	2a00      	cmp	r2, #0
 8013de4:	d13e      	bne.n	8013e64 <__ieee754_pow+0x14c>
 8013de6:	f1c3 0314 	rsb	r3, r3, #20
 8013dea:	fa48 f103 	asr.w	r1, r8, r3
 8013dee:	fa01 f303 	lsl.w	r3, r1, r3
 8013df2:	4543      	cmp	r3, r8
 8013df4:	f040 8469 	bne.w	80146ca <__ieee754_pow+0x9b2>
 8013df8:	f001 0101 	and.w	r1, r1, #1
 8013dfc:	f1c1 0b02 	rsb	fp, r1, #2
 8013e00:	4b4b      	ldr	r3, [pc, #300]	; (8013f30 <__ieee754_pow+0x218>)
 8013e02:	4598      	cmp	r8, r3
 8013e04:	d118      	bne.n	8013e38 <__ieee754_pow+0x120>
 8013e06:	f1b9 0f00 	cmp.w	r9, #0
 8013e0a:	f280 845a 	bge.w	80146c2 <__ieee754_pow+0x9aa>
 8013e0e:	4948      	ldr	r1, [pc, #288]	; (8013f30 <__ieee754_pow+0x218>)
 8013e10:	4632      	mov	r2, r6
 8013e12:	463b      	mov	r3, r7
 8013e14:	2000      	movs	r0, #0
 8013e16:	f7ec fcd1 	bl	80007bc <__aeabi_ddiv>
 8013e1a:	e7dd      	b.n	8013dd8 <__ieee754_pow+0xc0>
 8013e1c:	f04f 0b02 	mov.w	fp, #2
 8013e20:	e7c4      	b.n	8013dac <__ieee754_pow+0x94>
 8013e22:	f04f 0b00 	mov.w	fp, #0
 8013e26:	e7c1      	b.n	8013dac <__ieee754_pow+0x94>
 8013e28:	f1b9 0f00 	cmp.w	r9, #0
 8013e2c:	dad2      	bge.n	8013dd4 <__ieee754_pow+0xbc>
 8013e2e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013e32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013e36:	e7cf      	b.n	8013dd8 <__ieee754_pow+0xc0>
 8013e38:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013e3c:	d106      	bne.n	8013e4c <__ieee754_pow+0x134>
 8013e3e:	4632      	mov	r2, r6
 8013e40:	463b      	mov	r3, r7
 8013e42:	4610      	mov	r0, r2
 8013e44:	4619      	mov	r1, r3
 8013e46:	f7ec fb8f 	bl	8000568 <__aeabi_dmul>
 8013e4a:	e7c5      	b.n	8013dd8 <__ieee754_pow+0xc0>
 8013e4c:	4b39      	ldr	r3, [pc, #228]	; (8013f34 <__ieee754_pow+0x21c>)
 8013e4e:	4599      	cmp	r9, r3
 8013e50:	d10a      	bne.n	8013e68 <__ieee754_pow+0x150>
 8013e52:	2d00      	cmp	r5, #0
 8013e54:	db08      	blt.n	8013e68 <__ieee754_pow+0x150>
 8013e56:	ec47 6b10 	vmov	d0, r6, r7
 8013e5a:	b011      	add	sp, #68	; 0x44
 8013e5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e60:	f000 bc68 	b.w	8014734 <__ieee754_sqrt>
 8013e64:	f04f 0b00 	mov.w	fp, #0
 8013e68:	ec47 6b10 	vmov	d0, r6, r7
 8013e6c:	f000 fd12 	bl	8014894 <fabs>
 8013e70:	ec51 0b10 	vmov	r0, r1, d0
 8013e74:	f1ba 0f00 	cmp.w	sl, #0
 8013e78:	d127      	bne.n	8013eca <__ieee754_pow+0x1b2>
 8013e7a:	b124      	cbz	r4, 8013e86 <__ieee754_pow+0x16e>
 8013e7c:	4b2c      	ldr	r3, [pc, #176]	; (8013f30 <__ieee754_pow+0x218>)
 8013e7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d121      	bne.n	8013eca <__ieee754_pow+0x1b2>
 8013e86:	f1b9 0f00 	cmp.w	r9, #0
 8013e8a:	da05      	bge.n	8013e98 <__ieee754_pow+0x180>
 8013e8c:	4602      	mov	r2, r0
 8013e8e:	460b      	mov	r3, r1
 8013e90:	2000      	movs	r0, #0
 8013e92:	4927      	ldr	r1, [pc, #156]	; (8013f30 <__ieee754_pow+0x218>)
 8013e94:	f7ec fc92 	bl	80007bc <__aeabi_ddiv>
 8013e98:	2d00      	cmp	r5, #0
 8013e9a:	da9d      	bge.n	8013dd8 <__ieee754_pow+0xc0>
 8013e9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013ea0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013ea4:	ea54 030b 	orrs.w	r3, r4, fp
 8013ea8:	d108      	bne.n	8013ebc <__ieee754_pow+0x1a4>
 8013eaa:	4602      	mov	r2, r0
 8013eac:	460b      	mov	r3, r1
 8013eae:	4610      	mov	r0, r2
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	f7ec f9a1 	bl	80001f8 <__aeabi_dsub>
 8013eb6:	4602      	mov	r2, r0
 8013eb8:	460b      	mov	r3, r1
 8013eba:	e7ac      	b.n	8013e16 <__ieee754_pow+0xfe>
 8013ebc:	f1bb 0f01 	cmp.w	fp, #1
 8013ec0:	d18a      	bne.n	8013dd8 <__ieee754_pow+0xc0>
 8013ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	e786      	b.n	8013dd8 <__ieee754_pow+0xc0>
 8013eca:	0fed      	lsrs	r5, r5, #31
 8013ecc:	1e6b      	subs	r3, r5, #1
 8013ece:	930d      	str	r3, [sp, #52]	; 0x34
 8013ed0:	ea5b 0303 	orrs.w	r3, fp, r3
 8013ed4:	d102      	bne.n	8013edc <__ieee754_pow+0x1c4>
 8013ed6:	4632      	mov	r2, r6
 8013ed8:	463b      	mov	r3, r7
 8013eda:	e7e8      	b.n	8013eae <__ieee754_pow+0x196>
 8013edc:	4b16      	ldr	r3, [pc, #88]	; (8013f38 <__ieee754_pow+0x220>)
 8013ede:	4598      	cmp	r8, r3
 8013ee0:	f340 80fe 	ble.w	80140e0 <__ieee754_pow+0x3c8>
 8013ee4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013ee8:	4598      	cmp	r8, r3
 8013eea:	dd0a      	ble.n	8013f02 <__ieee754_pow+0x1ea>
 8013eec:	4b0f      	ldr	r3, [pc, #60]	; (8013f2c <__ieee754_pow+0x214>)
 8013eee:	429c      	cmp	r4, r3
 8013ef0:	dc0d      	bgt.n	8013f0e <__ieee754_pow+0x1f6>
 8013ef2:	f1b9 0f00 	cmp.w	r9, #0
 8013ef6:	f6bf af6d 	bge.w	8013dd4 <__ieee754_pow+0xbc>
 8013efa:	a307      	add	r3, pc, #28	; (adr r3, 8013f18 <__ieee754_pow+0x200>)
 8013efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f00:	e79f      	b.n	8013e42 <__ieee754_pow+0x12a>
 8013f02:	4b0e      	ldr	r3, [pc, #56]	; (8013f3c <__ieee754_pow+0x224>)
 8013f04:	429c      	cmp	r4, r3
 8013f06:	ddf4      	ble.n	8013ef2 <__ieee754_pow+0x1da>
 8013f08:	4b09      	ldr	r3, [pc, #36]	; (8013f30 <__ieee754_pow+0x218>)
 8013f0a:	429c      	cmp	r4, r3
 8013f0c:	dd18      	ble.n	8013f40 <__ieee754_pow+0x228>
 8013f0e:	f1b9 0f00 	cmp.w	r9, #0
 8013f12:	dcf2      	bgt.n	8013efa <__ieee754_pow+0x1e2>
 8013f14:	e75e      	b.n	8013dd4 <__ieee754_pow+0xbc>
 8013f16:	bf00      	nop
 8013f18:	8800759c 	.word	0x8800759c
 8013f1c:	7e37e43c 	.word	0x7e37e43c
 8013f20:	7ff00000 	.word	0x7ff00000
 8013f24:	080155cd 	.word	0x080155cd
 8013f28:	433fffff 	.word	0x433fffff
 8013f2c:	3fefffff 	.word	0x3fefffff
 8013f30:	3ff00000 	.word	0x3ff00000
 8013f34:	3fe00000 	.word	0x3fe00000
 8013f38:	41e00000 	.word	0x41e00000
 8013f3c:	3feffffe 	.word	0x3feffffe
 8013f40:	2200      	movs	r2, #0
 8013f42:	4b63      	ldr	r3, [pc, #396]	; (80140d0 <__ieee754_pow+0x3b8>)
 8013f44:	f7ec f958 	bl	80001f8 <__aeabi_dsub>
 8013f48:	a355      	add	r3, pc, #340	; (adr r3, 80140a0 <__ieee754_pow+0x388>)
 8013f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4e:	4604      	mov	r4, r0
 8013f50:	460d      	mov	r5, r1
 8013f52:	f7ec fb09 	bl	8000568 <__aeabi_dmul>
 8013f56:	a354      	add	r3, pc, #336	; (adr r3, 80140a8 <__ieee754_pow+0x390>)
 8013f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f5c:	4606      	mov	r6, r0
 8013f5e:	460f      	mov	r7, r1
 8013f60:	4620      	mov	r0, r4
 8013f62:	4629      	mov	r1, r5
 8013f64:	f7ec fb00 	bl	8000568 <__aeabi_dmul>
 8013f68:	2200      	movs	r2, #0
 8013f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f6e:	4b59      	ldr	r3, [pc, #356]	; (80140d4 <__ieee754_pow+0x3bc>)
 8013f70:	4620      	mov	r0, r4
 8013f72:	4629      	mov	r1, r5
 8013f74:	f7ec faf8 	bl	8000568 <__aeabi_dmul>
 8013f78:	4602      	mov	r2, r0
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	a14c      	add	r1, pc, #304	; (adr r1, 80140b0 <__ieee754_pow+0x398>)
 8013f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f82:	f7ec f939 	bl	80001f8 <__aeabi_dsub>
 8013f86:	4622      	mov	r2, r4
 8013f88:	462b      	mov	r3, r5
 8013f8a:	f7ec faed 	bl	8000568 <__aeabi_dmul>
 8013f8e:	4602      	mov	r2, r0
 8013f90:	460b      	mov	r3, r1
 8013f92:	2000      	movs	r0, #0
 8013f94:	4950      	ldr	r1, [pc, #320]	; (80140d8 <__ieee754_pow+0x3c0>)
 8013f96:	f7ec f92f 	bl	80001f8 <__aeabi_dsub>
 8013f9a:	4622      	mov	r2, r4
 8013f9c:	462b      	mov	r3, r5
 8013f9e:	4680      	mov	r8, r0
 8013fa0:	4689      	mov	r9, r1
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	4629      	mov	r1, r5
 8013fa6:	f7ec fadf 	bl	8000568 <__aeabi_dmul>
 8013faa:	4602      	mov	r2, r0
 8013fac:	460b      	mov	r3, r1
 8013fae:	4640      	mov	r0, r8
 8013fb0:	4649      	mov	r1, r9
 8013fb2:	f7ec fad9 	bl	8000568 <__aeabi_dmul>
 8013fb6:	a340      	add	r3, pc, #256	; (adr r3, 80140b8 <__ieee754_pow+0x3a0>)
 8013fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fbc:	f7ec fad4 	bl	8000568 <__aeabi_dmul>
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fc8:	f7ec f916 	bl	80001f8 <__aeabi_dsub>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	460b      	mov	r3, r1
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	460d      	mov	r5, r1
 8013fd4:	4630      	mov	r0, r6
 8013fd6:	4639      	mov	r1, r7
 8013fd8:	f7ec f910 	bl	80001fc <__adddf3>
 8013fdc:	2000      	movs	r0, #0
 8013fde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013fe2:	4632      	mov	r2, r6
 8013fe4:	463b      	mov	r3, r7
 8013fe6:	f7ec f907 	bl	80001f8 <__aeabi_dsub>
 8013fea:	4602      	mov	r2, r0
 8013fec:	460b      	mov	r3, r1
 8013fee:	4620      	mov	r0, r4
 8013ff0:	4629      	mov	r1, r5
 8013ff2:	f7ec f901 	bl	80001f8 <__aeabi_dsub>
 8013ff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013ff8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013ffc:	4313      	orrs	r3, r2
 8013ffe:	4606      	mov	r6, r0
 8014000:	460f      	mov	r7, r1
 8014002:	f040 81eb 	bne.w	80143dc <__ieee754_pow+0x6c4>
 8014006:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80140c0 <__ieee754_pow+0x3a8>
 801400a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801400e:	2400      	movs	r4, #0
 8014010:	4622      	mov	r2, r4
 8014012:	462b      	mov	r3, r5
 8014014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014018:	ed8d 7b02 	vstr	d7, [sp, #8]
 801401c:	f7ec f8ec 	bl	80001f8 <__aeabi_dsub>
 8014020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014024:	f7ec faa0 	bl	8000568 <__aeabi_dmul>
 8014028:	e9dd 2300 	ldrd	r2, r3, [sp]
 801402c:	4680      	mov	r8, r0
 801402e:	4689      	mov	r9, r1
 8014030:	4630      	mov	r0, r6
 8014032:	4639      	mov	r1, r7
 8014034:	f7ec fa98 	bl	8000568 <__aeabi_dmul>
 8014038:	4602      	mov	r2, r0
 801403a:	460b      	mov	r3, r1
 801403c:	4640      	mov	r0, r8
 801403e:	4649      	mov	r1, r9
 8014040:	f7ec f8dc 	bl	80001fc <__adddf3>
 8014044:	4622      	mov	r2, r4
 8014046:	462b      	mov	r3, r5
 8014048:	4680      	mov	r8, r0
 801404a:	4689      	mov	r9, r1
 801404c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014050:	f7ec fa8a 	bl	8000568 <__aeabi_dmul>
 8014054:	460b      	mov	r3, r1
 8014056:	4604      	mov	r4, r0
 8014058:	460d      	mov	r5, r1
 801405a:	4602      	mov	r2, r0
 801405c:	4649      	mov	r1, r9
 801405e:	4640      	mov	r0, r8
 8014060:	e9cd 4500 	strd	r4, r5, [sp]
 8014064:	f7ec f8ca 	bl	80001fc <__adddf3>
 8014068:	4b1c      	ldr	r3, [pc, #112]	; (80140dc <__ieee754_pow+0x3c4>)
 801406a:	4299      	cmp	r1, r3
 801406c:	4606      	mov	r6, r0
 801406e:	460f      	mov	r7, r1
 8014070:	468b      	mov	fp, r1
 8014072:	f340 82f7 	ble.w	8014664 <__ieee754_pow+0x94c>
 8014076:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801407a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801407e:	4303      	orrs	r3, r0
 8014080:	f000 81ea 	beq.w	8014458 <__ieee754_pow+0x740>
 8014084:	a310      	add	r3, pc, #64	; (adr r3, 80140c8 <__ieee754_pow+0x3b0>)
 8014086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801408e:	f7ec fa6b 	bl	8000568 <__aeabi_dmul>
 8014092:	a30d      	add	r3, pc, #52	; (adr r3, 80140c8 <__ieee754_pow+0x3b0>)
 8014094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014098:	e6d5      	b.n	8013e46 <__ieee754_pow+0x12e>
 801409a:	bf00      	nop
 801409c:	f3af 8000 	nop.w
 80140a0:	60000000 	.word	0x60000000
 80140a4:	3ff71547 	.word	0x3ff71547
 80140a8:	f85ddf44 	.word	0xf85ddf44
 80140ac:	3e54ae0b 	.word	0x3e54ae0b
 80140b0:	55555555 	.word	0x55555555
 80140b4:	3fd55555 	.word	0x3fd55555
 80140b8:	652b82fe 	.word	0x652b82fe
 80140bc:	3ff71547 	.word	0x3ff71547
 80140c0:	00000000 	.word	0x00000000
 80140c4:	bff00000 	.word	0xbff00000
 80140c8:	8800759c 	.word	0x8800759c
 80140cc:	7e37e43c 	.word	0x7e37e43c
 80140d0:	3ff00000 	.word	0x3ff00000
 80140d4:	3fd00000 	.word	0x3fd00000
 80140d8:	3fe00000 	.word	0x3fe00000
 80140dc:	408fffff 	.word	0x408fffff
 80140e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80140e4:	f04f 0200 	mov.w	r2, #0
 80140e8:	da05      	bge.n	80140f6 <__ieee754_pow+0x3de>
 80140ea:	4bd3      	ldr	r3, [pc, #844]	; (8014438 <__ieee754_pow+0x720>)
 80140ec:	f7ec fa3c 	bl	8000568 <__aeabi_dmul>
 80140f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80140f4:	460c      	mov	r4, r1
 80140f6:	1523      	asrs	r3, r4, #20
 80140f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80140fc:	4413      	add	r3, r2
 80140fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014100:	4bce      	ldr	r3, [pc, #824]	; (801443c <__ieee754_pow+0x724>)
 8014102:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014106:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801410a:	429c      	cmp	r4, r3
 801410c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014110:	dd08      	ble.n	8014124 <__ieee754_pow+0x40c>
 8014112:	4bcb      	ldr	r3, [pc, #812]	; (8014440 <__ieee754_pow+0x728>)
 8014114:	429c      	cmp	r4, r3
 8014116:	f340 815e 	ble.w	80143d6 <__ieee754_pow+0x6be>
 801411a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801411c:	3301      	adds	r3, #1
 801411e:	9309      	str	r3, [sp, #36]	; 0x24
 8014120:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014124:	f04f 0a00 	mov.w	sl, #0
 8014128:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801412c:	930c      	str	r3, [sp, #48]	; 0x30
 801412e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014130:	4bc4      	ldr	r3, [pc, #784]	; (8014444 <__ieee754_pow+0x72c>)
 8014132:	4413      	add	r3, r2
 8014134:	ed93 7b00 	vldr	d7, [r3]
 8014138:	4629      	mov	r1, r5
 801413a:	ec53 2b17 	vmov	r2, r3, d7
 801413e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014142:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014146:	f7ec f857 	bl	80001f8 <__aeabi_dsub>
 801414a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801414e:	4606      	mov	r6, r0
 8014150:	460f      	mov	r7, r1
 8014152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014156:	f7ec f851 	bl	80001fc <__adddf3>
 801415a:	4602      	mov	r2, r0
 801415c:	460b      	mov	r3, r1
 801415e:	2000      	movs	r0, #0
 8014160:	49b9      	ldr	r1, [pc, #740]	; (8014448 <__ieee754_pow+0x730>)
 8014162:	f7ec fb2b 	bl	80007bc <__aeabi_ddiv>
 8014166:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801416a:	4602      	mov	r2, r0
 801416c:	460b      	mov	r3, r1
 801416e:	4630      	mov	r0, r6
 8014170:	4639      	mov	r1, r7
 8014172:	f7ec f9f9 	bl	8000568 <__aeabi_dmul>
 8014176:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801417a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801417e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014182:	2300      	movs	r3, #0
 8014184:	9302      	str	r3, [sp, #8]
 8014186:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801418a:	106d      	asrs	r5, r5, #1
 801418c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014190:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014194:	2200      	movs	r2, #0
 8014196:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801419a:	4640      	mov	r0, r8
 801419c:	4649      	mov	r1, r9
 801419e:	4614      	mov	r4, r2
 80141a0:	461d      	mov	r5, r3
 80141a2:	f7ec f9e1 	bl	8000568 <__aeabi_dmul>
 80141a6:	4602      	mov	r2, r0
 80141a8:	460b      	mov	r3, r1
 80141aa:	4630      	mov	r0, r6
 80141ac:	4639      	mov	r1, r7
 80141ae:	f7ec f823 	bl	80001f8 <__aeabi_dsub>
 80141b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80141b6:	4606      	mov	r6, r0
 80141b8:	460f      	mov	r7, r1
 80141ba:	4620      	mov	r0, r4
 80141bc:	4629      	mov	r1, r5
 80141be:	f7ec f81b 	bl	80001f8 <__aeabi_dsub>
 80141c2:	4602      	mov	r2, r0
 80141c4:	460b      	mov	r3, r1
 80141c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80141ca:	f7ec f815 	bl	80001f8 <__aeabi_dsub>
 80141ce:	4642      	mov	r2, r8
 80141d0:	464b      	mov	r3, r9
 80141d2:	f7ec f9c9 	bl	8000568 <__aeabi_dmul>
 80141d6:	4602      	mov	r2, r0
 80141d8:	460b      	mov	r3, r1
 80141da:	4630      	mov	r0, r6
 80141dc:	4639      	mov	r1, r7
 80141de:	f7ec f80b 	bl	80001f8 <__aeabi_dsub>
 80141e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80141e6:	f7ec f9bf 	bl	8000568 <__aeabi_dmul>
 80141ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80141f2:	4610      	mov	r0, r2
 80141f4:	4619      	mov	r1, r3
 80141f6:	f7ec f9b7 	bl	8000568 <__aeabi_dmul>
 80141fa:	a37b      	add	r3, pc, #492	; (adr r3, 80143e8 <__ieee754_pow+0x6d0>)
 80141fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014200:	4604      	mov	r4, r0
 8014202:	460d      	mov	r5, r1
 8014204:	f7ec f9b0 	bl	8000568 <__aeabi_dmul>
 8014208:	a379      	add	r3, pc, #484	; (adr r3, 80143f0 <__ieee754_pow+0x6d8>)
 801420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420e:	f7eb fff5 	bl	80001fc <__adddf3>
 8014212:	4622      	mov	r2, r4
 8014214:	462b      	mov	r3, r5
 8014216:	f7ec f9a7 	bl	8000568 <__aeabi_dmul>
 801421a:	a377      	add	r3, pc, #476	; (adr r3, 80143f8 <__ieee754_pow+0x6e0>)
 801421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014220:	f7eb ffec 	bl	80001fc <__adddf3>
 8014224:	4622      	mov	r2, r4
 8014226:	462b      	mov	r3, r5
 8014228:	f7ec f99e 	bl	8000568 <__aeabi_dmul>
 801422c:	a374      	add	r3, pc, #464	; (adr r3, 8014400 <__ieee754_pow+0x6e8>)
 801422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014232:	f7eb ffe3 	bl	80001fc <__adddf3>
 8014236:	4622      	mov	r2, r4
 8014238:	462b      	mov	r3, r5
 801423a:	f7ec f995 	bl	8000568 <__aeabi_dmul>
 801423e:	a372      	add	r3, pc, #456	; (adr r3, 8014408 <__ieee754_pow+0x6f0>)
 8014240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014244:	f7eb ffda 	bl	80001fc <__adddf3>
 8014248:	4622      	mov	r2, r4
 801424a:	462b      	mov	r3, r5
 801424c:	f7ec f98c 	bl	8000568 <__aeabi_dmul>
 8014250:	a36f      	add	r3, pc, #444	; (adr r3, 8014410 <__ieee754_pow+0x6f8>)
 8014252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014256:	f7eb ffd1 	bl	80001fc <__adddf3>
 801425a:	4622      	mov	r2, r4
 801425c:	4606      	mov	r6, r0
 801425e:	460f      	mov	r7, r1
 8014260:	462b      	mov	r3, r5
 8014262:	4620      	mov	r0, r4
 8014264:	4629      	mov	r1, r5
 8014266:	f7ec f97f 	bl	8000568 <__aeabi_dmul>
 801426a:	4602      	mov	r2, r0
 801426c:	460b      	mov	r3, r1
 801426e:	4630      	mov	r0, r6
 8014270:	4639      	mov	r1, r7
 8014272:	f7ec f979 	bl	8000568 <__aeabi_dmul>
 8014276:	4642      	mov	r2, r8
 8014278:	4604      	mov	r4, r0
 801427a:	460d      	mov	r5, r1
 801427c:	464b      	mov	r3, r9
 801427e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014282:	f7eb ffbb 	bl	80001fc <__adddf3>
 8014286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801428a:	f7ec f96d 	bl	8000568 <__aeabi_dmul>
 801428e:	4622      	mov	r2, r4
 8014290:	462b      	mov	r3, r5
 8014292:	f7eb ffb3 	bl	80001fc <__adddf3>
 8014296:	4642      	mov	r2, r8
 8014298:	4606      	mov	r6, r0
 801429a:	460f      	mov	r7, r1
 801429c:	464b      	mov	r3, r9
 801429e:	4640      	mov	r0, r8
 80142a0:	4649      	mov	r1, r9
 80142a2:	f7ec f961 	bl	8000568 <__aeabi_dmul>
 80142a6:	2200      	movs	r2, #0
 80142a8:	4b68      	ldr	r3, [pc, #416]	; (801444c <__ieee754_pow+0x734>)
 80142aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80142ae:	f7eb ffa5 	bl	80001fc <__adddf3>
 80142b2:	4632      	mov	r2, r6
 80142b4:	463b      	mov	r3, r7
 80142b6:	f7eb ffa1 	bl	80001fc <__adddf3>
 80142ba:	9802      	ldr	r0, [sp, #8]
 80142bc:	460d      	mov	r5, r1
 80142be:	4604      	mov	r4, r0
 80142c0:	4602      	mov	r2, r0
 80142c2:	460b      	mov	r3, r1
 80142c4:	4640      	mov	r0, r8
 80142c6:	4649      	mov	r1, r9
 80142c8:	f7ec f94e 	bl	8000568 <__aeabi_dmul>
 80142cc:	2200      	movs	r2, #0
 80142ce:	4680      	mov	r8, r0
 80142d0:	4689      	mov	r9, r1
 80142d2:	4b5e      	ldr	r3, [pc, #376]	; (801444c <__ieee754_pow+0x734>)
 80142d4:	4620      	mov	r0, r4
 80142d6:	4629      	mov	r1, r5
 80142d8:	f7eb ff8e 	bl	80001f8 <__aeabi_dsub>
 80142dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80142e0:	f7eb ff8a 	bl	80001f8 <__aeabi_dsub>
 80142e4:	4602      	mov	r2, r0
 80142e6:	460b      	mov	r3, r1
 80142e8:	4630      	mov	r0, r6
 80142ea:	4639      	mov	r1, r7
 80142ec:	f7eb ff84 	bl	80001f8 <__aeabi_dsub>
 80142f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142f4:	f7ec f938 	bl	8000568 <__aeabi_dmul>
 80142f8:	4622      	mov	r2, r4
 80142fa:	4606      	mov	r6, r0
 80142fc:	460f      	mov	r7, r1
 80142fe:	462b      	mov	r3, r5
 8014300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014304:	f7ec f930 	bl	8000568 <__aeabi_dmul>
 8014308:	4602      	mov	r2, r0
 801430a:	460b      	mov	r3, r1
 801430c:	4630      	mov	r0, r6
 801430e:	4639      	mov	r1, r7
 8014310:	f7eb ff74 	bl	80001fc <__adddf3>
 8014314:	4606      	mov	r6, r0
 8014316:	460f      	mov	r7, r1
 8014318:	4602      	mov	r2, r0
 801431a:	460b      	mov	r3, r1
 801431c:	4640      	mov	r0, r8
 801431e:	4649      	mov	r1, r9
 8014320:	f7eb ff6c 	bl	80001fc <__adddf3>
 8014324:	9802      	ldr	r0, [sp, #8]
 8014326:	a33c      	add	r3, pc, #240	; (adr r3, 8014418 <__ieee754_pow+0x700>)
 8014328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432c:	4604      	mov	r4, r0
 801432e:	460d      	mov	r5, r1
 8014330:	f7ec f91a 	bl	8000568 <__aeabi_dmul>
 8014334:	4642      	mov	r2, r8
 8014336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801433a:	464b      	mov	r3, r9
 801433c:	4620      	mov	r0, r4
 801433e:	4629      	mov	r1, r5
 8014340:	f7eb ff5a 	bl	80001f8 <__aeabi_dsub>
 8014344:	4602      	mov	r2, r0
 8014346:	460b      	mov	r3, r1
 8014348:	4630      	mov	r0, r6
 801434a:	4639      	mov	r1, r7
 801434c:	f7eb ff54 	bl	80001f8 <__aeabi_dsub>
 8014350:	a333      	add	r3, pc, #204	; (adr r3, 8014420 <__ieee754_pow+0x708>)
 8014352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014356:	f7ec f907 	bl	8000568 <__aeabi_dmul>
 801435a:	a333      	add	r3, pc, #204	; (adr r3, 8014428 <__ieee754_pow+0x710>)
 801435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014360:	4606      	mov	r6, r0
 8014362:	460f      	mov	r7, r1
 8014364:	4620      	mov	r0, r4
 8014366:	4629      	mov	r1, r5
 8014368:	f7ec f8fe 	bl	8000568 <__aeabi_dmul>
 801436c:	4602      	mov	r2, r0
 801436e:	460b      	mov	r3, r1
 8014370:	4630      	mov	r0, r6
 8014372:	4639      	mov	r1, r7
 8014374:	f7eb ff42 	bl	80001fc <__adddf3>
 8014378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801437a:	4b35      	ldr	r3, [pc, #212]	; (8014450 <__ieee754_pow+0x738>)
 801437c:	4413      	add	r3, r2
 801437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014382:	f7eb ff3b 	bl	80001fc <__adddf3>
 8014386:	4604      	mov	r4, r0
 8014388:	9809      	ldr	r0, [sp, #36]	; 0x24
 801438a:	460d      	mov	r5, r1
 801438c:	f7ec f882 	bl	8000494 <__aeabi_i2d>
 8014390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014392:	4b30      	ldr	r3, [pc, #192]	; (8014454 <__ieee754_pow+0x73c>)
 8014394:	4413      	add	r3, r2
 8014396:	e9d3 8900 	ldrd	r8, r9, [r3]
 801439a:	4606      	mov	r6, r0
 801439c:	460f      	mov	r7, r1
 801439e:	4622      	mov	r2, r4
 80143a0:	462b      	mov	r3, r5
 80143a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143a6:	f7eb ff29 	bl	80001fc <__adddf3>
 80143aa:	4642      	mov	r2, r8
 80143ac:	464b      	mov	r3, r9
 80143ae:	f7eb ff25 	bl	80001fc <__adddf3>
 80143b2:	4632      	mov	r2, r6
 80143b4:	463b      	mov	r3, r7
 80143b6:	f7eb ff21 	bl	80001fc <__adddf3>
 80143ba:	9802      	ldr	r0, [sp, #8]
 80143bc:	4632      	mov	r2, r6
 80143be:	463b      	mov	r3, r7
 80143c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80143c4:	f7eb ff18 	bl	80001f8 <__aeabi_dsub>
 80143c8:	4642      	mov	r2, r8
 80143ca:	464b      	mov	r3, r9
 80143cc:	f7eb ff14 	bl	80001f8 <__aeabi_dsub>
 80143d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143d4:	e607      	b.n	8013fe6 <__ieee754_pow+0x2ce>
 80143d6:	f04f 0a01 	mov.w	sl, #1
 80143da:	e6a5      	b.n	8014128 <__ieee754_pow+0x410>
 80143dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014430 <__ieee754_pow+0x718>
 80143e0:	e613      	b.n	801400a <__ieee754_pow+0x2f2>
 80143e2:	bf00      	nop
 80143e4:	f3af 8000 	nop.w
 80143e8:	4a454eef 	.word	0x4a454eef
 80143ec:	3fca7e28 	.word	0x3fca7e28
 80143f0:	93c9db65 	.word	0x93c9db65
 80143f4:	3fcd864a 	.word	0x3fcd864a
 80143f8:	a91d4101 	.word	0xa91d4101
 80143fc:	3fd17460 	.word	0x3fd17460
 8014400:	518f264d 	.word	0x518f264d
 8014404:	3fd55555 	.word	0x3fd55555
 8014408:	db6fabff 	.word	0xdb6fabff
 801440c:	3fdb6db6 	.word	0x3fdb6db6
 8014410:	33333303 	.word	0x33333303
 8014414:	3fe33333 	.word	0x3fe33333
 8014418:	e0000000 	.word	0xe0000000
 801441c:	3feec709 	.word	0x3feec709
 8014420:	dc3a03fd 	.word	0xdc3a03fd
 8014424:	3feec709 	.word	0x3feec709
 8014428:	145b01f5 	.word	0x145b01f5
 801442c:	be3e2fe0 	.word	0xbe3e2fe0
 8014430:	00000000 	.word	0x00000000
 8014434:	3ff00000 	.word	0x3ff00000
 8014438:	43400000 	.word	0x43400000
 801443c:	0003988e 	.word	0x0003988e
 8014440:	000bb679 	.word	0x000bb679
 8014444:	080156d8 	.word	0x080156d8
 8014448:	3ff00000 	.word	0x3ff00000
 801444c:	40080000 	.word	0x40080000
 8014450:	080156f8 	.word	0x080156f8
 8014454:	080156e8 	.word	0x080156e8
 8014458:	a3b4      	add	r3, pc, #720	; (adr r3, 801472c <__ieee754_pow+0xa14>)
 801445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801445e:	4640      	mov	r0, r8
 8014460:	4649      	mov	r1, r9
 8014462:	f7eb fecb 	bl	80001fc <__adddf3>
 8014466:	4622      	mov	r2, r4
 8014468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801446c:	462b      	mov	r3, r5
 801446e:	4630      	mov	r0, r6
 8014470:	4639      	mov	r1, r7
 8014472:	f7eb fec1 	bl	80001f8 <__aeabi_dsub>
 8014476:	4602      	mov	r2, r0
 8014478:	460b      	mov	r3, r1
 801447a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801447e:	f7ec fb03 	bl	8000a88 <__aeabi_dcmpgt>
 8014482:	2800      	cmp	r0, #0
 8014484:	f47f adfe 	bne.w	8014084 <__ieee754_pow+0x36c>
 8014488:	4aa3      	ldr	r2, [pc, #652]	; (8014718 <__ieee754_pow+0xa00>)
 801448a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801448e:	4293      	cmp	r3, r2
 8014490:	f340 810a 	ble.w	80146a8 <__ieee754_pow+0x990>
 8014494:	151b      	asrs	r3, r3, #20
 8014496:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801449a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801449e:	fa4a f303 	asr.w	r3, sl, r3
 80144a2:	445b      	add	r3, fp
 80144a4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80144a8:	4e9c      	ldr	r6, [pc, #624]	; (801471c <__ieee754_pow+0xa04>)
 80144aa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80144ae:	4116      	asrs	r6, r2
 80144b0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80144b4:	2000      	movs	r0, #0
 80144b6:	ea23 0106 	bic.w	r1, r3, r6
 80144ba:	f1c2 0214 	rsb	r2, r2, #20
 80144be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80144c2:	fa4a fa02 	asr.w	sl, sl, r2
 80144c6:	f1bb 0f00 	cmp.w	fp, #0
 80144ca:	4602      	mov	r2, r0
 80144cc:	460b      	mov	r3, r1
 80144ce:	4620      	mov	r0, r4
 80144d0:	4629      	mov	r1, r5
 80144d2:	bfb8      	it	lt
 80144d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80144d8:	f7eb fe8e 	bl	80001f8 <__aeabi_dsub>
 80144dc:	e9cd 0100 	strd	r0, r1, [sp]
 80144e0:	4642      	mov	r2, r8
 80144e2:	464b      	mov	r3, r9
 80144e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80144e8:	f7eb fe88 	bl	80001fc <__adddf3>
 80144ec:	2000      	movs	r0, #0
 80144ee:	a378      	add	r3, pc, #480	; (adr r3, 80146d0 <__ieee754_pow+0x9b8>)
 80144f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f4:	4604      	mov	r4, r0
 80144f6:	460d      	mov	r5, r1
 80144f8:	f7ec f836 	bl	8000568 <__aeabi_dmul>
 80144fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014500:	4606      	mov	r6, r0
 8014502:	460f      	mov	r7, r1
 8014504:	4620      	mov	r0, r4
 8014506:	4629      	mov	r1, r5
 8014508:	f7eb fe76 	bl	80001f8 <__aeabi_dsub>
 801450c:	4602      	mov	r2, r0
 801450e:	460b      	mov	r3, r1
 8014510:	4640      	mov	r0, r8
 8014512:	4649      	mov	r1, r9
 8014514:	f7eb fe70 	bl	80001f8 <__aeabi_dsub>
 8014518:	a36f      	add	r3, pc, #444	; (adr r3, 80146d8 <__ieee754_pow+0x9c0>)
 801451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801451e:	f7ec f823 	bl	8000568 <__aeabi_dmul>
 8014522:	a36f      	add	r3, pc, #444	; (adr r3, 80146e0 <__ieee754_pow+0x9c8>)
 8014524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014528:	4680      	mov	r8, r0
 801452a:	4689      	mov	r9, r1
 801452c:	4620      	mov	r0, r4
 801452e:	4629      	mov	r1, r5
 8014530:	f7ec f81a 	bl	8000568 <__aeabi_dmul>
 8014534:	4602      	mov	r2, r0
 8014536:	460b      	mov	r3, r1
 8014538:	4640      	mov	r0, r8
 801453a:	4649      	mov	r1, r9
 801453c:	f7eb fe5e 	bl	80001fc <__adddf3>
 8014540:	4604      	mov	r4, r0
 8014542:	460d      	mov	r5, r1
 8014544:	4602      	mov	r2, r0
 8014546:	460b      	mov	r3, r1
 8014548:	4630      	mov	r0, r6
 801454a:	4639      	mov	r1, r7
 801454c:	f7eb fe56 	bl	80001fc <__adddf3>
 8014550:	4632      	mov	r2, r6
 8014552:	463b      	mov	r3, r7
 8014554:	4680      	mov	r8, r0
 8014556:	4689      	mov	r9, r1
 8014558:	f7eb fe4e 	bl	80001f8 <__aeabi_dsub>
 801455c:	4602      	mov	r2, r0
 801455e:	460b      	mov	r3, r1
 8014560:	4620      	mov	r0, r4
 8014562:	4629      	mov	r1, r5
 8014564:	f7eb fe48 	bl	80001f8 <__aeabi_dsub>
 8014568:	4642      	mov	r2, r8
 801456a:	4606      	mov	r6, r0
 801456c:	460f      	mov	r7, r1
 801456e:	464b      	mov	r3, r9
 8014570:	4640      	mov	r0, r8
 8014572:	4649      	mov	r1, r9
 8014574:	f7eb fff8 	bl	8000568 <__aeabi_dmul>
 8014578:	a35b      	add	r3, pc, #364	; (adr r3, 80146e8 <__ieee754_pow+0x9d0>)
 801457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457e:	4604      	mov	r4, r0
 8014580:	460d      	mov	r5, r1
 8014582:	f7eb fff1 	bl	8000568 <__aeabi_dmul>
 8014586:	a35a      	add	r3, pc, #360	; (adr r3, 80146f0 <__ieee754_pow+0x9d8>)
 8014588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458c:	f7eb fe34 	bl	80001f8 <__aeabi_dsub>
 8014590:	4622      	mov	r2, r4
 8014592:	462b      	mov	r3, r5
 8014594:	f7eb ffe8 	bl	8000568 <__aeabi_dmul>
 8014598:	a357      	add	r3, pc, #348	; (adr r3, 80146f8 <__ieee754_pow+0x9e0>)
 801459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801459e:	f7eb fe2d 	bl	80001fc <__adddf3>
 80145a2:	4622      	mov	r2, r4
 80145a4:	462b      	mov	r3, r5
 80145a6:	f7eb ffdf 	bl	8000568 <__aeabi_dmul>
 80145aa:	a355      	add	r3, pc, #340	; (adr r3, 8014700 <__ieee754_pow+0x9e8>)
 80145ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b0:	f7eb fe22 	bl	80001f8 <__aeabi_dsub>
 80145b4:	4622      	mov	r2, r4
 80145b6:	462b      	mov	r3, r5
 80145b8:	f7eb ffd6 	bl	8000568 <__aeabi_dmul>
 80145bc:	a352      	add	r3, pc, #328	; (adr r3, 8014708 <__ieee754_pow+0x9f0>)
 80145be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c2:	f7eb fe1b 	bl	80001fc <__adddf3>
 80145c6:	4622      	mov	r2, r4
 80145c8:	462b      	mov	r3, r5
 80145ca:	f7eb ffcd 	bl	8000568 <__aeabi_dmul>
 80145ce:	4602      	mov	r2, r0
 80145d0:	460b      	mov	r3, r1
 80145d2:	4640      	mov	r0, r8
 80145d4:	4649      	mov	r1, r9
 80145d6:	f7eb fe0f 	bl	80001f8 <__aeabi_dsub>
 80145da:	4604      	mov	r4, r0
 80145dc:	460d      	mov	r5, r1
 80145de:	4602      	mov	r2, r0
 80145e0:	460b      	mov	r3, r1
 80145e2:	4640      	mov	r0, r8
 80145e4:	4649      	mov	r1, r9
 80145e6:	f7eb ffbf 	bl	8000568 <__aeabi_dmul>
 80145ea:	2200      	movs	r2, #0
 80145ec:	e9cd 0100 	strd	r0, r1, [sp]
 80145f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80145f4:	4620      	mov	r0, r4
 80145f6:	4629      	mov	r1, r5
 80145f8:	f7eb fdfe 	bl	80001f8 <__aeabi_dsub>
 80145fc:	4602      	mov	r2, r0
 80145fe:	460b      	mov	r3, r1
 8014600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014604:	f7ec f8da 	bl	80007bc <__aeabi_ddiv>
 8014608:	4632      	mov	r2, r6
 801460a:	4604      	mov	r4, r0
 801460c:	460d      	mov	r5, r1
 801460e:	463b      	mov	r3, r7
 8014610:	4640      	mov	r0, r8
 8014612:	4649      	mov	r1, r9
 8014614:	f7eb ffa8 	bl	8000568 <__aeabi_dmul>
 8014618:	4632      	mov	r2, r6
 801461a:	463b      	mov	r3, r7
 801461c:	f7eb fdee 	bl	80001fc <__adddf3>
 8014620:	4602      	mov	r2, r0
 8014622:	460b      	mov	r3, r1
 8014624:	4620      	mov	r0, r4
 8014626:	4629      	mov	r1, r5
 8014628:	f7eb fde6 	bl	80001f8 <__aeabi_dsub>
 801462c:	4642      	mov	r2, r8
 801462e:	464b      	mov	r3, r9
 8014630:	f7eb fde2 	bl	80001f8 <__aeabi_dsub>
 8014634:	4602      	mov	r2, r0
 8014636:	460b      	mov	r3, r1
 8014638:	2000      	movs	r0, #0
 801463a:	4939      	ldr	r1, [pc, #228]	; (8014720 <__ieee754_pow+0xa08>)
 801463c:	f7eb fddc 	bl	80001f8 <__aeabi_dsub>
 8014640:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014644:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014648:	4602      	mov	r2, r0
 801464a:	460b      	mov	r3, r1
 801464c:	da2f      	bge.n	80146ae <__ieee754_pow+0x996>
 801464e:	4650      	mov	r0, sl
 8014650:	ec43 2b10 	vmov	d0, r2, r3
 8014654:	f000 f9c0 	bl	80149d8 <scalbn>
 8014658:	ec51 0b10 	vmov	r0, r1, d0
 801465c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014660:	f7ff bbf1 	b.w	8013e46 <__ieee754_pow+0x12e>
 8014664:	4b2f      	ldr	r3, [pc, #188]	; (8014724 <__ieee754_pow+0xa0c>)
 8014666:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801466a:	429e      	cmp	r6, r3
 801466c:	f77f af0c 	ble.w	8014488 <__ieee754_pow+0x770>
 8014670:	4b2d      	ldr	r3, [pc, #180]	; (8014728 <__ieee754_pow+0xa10>)
 8014672:	440b      	add	r3, r1
 8014674:	4303      	orrs	r3, r0
 8014676:	d00b      	beq.n	8014690 <__ieee754_pow+0x978>
 8014678:	a325      	add	r3, pc, #148	; (adr r3, 8014710 <__ieee754_pow+0x9f8>)
 801467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014682:	f7eb ff71 	bl	8000568 <__aeabi_dmul>
 8014686:	a322      	add	r3, pc, #136	; (adr r3, 8014710 <__ieee754_pow+0x9f8>)
 8014688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468c:	f7ff bbdb 	b.w	8013e46 <__ieee754_pow+0x12e>
 8014690:	4622      	mov	r2, r4
 8014692:	462b      	mov	r3, r5
 8014694:	f7eb fdb0 	bl	80001f8 <__aeabi_dsub>
 8014698:	4642      	mov	r2, r8
 801469a:	464b      	mov	r3, r9
 801469c:	f7ec f9ea 	bl	8000a74 <__aeabi_dcmpge>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	f43f aef1 	beq.w	8014488 <__ieee754_pow+0x770>
 80146a6:	e7e7      	b.n	8014678 <__ieee754_pow+0x960>
 80146a8:	f04f 0a00 	mov.w	sl, #0
 80146ac:	e718      	b.n	80144e0 <__ieee754_pow+0x7c8>
 80146ae:	4621      	mov	r1, r4
 80146b0:	e7d4      	b.n	801465c <__ieee754_pow+0x944>
 80146b2:	2000      	movs	r0, #0
 80146b4:	491a      	ldr	r1, [pc, #104]	; (8014720 <__ieee754_pow+0xa08>)
 80146b6:	f7ff bb8f 	b.w	8013dd8 <__ieee754_pow+0xc0>
 80146ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146be:	f7ff bb8b 	b.w	8013dd8 <__ieee754_pow+0xc0>
 80146c2:	4630      	mov	r0, r6
 80146c4:	4639      	mov	r1, r7
 80146c6:	f7ff bb87 	b.w	8013dd8 <__ieee754_pow+0xc0>
 80146ca:	4693      	mov	fp, r2
 80146cc:	f7ff bb98 	b.w	8013e00 <__ieee754_pow+0xe8>
 80146d0:	00000000 	.word	0x00000000
 80146d4:	3fe62e43 	.word	0x3fe62e43
 80146d8:	fefa39ef 	.word	0xfefa39ef
 80146dc:	3fe62e42 	.word	0x3fe62e42
 80146e0:	0ca86c39 	.word	0x0ca86c39
 80146e4:	be205c61 	.word	0xbe205c61
 80146e8:	72bea4d0 	.word	0x72bea4d0
 80146ec:	3e663769 	.word	0x3e663769
 80146f0:	c5d26bf1 	.word	0xc5d26bf1
 80146f4:	3ebbbd41 	.word	0x3ebbbd41
 80146f8:	af25de2c 	.word	0xaf25de2c
 80146fc:	3f11566a 	.word	0x3f11566a
 8014700:	16bebd93 	.word	0x16bebd93
 8014704:	3f66c16c 	.word	0x3f66c16c
 8014708:	5555553e 	.word	0x5555553e
 801470c:	3fc55555 	.word	0x3fc55555
 8014710:	c2f8f359 	.word	0xc2f8f359
 8014714:	01a56e1f 	.word	0x01a56e1f
 8014718:	3fe00000 	.word	0x3fe00000
 801471c:	000fffff 	.word	0x000fffff
 8014720:	3ff00000 	.word	0x3ff00000
 8014724:	4090cbff 	.word	0x4090cbff
 8014728:	3f6f3400 	.word	0x3f6f3400
 801472c:	652b82fe 	.word	0x652b82fe
 8014730:	3c971547 	.word	0x3c971547

08014734 <__ieee754_sqrt>:
 8014734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014738:	4955      	ldr	r1, [pc, #340]	; (8014890 <__ieee754_sqrt+0x15c>)
 801473a:	ec55 4b10 	vmov	r4, r5, d0
 801473e:	43a9      	bics	r1, r5
 8014740:	462b      	mov	r3, r5
 8014742:	462a      	mov	r2, r5
 8014744:	d112      	bne.n	801476c <__ieee754_sqrt+0x38>
 8014746:	ee10 2a10 	vmov	r2, s0
 801474a:	ee10 0a10 	vmov	r0, s0
 801474e:	4629      	mov	r1, r5
 8014750:	f7eb ff0a 	bl	8000568 <__aeabi_dmul>
 8014754:	4602      	mov	r2, r0
 8014756:	460b      	mov	r3, r1
 8014758:	4620      	mov	r0, r4
 801475a:	4629      	mov	r1, r5
 801475c:	f7eb fd4e 	bl	80001fc <__adddf3>
 8014760:	4604      	mov	r4, r0
 8014762:	460d      	mov	r5, r1
 8014764:	ec45 4b10 	vmov	d0, r4, r5
 8014768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801476c:	2d00      	cmp	r5, #0
 801476e:	ee10 0a10 	vmov	r0, s0
 8014772:	4621      	mov	r1, r4
 8014774:	dc0f      	bgt.n	8014796 <__ieee754_sqrt+0x62>
 8014776:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801477a:	4330      	orrs	r0, r6
 801477c:	d0f2      	beq.n	8014764 <__ieee754_sqrt+0x30>
 801477e:	b155      	cbz	r5, 8014796 <__ieee754_sqrt+0x62>
 8014780:	ee10 2a10 	vmov	r2, s0
 8014784:	4620      	mov	r0, r4
 8014786:	4629      	mov	r1, r5
 8014788:	f7eb fd36 	bl	80001f8 <__aeabi_dsub>
 801478c:	4602      	mov	r2, r0
 801478e:	460b      	mov	r3, r1
 8014790:	f7ec f814 	bl	80007bc <__aeabi_ddiv>
 8014794:	e7e4      	b.n	8014760 <__ieee754_sqrt+0x2c>
 8014796:	151b      	asrs	r3, r3, #20
 8014798:	d073      	beq.n	8014882 <__ieee754_sqrt+0x14e>
 801479a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801479e:	07dd      	lsls	r5, r3, #31
 80147a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80147a4:	bf48      	it	mi
 80147a6:	0fc8      	lsrmi	r0, r1, #31
 80147a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80147ac:	bf44      	itt	mi
 80147ae:	0049      	lslmi	r1, r1, #1
 80147b0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80147b4:	2500      	movs	r5, #0
 80147b6:	1058      	asrs	r0, r3, #1
 80147b8:	0fcb      	lsrs	r3, r1, #31
 80147ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80147be:	0049      	lsls	r1, r1, #1
 80147c0:	2316      	movs	r3, #22
 80147c2:	462c      	mov	r4, r5
 80147c4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80147c8:	19a7      	adds	r7, r4, r6
 80147ca:	4297      	cmp	r7, r2
 80147cc:	bfde      	ittt	le
 80147ce:	19bc      	addle	r4, r7, r6
 80147d0:	1bd2      	suble	r2, r2, r7
 80147d2:	19ad      	addle	r5, r5, r6
 80147d4:	0fcf      	lsrs	r7, r1, #31
 80147d6:	3b01      	subs	r3, #1
 80147d8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80147dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80147e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80147e4:	d1f0      	bne.n	80147c8 <__ieee754_sqrt+0x94>
 80147e6:	f04f 0c20 	mov.w	ip, #32
 80147ea:	469e      	mov	lr, r3
 80147ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80147f0:	42a2      	cmp	r2, r4
 80147f2:	eb06 070e 	add.w	r7, r6, lr
 80147f6:	dc02      	bgt.n	80147fe <__ieee754_sqrt+0xca>
 80147f8:	d112      	bne.n	8014820 <__ieee754_sqrt+0xec>
 80147fa:	428f      	cmp	r7, r1
 80147fc:	d810      	bhi.n	8014820 <__ieee754_sqrt+0xec>
 80147fe:	2f00      	cmp	r7, #0
 8014800:	eb07 0e06 	add.w	lr, r7, r6
 8014804:	da42      	bge.n	801488c <__ieee754_sqrt+0x158>
 8014806:	f1be 0f00 	cmp.w	lr, #0
 801480a:	db3f      	blt.n	801488c <__ieee754_sqrt+0x158>
 801480c:	f104 0801 	add.w	r8, r4, #1
 8014810:	1b12      	subs	r2, r2, r4
 8014812:	428f      	cmp	r7, r1
 8014814:	bf88      	it	hi
 8014816:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801481a:	1bc9      	subs	r1, r1, r7
 801481c:	4433      	add	r3, r6
 801481e:	4644      	mov	r4, r8
 8014820:	0052      	lsls	r2, r2, #1
 8014822:	f1bc 0c01 	subs.w	ip, ip, #1
 8014826:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801482a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801482e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014832:	d1dd      	bne.n	80147f0 <__ieee754_sqrt+0xbc>
 8014834:	430a      	orrs	r2, r1
 8014836:	d006      	beq.n	8014846 <__ieee754_sqrt+0x112>
 8014838:	1c5c      	adds	r4, r3, #1
 801483a:	bf13      	iteet	ne
 801483c:	3301      	addne	r3, #1
 801483e:	3501      	addeq	r5, #1
 8014840:	4663      	moveq	r3, ip
 8014842:	f023 0301 	bicne.w	r3, r3, #1
 8014846:	106a      	asrs	r2, r5, #1
 8014848:	085b      	lsrs	r3, r3, #1
 801484a:	07e9      	lsls	r1, r5, #31
 801484c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014850:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014854:	bf48      	it	mi
 8014856:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801485a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801485e:	461c      	mov	r4, r3
 8014860:	e780      	b.n	8014764 <__ieee754_sqrt+0x30>
 8014862:	0aca      	lsrs	r2, r1, #11
 8014864:	3815      	subs	r0, #21
 8014866:	0549      	lsls	r1, r1, #21
 8014868:	2a00      	cmp	r2, #0
 801486a:	d0fa      	beq.n	8014862 <__ieee754_sqrt+0x12e>
 801486c:	02d6      	lsls	r6, r2, #11
 801486e:	d50a      	bpl.n	8014886 <__ieee754_sqrt+0x152>
 8014870:	f1c3 0420 	rsb	r4, r3, #32
 8014874:	fa21 f404 	lsr.w	r4, r1, r4
 8014878:	1e5d      	subs	r5, r3, #1
 801487a:	4099      	lsls	r1, r3
 801487c:	4322      	orrs	r2, r4
 801487e:	1b43      	subs	r3, r0, r5
 8014880:	e78b      	b.n	801479a <__ieee754_sqrt+0x66>
 8014882:	4618      	mov	r0, r3
 8014884:	e7f0      	b.n	8014868 <__ieee754_sqrt+0x134>
 8014886:	0052      	lsls	r2, r2, #1
 8014888:	3301      	adds	r3, #1
 801488a:	e7ef      	b.n	801486c <__ieee754_sqrt+0x138>
 801488c:	46a0      	mov	r8, r4
 801488e:	e7bf      	b.n	8014810 <__ieee754_sqrt+0xdc>
 8014890:	7ff00000 	.word	0x7ff00000

08014894 <fabs>:
 8014894:	ec51 0b10 	vmov	r0, r1, d0
 8014898:	ee10 2a10 	vmov	r2, s0
 801489c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148a0:	ec43 2b10 	vmov	d0, r2, r3
 80148a4:	4770      	bx	lr

080148a6 <finite>:
 80148a6:	ee10 3a90 	vmov	r3, s1
 80148aa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80148ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80148b2:	0fc0      	lsrs	r0, r0, #31
 80148b4:	4770      	bx	lr

080148b6 <matherr>:
 80148b6:	2000      	movs	r0, #0
 80148b8:	4770      	bx	lr
 80148ba:	0000      	movs	r0, r0
 80148bc:	0000      	movs	r0, r0
	...

080148c0 <nan>:
 80148c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80148c8 <nan+0x8>
 80148c4:	4770      	bx	lr
 80148c6:	bf00      	nop
 80148c8:	00000000 	.word	0x00000000
 80148cc:	7ff80000 	.word	0x7ff80000

080148d0 <rint>:
 80148d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148d2:	ec51 0b10 	vmov	r0, r1, d0
 80148d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80148da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80148de:	2e13      	cmp	r6, #19
 80148e0:	460b      	mov	r3, r1
 80148e2:	ee10 4a10 	vmov	r4, s0
 80148e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80148ea:	dc56      	bgt.n	801499a <rint+0xca>
 80148ec:	2e00      	cmp	r6, #0
 80148ee:	da2b      	bge.n	8014948 <rint+0x78>
 80148f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80148f4:	4302      	orrs	r2, r0
 80148f6:	d023      	beq.n	8014940 <rint+0x70>
 80148f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80148fc:	4302      	orrs	r2, r0
 80148fe:	4254      	negs	r4, r2
 8014900:	4314      	orrs	r4, r2
 8014902:	0c4b      	lsrs	r3, r1, #17
 8014904:	0b24      	lsrs	r4, r4, #12
 8014906:	045b      	lsls	r3, r3, #17
 8014908:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801490c:	ea44 0103 	orr.w	r1, r4, r3
 8014910:	460b      	mov	r3, r1
 8014912:	492f      	ldr	r1, [pc, #188]	; (80149d0 <rint+0x100>)
 8014914:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014918:	e9d1 6700 	ldrd	r6, r7, [r1]
 801491c:	4602      	mov	r2, r0
 801491e:	4639      	mov	r1, r7
 8014920:	4630      	mov	r0, r6
 8014922:	f7eb fc6b 	bl	80001fc <__adddf3>
 8014926:	e9cd 0100 	strd	r0, r1, [sp]
 801492a:	463b      	mov	r3, r7
 801492c:	4632      	mov	r2, r6
 801492e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014932:	f7eb fc61 	bl	80001f8 <__aeabi_dsub>
 8014936:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801493a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801493e:	4639      	mov	r1, r7
 8014940:	ec41 0b10 	vmov	d0, r0, r1
 8014944:	b003      	add	sp, #12
 8014946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014948:	4a22      	ldr	r2, [pc, #136]	; (80149d4 <rint+0x104>)
 801494a:	4132      	asrs	r2, r6
 801494c:	ea01 0702 	and.w	r7, r1, r2
 8014950:	4307      	orrs	r7, r0
 8014952:	d0f5      	beq.n	8014940 <rint+0x70>
 8014954:	0852      	lsrs	r2, r2, #1
 8014956:	4011      	ands	r1, r2
 8014958:	430c      	orrs	r4, r1
 801495a:	d00b      	beq.n	8014974 <rint+0xa4>
 801495c:	ea23 0202 	bic.w	r2, r3, r2
 8014960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014964:	2e13      	cmp	r6, #19
 8014966:	fa43 f306 	asr.w	r3, r3, r6
 801496a:	bf0c      	ite	eq
 801496c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014970:	2400      	movne	r4, #0
 8014972:	4313      	orrs	r3, r2
 8014974:	4916      	ldr	r1, [pc, #88]	; (80149d0 <rint+0x100>)
 8014976:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801497a:	4622      	mov	r2, r4
 801497c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014980:	4620      	mov	r0, r4
 8014982:	4629      	mov	r1, r5
 8014984:	f7eb fc3a 	bl	80001fc <__adddf3>
 8014988:	e9cd 0100 	strd	r0, r1, [sp]
 801498c:	4622      	mov	r2, r4
 801498e:	462b      	mov	r3, r5
 8014990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014994:	f7eb fc30 	bl	80001f8 <__aeabi_dsub>
 8014998:	e7d2      	b.n	8014940 <rint+0x70>
 801499a:	2e33      	cmp	r6, #51	; 0x33
 801499c:	dd07      	ble.n	80149ae <rint+0xde>
 801499e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80149a2:	d1cd      	bne.n	8014940 <rint+0x70>
 80149a4:	ee10 2a10 	vmov	r2, s0
 80149a8:	f7eb fc28 	bl	80001fc <__adddf3>
 80149ac:	e7c8      	b.n	8014940 <rint+0x70>
 80149ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80149b2:	f04f 32ff 	mov.w	r2, #4294967295
 80149b6:	40f2      	lsrs	r2, r6
 80149b8:	4210      	tst	r0, r2
 80149ba:	d0c1      	beq.n	8014940 <rint+0x70>
 80149bc:	0852      	lsrs	r2, r2, #1
 80149be:	4210      	tst	r0, r2
 80149c0:	bf1f      	itttt	ne
 80149c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80149c6:	ea20 0202 	bicne.w	r2, r0, r2
 80149ca:	4134      	asrne	r4, r6
 80149cc:	4314      	orrne	r4, r2
 80149ce:	e7d1      	b.n	8014974 <rint+0xa4>
 80149d0:	08015708 	.word	0x08015708
 80149d4:	000fffff 	.word	0x000fffff

080149d8 <scalbn>:
 80149d8:	b570      	push	{r4, r5, r6, lr}
 80149da:	ec55 4b10 	vmov	r4, r5, d0
 80149de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80149e2:	4606      	mov	r6, r0
 80149e4:	462b      	mov	r3, r5
 80149e6:	b9aa      	cbnz	r2, 8014a14 <scalbn+0x3c>
 80149e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80149ec:	4323      	orrs	r3, r4
 80149ee:	d03b      	beq.n	8014a68 <scalbn+0x90>
 80149f0:	4b31      	ldr	r3, [pc, #196]	; (8014ab8 <scalbn+0xe0>)
 80149f2:	4629      	mov	r1, r5
 80149f4:	2200      	movs	r2, #0
 80149f6:	ee10 0a10 	vmov	r0, s0
 80149fa:	f7eb fdb5 	bl	8000568 <__aeabi_dmul>
 80149fe:	4b2f      	ldr	r3, [pc, #188]	; (8014abc <scalbn+0xe4>)
 8014a00:	429e      	cmp	r6, r3
 8014a02:	4604      	mov	r4, r0
 8014a04:	460d      	mov	r5, r1
 8014a06:	da12      	bge.n	8014a2e <scalbn+0x56>
 8014a08:	a327      	add	r3, pc, #156	; (adr r3, 8014aa8 <scalbn+0xd0>)
 8014a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0e:	f7eb fdab 	bl	8000568 <__aeabi_dmul>
 8014a12:	e009      	b.n	8014a28 <scalbn+0x50>
 8014a14:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014a18:	428a      	cmp	r2, r1
 8014a1a:	d10c      	bne.n	8014a36 <scalbn+0x5e>
 8014a1c:	ee10 2a10 	vmov	r2, s0
 8014a20:	4620      	mov	r0, r4
 8014a22:	4629      	mov	r1, r5
 8014a24:	f7eb fbea 	bl	80001fc <__adddf3>
 8014a28:	4604      	mov	r4, r0
 8014a2a:	460d      	mov	r5, r1
 8014a2c:	e01c      	b.n	8014a68 <scalbn+0x90>
 8014a2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014a32:	460b      	mov	r3, r1
 8014a34:	3a36      	subs	r2, #54	; 0x36
 8014a36:	4432      	add	r2, r6
 8014a38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014a3c:	428a      	cmp	r2, r1
 8014a3e:	dd0b      	ble.n	8014a58 <scalbn+0x80>
 8014a40:	ec45 4b11 	vmov	d1, r4, r5
 8014a44:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014ab0 <scalbn+0xd8>
 8014a48:	f000 f83c 	bl	8014ac4 <copysign>
 8014a4c:	a318      	add	r3, pc, #96	; (adr r3, 8014ab0 <scalbn+0xd8>)
 8014a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a52:	ec51 0b10 	vmov	r0, r1, d0
 8014a56:	e7da      	b.n	8014a0e <scalbn+0x36>
 8014a58:	2a00      	cmp	r2, #0
 8014a5a:	dd08      	ble.n	8014a6e <scalbn+0x96>
 8014a5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a68:	ec45 4b10 	vmov	d0, r4, r5
 8014a6c:	bd70      	pop	{r4, r5, r6, pc}
 8014a6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014a72:	da0d      	bge.n	8014a90 <scalbn+0xb8>
 8014a74:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014a78:	429e      	cmp	r6, r3
 8014a7a:	ec45 4b11 	vmov	d1, r4, r5
 8014a7e:	dce1      	bgt.n	8014a44 <scalbn+0x6c>
 8014a80:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014aa8 <scalbn+0xd0>
 8014a84:	f000 f81e 	bl	8014ac4 <copysign>
 8014a88:	a307      	add	r3, pc, #28	; (adr r3, 8014aa8 <scalbn+0xd0>)
 8014a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8e:	e7e0      	b.n	8014a52 <scalbn+0x7a>
 8014a90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a94:	3236      	adds	r2, #54	; 0x36
 8014a96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	4b06      	ldr	r3, [pc, #24]	; (8014ac0 <scalbn+0xe8>)
 8014aa6:	e7b2      	b.n	8014a0e <scalbn+0x36>
 8014aa8:	c2f8f359 	.word	0xc2f8f359
 8014aac:	01a56e1f 	.word	0x01a56e1f
 8014ab0:	8800759c 	.word	0x8800759c
 8014ab4:	7e37e43c 	.word	0x7e37e43c
 8014ab8:	43500000 	.word	0x43500000
 8014abc:	ffff3cb0 	.word	0xffff3cb0
 8014ac0:	3c900000 	.word	0x3c900000

08014ac4 <copysign>:
 8014ac4:	ec51 0b10 	vmov	r0, r1, d0
 8014ac8:	ee11 0a90 	vmov	r0, s3
 8014acc:	ee10 2a10 	vmov	r2, s0
 8014ad0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014ad4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014ad8:	ea41 0300 	orr.w	r3, r1, r0
 8014adc:	ec43 2b10 	vmov	d0, r2, r3
 8014ae0:	4770      	bx	lr
	...

08014ae4 <_init>:
 8014ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ae6:	bf00      	nop
 8014ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aea:	bc08      	pop	{r3}
 8014aec:	469e      	mov	lr, r3
 8014aee:	4770      	bx	lr

08014af0 <_fini>:
 8014af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af2:	bf00      	nop
 8014af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014af6:	bc08      	pop	{r3}
 8014af8:	469e      	mov	lr, r3
 8014afa:	4770      	bx	lr
